language: scala
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isAllStringInLowerCase\
    \ = isStringInLowerCase && isStringInUpperCase\n        val isAllStringInUpperCase\
    \ = isStringInLowerCase && !isStringInUpperCase\n        val isAllStringInBothCases\
    \ = isAllStringInLowerCase && isAllStringInUpperCase\n        isAllStringInBothCases\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9sh5igkx.scala:30)\n\tat Problem.main(tmp9sh5igkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty)\n            return false\n       \
    \ val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val\
    \ upper = keys.map(_.toUpperCase)\n        val lowerSet = lower.toSet\n      \
    \  val upperSet = upper.toSet\n        val result = lowerSet.subsetOf(upperSet)\n\
    \        if (result)\n            return true\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozh5p_ye.scala:32)\n\tat Problem.main(tmpozh5p_ye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) false\n\
    \        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.toString.toLowerCase()\
    \ == _.toString.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1zc6zl67.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of Iterable[String]\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp1zc6zl67.scala:21:64 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase() == _.toString.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4_h7owv.scala:27)\n\tat Problem.main(tmpu4_h7owv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpom6hhi9l.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom6hhi9l.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrLowerCaseOrNotEmpty\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] || _.toLowerCase.isInstanceOf[\e[35mString\e[0m] || _.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrLowerCaseOrNotEmpty is already defined\
    \ as \e[33mvalue\e[0m \e[35mallKeysAreStringsOrLowerCaseOrNotEmpty\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpom6hhi9l.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mallKeysAreStringsOrUpperCaseOrNotEmpty\e\
    [0m = keys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.toUpperCase.isInstanceOf[\e\
    [35mString\e[0m] || _.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrUpperCaseOrNotEmpty is already defined\
    \ as \e[33mvalue\e[0m \e[35mallKeysAreStringsOrUpperCaseOrNotEmpty\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpom6hhi9l.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mallKeysAreStringsOrLowerCaseOrNotEmpty\e\
    [0m = keys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.toLowerCase.isInstanceOf[\e\
    [35mString\e[0m] || _.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = keys.forall(_.toLowerCase.contains(\"a\"))\n        val allUpperCaseKeys =\
    \ keys.forall(_.toUpperCase.contains(\"A\"))\n        val allKeysAreStrings =\
    \ keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.contains(\"a\"))\n   \
    \     val allKeysAreStringsOrInUpperCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.contains(\"A\"))\n        val allKeysAreStringsOrBothCases\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys && allUpperCaseKeys)\n\
    \        val allKeysAreStringsOrBothCasesOrInLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || allLowerCaseKeys || allUpperCaseKeys)\n        val allKeysAreStringsOrBothCasesOrInUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCaseKeys || allLowerCaseKeys)\n\
    \        val allKeysAreStringsOrBothCasesOrBothCases = keys.forall(_.isInstanceOf[String]\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrInUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || allUpperCaseKeys || allLowerCaseKeys\
    \ || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrBothCases\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys)\n        val allKeysAreStringsOrBothCasesOrBothCasesOrBothCasesOrInLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || allLowerCaseKeys || allUpperCaseKeys\
    \ || allLowerCaseKeys || allUpperCaseKeys || allLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgqil_aj8.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpgqil_aj8.scala:25:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrInLowerCase\e[0m = keys.forall(_.isInstanceOf[\e[35mString\e\
    [0m] || _.toLowerCase.contains(\e[31m\"a\"\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpgqil_aj8.scala:26:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrInUpperCase\e[0m = keys.forall(_.isInstanceOf[\e[35mString\e\
    [0m] || _.toUpperCase.contains(\e[31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m     \
    \                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqil_aj8.scala:34:196\
    \ -----------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mallKeysAreStringsOrBothCasesOrBothCasesOrBothCasesOrInLowerCase\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] || allLowerCaseKeys || allUpperCaseKeys || allLowerCaseKeys ||\
    \ allUpperCaseKeys || allLowerCase\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \                        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                               Not found: allLowerCase\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgqil_aj8.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tedx_m3.scala:27)\n\tat Problem.main(tmp5tedx_m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        val isAllKeysString = allKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllKeysStringOrUpperCase = allKeys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String])\n        isAllKeysString && isAllKeysStringOrUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpy0akax7t.scala:24:56 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misAllKeysStringOrUpperCase\e\
    [0m = allKeys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.toUpperCase.isInstanceOf[\e\
    [35mString\e[0m])\n\e[31m\e[31m   |\e[0m                                     \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659800459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else if(keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase == _.toString.toLowerCase)) true\n   \
    \     else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps06kxco2.scala:22:67 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase == _.toString.toLowerCase)) \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1659800459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) false\n\
    \        else if (keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1ah8x7p5.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of Iterable[String]\n1 error found\n"
  stdout: ''
  timestamp: 1659800461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key) \n            || upperCaseKeys.forall(key => dict.get(key)\
    \ == key)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1v6gbz6x.scala:22:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key)\
    \ == key) \n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Option[String] and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp1v6gbz6x.scala:23:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            || upperCaseKeys.forall(key => dict.get(key)\
    \ == key)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Option[String] and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tedx_m3.scala:27)\n\tat Problem.main(tmp5tedx_m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6x6vupy.scala:29)\n\tat Problem.main(tmpo6x6vupy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n   \
    \     val isAllKeysLowerCase = lowerCaseDict.size == keys.size\n        val isAllKeysUpperCase\
    \ = upperCaseDict.size == keys.size\n        val isAllKeysBothCases = lowerCaseDict.intersect(upperCaseDict).size\
    \ == keys.size\n        isAllKeysLowerCase && isAllKeysUpperCase && isAllKeysBothCases\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcxwby4kc.scala:30)\n\tat Problem.main(tmpcxwby4kc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => !upperCaseKeys.contains(key))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqrr0bxrv.scala:22:51 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => !upperCaseKeys.contains(key))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val lower = keys.map(_.toLowerCase)\n    \
    \        val upper = keys.map(_.toUpperCase)\n            val both = lower ++\
    \ upper\n            val result = both.forall(x => keys.contains(x))\n       \
    \     result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj23qfg8v.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = both.forall(\e\
    [36mx\e[0m => keys.contains(x))\n\e[31m\e[31m   |\e[0m                       \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ contains is not a member of Iterable[String]\n1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty)\n            return false\n        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(key => (key.toLowerCase,\
    \ key.toUpperCase))\n        val result = lower == upper || both == keys\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1wh5rt0b.scala:29)\n\tat Problem.main(tmp1wh5rt0b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n        upperCaseKeys.forall(key =>\
    \ dict.get(key).isInstanceOf[String])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp983edtvz.scala:26)\n\tat Problem.main(tmp983edtvz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val notBoth = keys.filter(!both.contains(_))\n        notBoth.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsex5rqqt.scala:23:40 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotBoth\e[0m = keys.filter(!both.contains(_))\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1xx6ong.scala:26)\n\tat Problem.main(tmpr1xx6ong.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_qws155.scala:28)\n\tat Problem.main(tmpj_qws155.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty\
    \ == upperCaseKeys.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7l2rqfff.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isLower is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7l2rqfff.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseKeys\e[0m = keys.filter(_.isUpper)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isUpper is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty)\n            return false\n        val\
    \ keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allLowerCaseKeys\
    \ = keys.forall(_.toLowerCase.equalsIgnoreCase)\n        val allUpperCaseKeys\
    \ = keys.forall(_.toUpperCase.equalsIgnoreCase)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        val allKeysAreStrings = allKeys.forall(_.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrUpperCase = allKeys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String])\n        val allKeysAreStringsOrLowerCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCase = allKeys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStrings = allKeys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String]\
    \ || allKeysAreStrings)\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrUpperCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings || allKeysAreStringsOrUpperCase)\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrLowerCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings || allKeysAreStringsOrLowerCase)\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrUpperCaseOrLowerCase\
    \ = allKeys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String] || allKeysAreStrings || allKeysAreStringsOrUpperCaseOrLowerCase)\n\
    \        val allKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStringsOrUpperCaseOrLowerCaseOrAllKeysAreStrings\
    \ = allKeys.forall(_.isInstance\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyqz4kya5.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyqz4kya5.scala:24:43 --------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \        \e[33mval\e[0m \e[36mallLowerCaseKeys\e[0m = keys.forall(_.toLowerCase.equalsIgnoreCase)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    \e[1m\e\
    [31mString\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m\
    \ \e[0mBoolean\n\e[31m   |\e[0m                                           Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyqz4kya5.scala:25:43\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mallUpperCaseKeys\e\
    [0m = keys.forall(_.toUpperCase.equalsIgnoreCase)\n\e[31m\e[31m   |\e[0m     \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                           Found:    \e[1m\e[31mString\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31m=\e[0m\e[1m\e[31m>\e[0m\e[1m\e[31m \e[0mBoolean\n\
    \e[31m   |\e[0m                                           Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyqz4kya5.scala:28:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrUpperCase\e[0m = allKeys.forall(_.isInstanceOf[\e[35mString\e\
    [0m] || _.toUpperCase.isInstanceOf[\e[35mString\e[0m])\n\e[31m\e[31m   |\e[0m\
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyqz4kya5.scala:29:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36m"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qgw_gts.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.isUpper)\n\
    \        val lowerCaseKeys = keys.filter(_.isLower)\n        val upperCaseKeysCount\
    \ = upperCaseKeys.size\n        val lowerCaseKeysCount = lowerCaseKeys.size\n\
    \        val isAllUpperCase = upperCaseKeysCount == keys.size\n        val isAllLowerCase\
    \ = lowerCaseKeysCount == keys.size\n        val isAllCase = isAllUpperCase &&\
    \ isAllLowerCase\n        val isAllCaseOrNot = isAllCase || upperCaseKeysCount\
    \ == 0 || lowerCaseKeysCount == 0\n        isAllCaseOrNot\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp58c3b8ll.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mupperCaseKeys\e[0m = keys.filter(_.isUpper)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isUpper is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp58c3b8ll.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mlowerCaseKeys\e[0m = keys.filter(_.isLower)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNotEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.nonEmpty)\n        val allKeysAreStringsOrUpperCaseOrNotEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.nonEmpty)\n        val allKeysAreStringsOrLowerCaseOrNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpom6hhi9l.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom6hhi9l.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrLowerCaseOrNotEmpty\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] || _.toLowerCase.isInstanceOf[\e[35mString\e[0m] || _.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrLowerCaseOrNotEmpty is already defined\
    \ as \e[33mvalue\e[0m \e[35mallKeysAreStringsOrLowerCaseOrNotEmpty\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpom6hhi9l.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mallKeysAreStringsOrUpperCaseOrNotEmpty\e\
    [0m = keys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.toUpperCase.isInstanceOf[\e\
    [35mString\e[0m] || _.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrUpperCaseOrNotEmpty is already defined\
    \ as \e[33mvalue\e[0m \e[35mallKeysAreStringsOrUpperCaseOrNotEmpty\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpom6hhi9l.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mallKeysAreStringsOrLowerCaseOrNotEmpty\e\
    [0m = keys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.toLowerCase.isInstanceOf[\e\
    [35mString\e[0m] || _.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty)\n            return false\n        val\
    \ keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n        val upper\
    \ = keys.map(_.toUpperCase)\n        val both = keys.map(key => (key, key.toLowerCase,\
    \ key.toUpperCase))\n        val result = lower == upper || both == keys\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnb4jfiol.scala:29)\n\tat Problem.main(tmpnb4jfiol.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val lowerSet = lower.toSet\n\
    \        val upperSet = upper.toSet\n        val result = lowerSet.intersect(upperSet).isEmpty\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpagandsuq.scala:29)\n\tat Problem.main(tmpagandsuq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) {\n            return false\n     \
    \   }\n        var flag = true\n        val keys = dict.keys\n        keys.foreach\
    \ { key =>\n            if (key.isInstanceOf[String]) {\n                if (key.toString.toLowerCase\
    \ != key.toString.toUpperCase) {\n                    flag = false\n         \
    \       }\n            } else {\n                flag = false\n            }\n\
    \        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09vqoauk.scala:36)\n\tat Problem.main(tmp09vqoauk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key) \n            || upperCaseKeys.forall(key => dict.get(key)\
    \ == key)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1v6gbz6x.scala:22:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key)\
    \ == key) \n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Option[String] and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp1v6gbz6x.scala:23:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            || upperCaseKeys.forall(key => dict.get(key)\
    \ == key)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Option[String] and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllUpper = keys.forall(_.toUpperCase.isInstanceOf[String])\n  \
    \      val isAllLower = keys.forall(_.toLowerCase.isInstanceOf[String])\n    \
    \    isAllStrings && isAllUpper && isAllLower\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1k__bpjv.scala:27)\n\tat Problem.main(tmp1k__bpjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgt_hky_.scala:28)\n\tat Problem.main(tmpbgt_hky_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty\
    \  || upperCaseKeys.isEmpty\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7t7sq55y.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isLower is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7t7sq55y.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseKeys\e[0m = keys.filter(_.isUpper)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isUpper is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).toLowerCase\
    \ == dict.get(key))\n        upperCaseKeys.forall(key => dict.get(key).toUpperCase\
    \ == dict.get(key))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd1k4sah9.scala:23:50 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key).toLowerCase\
    \ == dict.get(key))\n\e[31m\e[31m   |\e[0m                                   \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value toLowerCase\
    \ is not a member of Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd1k4sah9.scala:24:50\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        upperCaseKeys.forall(\e\
    [36mkey\e[0m => dict.get(key).toUpperCase == dict.get(key))\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value toUpperCase is not a member of Option[String]\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpd1k4sah9.scala:20:25 ----------------\e\
    [0m\e[0m\n\e[33m20 |\e[0m        \e[33mif\e[0m(keys.isEmpty) \e[31mfalse\e[0m\n\
    \e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val lowerSet = lower.toSet\n        val upperSet = upper.toSet\n    \
    \    if(lowerSet.size == upperSet.size && lowerSet.size == keys.size) true\n \
    \       else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbc9k8dj3.scala:30)\n\tat Problem.main(tmpbc9k8dj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = lower ++ upper\n        val result = both.forall(x => dict(x)\
    \ == dict(x))\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph7_k1mtg.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpab21367c.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkum3rzw9.scala:29)\n\tat Problem.main(tmpkum3rzw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n        lowerCaseKeys.forall(lowerCaseDict.contains)\n\
    \        upperCaseKeys.forall(upperCaseDict.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaonly9vk.scala:23:44\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                             Found:    String\n\e[31m   |\e[0m              \
    \                              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaonly9vk.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    String\n\
    \e[31m   |\e[0m                                            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpaonly9vk.scala:19:25\
    \ ----------------\e[0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m(dict.isEmpty)\
    \ \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\
    \e[33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isDefined) && upperCaseKeys.forall(key => dict.get(key).isDefined)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_h2f9zbg.scala:25)\n\tat Problem.main(tmp_h2f9zbg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.contains(key))\n        upperCaseKeys.forall(key => dict.contains(key))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9xj3xcqa.scala:26)\n\tat Problem.main(tmp9xj3xcqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.toLowerCase.equals(_.toLowerCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpljpm90zq.scala:21:85 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toLowerCase.equals(_.toLowerCase))\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded function:\n\
    \e[31m   |\e[0m   _$3 => _$3.toLowerCase.\n1 error found\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val isLowerOrUpper = lower\
    \ ++ upper.forall(_.contains(_))\n        !isLowerOrUpper && keys.forall(_.isInstanceOf[String])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmprb6u7o9q.scala:22:51 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLowerOrUpper\e[0m = lower\
    \ ++ upper.forall(_.contains(_))\n\e[31m\e[31m   |\e[0m                      \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprb6u7o9q.scala:23:8 -------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        !isLowerOrUpper && keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m])\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        value unary_! is not a member of Iterable[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n       \
    \ lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9oc44v9.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9oc44v9.scala:23:58 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9oc44v9.scala:24:58\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys.contains)\n\e[31m\e[31m\
    \   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpz9oc44v9.scala:25:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explana"
  stdout: ''
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tedx_m3.scala:27)\n\tat Problem.main(tmp5tedx_m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqrugmx2.scala:25)\n\tat Problem.main(tmpdqrugmx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n       \
    \ lowerCaseDict.isEmpty  && upperCaseDict.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrai34yf.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrai34yf.scala:23:58 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrai34yf.scala:24:58\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys.contains)\n\e[31m\e[31m\
    \   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerDict = lowerKeys.toSet\n       \
    \ val upperDict = upperKeys.toSet\n        if (lowerDict.size == keys.length &&\
    \ upperDict.size == keys.length)\n            return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_iqolpt5.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_iqolpt5.scala:25:35 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (lowerDict.size == keys.length\
    \ && upperDict.size == keys.length)\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value length\
    \ is not a member of Iterable[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty)\n            return false\n       \
    \ val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.forall { case (k,v) => v == upperCaseDict.get(k) }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6oyon8m.scala:24:44\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa6oyon8m.scala:25:44 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpa6oyon8m.scala:26:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        lowerCaseDict.forall { \e[33mcase\e[0m (k,v)\
    \ => v == upperCaseDict.get(k) }\n\e[31m\e[31m   |\e[0m                      \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types String and Option[String] cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allKeys = lowerCaseKeys\
    \ ++ upperCaseKeys\n        val isAllKeysString = allKeys.forall(_.isInstanceOf[String])\n\
    \        val isAllKeysStringOrAllKeysStrings = allKeys.forall(_.isInstanceOf[String]\
    \ || _.isInstanceOf[String])\n        val isAllKeysStringOrAllKeysStringsOrAllKeysStrings\
    \ = allKeys.forall(_.isInstanceOf[String] || _.isInstanceOf[String] || _.isInstanceOf[String])\n\
    \        isAllKeysString && isAllKeysStringOrAllKeysStrings && isAllKeysStringOrAllKeysStringsOrAllKeysStrings\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmplkcu6g8o.scala:24:61 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misAllKeysStringOrAllKeysStrings\e\
    [0m = allKeys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.isInstanceOf[\e[35mString\e\
    [0m])\n\e[31m\e[31m   |\e[0m                                                 \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmplkcu6g8o.scala:25:77 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misAllKeysStringOrAllKeysStringsOrAllKeysStrings\e\
    [0m = allKeys.forall(_.isInstanceOf[\e[35mString\e[0m] || _.isInstanceOf[\e[35mString\e\
    [0m] || _.isInstanceOf[\e[35mString\e[0m])\n\e[31m\e[31m   |\e[0m            \
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxpnglqp.scala:27)\n\tat Problem.main(tmpgxpnglqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val notAll = keys.filterNot(all.contains)\n        notAll.isEmpty\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzvkj5u9r.scala:23:40 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotAll\e[0m = keys.filterNot(all.contains)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val notAllKeysAreStrings = keys.filter(!_.toString.isInstanceOf[String]).isEmpty\n\
    \        val notAllKeysAreStringsOrUpperCase = keys.filter(!_.toString.isInstanceOf[String]\
    \ || _.toString.toUpperCase == _.toString.toUpperCase).isEmpty\n        val notAllKeysAreStringsOrLowerCase\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toLowerCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBoth = keys.filter(!_.toString.isInstanceOf[String]\
    \ || _.toString.toUpperCase == _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNull\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNull\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNullOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val notAllKeysAreStringsOrBothOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty\
    \ = keys.filter(!_.toString.isInstanceOf[String] || _.toString.toUpperCase ==\
    \ _.toString.toLowerCase).isEmpty\n        val not\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppbjtzz58.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppbjtzz58.scala:20:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupperCaseKeys\e[0m = keys.filter(_.toString.toUpperCase == _.toString.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppbjtzz58.scala:21:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlowerCaseKeys\e[0m = keys.filter(_.toString.toLowerCase == _.toString.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppbjtzz58.scala:23:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotAllKeysAreStringsOrUpperCase\e[0m = keys.filter(!_.toString.isInstanceOf[\e\
    [35mString\e[0m] || _.toString.toUpperCase == _.toString.toUpperCase).isEmpty\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppbjtzz58.scala:24:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotAllKeysAreStringsOrLowerCase\e[0m = keys.filter(!_.toString.isInstanceOf[\e\
    [35mString\e[0m] || _.toString.toLowerCase == _.toString.toLowerCase).isEmpty\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1660009938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        if(lowerCaseKeys.forall(_.equals(upperCaseKeys)))\
    \ return true\n        else return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9irgdwwu.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqrugmx2.scala:25)\n\tat Problem.main(tmpdqrugmx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fsnkhf0.scala:26)\n\tat Problem.main(tmp1fsnkhf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val isAllStrings = keys.forall(_.isInstanceOf[String])\n\
    \        val isAllUppercase = keys.forall(_.isInstanceOf[String] && _.toUpperCase\
    \ == _)\n        isAllStrings && isAllUppercase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp01zg_98p.scala:21:41 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misAllUppercase\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] && _.toUpperCase == _)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(key\
    \ => (key, key.toUpperCase))\n        val all = lower ++ upper ++ both\n     \
    \   val isAll = all.forall(key => dict.get(key) == key)\n        !isAll\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn0jtm4_z.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misAll\e\
    [0m = all.forall(\e[36mkey\e[0m => dict.get(key) == key)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^\e[0m\n\e[31m   |\e[0m    \
    \                                           Found:    (key : Object)\n\e[31m \
    \  |\e[0m                                               Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || \n              dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpflk2xdsy.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || \n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpflk2xdsy.scala:20:61 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || \n\e[31m\e[31m   |\e[0m                                                 \
    \            ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => _$3.toLowerCase.\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpflk2xdsy.scala:21:32 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m              dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value toUpperCase is not a member of (String, String)\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpflk2xdsy.scala:21:61 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m              dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$6 of expanded function:\n\
    \e[31m   |\e[0m   _$6 => _$6.toUpperCase.\n4 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (\n           \
    \ dict.keys.forall(_.isInstanceOf[String]) &&\n            dict.keys.forall(_.isInstanceOf[String])\
    \ &&\n            dict.keys.forall(_.toLowerCase == _.toLowerCase)\n        )\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpeijzawm4.scala:23:29 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            dict.keys.forall(_.toLowerCase == _.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(\"\
    name\"))\n            || dict.toList.map(_.toUpperCase).forall(_.equals(\"NAME\"\
    )))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2av5bh1y.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(\e\
    [31m\"name\"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2av5bh1y.scala:21:33\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            || dict.toList.map(_.toUpperCase).forall(_.equals(\e\
    [31m\"NAME\"\e[0m)))\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toUpperCase is not a member of (String,\
    \ String)\n2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => !upperCaseKeys.contains(key))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkqwxk0pg.scala:23:51 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => !upperCaseKeys.contains(key))\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpkqwxk0pg.scala:19:25 ----------------\e\
    [0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m(dict.isEmpty) \e[31mfalse\e[0m\n\
    \e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1660009938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(k =>\
    \ k -> dict.get(k).toString.toUpperCase)\n        val all = lower ++ upper ++\
    \ both\n        all.forall(k => k._1.equals(k._2))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0_2hmldt.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        all.forall(\e[36mk\e[0m => k._1.equals(k._2))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  value _1 is not a member of Object\n1 error found\n"
  stdout: ''
  timestamp: 1660009938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgt_hky_.scala:28)\n\tat Problem.main(tmpbgt_hky_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val isLower = lower.forall(_.isInstanceOf[String])\n\
    \        val isUpper = upper.forall(_.isInstanceOf[String])\n        val isSame\
    \ = keys.forall(_.isInstanceOf[String])\n        isSame && isLower && isUpper\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmb1yfse.scala:29)\n\tat Problem.main(tmptmb1yfse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty)\n            return false\n        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict =\
    \ dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.forall(lowerCaseKey => upperCaseDict.contains(lowerCaseKey))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_yywr4m.scala:24:44\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps_yywr4m.scala:25:44 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_yywr4m.scala:26:68 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        lowerCaseDict.forall(\e[36mlowerCaseKey\e[0m\
    \ => upperCaseDict.contains(lowerCaseKey))\n\e[31m\e[31m   |\e[0m            \
    \                                                        ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Found:    (lowerCaseKey : (String, String))\n\
    \e[31m   |\e[0m                             Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(_.toLowerCase)\n\
    \        val upperCaseDict = dict.filterKeys(_.toUpperCase)\n        lowerCaseKeys.forall(lowerCaseDict.contains)\
    \ &&\n        upperCaseKeys.forall(upperCaseDict.contains)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2bq0w_ol.scala:23:44\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(_.toLowerCase)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                             Found:    String\n\e[31m   |\e[0m              \
    \                              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2bq0w_ol.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    String\n\
    \e[31m   |\e[0m                                            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp2bq0w_ol.scala:19:25\
    \ ----------------\e[0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m(dict.isEmpty)\
    \ \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\
    \e[33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n            || upperCaseKeys.forall(key\
    \ => dict.get(key).isInstanceOf[String])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiu1muvbi.scala:26)\n\tat Problem.main(tmpiu1muvbi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n        val lowerCaseDict2\
    \ = dict.filterKeys(_.toLowerCase.contains(\"b\"))\n        val upperCaseDict2\
    \ = dict.filterKeys(_.toUpperCase.contains(\"B\"))\n        val lowerCaseDict3\
    \ = dict.filterKeys(_.toLowerCase.contains(\"c\"))\n        val upperCaseDict3\
    \ = dict.filterKeys(_.toUpperCase.contains(\"C\"))\n        val lowerCaseDict4\
    \ = dict.filterKeys(_.toLowerCase.contains(\"d\"))\n        val upperCaseDict4\
    \ = dict.filterKeys(_.toUpperCase.contains(\"D\"))\n        val lowerCaseDict5\
    \ = dict.filterKeys(_.toLowerCase.contains(\"e\"))\n        val upperCaseDict5\
    \ = dict.filterKeys(_.toUpperCase.contains(\"E\"))\n        val lowerCaseDict6\
    \ = dict.filterKeys(_.toLowerCase.contains(\"f\"))\n        val upperCaseDict6\
    \ = dict.filterKeys(_.toUpperCase.contains(\"F\"))\n        val lowerCaseDict7\
    \ = dict.filterKeys(_.toLowerCase.contains(\"g\"))\n        val upperCaseDict7\
    \ = dict.filterKeys(_.toUpperCase.contains(\"G\"))\n        val lowerCaseDict8\
    \ = dict.filterKeys(_.toLowerCase.contains(\"h\"))\n        val upperCaseDict8\
    \ = dict.filterKeys(_.toUpperCase.contains(\"H\"))\n        val lowerCaseDict9\
    \ = dict.filterKeys(_.toLowerCase.contains(\"i\"))\n        val upperCaseDict9\
    \ = dict.filterKeys(_.toUpperCase.contains(\"I\"))\n        val lowerCaseDict10\
    \ = dict.filterKeys(_.toLowerCase.contains(\"j\"))\n        val upperCaseDict10\
    \ = dict.filterKeys(_.toUpperCase.contains(\"J\"))\n        val lowerCaseDict11\
    \ = dict.filterKeys(_.toLowerCase.contains(\"k\"))\n        val upperCaseDict11\
    \ = dict.filterKeys(_.toUpperCase.contains(\"K\"))\n        val lowerCaseDict12\
    \ = dict.filterKeys(_.toLowerCase.contains(\"l\"))\n        val upperCaseDict12\
    \ = dict.filterKeys(_.toUpperCase.contains(\"L\"))\n        val lowerCaseDict13\
    \ = dict.filterKeys(_.toLowerCase.contains(\"m\"))\n        val upperCaseDict13\
    \ = dict.filterKeys(_.toUpperCase.contains(\"M\"))\n        val lowerCaseDict14\
    \ = dict.filterKeys(_.toLowerCase.contains(\"n\"))\n        val upperCaseDict14\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwcee9ip7.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwcee9ip7.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tedx_m3.scala:27)\n\tat Problem.main(tmp5tedx_m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) false\n\
    \        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.toLowerCase\
    \ == _.toLowerCase)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidyq6jox.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value length is not a member of Iterable[String]\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpidyq6jox.scala:21:64 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toLowerCase == _.toLowerCase)\n\e[31m\e[31m   |\e[0m      \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        if (lowerCaseKeys.isEmpty)\
    \ {\n            if (upperCaseKeys.isEmpty) {\n                return true\n \
    \           } else {\n                return false\n            }\n        } else\
    \ {\n            if (upperCaseKeys.isEmpty) {\n                return false\n\
    \            } else {\n                return true\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcsak56r7.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isLower is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcsak56r7.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseKeys\e[0m = keys.filter(_.isUpper)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isUpper is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpab21367c.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys\
    \ = keys.map(_.toUpperCase)\n        lowerKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toLowerCase))\n        upperKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1s92hzns.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val isStringInLowerCase\
    \ = keys.forall(_.toString.toLowerCase.contains(\"a\"))\n        val isStringInUpperCase\
    \ = keys.forall(_.toString.toUpperCase.contains(\"A\"))\n        isStringInLowerCase\
    \ && isStringInUpperCase\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgu_9cq3.scala:25)\n\tat Problem.main(tmpzgu_9cq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.isLower) &&\
    \ keys.forall(_.isUpper)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp06wqtia6.scala:21:66 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isLower) && keys.forall(_.isUpper)\n\e[31m\e[31m   |\e[0m \
    \                                                               ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value isLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp06wqtia6.scala:21:92\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.isLower) && keys.forall(_.isUpper)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ value isUpper is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv9lip2zv.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9lip2zv.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9lip2zv.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpv9lip2zv.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \            val lowerCaseKeys = keys.map(_.toLowerCase)\n            val allLowerCase\
    \ = keys.forall(_.toLowerCase.equalsIgnoreCase(lowerCaseKeys))\n            val\
    \ allUpperCase = keys.forall(_.toUpperCase.equalsIgnoreCase(upperCaseKeys))\n\
    \            allLowerCase && allUpperCase\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_1h2nvos.scala:24:74\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36mallLowerCase\e[0m = keys.forall(_.toLowerCase.equalsIgnoreCase(lowerCaseKeys))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m          \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_1h2nvos.scala:25:74 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mval\e[0m \e[36mallUpperCase\e[0m = keys.forall(_.toUpperCase.equalsIgnoreCase(upperCaseKeys))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \     Found:    (upperCaseKeys : Iterable[String])\n\e[31m   |\e[0m          \
    \                  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qgw_gts.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.keys.toSet.toList.forall(_.isInstanceOf[String])\
    \ || dict.keys.toSet.toList.forall(_.isInstanceOf[String]) && dict.values.toSet.toList.forall(_.isInstanceOf[String]))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrsiupfz.scala:24)\n\tat Problem.main(tmpvrsiupfz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv9lip2zv.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9lip2zv.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9lip2zv.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpv9lip2zv.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgauslf1y.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toLowerCase is not a member of (String, String)\n\e\
    [31m\e[31m-- [E081] Type Error: /tmp/tmpgauslf1y.scala:20:61 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$3 of expanded function:\n\e\
    [31m   |\e[0m   _$3 => _$3.toLowerCase.\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgauslf1y.scala:20:98 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \          value toUpperCase is not a member of (String, String)\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpgauslf1y.scala:20:127 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(_.toLowerCase))\
    \ || dict.toList.map(_.toUpperCase).forall(_.equals(_.toUpperCase)))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$6 of expanded function:\n\e[31m   |\e\
    [0m   _$6 => _$6.toUpperCase.\n4 errors found\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val isLowerOrUpper = lower ++ upper.forall(_.contains(_))\n        return\
    \ isLowerOrUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8hlwvbav.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp8hlwvbav.scala:23:51 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLowerOrUpper\e[0m = lower\
    \ ++ upper.forall(_.contains(_))\n\e[31m\e[31m   |\e[0m                      \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8hlwvbav.scala:24:15 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mreturn\e[0m isLowerOrUpper\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (isLowerOrUpper : Iterable[String])\n\e[31m   |\e[0m               Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys\
    \ = keys.map(_.toUpperCase)\n        lowerKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toLowerCase))\n        upperKeys.forall(key => dict.get(key) ==\
    \ dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1s92hzns.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cq9wify.scala:27)\n\tat Problem.main(tmp7cq9wify.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgt_hky_.scala:28)\n\tat Problem.main(tmpbgt_hky_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val both = keys.map(k => k -> dict.get(k).toLowerCase)\n        val bothUpper\
    \ = keys.map(k => k -> dict.get(k).toUpperCase)\n        val bothLower = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperLower = keys.map(k =>\
    \ k -> dict.get(k).toLowerCase)\n        val bothLowerUpper = keys.map(k => k\
    \ -> dict.get(k).toLowerCase)\n        val bothUpperUpper = keys.map(k => k ->\
    \ dict.get(k).toLowerCase)\n        val bothLowerUpperUpper = keys.map(k => k\
    \ -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpper = keys.map(k =>\
    \ k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothLowerUpperUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperLowerUpperUpper = keys.map(k\
    \ => k -> dict.get(k).toLowerCase)\n        val bothUpperUpperUpperUpper = keys.map(k\
    \ => k -> \n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm6z2icm1.scala:46:57 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mbothUpperUpperUpperUpper\e\
    [0m = keys.map(\e[36mk\e[0m => k -> \n\e[31m\e[31m   |\e[0m                  \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm6z2icm1.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mbothLowerUpperUpperUpper\e\
    [0m = keys.map(\e[36mk\e[0m => k -> dict.get(k).toLowerCase)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbothLowerUpperUpperUpper is already defined as \e[33mvalue\e\
    [0m \e[35mbothLowerUpperUpperUpper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm6z2icm1.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mbothUpperLowerUpperUpper\e\
    [0m = keys.map(\e[36mk\e[0m => k -> dict.get(k).toLowerCase)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbothUpperLowerUpperUpper is already defined as \e[33mvalue\e\
    [0m \e[35mbothUpperLowerUpperUpper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm6z2icm1.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mbothUpperUpperUpperUpper\e\
    [0m = keys.map(\e[36mk\e[0m => k -> dict.get(k).toLowerCase)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbothUpperUpperUpperUpper is already defined as \e[33mvalue\e\
    [0m \e[35mbothUpperUpperUpperUpper\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overl"
  stdout: ''
  timestamp: 1660009953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp374ane39.scala:29)\n\tat Problem.main(tmp374ane39.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphicd2iya.scala:28)\n\tat Problem.main(tmphicd2iya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty)\n            return false\n       \
    \ val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = lowerCaseKeys.toMap\n        val upperCaseDict = upperCaseKeys.toMap\n   \
    \     lowerCaseKeys.forall { key =>\n            val value = dict.get(key)\n \
    \           val lowerCaseValue = lowerCaseDict.get(key)\n            val upperCaseValue\
    \ = upperCaseDict.get(key)\n            val lowerCaseValueIsEmpty = lowerCaseValue\
    \ == None\n            val upperCaseValueIsEmpty = upperCaseValue == None\n  \
    \          if (lowerCaseValueIsEmpty && upperCaseValueIsEmpty)\n             \
    \   true\n            else if (lowerCaseValueIsEmpty || upperCaseValueIsEmpty)\n\
    \                false\n            else\n                value == lowerCaseValue\
    \ || value == upperCaseValue\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw_6e3ydm.scala:24:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = lowerCaseKeys.toMap\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                     Cannot prove that String <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \  where:    K is a type variable\n\e[31m   |\e[0m                           \
    \                    V is a type variable\n\e[31m   |\e[0m                   \
    \                  .\n\e[31m\e[31m-- Error: /tmp/tmpw_6e3ydm.scala:25:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = upperCaseKeys.toMap\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                     Cannot prove that String <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \  where:    K is a type variable\n\e[31m   |\e[0m                           \
    \                    V is a type variable\n\e[31m   |\e[0m                   \
    \                  .\n2 errors found\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.isEmpty) false\n\
    \        else keys.toSet.size == keys.toSet.filter(_.isLower).size == keys.toSet.filter(_.isUpper).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj62vtlqa.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.toSet.size == keys.toSet.filter(_.isLower).size\
    \ == keys.toSet.filter(_.isUpper).size\n\e[31m\e[31m   |\e[0m                \
    \                                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      value isLower is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpj62vtlqa.scala:21:89 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.toSet.size == keys.toSet.filter(_.isLower).size\
    \ == keys.toSet.filter(_.isUpper).size\n\e[31m\e[31m   |\e[0m                \
    \                                                                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val containsAllLowerCaseKeys\
    \ = lowerCaseKeys.forall(key => dict.contains(key))\n        val containsAllUpperCaseKeys\
    \ = upperCaseKeys.forall(key => dict.contains(key))\n        containsAllLowerCaseKeys\
    \ && containsAllUpperCaseKeys\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaefw32yn.scala:27)\n\tat Problem.main(tmpaefw32yn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        if (keys.isEmpty) false\n\
    \        else {\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n   \
    \         val upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key).toLowerCase == dict.get(key))\n            upperCaseKeys.forall(key\
    \ => dict.get(key).toUpperCase == dict.get(key))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpybn1bncl.scala:24:54 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key).toLowerCase\
    \ == dict.get(key))\n\e[31m\e[31m   |\e[0m                                   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ toLowerCase is not a member of Option[String]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpybn1bncl.scala:25:54 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            upperCaseKeys.forall(\e[36mkey\e[0m => dict.get(key).toUpperCase\
    \ == dict.get(key))\n\e[31m\e[31m   |\e[0m                                   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ toUpperCase is not a member of Option[String]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val allKeysAreStrings\
    \ = allLowerCaseKeys || allUpperCaseKeys\n        allKeysAreStrings\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_o263q8.scala:29)\n\tat Problem.main(tmpw_o263q8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tedx_m3.scala:27)\n\tat Problem.main(tmp5tedx_m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val isAllLowerOrAllUpper\
    \ = lower.forall(x => upper.contains(x))\n        val isAllLowerOrAllUpperOrEmpty\
    \ = lower.forall(x => upper.contains(x) || keys.contains(x))\n        isAllLowerOrAllUpper\
    \ || isAllLowerOrAllUpperOrEmpty\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfk8pg3n9.scala:22:59 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misAllLowerOrAllUpper\e[0m\
    \ = lower.forall(\e[36mx\e[0m => upper.contains(x))\n\e[31m\e[31m   |\e[0m   \
    \                                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      value contains is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfk8pg3n9.scala:23:66 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misAllLowerOrAllUpperOrEmpty\e\
    [0m = lower.forall(\e[36mx\e[0m => upper.contains(x) || keys.contains(x))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection asJava\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty)\n            return false\n       \
    \ val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.forall(lowerCaseKey => upperCaseDict.contains(lowerCaseKey))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdum38yct.scala:24:58 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdum38yct.scala:25:58 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdum38yct.scala:26:68\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        lowerCaseDict.forall(\e\
    [36mlowerCaseKey\e[0m => upperCaseDict.contains(lowerCaseKey))\n\e[31m\e[31m \
    \  |\e[0m                                                                    ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (lowerCaseKey : (String,\
    \ String))\n\e[31m   |\e[0m                             Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(k =>\
    \ k -> dict.get(k).toLowerCase)\n        val all = lower ++ upper ++ both\n  \
    \      all forall keys.contains {k => k.length == 0 || lower(k) == upper(k)}\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwd2a2dx7.scala:22:50 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mboth\e[0m = keys.map(\e\
    [36mk\e[0m => k -> dict.get(k).toLowerCase)\n\e[31m\e[31m   |\e[0m           \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 value toLowerCase is not a member of Option[String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwd2a2dx7.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        all forall keys.contains {\e[36mk\e[0m => k.length\
    \ == \e[31m0\e[0m || lower(k) == upper(k)}\n\e[31m\e[31m   |\e[0m            \
    \       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection asJava\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val lower = keys.map(_.toLowerCase)\n    \
    \        val upper = keys.map(_.toUpperCase)\n            val lowerSet = lower.toSet\n\
    \            val upperSet = upper.toSet\n            val result = lowerSet.subsetOf(upperSet)\n\
    \            result && lowerSet.size == upperSet.size\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfi7dr0pw.scala:31)\n\tat Problem.main(tmpfi7dr0pw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String]) && keys.forall(_.toString.toLowerCase\
    \ == _.toString.toLowerCase || _.toString.toUpperCase == _.toString.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbeywlotn.scala:21:64 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m keys.forall(_.isInstanceOf[String])\
    \ && keys.forall(_.toString.toLowerCase == _.toString.toLowerCase || _.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty) false\n        val keys = dict.keys\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => upperCaseKeys.contains(key))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd5bcs8j0.scala:23:50 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => upperCaseKeys.contains(key))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpd5bcs8j0.scala:19:25 ----------------\e\
    [0m\e[0m\n\e[33m19 |\e[0m        \e[33mif\e[0m(dict.isEmpty) \e[31mfalse\e[0m\n\
    \e[33m\e[33m   |\e[0m                         ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1660009960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String])\n\
    \        val allKeysAreStringsOrLowerCase = keys.forall(_.isInstanceOf[String]\
    \ || _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCase\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String])\n        val allKeysAreStringsOrUpperCaseOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toUpperCase.isInstanceOf[String] ||\
    \ _.toLowerCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String] ||\
    \ _.isEmpty)\n        val allKeysAreStringsOrUpperCaseOrEmpty = keys.forall(_.isInstanceOf[String]\
    \ || _.toUpperCase.isInstanceOf[String] || _.isEmpty)\n        val allKeysAreStringsOrLowerCaseOrEmpty\
    \ = keys.forall(_.isInstanceOf[String] || _.toLowerCase.isInstanceOf[String\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4wbumb2l.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wbumb2l.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrLowerCaseOrEmpty\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] || _.toLowerCase.isInstanceOf[\e[35mString\e[0m] || _.isEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrLowerCaseOrEmpty is already defined as\
    \ \e[33mvalue\e[0m \e[35mallKeysAreStringsOrLowerCaseOrEmpty\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wbumb2l.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrUpperCaseOrEmpty\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] || _.toUpperCase.isInstanceOf[\e[35mString\e[0m] || _.isEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrUpperCaseOrEmpty is already defined as\
    \ \e[33mvalue\e[0m \e[35mallKeysAreStringsOrUpperCaseOrEmpty\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wbumb2l.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrLowerCaseOrEmpty\e[0m = keys.forall(_.isInstanceOf[\e\
    [35mString\e[0m] || _.toLowerCase.isInstanceOf[\e[35mString\e[0m] || _.isEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStri"
  stdout: ''
  timestamp: 1660009961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInBothCases\
    \ = isStringInLowerCase && isStringInUpperCase\n        val isStringInBothCasesAndNotEmpty\
    \ = isStringInBothCases && keys.nonEmpty\n        isStringInBothCasesAndNotEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0e_1i0.scala:30)\n\tat Problem.main(tmpwi0e_1i0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(\"\
    state\")) || dict.toList.map(_.toLowerCase).forall(_.equals(\"zip\")))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpomhlu6xm.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(\e\
    [31m\"state\"\e[0m)) || dict.toList.map(_.toLowerCase).forall(_.equals(\e[31m\"\
    zip\"\e[0m)))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpomhlu6xm.scala:20:92\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(\e\
    [31m\"state\"\e[0m)) || dict.toList.map(_.toLowerCase).forall(_.equals(\e[31m\"\
    zip\"\e[0m)))\n\e[31m\e[31m   |\e[0m                                         \
    \                                                 ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   value toLowerCase is not a member of (String, String)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mly4mmd.scala:27)\n\tat Problem.main(tmp1mly4mmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isAllLowerOrUpper = both.forall(x => keys.contains(x))\n        val\
    \ isAllLowerOrUpperOrEmpty = both.forall(x => keys.contains(x) || x.isEmpty)\n\
    \        isAllLowerOrUpper && isAllLowerOrUpperOrEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjokh3eos.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misAllLowerOrUpper\e[0m =\
    \ both.forall(\e[36mx\e[0m => keys.contains(x))\n\e[31m\e[31m   |\e[0m       \
    \                                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value contains is not a member of Iterable[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjokh3eos.scala:24:61 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misAllLowerOrUpperOrEmpty\e\
    [0m = both.forall(\e[36mx\e[0m => keys.contains(x) || x.isEmpty)\n\e[31m\e[31m\
    \   |\e[0m                                                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv9lip2zv.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9lip2zv.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv9lip2zv.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpv9lip2zv.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \            val upperCaseKeys = keys.map(_.toUpperCase)\n            lowerCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toLowerCase))\n            upperCaseKeys.forall(key\
    \ => dict.get(key) == dict.get(key.toUpperCase))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjqhpzatn.scala:30)\n\tat Problem.main(tmpjqhpzatn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val allKeys = upperCaseKeys\
    \ ++ lowerCaseKeys\n        allKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1xx6ong.scala:26)\n\tat Problem.main(tmpr1xx6ong.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => upperCaseKeys.contains(key))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvf2sfx3t.scala:22:50 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => upperCaseKeys.contains(key))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val allKeys = allLowerCaseKeys\
    \ && allUpperCaseKeys\n        allKeys\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8esrfsc.scala:29)\n\tat Problem.main(tmpy8esrfsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n        upperCaseKeys.forall(upperCaseDict.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuy4llv4r.scala:28)\n\tat Problem.main(tmpuy4llv4r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cq9wify.scala:27)\n\tat Problem.main(tmp7cq9wify.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        if (keys.length == 0)\
    \ return false\n        val lowerKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        if (lowerKeys.isEmpty) false\n        else if (upperKeys.isEmpty)\
    \ true\n        else false\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwm1cdxtx.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of scala.collection.Set[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpab21367c.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerKeys = keys.map(_.toLowerCase)\n        val upperKeys\
    \ = keys.map(_.toUpperCase)\n        lowerKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        upperKeys.forall(key => dict.get(key).isInstanceOf[String])\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkm37knug.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys.contains)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28nzt1hi.scala:22:58 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp28nzt1hi.scala:23:58 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphicd2iya.scala:28)\n\tat Problem.main(tmphicd2iya.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n       \
    \ return lowerCaseDict.isEmpty && upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_44i9ale.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_44i9ale.scala:23:58 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_44i9ale.scala:24:58\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys.contains)\n\e[31m\e[31m\
    \   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty)\n            return false\n        val\
    \ keys = dict.keys\n        val upperCaseKeys = keys.map(_.toUpperCase)\n    \
    \    val lowerCaseKeys = keys.map(_.toLowerCase)\n        val keysAreInUpperCase\
    \ = upperCaseKeys.forall(_.contains(_))\n        val keysAreInLowerCase = lowerCaseKeys.forall(_.contains(_))\n\
    \        keysAreInUpperCase || keysAreInLowerCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp5vkae3jk.scala:24:54 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mkeysAreInUpperCase\e[0m\
    \ = upperCaseKeys.forall(_.contains(_))\n\e[31m\e[31m   |\e[0m               \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmp5vkae3jk.scala:25:54 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mkeysAreInLowerCase\e[0m\
    \ = lowerCaseKeys.forall(_.contains(_))\n\e[31m\e[31m   |\e[0m               \
    \                                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Wrong number of parameters, expected: 1\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.isLower)\
    \ || dict.toList.map(_.toUpperCase).forall(_.isUpper))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptflcb6c8.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.isLower)\
    \ || dict.toList.map(_.toUpperCase).forall(_.isUpper))\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \        value toLowerCase is not a member of (String, String)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptflcb6c8.scala:20:54 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.isLower)\
    \ || dict.toList.map(_.toUpperCase).forall(_.isUpper))\n\e[31m\e[31m   |\e[0m\
    \                                                    ^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                value isLower is not a member of Nothing\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptflcb6c8.scala:20:84 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.isLower)\
    \ || dict.toList.map(_.toUpperCase).forall(_.isUpper))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value toUpperCase\
    \ is not a member of (String, String)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptflcb6c8.scala:20:106 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.isLower) ||\
    \ dict.toList.map(_.toUpperCase).forall(_.isUpper))\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                value isUpper is not a member of Any\n4 errors found\n"
  stdout: ''
  timestamp: 1660009965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String])) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcm6kvh8.scala:26)\n\tat Problem.main(tmpdcm6kvh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        lowerCaseKeys.isEmpty  || upperCaseKeys.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg07gw0hd.scala:20:40 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg07gw0hd.scala:21:40 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupperCaseKeys\e[0m = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if(dict.isEmpty)\n            return false\n        val\
    \ keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n    \
    \    val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict =\
    \ lowerCaseKeys.toSet\n        val upperCaseDict = upperCaseKeys.toSet\n     \
    \   lowerCaseDict.size == upperCaseDict.size && lowerCaseDict.size == keys.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0u93rtx.scala:30)\n\tat Problem.main(tmpw0u93rtx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9h27hew.scala:25)\n\tat Problem.main(tmpv9h27hew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val allUpperCaseKeys\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        allLowerCaseKeys &&\
    \ allUpperCaseKeys\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgt_hky_.scala:28)\n\tat Problem.main(tmpbgt_hky_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val isLower = lower.forall(_.isInstanceOf[String])\n\
    \        val isUpper = upper.forall(_.isInstanceOf[String])\n        val isSame\
    \ = keys.forall(_.toLowerCase() == _.toUpperCase())\n        isSame && isLower\
    \ && isUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphjuotepg.scala:24:33 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misSame\e[0m = keys.forall(_.toLowerCase()\
    \ == _.toUpperCase())\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        if (keys.isEmpty) false\n\
    \        else keys.forall(_.isInstanceOf[String])\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9h27hew.scala:25)\n\tat Problem.main(tmpv9h27hew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.nonEmpty)\n        val upperCaseDict = dict.filterKeys(_.toUpperCase.nonEmpty)\n\
    \        lowerCaseKeys.forall(lowerCaseDict.contains) &&\n            upperCaseKeys.forall(upperCaseDict.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf4u7iy5q.scala:28)\n\tat Problem.main(tmpf4u7iy5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        allLower\
    \ && allUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3n02492.scala:28)\n\tat Problem.main(tmpx3n02492.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.isEmpty) false\n\
    \        else if(keys.forall(_.isInstanceOf[String]))\n            keys.forall(_.toString.toLowerCase.equals(keys.toString.toLowerCase))\n\
    \        else\n            keys.forall(_.toString.toUpperCase.equals(keys.toString.toUpperCase))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3jznyii4.scala:27)\n\tat Problem.main(tmp3jznyii4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isStringInLowerCase\
    \ = lowerCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInUpperCase\
    \ = upperCaseKeys.forall(_.isInstanceOf[String])\n        val isStringInBothCases\
    \ = isStringInLowerCase && isStringInUpperCase\n        !isStringInBothCases\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfzr0b41.scala:28)\n\tat Problem.main(tmpjfzr0b41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key) && upperCaseKeys.forall(key => dict.get(key) == key)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphyx8hskj.scala:22:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key)\
    \ == key) && upperCaseKeys.forall(\e[36mkey\e[0m => dict.get(key) == key)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Option[String] and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmphyx8hskj.scala:22:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key)\
    \ == key) && upperCaseKeys.forall(\e[36mkey\e[0m => dict.get(key) == key)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types Option[String] and String cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(keys))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(keys))\n\
    \        isAllLowerCase && isAllUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cq9wify.scala:27)\n\tat Problem.main(tmp7cq9wify.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val none = keys.filterNot(all.contains)\n        none.isEmpty\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__zabdaj.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnone\e[0m = keys.filterNot(all.contains)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      value contains is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val result = all forall keys.contains {\n            case key => key.toLowerCase\
    \ == key.toUpperCase || key.toUpperCase == key.toLowerCase\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1kag7fvt.scala:23:37 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = all forall\
    \ keys.contains {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value contains is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpef8y6dp4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef8y6dp4.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef8y6dp4.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpef8y6dp4.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val isAllLowerCase\
    \ = lowerCaseKeys.forall(_.equals(_))\n        val isAllUpperCase = upperCaseKeys.forall(_.equals(_))\n\
    \        isAllLowerCase && isAllUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp04834ohn.scala:22:50 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misAllLowerCase\e[0m = lowerCaseKeys.forall(_.equals(_))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp04834ohn.scala:23:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36misAllUpperCase\e[0m = upperCaseKeys.forall(_.equals(_))\n\e[31m\e[31m\
    \   |\e[0m                                                  ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpef8y6dp4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef8y6dp4.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef8y6dp4.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpef8y6dp4.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val allLower = lower.forall(_.isInstanceOf[String])\n\
    \        val allUpper = upper.forall(_.isInstanceOf[String])\n        allLower\
    \ && allUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3n02492.scala:28)\n\tat Problem.main(tmpx3n02492.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  && upperCaseDict.isEmpty\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__6zjgun.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__6zjgun.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__6zjgun.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpab21367c.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val lower = keys.map(_.toLowerCase)\n    \
    \        val upper = keys.map(_.toUpperCase)\n            val allLower = lower.forall(_.isInstanceOf[String])\n\
    \            val allUpper = upper.forall(_.isInstanceOf[String])\n           \
    \ allLower && allUpper\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr07tv9nf.scala:31)\n\tat Problem.main(tmpr07tv9nf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else (dict.toList.map(_.toLowerCase).forall(_.equals(\"\
    state\")) || dict.toList.map(_.toUpperCase).forall(_.equals(\"STATE\")))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqf6x7cp.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(\e\
    [31m\"state\"\e[0m)) || dict.toList.map(_.toUpperCase).forall(_.equals(\e[31m\"\
    STATE\"\e[0m)))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toLowerCase is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqf6x7cp.scala:20:92\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m (dict.toList.map(_.toLowerCase).forall(_.equals(\e\
    [31m\"state\"\e[0m)) || dict.toList.map(_.toUpperCase).forall(_.equals(\e[31m\"\
    STATE\"\e[0m)))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value toUpperCase is not a member of (String, String)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isLowercase = lower.forall(_.isInstanceOf[String])\n        val isUppercase\
    \ = upper.forall(_.isInstanceOf[String])\n        val isBoth = both.forall(_.isInstanceOf[String])\n\
    \        val isAll = keys.forall(_.isInstanceOf[String])\n        isAll\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9a9_xs5w.scala:31)\n\tat Problem.main(tmp9a9_xs5w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseKeys\
    \ = keys.map(_.toLowerCase)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys.contains)\n\
    \        val lowerCaseDict = dict.filterKeys(lowerCaseKeys.contains)\n       \
    \ if(upperCaseDict.isEmpty) return false\n        if(lowerCaseDict.isEmpty) return\
    \ true\n        val keysAreEqual = upperCaseKeys.forall(lowerCaseDict.contains)\n\
    \        if(keysAreEqual) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3llbdle7.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3llbdle7.scala:23:58 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys.contains)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3llbdle7.scala:24:58\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys.contains)\n\e[31m\e[31m\
    \   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue contains is not a member of Iterable[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversions.collection asJava\n\e[31m \
    \  |\e[0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n        val allKeys = upperCaseKeys ++ lowerCaseKeys\n\
    \        allKeys.size == keys.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpd1rluuy2.scala:20:40 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mupperCaseKeys\e[0m = keys.filter(_.toString.toUpperCase\
    \ == _.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpd1rluuy2.scala:21:40 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.toString.toLowerCase\
    \ == _.toString.toLowerCase)\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty\
    \  &&  upperCaseDict.isEmpty\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_5c8ut_.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_5c8ut_.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_5c8ut_.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        val lowerCaseDict = dict.filterKeys(lowerCaseKeys)\n\
    \        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n        lowerCaseDict.isEmpty()\
    \ && upperCaseDict.isEmpty()\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpef8y6dp4.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef8y6dp4.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e[0m = dict.filterKeys(lowerCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (lowerCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpef8y6dp4.scala:24:44 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpef8y6dp4.scala:25:22 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lowerCaseDict.isEmpty() && upperCaseDict.isEmpty()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   \e[33mmethod\e[0m \e[35misEmpty\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = lower ++ upper\n\
    \        val isString = keys.forall(_.isInstanceOf[String])\n        val isStringInBoth\
    \ = both.forall(_.isInstanceOf[String])\n        isString && isStringInBoth\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnnyevb1.scala:29)\n\tat Problem.main(tmpcnnyevb1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val both = keys.map(k =>\
    \ (k.toLowerCase, k.toUpperCase))\n        val result = lower == upper || both\
    \ == keys\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjsviyqg.scala:27)\n\tat Problem.main(tmpkjsviyqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val allLowerOrAllUpper =\
    \ lower ++ upper\n        allLowerOrAllUpper.forall(key => dict.get(key) != null)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3htt1yj.scala:27)\n\tat Problem.main(tmpq3htt1yj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n\
    \        upperCaseKeys.forall(key => dict.get(key).isInstanceOf[String])\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzn6teyep.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpab21367c.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toLowerCase))\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == dict.get(key.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuqfdhk86.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key\
    \ => dict.get(key) == key.toLowerCase)\n        upperCaseKeys.forall(key => dict.get(key)\
    \ == key.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe1pth1uc.scala:22:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key)\
    \ == key.toLowerCase)\n\e[31m\e[31m   |\e[0m                                 \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types Option[String]\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpe1pth1uc.scala:23:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ upperCaseKeys.forall(\e[36mkey\e[0m => dict.get(key) == key.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Option[String] and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  && upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprn073ite.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.isLower)\n\
    \        val upperCaseKeys = keys.filter(_.isUpper)\n        lowerCaseKeys.isEmpty\
    \  ||  upperCaseKeys.isEmpty\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyu9ra952.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.isLower)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isLower is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyu9ra952.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mupperCaseKeys\e[0m = keys.filter(_.isUpper)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isUpper is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if (keys.length == 0) return\
    \ false\n        val lower = keys.map(_.toLowerCase)\n        val upper = keys.map(_.toUpperCase)\n\
    \        val allLowerOrAllUpper = lower.forall(_.isEmpty || upper.forall(_.isEmpty))\n\
    \        val allLowerOrAllUpperOrEmpty = allLowerOrAllUpper || lower.forall(_.nonEmpty)\
    \ || upper.forall(_.nonEmpty)\n        return allLowerOrAllUpperOrEmpty\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc2ogy0jx.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Iterable[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        if(keys.length == 0) return\
    \ false\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys\
    \ = keys.map(_.toUpperCase)\n        lowerCaseKeys.forall(key => dict.get(key).toLowerCase\
    \ == dict.get(key))\n        upperCaseKeys.forall(key => dict.get(key).toUpperCase\
    \ == dict.get(key))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3d5kji8.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Iterable[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3d5kji8.scala:23:50 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        lowerCaseKeys.forall(\e[36mkey\e[0m => dict.get(key).toLowerCase\
    \ == dict.get(key))\n\e[31m\e[31m   |\e[0m                                   \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value toLowerCase\
    \ is not a member of Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf3d5kji8.scala:24:50\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        upperCaseKeys.forall(\e\
    [36mkey\e[0m => dict.get(key).toUpperCase == dict.get(key))\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value toUpperCase is not a member of Option[String]\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keySet\n        if (keys.length == 0)\
    \ return false\n        val lowerKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerKeys.isEmpty  && upperKeys.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpky0r742j.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (keys.length == \e[31m0\e[0m) \e\
    [33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of scala.collection.Set[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.map(_.toLowerCase)\n\
    \        val upper = keys.map(_.toUpperCase)\n        val all = lower ++ upper\n\
    \        val result = all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\") ||\
    \ all forall keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall\
    \ keys.contains(\"_\") || all forall keys.contains(\"_\") || all forall keys.contains(\"\
    _\") || all forall keys.contains(\"_\") || all forall keys.contains(\"_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyxz9cbwl.scala:23:1762 ---------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = all forall\
    \ keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m)\
    \ || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all forall keys.contains(\e\
    [31m\"_\"\e[0m) || all forall keys.contains(\e[31m\"_\"\e[0m) || all for"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(_.toLowerCase.contains(\"a\"))\n        val upperCaseDict\
    \ = dict.filterKeys(_.toUpperCase.contains(\"A\"))\n        val lowerCaseDict2\
    \ = dict.filterKeys(_.toLowerCase.contains(\"b\"))\n        val upperCaseDict2\
    \ = dict.filterKeys(_.toUpperCase.contains(\"B\"))\n        val lowerCaseDict3\
    \ = dict.filterKeys(_.toLowerCase.contains(\"c\"))\n        val upperCaseDict3\
    \ = dict.filterKeys(_.toUpperCase.contains(\"C\"))\n        val lowerCaseDict4\
    \ = dict.filterKeys(_.toLowerCase.contains(\"d\"))\n        val upperCaseDict4\
    \ = dict.filterKeys(_.toUpperCase.contains(\"D\"))\n        val lowerCaseDict5\
    \ = dict.filterKeys(_.toLowerCase.contains(\"e\"))\n        val upperCaseDict5\
    \ = dict.filterKeys(_.toUpperCase.contains(\"E\"))\n        val lowerCaseDict6\
    \ = dict.filterKeys(_.toLowerCase.contains(\"f\"))\n        val upperCaseDict6\
    \ = dict.filterKeys(_.toUpperCase.contains(\"F\"))\n        val lowerCaseDict7\
    \ = dict.filterKeys(_.toLowerCase.contains(\"g\"))\n        val upperCaseDict7\
    \ = dict.filterKeys(_.toUpperCase.contains(\"G\"))\n        val lowerCaseDict8\
    \ = dict.filterKeys(_.toLowerCase.contains(\"h\"))\n        val upperCaseDict8\
    \ = dict.filterKeys(_.toUpperCase.contains(\"H\"))\n        val lowerCaseDict9\
    \ = dict.filterKeys(_.toLowerCase.contains(\"i\"))\n        val upperCaseDict9\
    \ = dict.filterKeys(_.toUpperCase.contains(\"I\"))\n        val lowerCaseDict10\
    \ = dict.filterKeys(_.toLowerCase.contains(\"j\"))\n        val upperCaseDict10\
    \ = dict.filterKeys(_.toUpperCase.contains(\"J\"))\n        val lowerCaseDict11\
    \ = dict.filterKeys(_.toLowerCase.contains(\"k\"))\n        val upperCaseDict11\
    \ = dict.filterKeys(_.toUpperCase.contains(\"K\"))\n        val lowerCaseDict12\
    \ = dict.filterKeys(_.toLowerCase.contains(\"l\"))\n        val upperCaseDict12\
    \ = dict.filterKeys(_.toUpperCase.contains(\"L\"))\n        val lowerCaseDict13\
    \ = dict.filterKeys(_.toLowerCase.contains(\"m\"))\n        val upperCaseDict13\
    \ = dict.filterKeys(_.toUpperCase.contains(\"M\"))\n        val lowerCaseDict14\
    \ = dict.filterKeys(_.toLowerCase.contains(\"n\"))\n        val upperCaseDict14\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwcee9ip7.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwcee9ip7.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val lowerCaseDict\
    \ = dict.filterKeys(lowerCaseKeys)\n        val upperCaseDict = dict.filterKeys(upperCaseKeys)\n\
    \        lowerCaseDict.isEmpty  || upperCaseDict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseDict\e\
    [0m = dict.filterKeys(lowerCaseKeys)\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \             Found:    (lowerCaseKeys : Iterable[String])\n\e[31m   |\e[0m  \
    \                          Required: String => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg8x52bgp.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mupperCaseDict\e[0m = dict.filterKeys(upperCaseKeys)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (upperCaseKeys : Iterable[String])\n\
    \e[31m   |\e[0m                            Required: String => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.equals(_.toString.toLowerCase))\n\
    \        val upperCaseKeys = keys.filter(_.toString.toUpperCase.equals(_.toString.toUpperCase))\n\
    \        lowerCaseKeys.isEmpty  ||  upperCaseKeys.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpubk_dzu0.scala:20:70 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseKeys\e[0m = keys.filter(_.toString.toLowerCase.equals(_.toString.toLowerCase))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => _$2.toString.toLowerCase.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpubk_dzu0.scala:21:70 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupperCaseKeys\e[0m = keys.filter(_.toString.toUpperCase.equals(_.toString.toUpperCase))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$4 of expanded\
    \ function:\n\e[31m   |\e[0m   _$4 => _$4.toString.toUpperCase.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.filter(_.toString.toLowerCase.contains(\"\
    a\"))\n        val upperCaseKeys = keys.filter(_.toString.toUpperCase.contains(\"\
    A\"))\n        lowerCaseKeys.isEmpty  && upperCaseKeys.isEmpty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4b2_to77.scala:29)\n\tat Problem.main(tmp4b2_to77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n\
    \        val upperCaseKeys = keys.map(_.toUpperCase)\n        val allLowerCaseKeys\
    \ = keys.forall(_.toLowerCase.equalsIgnoreCase)\n        val allUpperCaseKeys\
    \ = keys.forall(_.toUpperCase.equalsIgnoreCase)\n        val allKeysAreStrings\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\"))\n        val allKeysAreStringsOrInt\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Int\"))\n        val allKeysAreStringsOrLong = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Long\"))\n        val allKeysAreStringsOrDouble\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Double\"))\n        val allKeysAreStringsOrBoolean = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Boolean\"))\n        val allKeysAreStringsOrChar\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Char\"))\n        val allKeysAreStringsOrByte = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Byte\"))\n        val allKeysAreStringsOrShort\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Short\"))\n        val allKeysAreStringsOrInt = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Int\"))\n        val allKeysAreStringsOrLong\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Long\"))\n        val allKeysAreStringsOrDouble = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") || _.toString.equalsIgnoreCase(\"Double\"))\n        val allKeysAreStringsOrBoolean\
    \ = keys.forall(_.toString.equalsIgnoreCase(\"String\") || _.toString.equalsIgnoreCase(\"\
    Boolean\"))\n        val allKeysAreStringsOrChar = keys.forall(_.toString.equalsIgnoreCase(\"\
    String\") \n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd08zk1qp.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd08zk1qp.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mallKeysAreStringsOrInt\e[0m = keys.forall(_.toString.equalsIgnoreCase(\e\
    [31m\"String\"\e[0m) || _.toString.equalsIgnoreCase(\e[31m\"Int\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrInt is already defined as \e[33mvalue\e\
    [0m \e[35mallKeysAreStringsOrInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd08zk1qp.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mallKeysAreStringsOrLong\e\
    [0m = keys.forall(_.toString.equalsIgnoreCase(\e[31m\"String\"\e[0m) || _.toString.equalsIgnoreCase(\e\
    [31m\"Long\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrLong is already defined as \e[33mvalue\e\
    [0m \e[35mallKeysAreStringsOrLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd08zk1qp.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mallKeysAreStringsOrDouble\e\
    [0m = keys.forall(_.toString.equalsIgnoreCase(\e[31m\"String\"\e[0m) || _.toString.equalsIgnoreCase(\e\
    [31m\"Double\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mallKeysAreStringsOrDouble is already defined as \e[33mvalue\e\
    [0m \e[35mallKeysAreStringsOrDouble\e[0m\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009980
