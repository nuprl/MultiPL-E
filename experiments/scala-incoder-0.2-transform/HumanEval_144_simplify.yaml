name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"\
  1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n \
  \   // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n  \
  \  def simplify(x : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val xNum = x.split(\"/\").map(_.toInt)\n        val nNum =\
    \ n.split(\"/\").map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        val xNum1 = xNum.init\n        val nNum1 = nNum.init\n\
    \        val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n\
    \        val nNum2 = nNum.tail\n        val xDeno2 = xDeno\n        val nDeno2\
    \ = nDeno\n        val xNum3 = xNum.init\n        val nNum3 = nNum.init\n    \
    \    val xDeno3 = xDeno\n        val nDeno3 = nDeno\n        val xNum4 = xNum.tail\n\
    \        val nNum4 = nNum.tail\n        val xDeno4 = xDeno\n        val nDeno4\
    \ = nDeno\n        val xNum5 = xNum.init\n        val nNum5 = nNum.init\n    \
    \    val xDeno5 = xDeno\n        val nDeno5 = nDeno\n        val xNum6 = xNum.tail\n\
    \        val nNum6 = nNum.tail\n        val xDeno6 = xDeno\n        val nDeno6\
    \ = nDeno\n        val xNum7 = xNum.init\n        val nNum7 = nNum.init\n    \
    \    val xDeno7 = xDeno\n        val nDeno7 = nDeno\n        val xNum8 = xNum.tail\n\
    \        val nNum8 = nNum.tail\n        val xDeno8 = xDeno\n        val nDeno8\
    \ = nDeno\n        val xNum9 = xNum.init\n        val nNum9 = nNum.init\n    \
    \    val xDeno9 = xDeno\n        val nDeno9 = nDeno\n        val xNum10 = xNum.tail\n\
    \        val nNum10 = nNum.tail\n        val xDeno10 = xDeno\n        val nDeno10\
    \ = nDeno\n        val xNum11 = xNum.init\n        val nNum11 = nNum.init\n  \
    \      val xDeno11 = xDeno\n        val nDeno11 = nDeno\n        val xNum12 =\
    \ xNum.tail\n        val nNum12 = nNum.tail\n        val ", "        val xNum\
    \ = x.split(\"/\").map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1\
    \ = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n        val xNum2\
    \ = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n        val xNum3\
    \ = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xNum4\
    \ = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n        val xNum5\
    \ = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n        val xNum6\
    \ = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xNum7\
    \ = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xNum8\
    \ = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n        val xNum9\
    \ = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n        val xNum10\
    \ = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n        val\
    \ xNum12 = xNum11.dropRight(1)\n        val nNum12 = nNum11.dropRight(1)\n   \
    \     val xNum13 = xNum12.dropRight(1)\n        val nNum13 = nNum12.dropRight(1)\n\
    \        val xNum14 = xNum13.dropRight(1)\n        val nNum14 = nNum13.dropRight(1)\n\
    \        val xNum15 = xNum14.dropRight(1)\n        val nNum15 = nNum14.dropRight(1)\n\
    \        val xNum16 = xNum15.dropRight(1)\n        val nNum16 = nNum15.dropRight(1)\n\
    \        val xNum17 = xNum16.dropRight(1)\n        val nNum17 = nNum16.dropRight(1)\n\
    \        val xNum18 = xNum17.dropRight(1)\n        val nNum18 = nNum17.dropRight(1)\n\
    \        val xNum19 = xNum18.dropRight(1)\n        val nNum19 = nNum18.dropRight(1)\n\
    \        val xNum20 = x", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        if (numerator == 0 && denominator == 0) {\n            return true\n\
    \        }\n        if (numerator == 0 && denominator != 0) {\n            return\
    \ false\n        }\n        if (numerator != 0 && denominator == 0) {\n      \
    \      return false\n        }\n        if (numerator == denominator && numerator\
    \ != 0) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 0) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 1) {\n            return true\n        }\n  \
    \      if (numerator == denominator && numerator == 2) {\n            return true\n\
    \        }\n        if (numerator == denominator && numerator == 3) {\n      \
    \      return true\n        }\n        if (numerator == denominator && numerator\
    \ == 4) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 5) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 6) {\n            return true\n        }\n  \
    \      if (numerator == denominator && numerator == 7) {\n            return true\n\
    \        }\n        if (numerator == denominator && numerator == 8) {\n      \
    \      return true\n        }\n        if (numerator == denominator && numerator\
    \ == 9) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 10) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 11) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == 12) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == 13) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == 14) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 15) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 16) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == 17) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == 18) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == 19) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 20) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 21) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == 22) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == 23) {\n",
  "        val xNum = x.split(\"/\").map(_.toInt)\n        val nNum = n.split(\"/\"\
    ).map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return true\n        if(xNum.last == nNum.last) simplify(x.replaceFirst(\"\
    /\"+nNum.last, xNum.last+\"/\"+nDeno), n.replaceFirst(\"/\"+nNum.last, nNum.last+\"\
    /\"+nDeno))\n        else simplify(x.replaceFirst(\"/\"+nNum.last, xNum.last+\"\
    /\"+nDeno), n.replaceFirst(\"/\"+nNum.last, nNum.last+\"/\"+nDeno))", "      \
    \  val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        if(xNum.product(xNum) == nNum.product(nNum)) {\n            return true\n\
    \        }\n        else {\n            return false\n        }", "        val\
    \ fraction = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val numeratorIsWholeNumber = numerator\
    \ == numerator.toInt\n        val denominatorIsWholeNumber = denominator == denominator.toInt\n\
    \        val numeratorIsNegative = numerator < 0\n        val denominatorIsNegative\
    \ = denominator < 0\n        val numeratorIsPositive = numerator > 0\n       \
    \ val denominatorIsPositive = denominator > 0\n        val numeratorIsZero = numerator\
    \ == 0\n        val denominatorIsZero = denominator == 0\n        val numeratorIsNegativeOrZero\
    \ = numeratorIsNegative || numeratorIsZero\n        val denominatorIsNegativeOrZero\
    \ = denominatorIsNegative || denominatorIsZero\n        val numeratorIsPositiveOrZero\
    \ = numeratorIsPositive || numeratorIsZero\n        val denominatorIsPositiveOrZero\
    \ = denominatorIsPositive || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || denominatorIsNegativeOrZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || denominatorIsPositiveOrZero\n        val numeratorIsNegativeOrZeroOrPositive\
    \ = numeratorIsNegativeOrZero || numeratorIsPositiveOrZero\n        val numeratorIsPositiveOrZeroOrNegative\
    \ = numeratorIsPositiveOrZero || numeratorIsNegativeOrZero\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZero\n        val numeratorIsNegativeOrZeroOrPositiveOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsPositiveOrZeroOrZero\n        val\
    \ numeratorIsPositiveOrZeroOrNegativeOrZero = numeratorIsPositiveOrZero || numeratorIsNegativeOrZeroOrZero\n\
    \        val numeratorIsNegativeOrZeroOrZeroOrZero = numeratorIsNegativeOrZero\
    \ || numeratorIsZero || numeratorIsZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZero || numeratorIsZero\n        val\
    \ numeratorIsNegativeOrZeroOrZeroOrPositive = numeratorIsNegativeOrZero || numeratorIsZero\
    \ || ", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        val numsLength = numsLength > densLength ? numsLength : densLength\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        var product = 1\n        while(i < numsLength && j < densLength) {\n\
    \            sum = nums(i) * dens(j)\n            product = product * sum\n  \
    \          i += 1\n            j += 1\n            k += 1\n        }\n       \
    \ product == nums(i) && product == dens(j)", "        val numer = x.split(\"/\"\
    ).map(_.toInt)\n        val denom = n.split(\"/\").map(_.toInt)\n        val numerators\
    \ = numer.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        val denominators\
    \ = denom.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        numerators.forall(x\
    \ => denominators.contains(x))", "        val xNum = x.split(\"/\").toInt\n  \
    \      val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n      \
    \  val nDeno = nNum.last\n        if(xDeno == 0) return false\n        if(nDeno\
    \ == 0) return false\n        if(xNum.last == nNum.last) return true\n       \
    \ if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last) return\
    \ false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last == nNum.last) return true\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last == nNum.last) return true\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        val numeratorIsWhole = numerator == numerator.toInt\n        val denominatorIsWhole\
    \ = denominator == denominator.toInt\n        if(numeratorIsWhole && denominatorIsWhole)\n\
    \            true\n        else\n            false", "        val x = x.split(\"\
    /\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n        val x0\
    \ = x(0)\n        val n0 = n(0)\n        val x1 = x(1)\n        val n1 = n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n  \
    \      val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0)\
    \ - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n       \
    \ val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) +\
    \ x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val\
    \ nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n\
    \        val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn =\
    \ x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n  \
    \      val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0)\
    \ + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n       \
    \ val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) -\
    \ x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n        val\
    \ nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n  \
    \      val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0)\
    \ - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n       \
    \ val xd = x(0) - x(1)\n        ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.sum == nNum.sum && xNum.product()\
    \ == nNum.product()){\n            return true\n        }\n        else{\n   \
    \         return false\n        }", "        val xNum = x.split(\"/\").toList\n\
    \        val nNum = n.split(\"/\").toList\n        val xNum1 = xNum(0)\n     \
    \   val nNum1 = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n\
    \        val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n\
    \        val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val numerator = x.reduce((a,\
    \ b) => a * b)\n        val denominator = n.reduce((a, b) => a * b)\n        numerator\
    \ == denominator", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == nNum.last) simplify(xNum.head + \"/\" + nNum.head,\
    \ n.head + \"/\" + n.head)\n        else simplify(xNum.head + \"/\" + nNum.head,\
    \ n.head + \"/\" + nDeno)", "        val xNum = x.split(\"/\").toInt\n       \
    \ val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum)\
    \ && xNum.product(xNum) == nNum.product(nNum)) {\n            return true\n  \
    \      }\n        return false", "        val xNum = x.split(\"/\")\n        val\
    \ nNum = n.split(\"/\")\n        if(xNum.length != nNum.length) false\n      \
    \  else if(xNum(0).toInt != nNum(0).toInt) false\n        else if(xNum(1).toInt\
    \ != nNum(1).toInt) false\n        else if(xNum(0).toInt == 0 && nNum(0).toInt\
    \ == 0) true\n        else if(xNum(0).toInt == 0 && nNum(0).toInt != 0) false\n\
    \        else if(xNum(1).toInt == 0 && nNum(1).toInt == 0) true\n        else\
    \ if(xNum(1).toInt == 0 && nNum(1).toInt != 0) false\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt", "        val numer = x.split(\"/\").map(_.toInt)\n      \
    \  val denom = n.split(\"/\").map(_.toInt)\n        val numerators = numer.zip(denom).map(x\
    \ => x._1 * x._2)\n        val denominators = denom.zip(numer).map(x => x._1 *\
    \ x._2)\n        numerators.forall(x => denominators.contains(x))", "        val\
    \ nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLen\
    \ = nums.length\n        val densLen = dens.length\n        if (numsLen != densLen)\
    \ {\n            return false\n        }\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n\
    \        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n\
    \        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0"]
stop_tokens:
- "\n    }\n"
