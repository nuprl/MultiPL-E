name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"\
  1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n \
  \   // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n  \
  \  def simplify(x : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val xNum = x.split(\"/\").map(_.toInt)\n        val nNum =\
    \ n.split(\"/\").map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        val xNum1 = xNum.init\n        val nNum1 = nNum.init\n\
    \        val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n\
    \        val nNum2 = nNum.tail\n        val xDeno2 = xDeno\n        val nDeno2\
    \ = nDeno\n        val xNum3 = xNum.init\n        val nNum3 = nNum.init\n    \
    \    val xDeno3 = xDeno\n        val nDeno3 = nDeno\n        val xNum4 = xNum.tail\n\
    \        val nNum4 = nNum.tail\n        val xDeno4 = xDeno\n        val nDeno4\
    \ = nDeno\n        val xNum5 = xNum.init\n        val nNum5 = nNum.init\n    \
    \    val xDeno5 = xDeno\n        val nDeno5 = nDeno\n        val xNum6 = xNum.tail\n\
    \        val nNum6 = nNum.tail\n        val xDeno6 = xDeno\n        val nDeno6\
    \ = nDeno\n        val xNum7 = xNum.init\n        val nNum7 = nNum.init\n    \
    \    val xDeno7 = xDeno\n        val nDeno7 = nDeno\n        val xNum8 = xNum.tail\n\
    \        val nNum8 = nNum.tail\n        val xDeno8 = xDeno\n        val nDeno8\
    \ = nDeno\n        val xNum9 = xNum.init\n        val nNum9 = nNum.init\n    \
    \    val xDeno9 = xDeno\n        val nDeno9 = nDeno\n        val xNum10 = xNum.tail\n\
    \        val nNum10 = nNum.tail\n        val xDeno10 = xDeno\n        val nDeno10\
    \ = nDeno\n        val xNum11 = xNum.init\n        val nNum11 = nNum.init\n  \
    \      val xDeno11 = xDeno\n        val nDeno11 = nDeno\n        val xNum12 =\
    \ xNum.tail\n        val nNum12 = nNum.tail\n        val ", "        val xNum\
    \ = x.split(\"/\").map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1\
    \ = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n        val xNum2\
    \ = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n        val xNum3\
    \ = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xNum4\
    \ = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n        val xNum5\
    \ = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n        val xNum6\
    \ = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xNum7\
    \ = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xNum8\
    \ = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n        val xNum9\
    \ = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n        val xNum10\
    \ = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n        val\
    \ xNum12 = xNum11.dropRight(1)\n        val nNum12 = nNum11.dropRight(1)\n   \
    \     val xNum13 = xNum12.dropRight(1)\n        val nNum13 = nNum12.dropRight(1)\n\
    \        val xNum14 = xNum13.dropRight(1)\n        val nNum14 = nNum13.dropRight(1)\n\
    \        val xNum15 = xNum14.dropRight(1)\n        val nNum15 = nNum14.dropRight(1)\n\
    \        val xNum16 = xNum15.dropRight(1)\n        val nNum16 = nNum15.dropRight(1)\n\
    \        val xNum17 = xNum16.dropRight(1)\n        val nNum17 = nNum16.dropRight(1)\n\
    \        val xNum18 = xNum17.dropRight(1)\n        val nNum18 = nNum17.dropRight(1)\n\
    \        val xNum19 = xNum18.dropRight(1)\n        val nNum19 = nNum18.dropRight(1)\n\
    \        val xNum20 = x", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        if (numerator == 0 && denominator == 0) {\n            return true\n\
    \        }\n        if (numerator == 0 && denominator != 0) {\n            return\
    \ false\n        }\n        if (numerator != 0 && denominator == 0) {\n      \
    \      return false\n        }\n        if (numerator == denominator && numerator\
    \ != 0) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 0) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 1) {\n            return true\n        }\n  \
    \      if (numerator == denominator && numerator == 2) {\n            return true\n\
    \        }\n        if (numerator == denominator && numerator == 3) {\n      \
    \      return true\n        }\n        if (numerator == denominator && numerator\
    \ == 4) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 5) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 6) {\n            return true\n        }\n  \
    \      if (numerator == denominator && numerator == 7) {\n            return true\n\
    \        }\n        if (numerator == denominator && numerator == 8) {\n      \
    \      return true\n        }\n        if (numerator == denominator && numerator\
    \ == 9) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 10) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 11) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == 12) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == 13) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == 14) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 15) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 16) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == 17) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == 18) {\n\
    \            return true\n        }\n        if (numerator == denominator && numerator\
    \ == 19) {\n            return true\n        }\n        if (numerator == denominator\
    \ && numerator == 20) {\n            return true\n        }\n        if (numerator\
    \ == denominator && numerator == 21) {\n            return true\n        }\n \
    \       if (numerator == denominator && numerator == 22) {\n            return\
    \ true\n        }\n        if (numerator == denominator && numerator == 23) {\n",
  "        val xNum = x.split(\"/\").map(_.toInt)\n        val nNum = n.split(\"/\"\
    ).map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return true\n        if(xNum.last == nNum.last) simplify(x.replaceFirst(\"\
    /\"+nNum.last, xNum.last+\"/\"+nDeno), n.replaceFirst(\"/\"+nNum.last, nNum.last+\"\
    /\"+nDeno))\n        else simplify(x.replaceFirst(\"/\"+nNum.last, xNum.last+\"\
    /\"+nDeno), n.replaceFirst(\"/\"+nNum.last, nNum.last+\"/\"+nDeno))", "      \
    \  val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        if(xNum.product(xNum) == nNum.product(nNum)) {\n            return true\n\
    \        }\n        else {\n            return false\n        }", "        val\
    \ fraction = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val numeratorIsWholeNumber = numerator\
    \ == numerator.toInt\n        val denominatorIsWholeNumber = denominator == denominator.toInt\n\
    \        val numeratorIsNegative = numerator < 0\n        val denominatorIsNegative\
    \ = denominator < 0\n        val numeratorIsPositive = numerator > 0\n       \
    \ val denominatorIsPositive = denominator > 0\n        val numeratorIsZero = numerator\
    \ == 0\n        val denominatorIsZero = denominator == 0\n        val numeratorIsNegativeOrZero\
    \ = numeratorIsNegative || numeratorIsZero\n        val denominatorIsNegativeOrZero\
    \ = denominatorIsNegative || denominatorIsZero\n        val numeratorIsPositiveOrZero\
    \ = numeratorIsPositive || numeratorIsZero\n        val denominatorIsPositiveOrZero\
    \ = denominatorIsPositive || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || denominatorIsNegativeOrZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || denominatorIsPositiveOrZero\n        val numeratorIsNegativeOrZeroOrPositive\
    \ = numeratorIsNegativeOrZero || numeratorIsPositiveOrZero\n        val numeratorIsPositiveOrZeroOrNegative\
    \ = numeratorIsPositiveOrZero || numeratorIsNegativeOrZero\n        val numeratorIsNegativeOrZeroOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsZero\n        val numeratorIsPositiveOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZero\n        val numeratorIsNegativeOrZeroOrPositiveOrZero\
    \ = numeratorIsNegativeOrZero || numeratorIsPositiveOrZeroOrZero\n        val\
    \ numeratorIsPositiveOrZeroOrNegativeOrZero = numeratorIsPositiveOrZero || numeratorIsNegativeOrZeroOrZero\n\
    \        val numeratorIsNegativeOrZeroOrZeroOrZero = numeratorIsNegativeOrZero\
    \ || numeratorIsZero || numeratorIsZero\n        val numeratorIsPositiveOrZeroOrZeroOrZero\
    \ = numeratorIsPositiveOrZero || numeratorIsZero || numeratorIsZero\n        val\
    \ numeratorIsNegativeOrZeroOrZeroOrPositive = numeratorIsNegativeOrZero || numeratorIsZero\
    \ || ", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))\n        else simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"\
    /\", \"\"))", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        val numsLength = numsLength > densLength ? numsLength : densLength\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        var product = 1\n        while(i < numsLength && j < densLength) {\n\
    \            sum = nums(i) * dens(j)\n            product = product * sum\n  \
    \          i += 1\n            j += 1\n            k += 1\n        }\n       \
    \ product == nums(i) && product == dens(j)", "        val numer = x.split(\"/\"\
    ).map(_.toInt)\n        val denom = n.split(\"/\").map(_.toInt)\n        val numerators\
    \ = numer.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        val denominators\
    \ = denom.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        numerators.forall(x\
    \ => denominators.contains(x))", "        val xNum = x.split(\"/\").toInt\n  \
    \      val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n      \
    \  val nDeno = nNum.last\n        if(xDeno == 0) return false\n        if(nDeno\
    \ == 0) return false\n        if(xNum.last == nNum.last) return true\n       \
    \ if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last) return\
    \ false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last == nNum.last) return true\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false\n        if(xNum.last > nNum.last) return false\n\
    \        if(xNum.last == nNum.last) return true\n        if(xNum.last < nNum.last)\
    \ return false\n        if(xNum.last > nNum.last) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return false\n\
    \        if(xNum.last > nNum.last) return false\n        if(xNum.last == nNum.last)\
    \ return true\n        if(xNum.last < nNum.last) return false\n        if(xNum.last\
    \ > nNum.last) return false\n        if(xNum.last == nNum.last) return true\n\
    \        if(xNum.last < nNum.last) return false\n        if(xNum.last > nNum.last)\
    \ return false\n        if(xNum.last == nNum.last) return true\n        if(xNum.last\
    \ < nNum.last) return false", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        val numeratorIsWhole = numerator == numerator.toInt\n        val denominatorIsWhole\
    \ = denominator == denominator.toInt\n        if(numeratorIsWhole && denominatorIsWhole)\n\
    \            true\n        else\n            false", "        val x = x.split(\"\
    /\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n        val x0\
    \ = x(0)\n        val n0 = n(0)\n        val x1 = x(1)\n        val n1 = n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n  \
    \      val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0)\
    \ - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n       \
    \ val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) +\
    \ x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val\
    \ nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n\
    \        val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn =\
    \ x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n  \
    \      val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0)\
    \ + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n       \
    \ val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) -\
    \ x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n        val\
    \ nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0) - n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xn = x(0) + x(1)\n  \
    \      val nn = n(0) + n(1)\n        val xd = x(0) - x(1)\n        val nd = n(0)\
    \ - n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n       \
    \ val xd = x(0) - x(1)\n        ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.sum == nNum.sum && xNum.product()\
    \ == nNum.product()){\n            return true\n        }\n        else{\n   \
    \         return false\n        }", "        val xNum = x.split(\"/\").toList\n\
    \        val nNum = n.split(\"/\").toList\n        val xNum1 = xNum(0)\n     \
    \   val nNum1 = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n\
    \        val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n\
    \        val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val numerator = x.reduce((a,\
    \ b) => a * b)\n        val denominator = n.reduce((a, b) => a * b)\n        numerator\
    \ == denominator", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == nNum.last) simplify(xNum.head + \"/\" + nNum.head,\
    \ n.head + \"/\" + n.head)\n        else simplify(xNum.head + \"/\" + nNum.head,\
    \ n.head + \"/\" + nDeno)", "        val xNum = x.split(\"/\").toInt\n       \
    \ val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum)\
    \ && xNum.product(xNum) == nNum.product(nNum)) {\n            return true\n  \
    \      }\n        return false", "        val xNum = x.split(\"/\")\n        val\
    \ nNum = n.split(\"/\")\n        if(xNum.length != nNum.length) false\n      \
    \  else if(xNum(0).toInt != nNum(0).toInt) false\n        else if(xNum(1).toInt\
    \ != nNum(1).toInt) false\n        else if(xNum(0).toInt == 0 && nNum(0).toInt\
    \ == 0) true\n        else if(xNum(0).toInt == 0 && nNum(0).toInt != 0) false\n\
    \        else if(xNum(1).toInt == 0 && nNum(1).toInt == 0) true\n        else\
    \ if(xNum(1).toInt == 0 && nNum(1).toInt != 0) false\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt) simplify(xNum(1), nNum(1))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(1).toInt\
    \ == nNum(1).toInt) simplify(xNum(0), nNum(0))\n        else if(xNum(0).toInt\
    \ == nNum(0).toInt", "        val numer = x.split(\"/\").map(_.toInt)\n      \
    \  val denom = n.split(\"/\").map(_.toInt)\n        val numerators = numer.zip(denom).map(x\
    \ => x._1 * x._2)\n        val denominators = denom.zip(numer).map(x => x._1 *\
    \ x._2)\n        numerators.forall(x => denominators.contains(x))", "        val\
    \ nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLen\
    \ = nums.length\n        val densLen = dens.length\n        if (numsLen != densLen)\
    \ {\n            return false\n        }\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n\
    \        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n\
    \        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n\
    \        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n\
    \        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n\
    \        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n\
    \        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n\
    \        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n\
    \        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n\
    \        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n\
    \        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n\
    \        var w = 0", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        (xNum.head * nNum.head == xDeno) && (nNum.head * xDeno == nDeno)", " \
    \       val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum2\
    \ = xNum.dropRight(1)\n        val nNum2 = nNum.dropRight(1)\n        val xDeno2\
    \ = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum2.dropRight(1)\n\
    \        val nNum3 = nNum2.dropRight(1)\n        val xDeno3 = xDeno2\n       \
    \ val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4\
    \ = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n        val nDeno4 = nDeno3\n\
    \        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n        val xNum6 =\
    \ xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xDeno6\
    \ = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xDeno7 = xDeno6\n       \
    \ val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n        val nNum8\
    \ = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n        val nDeno8 = nDeno7\n\
    \        val xNum9 = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n\
    \        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n        val xNum10\
    \ = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n        val xDeno10\
    \ = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xDeno11 = xDeno10\n   \
    \     val nDeno11 = nDeno10\n        val xNum12 = xNum11.dropRight(1)\n      \
    \  val ", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numerator = Integer.parseInt(numer)\n        val denominator\
    \ = Integer.parseInt(denom)\n        val wholeNumber = numerator / denominator\n\
    \        val isWholeNumber = wholeNumber.toString.toInt==wholeNumber\n       \
    \ val isNumerator = numerator.toString.toInt==numerator\n        val isDenominator\
    \ = denominator.toString.toInt==denominator\n        val isNumeratorAndDenominator\
    \ = numerator.toString.toInt==denominator && numerator.toString.toInt==numerator\n\
    \        val isNumeratorAndWholeNumber = numerator.toString.toInt==numerator &&\
    \ wholeNumber.toString.toInt==wholeNumber\n        val isDenominatorAndWholeNumber\
    \ = denominator.toString.toInt==denominator && wholeNumber.toString.toInt==wholeNumber\n\
    \        val isNumeratorAndDenominatorAndWholeNumber = numerator.toString.toInt==numerator\
    \ && denominator.toString.toInt==denominator && wholeNumber.toString.toInt==wholeNumber\n\
    \        val isNumeratorAndDenominatorAndWholeNumberAndIsWholeNumber = numerator.toString.toInt==numerator\
    \ && denominator.toString.toInt==denominator && wholeNumber.toString.toInt==wholeNumber\
    \ && isWholeNumber\n        val isNumeratorAndDenominatorAndWholeNumberAndIsWholeNumberAndIsNumerator\
    \ = numerator.toString.toInt==numerator && denominator.toString.toInt==denominator\
    \ && wholeNumber.toString.toInt==wholeNumber && isWholeNumber && isNumerator\n\
    \        val isNumeratorAndDenominatorAndWholeNumberAndIsWholeNumberAndIsNumeratorAndIsDenominator\
    \ = numerator.toString.toInt==numerator && denominator.toString.toInt==denominator\
    \ && wholeNumber.toString.toInt==wholeNumber && isWholeNumber && isNumerator &&\
    \ isDenominator\n        val isNumeratorAndDenominatorAndWholeNumberAndIsWholeNumberAndIsNumeratorAndIsDenominatorAndIsWholeNumber\
    \ = numerator.toString.toInt==numerator && denominator.toString.toInt==denominator\
    \ && wholeNumber.toString.toInt==wholeNumber && isWholeNumber && isNumerator &&\
    \ isDenominator && isWholeNumber\n        val isNumeratorAndDenominatorAndWhole",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        if(xNum.product(xNum.last).isInt && nNum.product(nNum.last).isInt) {\n\
    \            val xDeno = xNum.last\n            val nDeno = nNum.last\n      \
    \      if(xDeno == nDeno) {\n                if(xNum.last == 0) {\n          \
    \          true\n                } else {\n                    val xNum1 = xNum.init\n\
    \                    val nNum1 = nNum.init\n                    if(xNum1.product(xNum1.last).isInt\
    \ && nNum1.product(nNum1.last).isInt) {\n                        val xDeno1 =\
    \ xNum1.last\n                        val nDeno1 = nNum1.last\n              \
    \          if(xDeno1 == nDeno1) {\n                            if(xNum1.last ==\
    \ 0) {\n                                true\n                            } else\
    \ {\n                                val xNum2 = xNum1.init\n                \
    \                val nNum2 = nNum1.init\n                                if(xNum2.product(xNum2.last).isInt\
    \ && nNum2.product(nNum2.last).isInt) {\n                                    val\
    \ xDeno2 = xNum2.last\n                                    val nDeno2 = nNum2.last\n\
    \                                    if(xDeno2 == nDeno2) {\n                \
    \                        if(xNum2.last == 0) {\n                             \
    \               true\n                                        } else {\n     \
    \                                       val xNum3 = xNum2.init\n             \
    \                               val nNum3 = nNum2.init\n                     \
    \                       if(xNum3.product(xNum3.last).isInt && nNum3.product(nNum3.last).isInt)\
    \ {\n                                                val xDeno3 = xNum3.last\n\
    \                                                val nDeno3 = nNum3.last\n   \
    \                                             if(xDeno3 == nDeno3) {\n       \
    \                                             if(xNum3.last == 0) {\n        \
    \                                                true\n                      \
    \                              } else {\n                                    \
    \                    val xNum4 = xNum3.init\n                                \
    \                        val nNum4 = nNum3.init\n                            \
    \                            if(xNum4.product(xNum4.last).isInt && nNum4.product(nNum4.last).isInt)\
    \ {\n                                                            val xDeno4 =\
    \ xNum4.last\n                                                            val\
    \ nDeno4 = nNum4.last\n                                                      \
    \      if(xDeno4 == nDeno4) {\n                                              \
    \                  if(xNum4.last == 0) {\n                                   \
    \                                 true\n                                     \
    \                           } else {\n                                       \
    \                             val xNum5 = xNum4.init\n                       \
    \                                             val nNum5 = nNum4.init\n       \
    \                                                             if(xNum5.product(xNum5.last).isInt\
    \ && n", "        val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"\
    /\").map(_.toInt)\n        val numerator = x(0)*n(0)\n        val denominator\
    \ = x(0)*n(1)\n        if (numerator == denominator) {\n            true\n   \
    \     } else {\n            false\n        }", "        val xNum = x.split(\"\
    /\")\n        val nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n       \
    \ val nNum1 = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n\
    \        val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n\
    \        val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum28 = xNum27", "        val x = x.split(\"/\")\n  \
    \      val n = n.split(\"/\")\n        val numerator = x(0).toInt\n        val\
    \ denominator = n(0).toInt\n        if(numerator == 0 && denominator == 0){\n\
    \            return true\n        }\n        if(numerator == 0 && denominator\
    \ != 0){\n            return false\n        }\n        if(numerator != 0 && denominator\
    \ == 0){\n            return false\n        }\n        if(numerator != 0 && denominator\
    \ != 0){\n            val numerator1 = numerator * denominator\n            val\
    \ numerator2 = numerator * numerator\n            val denominator1 = denominator\
    \ * denominator\n            val denominator2 = denominator * numerator\n    \
    \        if(numerator1 == numerator2 && denominator1 == denominator2){\n     \
    \           return true\n            }\n        }\n        return false", "  \
    \      val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xDenoNum\
    \ = xNum.init\n        val nDenoNum = nNum.init\n        val xDenoDeno = xDeno\
    \ + nDeno\n        val xDenoDenoNum = xDenoNum + nDenoNum\n        val xDenoDenoDeno\
    \ = xDenoDeno + nDenoDeno\n        val xDenoDenoDenoNum = xDenoDenoDeno + nDenoDenoNum\n\
    \        val xDenoDenoDenoDeno = xDenoDenoDeno + nDenoDenoDeno\n        val xDenoDenoDenoDenoNum\
    \ = xDenoDenoDenoDeno + nDenoDenoDenoNum\n        val xDenoDenoDenoDenoDeno =\
    \ xDenoDenoDenoDeno + nDenoDenoDenoDeno\n        val xDenoDenoDenoDenoDenoNum\
    \ = xDenoDenoDenoDenoDeno + nDenoDenoDenoDenoNum\n        val xDenoDenoDenoDenoDenoDeno\
    \ = xDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDeno\n        val xDenoDenoDenoDenoDenoDenoNum\
    \ = xDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoNum\n        val xDenoDenoDenoDenoDenoDenoDeno\
    \ = xDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDeno\n        val xDenoDenoDenoDenoDenoDenoDenoNum\
    \ = xDenoDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDenoNum\n        val\
    \ xDenoDenoDenoDenoDenoDenoDenoDeno = xDenoDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDenoDeno\n\
    \        val xDenoDenoDenoDenoDenoDenoD", "        val nums = x.split(\"/\")\n\
    \        val dens = n.split(\"/\")\n        val num1 = nums(0).toInt\n       \
    \ val num2 = nums(1).toInt\n        val den1 = dens(0).toInt\n        val den2\
    \ = dens(1).toInt\n        if(den1 == 0 || den2 == 0) return false\n        if(num1\
    \ == 0 && num2 == 0) return true\n        if(num1 == 0 && den1 == 0) return false\n\
    \        if(num2 == 0 && den2 == 0) return false\n        if(num1 == num2 && den1\
    \ == den2) return true\n        if(num1 > num2 && den1 > den2) return true\n \
    \       if(num1 < num2 && den1 < den2) return true\n        if(num1 > num2 &&\
    \ den1 < den2) return false\n        if(num1 < num2 && den1 > den2) return false\n\
    \        if(num1 > num2 && den1 < den2) return false\n        if(num1 < num2 &&\
    \ den1 > den2) return false\n        if(num1 > num2 && den1 > den2) return false\n\
    \        if(num1 < num2 && den1 < den2) return false\n        if(num1 > num2 &&\
    \ den1 > den2) return false\n        if(num1 < num2 && den1 > den2) return false\n\
    \        if(num1 > num2 && den1 > den2) return false\n        if(num1 < num2 &&\
    \ den1 < den2) return false\n        if(num1 > num2 && den1 > den2) return false\n\
    \        if(num1 < num2 && den1 > den2) return false\n        if(num1 > num2 &&\
    \ den1 > den2) return false\n        if(num1 < num2 && den1 < den2) return false\n\
    \        if(num1 > num2 && den1 > den2) return false\n        if(num1 < num2 &&\
    \ den1 > den2) return false\n        if(num1 > num2 && den1 > den2) return false\n\
    \        if(num1 < num2 && den1 < den2) return false\n        if(num1 > num2 &&\
    \ den1 > den2) return false\n        if(num1 < num2 && den1 > den2) return false\n\
    \        if(num1 > num2 && den1 > den2) return false\n        if(num1 < num2 &&\
    \ den1 < den2) return false\n        if(num1 > num2 && den1 > den2) return false\n\
    \        if(num1 < num2 && den1 < den2) return false\n        if(num1 > num2 &&\
    \ den1 > den2) return false\n        if(num1 < num2 && den1 < den2) return false\n\
    \        if(num1 > num2 && den1 > den2) return false\n        if(num1 < num2 &&\
    \ den1 < den2) return false\n        if(num1 > num2 && den1 > den2) return false\n\
    \        if(num1 < num2 && den1 < den2) return false\n        if(num1 > num2 &&\
    \ den1 > den2) return false\n        if(num1 < num2 && den1 < den2) return ",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsSet = nums.toSet\n        val densSet = dens.toSet\n        if(numsSet.size\
    \ == densSet.size && numsSet.size == 1 && densSet.size == 1){\n            val\
    \ numsSet1 = nums.toSet\n            val densSet1 = dens.toSet\n            if(numsSet1.contains(densSet1.head)\
    \ && densSet1.contains(numsSet1.head)){\n                true\n            }else{\n\
    \                false\n            }\n        }else{\n            false\n   \
    \     }", "        val x = x.split(\"/\")\n        val n = n.split(\"/\")\n  \
    \      val numerator = x.head.toInt\n        val denominator = n.head.toInt\n\
    \        if(numerator == 0 && denominator == 0){\n            return false\n \
    \       }\n        if(numerator == 0 && denominator != 0){\n            return\
    \ true\n        }\n        if(numerator != 0 && denominator == 0){\n         \
    \   return false\n        }\n        if(numerator != 0 && denominator != 0){\n\
    \            val numerator1 = numerator\n            val denominator1 = denominator\n\
    \            val numerator2 = numerator1 - denominator1\n            val denominator2\
    \ = denominator1 - numerator1\n            val numerator3 = numerator2 - denominator2\n\
    \            val denominator3 = denominator2 - numerator2\n            val numerator4\
    \ = numerator3 - denominator3\n            val denominator4 = denominator3 - numerator3\n\
    \            val numerator5 = numerator4 - denominator4\n            val denominator5\
    \ = denominator4 - numerator4\n            val numerator6 = numerator5 - denominator5\n\
    \            val denominator6 = denominator5 - numerator5\n            val numerator7\
    \ = numerator6 - denominator6\n            val denominator7 = denominator6 - numerator6\n\
    \            val numerator8 = numerator7 - denominator7\n            val denominator8\
    \ = denominator7 - numerator7\n            val numerator9 = numerator8 - denominator8\n\
    \            val denominator9 = denominator8 - numerator8\n            val numerator10\
    \ = numerator9 - denominator9\n            val denominator10 = denominator9 -\
    \ numerator9\n            val numerator11 = numerator10 - denominator10\n    \
    \        val denominator11 = denominator10 - numerator10\n            val numerator12\
    \ = numerator11 - denominator11\n            val denominator12 = denominator11\
    \ - numerator11\n            val numerator13 = numerator12 - denominator12\n \
    \           val denominator13 = denominator12 - numerator12\n            val numerator14\
    \ = numerator13 - denominator13\n            val denominator14 = denominator13\
    \ - numerator13\n            val numerator15 = numerator14 - denominator14\n \
    \           val denominator15 = denominator14 - numerator14\n            val numerator16\
    \ = numerator15 - denominator15\n            val denominator16 = denominator15\
    \ - numerator15\n            val numerator17 = numerator16 - denominator16\n \
    \           val denominator17 = denominator16 - numerator16\n            val numerator18\
    \ = numerator17 - denominator17\n            val denominator18 = denominator17\
    \ - numerator17\n            val numerator19 = numerator18 - denominator18\n \
    \           ", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numInts = numer.toInt\n        val denomInts = denom.toInt\n\
    \        val numIntCheck = numInts.toDouble\n        val denomIntCheck = denomInts.toDouble\n\
    \        val numIntCheck2 = numIntCheck * numIntCheck\n        val denomIntCheck2\
    \ = denomIntCheck * denomIntCheck\n        val numIntCheck3 = numIntCheck2 * numIntCheck\n\
    \        val denomIntCheck3 = denomIntCheck2 * denomIntCheck\n        val numIntCheck4\
    \ = numIntCheck3 * numIntCheck\n        val denomIntCheck4 = denomIntCheck3 *\
    \ denomIntCheck\n        val numIntCheck5 = numIntCheck4 * numIntCheck\n     \
    \   val denomIntCheck5 = denomIntCheck4 * denomIntCheck\n        val numIntCheck6\
    \ = numIntCheck5 * numIntCheck\n        val denomIntCheck6 = denomIntCheck5 *\
    \ denomIntCheck\n        val numIntCheck7 = numIntCheck6 * numIntCheck\n     \
    \   val denomIntCheck7 = denomIntCheck6 * denomIntCheck\n        val numIntCheck8\
    \ = numIntCheck7 * numIntCheck\n        val denomIntCheck8 = denomIntCheck7 *\
    \ denomIntCheck\n        val numIntCheck9 = numIntCheck8 * numIntCheck\n     \
    \   val denomIntCheck9 = denomIntCheck8 * denomIntCheck\n        val numIntCheck10\
    \ = numIntCheck9 * numIntCheck\n        val denomIntCheck10 = denomIntCheck9 *\
    \ denomIntCheck\n        val numIntCheck11 = numIntCheck10 * numIntCheck\n   \
    \     val denomIntCheck11 = denomIntCheck10 * denomIntCheck\n        val numIntCheck12\
    \ = numIntCheck11 * numIntCheck\n        val denomIntCheck12 = denomIntCheck11\
    \ * denomIntCheck\n        val numIntCheck13 = numIntCheck12 * numIntCheck\n \
    \       val denomIntCheck13 = denomIntCheck12 * denomIntCheck\n        val numIntCheck14\
    \ = numIntCheck13 * numIntCheck\n        val denomIntCheck14 = denomIntCheck13\
    \ * denomIntCheck\n        val numIntCheck15 = numIntCheck14 * numIntCheck\n \
    \       val denomIntCheck15 = denomIntCheck14 * denomIntCheck\n        val numIntCheck16\
    \ = numIntCheck15 * numIntCheck\n        val denomIntCheck16 = denomIntCheck15\
    \ * denomIntCheck\n        val numIntCheck17 = num", "        val xNum = x.split(\"\
    /\").map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n\
    \        val nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.takeRight(1)\n\
    \        val nNum2 = nNum1.takeRight(1)\n        val xNum3 = xNum2.takeRight(1)\n\
    \        val nNum3 = nNum2.takeRight(1)\n        val xNum4 = xNum3.takeRight(1)\n\
    \        val nNum4 = nNum3.takeRight(1)\n        val xNum5 = xNum4.takeRight(1)\n\
    \        val nNum5 = nNum4.takeRight(1)\n        val xNum6 = xNum5.takeRight(1)\n\
    \        val nNum6 = nNum5.takeRight(1)\n        val xNum7 = xNum6.takeRight(1)\n\
    \        val nNum7 = nNum6.takeRight(1)\n        val xNum8 = xNum7.takeRight(1)\n\
    \        val nNum8 = nNum7.takeRight(1)\n        val xNum9 = xNum8.takeRight(1)\n\
    \        val nNum9 = nNum8.takeRight(1)\n        val xNum10 = xNum9.takeRight(1)\n\
    \        val nNum10 = nNum9.takeRight(1)\n        val xNum11 = xNum10.takeRight(1)\n\
    \        val nNum11 = nNum10.takeRight(1)\n        val xNum12 = xNum11.takeRight(1)\n\
    \        val nNum12 = nNum11.takeRight(1)\n        val xNum13 = xNum12.takeRight(1)\n\
    \        val nNum13 = nNum12.takeRight(1)\n        val xNum14 = xNum13.takeRight(1)\n\
    \        val nNum14 = nNum13.takeRight(1)\n        val xNum15 = xNum14.takeRight(1)\n\
    \        val nNum15 = nNum14.takeRight(1)\n        val xNum16 = xNum15.takeRight(1)\n\
    \        val nNum16 = nNum15.takeRight(1)\n        val xNum17 = xNum16.takeRight(1)\n\
    \        val nNum17 = nNum16.takeRight(1)\n        val xNum18 = xNum17.takeRight(1)\n\
    \        val nNum18 = nNum17.takeRight(1)\n        val xNum19 = xNum18.takeRight(1)\n\
    \        val nNum19 = nNum18.takeRight(1)\n        val xNum20 = x", "        val\
    \ numerator = x.split(\"/\")(0)\n        val denominator = x.split(\"/\")(1)\n\
    \        val numeratorInt = numerator.toInt\n        val denominatorInt = denominator.toInt\n\
    \        val numeratorFraction = numeratorInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionInt = numeratorFraction.toInt\n        val numeratorFractionFraction\
    \ = numeratorFractionInt.toDouble/denominatorInt.toDouble\n        val numeratorFractionFractionInt\
    \ = numeratorFractionFraction.toInt\n        val numeratorFractionFractionFraction\
    \ = numeratorFractionFractionInt.toDouble/denominatorInt.toDouble\n        val\
    \ numeratorFractionFractionFractionInt = numeratorFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionFractionFractionFractionInt = numeratorFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFraction = numeratorFractionFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFraction = numeratorFractionFractionFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt.toDouble/denominatorInt.toDouble\n\
    \        val numeratorFraction", "        val xNum = x.split(\"/\").toInt\n  \
    \      val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n      \
    \  val nDeno = nNum.last\n        val xDenoIsZero = xDeno == 0 // if denominator\
    \ is zero, return false\n        val nDenoIsZero = nDeno == 0 // if denominator\
    \ is zero, return false\n        val xDenoIsPositive = xDenoIsZero || xDeno ==\
    \ xNum.last // if denominator is zero, return false\n        val nDenoIsPositive\
    \ = nDenoIsZero || nDeno == nNum.last // if denominator is zero, return false\n\
    \        val xDenoIsNegative = xDenoIsZero || xDeno == -xNum.last // if denominator\
    \ is zero, return false\n        val nDenoIsNegative = nDenoIsZero || nDeno ==\
    \ -nNum.last // if denominator is zero, return false\n        val xDenoIsEven\
    \ = xDenoIsPositive && xDenoIsNegative // if denominator is even and positive,\
    \ return false\n        val nDenoIsEven = nDenoIsPositive && nDenoIsNegative //\
    \ if denominator is even and positive, return false\n        val xDenoIsOdd =\
    \ xDenoIsPositive && !xDenoIsNegative // if denominator is odd and positive, return\
    \ false\n        val nDenoIsOdd = nDenoIsPositive && !nDenoIsNegative // if denominator\
    \ is odd and positive, return false\n        val xDenoIsDivisibleByDeno = xDenoIsEven\
    \ || xDenoIsOdd // if denominator is even or odd, return false\n        val nDenoIsDivisibleByDeno\
    \ = nDenoIsEven || nDenoIsOdd // if denominator is even or odd, return false\n\
    \        val xDenoIsDivisibleByDenoAndNegative = xDenoIsDivisibleByDeno\n    \
    \        && (xDenoIsNegative || nDenoIsNegative) // if denominator is divisible\
    \ by denominator and negative, return false\n        val nDenoIsDivisibleByDenoAndNegative\
    \ = nDenoIsDivisibleByDeno\n            && (nDenoIsNegative || xDenoIsNegative)\
    \ // if denominator is divisible by denominator ", "        val fraction = x.split(\"\
    /\").map(_.toInt)\n        val numerator = fraction(0)\n        val denominator\
    \ = fraction(1)\n        val numeratorIsWhole = numerator == numerator.toInt\n\
    \        val denominatorIsWhole = denominator == denominator.toInt\n        val\
    \ numeratorIsPositive = numerator > 0\n        val denominatorIsPositive = denominator\
    \ > 0\n        val numeratorIsNegative = numerator < 0\n        val denominatorIsNegative\
    \ = denominator < 0\n        val numeratorIsZero = numerator == 0\n        val\
    \ denominatorIsZero = denominator == 0\n        val numeratorIsNegativeZero =\
    \ numerator < 0 && numerator == 0\n        val denominatorIsNegativeZero = denominator\
    \ < 0 && denominator == 0\n        val numeratorIsPositiveZero = numerator > 0\
    \ && numerator == 0\n        val denominatorIsPositiveZero = denominator > 0 &&\
    \ denominator == 0\n        val numeratorIsNegativeZero = numerator < 0 && numerator\
    \ == 0\n        val denominatorIsNegativeZero = denominator < 0 && denominator\
    \ == 0\n        val numeratorIsPositiveZero = numerator > 0 && numerator == 0\n\
    \        val denominatorIsPositiveZero = denominator > 0 && denominator == 0\n\
    \        val numeratorIsNegativeZero = numerator < 0 && numerator == 0\n     \
    \   val denominatorIsNegativeZero = denominator < 0 && denominator == 0\n    \
    \    val numeratorIsPositiveZero = numerator > 0 && numerator == 0\n        val\
    \ denominatorIsPositiveZero = denominator > 0 && denominator == 0\n        val\
    \ numeratorIsNegativeZero = numerator < 0 && numerator == 0\n        val denominatorIsNegativeZero\
    \ = denominator < 0 && denominator == 0\n        val numeratorIsPositiveZero =\
    \ numerator > 0 && numerator == 0\n        val denominatorIsPositiveZero = denominator\
    \ > 0 && denominator == 0\n        val numeratorIsNegativeZero = numerator < 0\
    \ && numerator == 0\n        val denominatorIsNegativeZero = denominator < 0 &&\
    \ denominator == 0\n        val numeratorIsPositiveZero = numerator > 0 && numerator\
    \ == 0\n        val denominatorIsPositiveZero = denominator > 0 && denominator\
    \ == 0\n        val numeratorIsNegativeZero = numerator < 0 && numerator == 0\n\
    \        val denominatorIsNegativeZero = denominator < 0 && denominator == 0\n\
    \        val numeratorIsPositiveZero = numerator > 0 && numerator == 0\n     \
    \   val denominatorIsPositiveZero = ", "        val nums = x.split(\"/\").map(_.toInt)\n\
    \        val dens = n.split(\"/\").map(_.toInt)\n        val numsSet = nums.toSet\n\
    \        val densSet = dens.toSet\n        if(numsSet.size == densSet.size &&\
    \ densSet.size == 1){\n            if(numsSet.contains(densSet.head)){\n     \
    \           return true\n            }\n        }\n        return false", "  \
    \      val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        val\
    \ numsSum = nums.sum.toInt\n        val densSum = dens.sum.toInt\n        val\
    \ numsSumFraction = numsSum / densSum\n        val numsSumFractionFraction = numsSumFraction\
    \ * densSum\n        val numsSumFractionFractionFraction = numsSumFractionFraction\
    \ / densSum\n        val numsSumFractionFractionFractionFraction = numsSumFractionFractionFraction\
    \ * densSum\n        val numsSumFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFraction\
    \ / densSum\n        val numsSumFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFraction * densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFraction / densSum\n      \
    \  val numsSumFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFraction * densSum\n      \
    \  val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFraction / densSum\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFraction *\
    \ densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ / densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * densSum\n        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ * densSum\n        val num", "        val xNum = x.split(\"/\").toInt\n    \
    \    val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        val xDenoIsZero = xDeno == 0\n        val nDenoIsZero\
    \ = nDeno == 0\n        if(xDenoIsZero && nDenoIsZero){\n            return true\n\
    \        }\n        if(xDenoIsZero || nDenoIsZero){\n            return false\n\
    \        }\n        if(xNum.last == nNum.last){\n            return simplify(x\
    \ + \"/\" + n, x + \"/\" + n)\n        }\n        if(xNum.last < nNum.last){\n\
    \            return simplify(x + \"/\" + n, x + \"/\" + n)\n        }\n      \
    \  if(xNum.last > nNum.last){\n            return simplify(x + \"/\" + n, x +\
    \ \"/\" + n)\n        }", "        val numer = x.split(\"/\")(0)\n        val\
    \ denom = x.split(\"/\")(1)\n        val numInt = (numer).toInt\n        val denomInt\
    \ = (denom).toInt\n        if (numInt == 0 || denomInt == 0) {\n            return\
    \ false\n        }\n        if (numInt == denomInt) {\n            return true\n\
    \        }\n        if (numInt == denomInt + 1) {\n            return simplify(x.replaceFirst(denom,\
    \ numer + \"/\" + denomInt), n)\n        }\n        if (numInt == denomInt - 1)\
    \ {\n            return simplify(x.replaceFirst(denom, numer + \"/\" + denomInt\
    \ - 1), n)\n        }\n        if (numInt > denomInt) {\n            return simplify(x.replaceFirst(denom,\
    \ numer + \"/\" + (denomInt - 1)), n)\n        }\n        if (numInt < denomInt)\
    \ {\n            return simplify(x.replaceFirst(denom, numer + \"/\" + (denomInt\
    \ + 1)), n)\n        }", "        val xNum = x.split(\"/\")\n        val nNum\
    \ = n.split(\"/\")\n        val xNumLen = xNum.length\n        val nNumLen = nNum.length\n\
    \        val xNumInt = (xNum(0).toInt, xNum(1).toInt)\n        val nNumInt = (nNum(0).toInt,\
    \ nNum(1).toInt)\n        val xNumDeno = xNumLen == nNumLen ? xNumInt.productDiv(nNumInt)\
    \ : xNumInt.productDiv(nNumInt.product)\n        val nNumDeno = nNumInt.productDiv(xNumInt)\n\
    \        xNumDeno == nNumDeno", "        val numer = x.split(\"/\")(0)\n     \
    \   val denom = x.split(\"/\")(1)\n        val numerator = numer\n        val\
    \ denominator = denom\n        val numeratorInt = numerator.toInt\n        val\
    \ denominatorInt = denominator.toInt\n        val numeratorInt = numeratorInt\
    \ * denominatorInt\n        val numeratorIntString = numeratorInt.toString\n \
    \       val denominatorIntString = denominatorInt.toString\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorIntString.length\n        val numeratorIntStringLength\
    \ = numeratorIntString.length\n        val denominatorIntStringLength = denominatorIntString.length\n\
    \        val numeratorIntStringLength = numeratorIntString.length\n        val\
    \ denominatorIntStringLength = denominatorInt", "        val numer = x.split(\"\
    /\")(0)\n        val denom = x.split(\"/\")(1)\n        val numerator = Integer.parseInt(numer)\n\
    \        val denominator = Integer.parseInt(denom)\n        val numOfWholes =\
    \ numerator / denominator\n        val numOfFractions = numerator % denominator\n\
    \        val numOfFractionsWholes = numOfFractions / denominator\n        val\
    \ numOfFractionsWholeAndWholes = numOfFractionsWholes + numOfWholes\n        val\
    \ numOfFractionsWholeAndWholeAndWholes = numOfFractionsWholeAndWholes + numOfFractionsWholes\n\
    \        val numOfFractionsWholeAndWholeAndWholeAndWholes = numOfFractionsWholeAndWholeAndWholes\
    \ + numOfFractionsWholeAndWholes\n        val numOfFractionsWholeAndWholeAndWholeAndWholeAndWholes\
    \ = numOfFractionsWholeAndWholeAndWholeAndWholes + numOfFractionsWholeAndWholeAndWholeAndWholes\n\
    \        val numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholes = numOfFractionsWholeAndWholeAndWholeAndWholeAndWholes\
    \ + numOfFractionsWholeAndWholeAndWholeAndWholeAndWholes\n        val numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes\
    \ = numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes + numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes\n\
    \        val numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes\
    \ = numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes\
    \ + numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes\n\
    \        val numOfFractionsWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholeAndWholes\
    \ = numOfFractionsWholeAndWholeAndWholeAnd", "        val numer = x.split(\"/\"\
    )\n        val denom = n.split(\"/\")\n        val num = (numer(0).toInt, denom(0).toInt)\n\
    \        val den = (denom(1).toInt, denom(0).toInt)\n        val num2 = numer.map(x\
    \ => x.toInt)\n        val den2 = den.map(x => x.toInt)\n        val num3 = num2.zipWithIndex.map(x\
    \ => x._1 * den2(x._2))\n        val den3 = den2.zipWithIndex.map(x => den2(x._1)\
    \ * x._2)\n        val num4 = num3.zipWithIndex.map(x => x._1 + x._2)\n      \
    \  val den4 = den3.zipWithIndex.map(x => x._1 + x._2)\n        val num5 = num4.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val den5 = den4.zipWithIndex.map(x => x._1 + x._2)\n\
    \        val num6 = num5.zipWithIndex.map(x => x._1 + x._2)\n        val den6\
    \ = den5.zipWithIndex.map(x => x._1 + x._2)\n        val num7 = num6.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val den7 = den6.zipWithIndex.map(x => x._1 + x._2)\n\
    \        val num8 = num7.zipWithIndex.map(x => x._1 + x._2)\n        val den8\
    \ = den7.zipWithIndex.map(x => x._1 + x._2)\n        val num9 = num8.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val den9 = den8.zipWithIndex.map(x => x._1 + x._2)\n\
    \        val num10 = num9.zipWithIndex.map(x => x._1 + x._2)\n        val den10\
    \ = den9.zipWithIndex.map(x => x._1 + x._2)\n        val num11 = num10.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val den11 = den10.zipWithIndex.map(x => x._1 + x._2)\n\
    \        val num12 = num11.zipWithIndex.map(x => x._1 + x._2)\n        val den12\
    \ = den11.zipWithIndex.map(x => x._1 + x._2)\n        val num13 = num12.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val den13 = den12.zipWithIndex.map(x => x.", "    \
    \    val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno\
    \ == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n        else\
    \ if(xNum.last == 0) simplify(x.replaceFirst(\"/\", \"\"), n.replaceFirst(\"/\"\
    , \"\"))\n        else if(nNum.last == 0) simplify(x.replaceFirst(\"/\", \"\"\
    ), n.replaceFirst(\"/\", \"\"))\n        else if(xNum.last == nDeno) simplify(x.replaceFirst(\"\
    /\", \"\"), n.replaceFirst(\"/\", \"\"))\n        else if(xNum.last < nDeno) simplify(x.replaceFirst(\"\
    /\", \"\"), n.replaceFirst(\"/\", \"\"))\n        else simplify(x.replaceFirst(\"\
    /\", \"\"), n.replaceFirst(\"/\", \"\"))", "        val nums = x.split(\"/\")\n\
    \        val dens = n.split(\"/\")\n        val numsLength = nums.length\n   \
    \     val densLength = dens.length\n        if (numsLength != densLength) {\n\
    \            return false\n        }\n        var i = 0\n        var j = 0\n \
    \       var k = 0\n        var sum = 0\n        var product = 1\n        while\
    \ (i < numsLength) {\n            sum += nums(i).toInt\n            i += 1\n \
    \       }\n        while (j < densLength) {\n            product *= dens(j).toInt\n\
    \            j += 1\n        }\n        val result = sum / product\n        if\
    \ (result == 0) {\n            return true\n        }\n        else {\n      \
    \      return false\n        }", "        val nums = x.split(\"/\")\n        val\
    \ dens = n.split(\"/\")\n        if (nums.length != dens.length)\n           \
    \ return false\n        val numsSet = nums.toSet\n        val densSet = dens.toSet\n\
    \        if (densSet.size == 0)\n            return true\n        if (densSet.size\
    \ == 1 && numsSet.size == 1)\n            return true\n        if (densSet.size\
    \ == 1 && numsSet.size == 2)\n            return true\n        if (densSet.size\
    \ == 2 && numsSet.size == 1)\n            return true\n        if (densSet.size\
    \ == 2 && numsSet.size == 2)\n            return true\n        if (densSet.size\
    \ == 2 && numsSet.size == 3)\n            return true\n        if (densSet.size\
    \ == 3 && numsSet.size == 2)\n            return true\n        if (densSet.size\
    \ == 3 && numsSet.size == 3)\n            return true\n        if (densSet.size\
    \ == 3 && numsSet.size == 4)\n            return true\n        if (densSet.size\
    \ == 4 && numsSet.size == 3)\n            return true\n        if (densSet.size\
    \ == 4 && numsSet.size == 4)\n            return true\n        if (densSet.size\
    \ == 4 && numsSet.size == 5)\n            return true\n        if (densSet.size\
    \ == 5 && numsSet.size == 4)\n            return true\n        if (densSet.size\
    \ == 5 && numsSet.size == 5)\n            return true\n        if (densSet.size\
    \ == 5 && numsSet.size == 6)\n            return true\n        if (densSet.size\
    \ == 6 && numsSet.size == 5)\n            return true\n        if (densSet.size\
    \ == 6 && numsSet.size == 6)\n            return true\n        if (densSet.size\
    \ == 6 && numsSet.size == 7)\n            return true\n        if (densSet.size\
    \ == 7 && numsSet.size == 6)\n            return true\n        if (densSet.size\
    \ == 7 && numsSet.size == 7)\n            return true\n        if (densSet.size\
    \ == 7 && numsSet.size == 8)\n            return true\n        if (densSet.size\
    \ == 8 && numsSet.size == 7)\n            return true\n        if (densSet.size\
    \ == 8 && numsSet.size == 8)\n            return true\n        if (densSet.size\
    \ == 8 && numsSet.size == 9)\n            return true\n        if (densSet.size\
    \ == 9 && numsSet.size == 8)\n            return true\n        if (densSet.size\
    \ == 9 && numsSet.size == 9)\n            return true\n        if (densSet.size\
    \ == 9 && numsSet.size == 10)\n            return true\n        if (densSet.size\
    \ == 10 && numsSet.size == 9)\n            return true\n        if (densSet.size\
    \ == 10 && numsSet.size == 10)\n            return true\n        if (densSet.size\
    \ == 10 && numsSet.size == 11)", "        val numer = x.split(\"/\")(0)\n    \
    \    val denom = x.split(\"/\")(1)\n        val numerator = numer\n        val\
    \ denominator = denom\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsFloat = numerator.asInstanceOf[Float]\n\
    \        val denominatorAsFloat = denominator.asInstanceOf[Float]\n        val\
    \ numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n        val denominatorAsBigDecimal\
    \ = denominator.asInstanceOf[BigDecimal]\n        val numeratorAsBigInt = numerator.asInstanceOf[BigInt]\n\
    \        val denominatorAsBigInt = denominator.asInstanceOf[BigInt]\n        val\
    \ numeratorAsBoolean = numerator.asInstanceOf[Boolean]\n        val denominatorAsBoolean\
    \ = denominator.asInstanceOf[Boolean]\n        val numeratorAsString = numerator.asInstanceOf[String]\n\
    \        val denominatorAsString = denominator.asInstanceOf[String]\n        val\
    \ numeratorAsInt = numerator.asInstanceOf[Int]\n        val denominatorAsInt =\
    \ denominator.asInstanceOf[Int]\n        val numeratorAsDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorAsDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsFloat = numerator.asInstanceOf[Float]\n\
    \        val denominatorAsFloat = denominator.asInstanceOf[Float]\n        val\
    \ numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n        val denominatorAsBigDecimal\
    \ = denominator.asInstanceOf[BigDecimal]\n        val numeratorAsBigInt = numerator.asInstanceOf[BigInt]\n\
    \        val denominatorAsBigInt = denominator.asInstanceOf[BigInt]\n        val\
    \ numeratorAsBoolean = numerator.asInstanceOf[Boolean]\n        val denominatorAsBoolean\
    \ = denominator.asInstanceOf[Boolean]\n        val numeratorAs", "        val\
    \ xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n     \
    \   val xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno ==\
    \ 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n        else if(xNum.last\
    \ == nNum.last) simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))\n\
    \        else simplify(x.replaceAll(\"/\", \"\"), n.replaceAll(\"/\", \"\"))",
  "        val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n \
    \       val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n  \
    \      val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n   \
    \     val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n    \
    \    val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n     \
    \   val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n      \
    \  val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n       \
    \ val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n        val\
    \ xx = x.head\n        val nn = n.head\n        val xn = x.tail\n        val nn\
    \ = n.tail\n        val xx = x.head\n        val nn = n.head\n        val xn =\
    \ x.tail\n        val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n\
    \        val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n \
    \       val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n  \
    \      val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n   \
    \     val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n    \
    \    val xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n     \
    \   val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n      \
    \  val xx = x.head\n        val nn = n.head\n        val xn = x.tail\n       \
    \ val nn = n.tail\n        val xx = x.head\n        val nn = n.head\n        val\
    \ xn = x.tail\n        val nn = n.tail\n        val xx = x.head\n        val nn\
    \ = n.head\n        val xn = x.tail\n        val nn = n.tail\n        val xx =\
    \ x.head\n        val nn = n.head\n        val xn = x.tail\n        val nn = n.tail\n\
    \        val xx = x.head\n        val n", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1 =\
    \ nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val numer = x.split(\"/\")(0)\n\
    \        val denom = x.split(\"/\")(1)\n        val numInts = numer.toInt\n  \
    \      val denomInts = denom.toInt\n        if (numInts == 0 && denomInts == 0)\
    \ true\n        else if (numInts == 0 && denomInts > 0) false\n        else if\
    \ (numInts > 0 && denomInts == 0) false\n        else if (numInts > 0 && denomInts\
    \ > 0) true\n        else if (numInts < 0 && denomInts > 0) false\n        else\
    \ if (numInts < 0 && denomInts == 0) false\n        else if (numInts < 0 && denomInts\
    \ < 0) true\n        else if (numInts == 0 && denomInts < 0) true\n        else\
    \ if (numInts > 0 && denomInts < 0) false\n        else if (numInts > 0 && denomInts\
    \ == 0) true\n        else if (numInts == 0 && denomInts > 0) false\n        else\
    \ if (numInts < 0 && denomInts < 0) false\n        else if (numInts < 0 && denomInts\
    \ == 0) true\n        else if (numInts < 0 && denomInts > 0) false\n        else\
    \ false", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum)) {\n         \
    \   return true\n        }\n        else {\n            return false\n       \
    \ }", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     val xNum2 = xNum.init\n        val nNum2 = nNum.init\n        val xDeno2\
    \ = xDeno * xDeno\n        val nDeno2 = nDeno * nDeno\n        val xNum3 = xNum2.init\n\
    \        val nNum3 = nNum2.init\n        val xDeno3 = xDeno2 * xDeno2\n      \
    \  val nDeno3 = nDeno2 * nDeno2\n        val xNum4 = xNum3.init\n        val nNum4\
    \ = nNum3.init\n        val xDeno4 = xDeno3 * xDeno3\n        val nDeno4 = nDeno3\
    \ * nDeno3\n        val xNum5 = xNum4.init\n        val nNum5 = nNum4.init\n \
    \       val xDeno5 = xDeno4 * xDeno4\n        val nDeno5 = nDeno4 * nDeno4\n \
    \       val xNum6 = xNum5.init\n        val nNum6 = nNum5.init\n        val xDeno6\
    \ = xDeno5 * xDeno5\n        val nDeno6 = nDeno5 * nDeno5\n        val xNum7 =\
    \ xNum6.init\n        val nNum7 = nNum6.init\n        val xDeno7 = xDeno6 * xDeno6\n\
    \        val nDeno7 = nDeno6 * nDeno6\n        val xNum8 = xNum7.init\n      \
    \  val nNum8 = nNum7.init\n        val xDeno8 = xDeno7 * xDeno7\n        val nDeno8\
    \ = nDeno7 * nDeno7\n        val xNum9 = xNum8.init\n        val nNum9 = nNum8.init\n\
    \        val xDeno9 = xDeno8 * xDeno8\n        val nDeno9 = nDeno8 * nDeno8\n\
    \        val xNum10 = xNum9.init\n        val nNum10 = nNum9.init\n        val\
    \ xDeno10 = xDeno9 * xDeno9\n        val nDeno10 = nDeno9 * nDeno9\n        val\
    \ xNum11 = xNum10.init\n        val nNum11 = nNum10.init\n", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno\
    \ == 0) false\n        else if(xDeno == nDeno) true\n        else if(xNum.last\
    \ == nNum.last) simplify(x.substring(0, x.lastIndexOf(\"/\")), n)\n        else\
    \ simplify(x.substring(0, x.lastIndexOf(\"/\")), n.substring(0, n.lastIndexOf(\"\
    /\")))", "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\"\
    )\n        val numsLen = nums.length\n        val densLen = dens.length\n    \
    \    if (numsLen != densLen)\n            return false\n        if (numsLen <\
    \ 2)\n            return true\n        val numsSet = nums.toSet\n        val densSet\
    \ = dens.toSet\n        val numsLenSet = numsSet.size\n        val densLenSet\
    \ = densSet.size\n        if (numsLenSet != densLenSet)\n            return false\n\
    \        if (numsLenSet < 2)\n            return true\n        if (numsSet.subsetOf(densSet))\n\
    \            return true\n        if (densSet.subsetOf(numsSet))\n           \
    \ return true\n        if (numsSet.subsetOf(densSet) && densSet.subsetOf(numsSet))\n\
    \            return true\n        if (densSet.subsetOf(numsSet) && numsSet.subsetOf(densSet))\n\
    \            return true\n        if (numsSet.subsetOf(densSet) && densSet.subsetOf(numsSet)\
    \ && densSet.subsetOf(densSet))\n            return true\n        if (densSet.subsetOf(numsSet)\
    \ && numsSet.subsetOf(densSet) && numsSet.subsetOf(densSet))\n            return\
    \ true\n        if (densSet.subsetOf(numsSet) && densSet.subsetOf(densSet) &&\
    \ numsSet.subsetOf(densSet))\n            return true\n        if (densSet.subsetOf(numsSet)\
    \ && densSet.subsetOf(densSet) && densSet.subsetOf(numsSet))\n            return\
    \ true\n        if (densSet.subsetOf(numsSet) && densSet.subsetOf(densSet) &&\
    \ densSet.subsetOf(densSet))\n            return true\n        if (densSet.subsetOf(numsSet)\
    \ && densSet.subsetOf(densSet) && densSet.subsetOf(densSet))\n            return\
    \ true\n        if (densSet.subsetOf(numsSet) && densSet.subsetOf(densSet) &&\
    \ densSet.subsetOf(densSet))\n            return true\n        if (densSet.subsetOf(numsSet)\
    \ && densSet.subsetOf(densSet) && densSet.subsetOf(densSet))\n            return\
    \ true\n        if (densSet.subsetOf(numsSet) && densSet.subsetOf(densSet) &&\
    \ densSet.subsetOf(densSet))\n            return true\n        if (densSet.subsetOf(numsSet)\
    \ && densSet.subsetOf(densSet) && densSet.subset", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val numsLength = nums.length\n\
    \        val densLength = dens.length\n        val numsSum = nums.sum.toDouble\n\
    \        val densSum = dens.sum.toDouble\n        val numsProduct = nums.product\n\
    \        val densProduct = dens.product\n        val numsProductSum = numsSum\
    \ * numsProduct\n        val densProductSum = densSum * densProduct\n        val\
    \ numsProductProduct = numsProduct * numsProduct\n        val densProductProduct\
    \ = densProduct * densProduct\n        val numsProductProductSum = numsProductSum\
    \ * numsProductProduct\n        val densProductProductSum = densProductSum * densProductProduct\n\
    \        val numsProductProductProduct = numsProductProduct * numsProductProduct\n\
    \        val densProductProductProduct = densProductProduct * densProductProduct\n\
    \        val numsProductProductProductSum = numsProductProductSum * numsProductProductProduct\n\
    \        val densProductProductProductSum = densProductProductSum * densProductProductProduct\n\
    \        val numsProductProductProductProduct = numsProductProductProduct * numsProductProductProduct\n\
    \        val densProductProductProductProduct = densProductProductProduct * densProductProductProduct\n\
    \        val numsProductProductProductProductSum = numsProductProductProductSum\
    \ * numsProductProductProductProduct\n        val densProductProductProductProductSum\
    \ = densProductProductProductSum * densProductProductProductProduct\n        val\
    \ numsProductProductProductProductProduct = numsProductProductProductProduct *\
    \ numsProductProductProductProduct\n        val densProductProductProductProductProduct\
    \ = densProductProductProductProduct * densProductProductProductProduct\n    \
    \    val numsProductProductProductProductProductSum = numsProductProductProductProductSum\
    \ * numsProductProductProductProductProduct\n        val densProductProductProductProductProductSum\
    \ = densProductProductProductProductSum * densProductProductProductProductProduct\n\
    \        val numsProductProductProductProductProductProduct = numsProductProductProductProductProduct\
    \ * numsProductProductProductProductProduct\n        val densProductProductProductProductProductProduct\
    \ = densProductProductProductProductProduct * densProductProductProductProductProduct\n\
    \        val numsProductProductProductProductProductProductSum = numsProductProductProductProduct",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        if (numsLength\
    \ != densLength) {\n            return false\n        }\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var sum = 0\n        var product\
    \ = 1\n        var isWhole = true\n        while (i < numsLength && j < densLength)\
    \ {\n            val numsValue = nums(i)\n            val densValue = dens(j)\n\
    \            val numsValueInt = numsValue.toInt\n            val densValueInt\
    \ = densValue.toInt\n            if (densValueInt == 0) {\n                return\
    \ false\n            }\n            sum += numsValueInt * densValueInt\n     \
    \       product *= densValueInt\n            i += 1\n            j += 1\n    \
    \    }\n        if (sum != product) {\n            return false\n        }\n \
    \       while (i < numsLength) {\n            val numsValue = nums(i)\n      \
    \      val numsValueInt = numsValue.toInt\n            if (numsValueInt == 0)\
    \ {\n                return false\n            }\n            sum += numsValueInt\n\
    \            i += 1\n        }\n        while (j < densLength) {\n           \
    \ val densValue = dens(j)\n            val densValueInt = densValue.toInt\n  \
    \          if (densValueInt == 0) {\n                return false\n          \
    \  }\n            sum += densValueInt\n            j += 1\n        }\n       \
    \ if (sum != product) {\n            return false\n        }\n        return true",
  "        val nums = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"/\"\
    ).map(_.toInt)\n        val numsLength = nums.length\n        val densLength =\
    \ dens.length\n        if (numsLength != densLength) {\n            return false\n\
    \        }\n        var i = 0\n        var j = 0\n        var k = 0\n        var\
    \ sum = 0\n        var product = 1\n        var isWhole = true\n        while\
    \ (i < numsLength && j < densLength) {\n            sum = nums(i) * dens(j)\n\
    \            product = product * sum\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        if (product == 0) {\n            return\
    \ false\n        }\n        if (product % 1 != 0) {\n            return false\n\
    \        }\n        if (product < 1) {\n            return false\n        }\n\
    \        if (product > Integer.MAX_VALUE) {\n            return false\n      \
    \  }\n        isWhole = true\n        while (i < numsLength) {\n            sum\
    \ = nums(i) * product\n            product = product * sum\n            i += 1\n\
    \        }\n        if (product == 0) {\n            return false\n        }\n\
    \        if (product < 1) {\n            return false\n        }\n        if (product\
    \ > Integer.MAX_VALUE) {\n            return false\n        }\n        isWhole\
    \ = true\n        while (j < densLength) {\n            sum = nums(k) * product\n\
    \            product = product * sum\n            k += 1\n        }\n        if\
    \ (product == 0) {\n            return false\n        }\n        if (product <\
    \ 1) {\n            return false\n        }\n        if (product > Integer.MAX_VALUE)\
    \ {\n            return false\n        }\n        return true", "        val nums\
    \ = x.split(\"/\")\n        val denoms = n.split(\"/\")\n        if (nums.length\
    \ != denoms.length) false\n        else {\n            val numsMap = new mutable.HashMap[Int,\
    \ Int]()\n            val denomsMap = new mutable.HashMap[Int, Int]()\n      \
    \      for (i <- 0 until nums.length)\n                numsMap(nums(i).toInt)\
    \ = nums(i).toInt\n            for (i <- 0 until denoms.length)\n            \
    \    denomsMap(denoms(i).toInt) = denoms(i).toInt\n            val numsKeys =\
    \ numsMap.keySet\n            val denomsKeys = denomsMap.keySet\n            if\
    \ (numsKeys.size != denomsKeys.size) false\n            else {\n             \
    \   for (i <- 0 until numsKeys.size) {\n                    val numsVal = numsMap(numsKeys(i))\n\
    \                    val denomsVal = denomsMap(denomsKeys(i))\n              \
    \      if (numsVal != denomsVal) false\n                    else {\n         \
    \               val numsKeysSet = numsMap.keySet\n                        val\
    \ denomsKeysSet = denomsMap.keySet\n                        if (numsKeysSet.size\
    \ != denomsKeysSet.size)\n                            false\n                \
    \        else {\n                            for (j <- 0 until numsKeysSet.size)\n\
    \                                if (numsKeysSet(j) != denomsKeysSet(j))\n   \
    \                                 false\n                        }\n         \
    \           }\n                }\n            }\n        }", "        val xNum\
    \ = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        if(xNum.length\
    \ != nNum.length)\n            return false\n        val xNumArray = xNum.map(_.toInt)\n\
    \        val nNumArray = nNum.map(_.toInt)\n        val xDenominator = xNumArray(xNumArray.length-1)\n\
    \        val nDenominator = nNumArray(nNumArray.length-1)\n        val xNumerator\
    \ = xNumArray(xNumArray.length)\n        val nNumerator = nNumArray(nNumArray.length)\n\
    \        if(xDenominator == 0 || nDenominator == 0)\n            return false\n\
    \        if(xNumerator == nNumerator)\n            return true\n        if(xNumerator\
    \ < nNumerator)\n            return simplify(x+\"*\"+n, \"1/\"+nDenominator)\n\
    \        else\n            return simplify(x+\"/\"+n, \"1/\"+xDenominator)", " \
    \       val numerator = new Fraction(x)\n        val denominator = new Fraction(n)\n\
    \        val numeratorValue = numerator.numerator\n        val denominatorValue\
    \ = denominator.denominator\n        val numeratorIsWhole = numeratorValue ==\
    \ numeratorValue\n        val denominatorIsWhole = denominatorValue == denominatorValue\n\
    \        if(numeratorIsWhole && denominatorIsWhole) {\n            return true\n\
    \        }\n        if(numeratorIsWhole && !denominatorIsWhole) {\n          \
    \  return false\n        }\n        if(!numeratorIsWhole && denominatorIsWhole)\
    \ {\n            return false\n        }\n        if(numeratorIsWhole && denominatorIsWhole)\
    \ {\n            return true\n        }\n        if(numeratorValue == denominatorValue)\
    \ {\n            return true\n        }\n        if(numeratorValue < denominatorValue)\
    \ {\n            return false\n        }\n        if(numeratorValue > denominatorValue)\
    \ {\n            return false\n        }\n        if(numeratorValue == 0) {\n\
    \            return false\n        }\n        if(numeratorValue == 1) {\n    \
    \        return true\n        }\n        if(numeratorValue == -1) {\n        \
    \    return true\n        }\n        if(numeratorValue == -2) {\n            return\
    \ true\n        }\n        if(numeratorValue == -3) {\n            return true\n\
    \        }\n        if(numeratorValue == -4) {\n            return true\n    \
    \    }\n        if(numeratorValue == -5) {\n            return true\n        }\n\
    \        if(numeratorValue == -6) {\n            return true\n        }\n    \
    \    if(numeratorValue == -7) {\n            return true\n        }\n        if(numeratorValue\
    \ == -8) {\n            return true\n        }\n        if(numeratorValue == -9)\
    \ {\n            return true\n        }\n        if(numeratorValue == -10) {\n\
    \            return true\n        }\n        if(numeratorValue == -11) {\n   \
    \         return true\n        }\n        if(numeratorValue == -12) {\n      \
    \      return true\n        }\n        if(numeratorValue == -13) {\n         \
    \   return true\n        }\n        if(numeratorValue == -14) {\n            return\
    \ true\n        }\n        if(numeratorValue == -15) {\n            return true\n\
    \        }\n        if(numeratorValue == -16) {\n            return true\n   \
    \     }\n        if(numeratorValue == -17) {\n            return true\n      \
    \  }\n        if(numeratorValue == -18) {\n            return true\n        }\n\
    \        if(numeratorValue == -19) {\n            return true\n        }\n   \
    \     if(numeratorValue == -20) {\n            return true\n        }\n      \
    \  if(numeratorValue == -21) {\n            return true\n        }\n        if(numeratorValue\
    \ == -22) {\n            return true\n        }\n        if(numeratorValue ==\
    \ -23) {\n            return true\n        }\n        if(numeratorValue == -24)\
    \ {\n            return true\n        }\n", "        val xNum = x.split(\"/\"\
    ).toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n \
    \       else if(xDeno == nDeno) true\n        else if(xNum.last == 0) simplify(x.replaceFirst(\"\
    /\", \"\"), n.replaceFirst(\"/\", \"\"))\n        else if(nNum.last == 0) simplify(x.replaceFirst(\"\
    /\", \"\"), n.replaceFirst(\"/\", \"\"))\n        else if(xNum.last == nDeno)\
    \ simplify(x.replaceFirst(\"/\", \"\"), n.replaceFirst(\"/\", \"\"))\n       \
    \ else if(xNum.last < nDeno) simplify(x.replaceFirst(\"/\", \"\"), n.replaceFirst(\"\
    /\", \"\"))\n        else simplify(x.replaceFirst(\"/\", \"\"), n.replaceFirst(\"\
    /\", \"\"))", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum)) {\n         \
    \   true\n        } else {\n            false\n        }", "        val nums =\
    \ x.split(\"/\")\n        val dens = n.split(\"/\")\n        if (nums.length !=\
    \ dens.length)\n            return false\n        val numsSet = nums.toSet\n \
    \       val densSet = dens.toSet\n        if (numsSet.size == densSet.size)\n\
    \            return true\n        val numsSetSize = numsSet.size\n        val\
    \ densSetSize = densSet.size\n        if (numsSetSize == densSetSize)\n      \
    \      return true\n        if (numsSetSize > densSetSize)\n            return\
    \ false\n        val numsSetIterator = numsSet.iterator\n        val densSetIterator\
    \ = densSet.iterator\n        var i = 0\n        while (i < numsSetSize) {\n \
    \           val numsSetElement = numsSetIterator.next()\n            val densSetElement\
    \ = densSetIterator.next()\n            if (numsSetElement == densSetElement)\n\
    \                i += 1\n            else if (numsSetElement < densSetElement)\n\
    \                return false\n            else\n                return true\n\
    \        }\n        return false", "        val fraction = x.split(\"/\")\n  \
    \      val numerator = fraction(0)\n        val denominator = fraction(1)\n  \
    \      val numeratorAsInt = numerator.asInstanceOf[Int]\n        val denominatorAsInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorAsDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorAsDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAs",
  "        val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val numerator = x(0)*n(0)\n        val denominator = x(1)*n(1)\n    \
    \    numerator == denominator && numerator > 0", "        val nums = x.split(\"\
    /\")\n        val dens = n.split(\"/\")\n        val numsLength = nums.length\n\
    \        val densLength = dens.length\n        val numsSum = nums.sum.toDouble\n\
    \        val densSum = dens.sum.toDouble\n        val numsProduct = nums.product\n\
    \        val densProduct = dens.product\n        val numsSumSqr = numsSum * numsSum\n\
    \        val densSumSqr = densSum * densSum\n        val numsProductSqr = numsProduct\
    \ * numsProduct\n        val densProductSqr = densProduct * densProduct\n    \
    \    val numsSumSqrt = (numsSum * numsSum) / densSum\n        val densSumSqrt\
    \ = (densSum * densSum) / densSum\n        val numsProductSqrt = (numsProduct\
    \ * numsProduct) / densProduct\n        val densProductSqrt = (densProduct * densProduct)\
    \ / densProduct\n        val numsSumSqrt = numsSum / densSum\n        val densSumSqrt\
    \ = densSum / densSum\n        val numsProductSqrt = numsProduct / densProduct\n\
    \        val densProductSqrt = densProduct / densProduct\n        val numsSumSqrt\
    \ = numsSum / densSum\n        val densSumSqrt = densSum / densSum\n        val\
    \ numsProductSqrt = numsProduct / densProduct\n        val densProductSqrt = densProduct\
    \ / densProduct\n        val numsSumSqrt = numsSum / densSum\n        val densSumSqrt\
    \ = densSum / densSum\n        val numsProductSqrt = numsProduct / densProduct\n\
    \        val densProductSqrt = densProduct / densProduct\n        val numsSumSqrt\
    \ = numsSum / densSum\n        val densSumSqrt = densSum / densSum\n        val\
    \ numsProductSqrt = numsProduct / densProduct\n        val densProductSqrt = densProduct\
    \ / densProduct\n        val numsSumSqrt = numsSum / densSum\n        val densSumSqrt\
    \ = densSum / densSum\n        val numsProductSqrt = nums", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno\
    \ == 0) return false\n        if(xDeno == nDeno) return true\n        if(xNum.last\
    \ == nNum.last) return simplify(x + \"/\" + nNum.last, x + \"/\" + nDeno)\n  \
    \      if(xNum.last < nNum.last) return simplify(x + \"/\" + nNum.last, x + \"\
    /\" + nDeno)\n        if(xNum.last > nNum.last) return simplify(x + \"/\" + nNum.last,\
    \ x + \"/\" + nDeno)\n        return simplify(x + \"/\" + nNum.last, x + \"/\"\
    \ + nDeno)", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val nums0 = nums(0).toInt\n        val dens0 = dens(0).toInt\n \
    \       val nums1 = nums(1).toInt\n        val dens1 = dens(1).toInt\n       \
    \ if (nums0 != dens0) {\n            return false\n        }\n        if (nums1\
    \ == dens1) {\n            return true\n        }\n        if (nums1 > dens1)\
    \ {\n            val temp = nums1\n            nums1 = dens1\n            dens1\
    \ = temp\n        }\n        if (nums1 > dens0) {\n            val temp = nums1\n\
    \            nums1 = dens0\n            dens0 = temp\n        }\n        if (nums0\
    \ > dens0) {\n            val temp = nums0\n            nums0 = dens0\n      \
    \      dens0 = temp\n        }\n        if (nums0 > nums1) {\n            val\
    \ temp = nums0\n            nums0 = nums1\n            nums1 = temp\n        }\n\
    \        if (nums0 > dens1) {\n            val temp = nums0\n            nums0\
    \ = dens1\n            dens1 = temp\n        }\n        if (nums0 > dens0) {\n\
    \            val temp = nums0\n            nums0 = dens0\n            dens0 =\
    \ temp\n        }\n        if (nums0 > nums1) {\n            val temp = nums0\n\
    \            nums0 = nums1\n            nums1 = temp\n        }\n        if (nums0\
    \ > dens1) {\n            val temp = nums0\n            nums0 = dens1\n      \
    \      dens1 = temp\n        }\n        if (nums0 > dens0) {\n            val\
    \ temp = nums0\n            nums0 = dens0\n            dens0 = temp\n        }\n\
    \        if (nums0 > nums1) {\n            val temp = nums0\n            nums0\
    \ = nums1\n            nums1 = temp\n        }\n        if (nums0 > dens1) {\n\
    \            val temp = nums0\n            nums0 = dens1\n            dens1 =\
    \ temp\n        }\n        if (nums0 > dens0) {\n            val temp = nums0\n\
    \            nums0 = dens0\n            dens0 = temp\n        }\n        if (nums0\
    \ > nums1) {\n            val temp = nums0\n            nums0 = nums1\n      \
    \      nums1 = temp\n        }\n        if (nums0 > dens1) {\n            val\
    \ temp = nums0\n            nums0 = dens1\n            dens1 = temp\n        }\n\
    \        if (nums0 > dens0) {\n            val temp = nums0\n            nums0\
    \ = dens0\n            dens0 = temp\n        }\n        if (nums0 > nums1) {\n\
    \            val ", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == 0) simplify(x.replaceFirst(\"/\" + nDeno, nDeno),\
    \ n.replaceFirst(\"/\" + xDeno, xDeno))\n        else simplify(x.replaceFirst(\"\
    /\" + xDeno, xDeno), n.replaceFirst(\"/\" + nDeno, nDeno))", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum)\
    \ == nNum.product(nNum))\n        {\n            true\n        }\n        else\n\
    \        {\n            false\n        }", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val numerator = x(0)*n(0)\n\
    \        val denominator = x(0)*n(1)\n        numerator == denominator && numerator\
    \ > 0", "        val fraction = x.split(\"/\")\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val fraction2 = n.split(\"/\"\
    )\n        val numerator2 = fraction2(0)\n        val denominator2 = fraction2(1)\n\
    \        val fraction3 = numerator.split(\"/\")\n        val numerator3 = fraction3(0)\n\
    \        val denominator3 = fraction3(1)\n        val fraction4 = numerator2.split(\"\
    /\")\n        val numerator4 = fraction4(0)\n        val denominator4 = fraction4(1)\n\
    \        val fraction5 = numerator3.split(\"/\")\n        val numerator5 = fraction5(0)\n\
    \        val denominator5 = fraction5(1)\n        val fraction6 = numerator4.split(\"\
    /\")\n        val numerator6 = fraction6(0)\n        val denominator6 = fraction6(1)\n\
    \        val fraction7 = numerator5.split(\"/\")\n        val numerator7 = fraction7(0)\n\
    \        val denominator7 = fraction7(1)\n        val fraction8 = numerator6.split(\"\
    /\")\n        val numerator8 = fraction8(0)\n        val denominator8 = fraction8(1)\n\
    \        val fraction9 = numerator7.split(\"/\")\n        val numerator9 = fraction9(0)\n\
    \        val denominator9 = fraction9(1)\n        val fraction10 = numerator8.split(\"\
    /\")\n        val numerator10 = fraction10(0)\n        val denominator10 = fraction10(1)\n\
    \        val fraction11 = numerator9.split(\"/\")\n        val numerator11 = fraction11(0)\n\
    \        val denominator11 = fraction11(1)\n        val fraction12 = numerator10.split(\"\
    /\")\n        val numerator12 = fraction12(0)\n        val denominator12 = fraction12(1)\n\
    \        val fraction13 = numerator11.split(\"/\")\n        val numerator13 =\
    \ fraction13(0)\n        val denominator13 = fraction13(1)\n        val fraction14\
    \ = numerator12.split(\"/\")\n        val numerator14 = fraction14(0)\n      \
    \  val denominator14 = fraction14(1)\n        val fraction15 = numerator13.split(\"\
    /\")\n        val numerator15 = fraction15(0)\n        val denominator15 = fraction15(1)\n\
    \        val fraction16 = numerator14.split(\"/\")\n        val numerator16 =\
    \ fraction16(0)\n        val denominator16 = fraction16(1)\n        val fraction17\
    \ = numerator15.split(\"/\")\n        val numerator17 = fraction17(0)\n      \
    \  val denominator17 = fraction17(1)\n        val fraction18 = numerator16.split(\"\
    /\")\n        val numerator18 = fraction18(0)\n        val denominator18 = fraction18(1)\n\
    \        val fraction19 = numerator17.split(\"/\")\n        val numerator19 =\
    \ fraction19(0)\n        val denominator19 = fraction19(1)\n        val fraction20\
    \ = ", "        val x = x.split(\"/\")\n        val n = n.split(\"/\")\n     \
    \   val numerator = x.head.toInt\n        val denominator = n.head.toInt\n   \
    \     val wholeNumber = numerator/denominator\n        if (wholeNumber == numerator)\
    \ {\n            true\n        } else {\n            false\n        }", "    \
    \    val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xNum.last\
    \ == 0 || nNum.last == 0){\n            return false\n        }\n        if(xDeno\
    \ == nDeno){\n            return true\n        }\n        if(xDeno == 0){\n  \
    \          return false\n        }\n        if(nDeno == 0){\n            return\
    \ false\n        }\n        if(xNum.last == nDeno){\n            return true\n\
    \        }\n        if(xNum.last > nDeno){\n            return false\n       \
    \ }\n        if(xNum.last < nDeno){\n            return false\n        }\n   \
    \     val xNum1 = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n \
    \       if(xNum1.last == nDeno){\n            return true\n        }\n       \
    \ if(xNum1.last > nDeno){\n            return false\n        }\n        if(xNum1.last\
    \ < nDeno){\n            return false\n        }\n        val xNum2 = xNum1.dropRight(1)\n\
    \        val nNum2 = nNum1.dropRight(1)\n        if(xNum2.last == nDeno){\n  \
    \          return true\n        }\n        if(xNum2.last > nDeno){\n         \
    \   return false\n        }\n        if(xNum2.last < nDeno){\n            return\
    \ false\n        }\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        if(xNum3.last == nDeno){\n            return true\n\
    \        }\n        if(xNum3.last > nDeno){\n            return false\n      \
    \  }\n        if(xNum3.last < nDeno){\n            return false\n        }\n \
    \       val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        if(xNum4.last == nDeno){\n            return true\n        }\n      \
    \  if(xNum4.last > nDeno){\n            return false\n        }\n        if(xNum4.last\
    \ < nDeno){\n            return false\n        }\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        if(xNum5.last == nDeno){\n  \
    \          return true\n        }\n        if(xNum5.last > nDeno){\n         \
    \   return false\n        }\n        if(xNum5.last < nDeno){\n            return\
    \ false\n        }\n        val x", "        val nums = x.split(\"/\").map(_.toInt)\n\
    \        val dens = n.split(\"/\").map(_.toInt)\n        val numsSum = nums.sum\n\
    \        val densSum = dens.sum\n        val numsSumInv = numsSum / densSum\n\
    \        val densSumInv = densSum / numsSum\n        val numsSumInv2 = numsSumInv\
    \ * numsSumInv\n        val densSumInv2 = densSumInv * densSumInv\n        val\
    \ numsSumInv3 = numsSumInv * numsSumInv * numsSumInv\n        val densSumInv3\
    \ = densSumInv * densSumInv * densSumInv\n        val numsSumInv4 = numsSumInv\
    \ * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv4 = densSumInv\
    \ * densSumInv * densSumInv * densSumInv\n        val numsSumInv5 = numsSumInv\
    \ * numsSumInv * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv5\
    \ = densSumInv * densSumInv * densSumInv * densSumInv * densSumInv\n        val\
    \ numsSumInv6 = numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv6 = densSumInv * densSumInv * densSumInv\
    \ * densSumInv * densSumInv * densSumInv\n        val numsSumInv7 = numsSumInv\
    \ * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\n\
    \        val densSumInv7 = densSumInv * densSumInv * densSumInv * densSumInv *\
    \ densSumInv * densSumInv * densSumInv\n        val numsSumInv8 = numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv8 = densSumInv * densSumInv * densSumInv\
    \ * densSumInv * densSumInv", "        val xNum = x.split(\"/\").toInt\n     \
    \   val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val\
    \ nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0) false\n        else\
    \ if(xDeno == nDeno) true\n        else if(xNum.last == nNum.last) simplify(xNum.dropRight(1).mkString+\"\
    /\"+nNum.dropRight(1).mkString, n.dropRight(1).mkString)\n        else simplify(xNum.mkString+\"\
    /\"+nNum.mkString, n.mkString)", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val xx = x.product\n   \
    \     val nn = n.product\n        val xn = x.last\n        val nn = n.last\n \
    \       val xx = x.product\n        val nn = n.product\n        val xn = x.last\n\
    \        val nn = n.last\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.last\n        val nn = n.last\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.last\n        val nn = n.last\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.last\n\
    \        val nn = n.last\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.last\n        val nn = n.last\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.last\n        val nn = n.last\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.last\n\
    \        val nn = n.last\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.last\n        val nn = n.last\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.last\n        val nn = n.last\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.last\n\
    \        val nn = n.last\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.last\n        val nn = n.last\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.last\n        val nn = n.last\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.last\n\
    \        val nn = n.last\n        val xx = x.product\n        val nn = n.product\n\
    \        val xn = x.last\n        val nn = n.last\n        val xx = x.product\n\
    \        val nn = n.product\n        val xn = x.last\n        val nn = n.last\n\
    \        val xx = x.product\n        val nn = n.product\n        val xn = x.last\n\
    \        val nn = n.last\n        val xx = x.product\n        val n", "      \
    \  val x = x.split(\"/\")\n        val n = n.split(\"/\")\n        val xNum =\
    \ x.toInt\n        val nNum = n.toInt\n        if(xNum == 0){\n            return\
    \ false\n        }\n        if(nNum == 0){\n            return false\n       \
    \ }\n        if(xNum == nNum){\n            return true\n        }\n        if(xNum\
    \ > nNum){\n            val temp = xNum\n            xNum = nNum\n           \
    \ nNum = temp\n        }\n        val xDeno = xNum / nNum\n        val nDeno =\
    \ nNum / xNum\n        if(xDeno == nDeno){\n            return true\n        }\n\
    \        return false", "        val xNum = x.split(\"/\").toInt\n        val\
    \ nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        if(xDeno == 0){\n            return false\n        }\n\
    \        if(nDeno == 0){\n            return false\n        }\n        if(xDeno\
    \ == nDeno){\n            return true\n        }\n        val xNum2 = xNum.dropRight(1)\n\
    \        val nNum2 = nNum.dropRight(1)\n        if(xNum2.last == nNum2.last){\n\
    \            return simplify(xNum2.mkString(\"/\"), nNum2.mkString(\"/\"))\n \
    \       }\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n\
    \        if(xNum3.last == nNum3.last){\n            return simplify(xNum3.mkString(\"\
    /\"), nNum3.mkString(\"/\"))\n        }\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        if(xNum4.last == nNum4.last){\n\
    \            return simplify(xNum4.mkString(\"/\"), nNum4.mkString(\"/\"))\n \
    \       }\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n\
    \        if(xNum5.last == nNum5.last){\n            return simplify(xNum5.mkString(\"\
    /\"), nNum5.mkString(\"/\"))\n        }\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        if(xNum6.last == nNum6.last){\n\
    \            return simplify(xNum6.mkString(\"/\"), nNum6.mkString(\"/\"))\n \
    \       }\n        val xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n\
    \        if(xNum7.last == nNum7.last){\n            return simplify(xNum7.mkString(\"\
    /\"), nNum7.mkString(\"/\"))\n        }\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        if(xNum8.last == nNum8.last){\n\
    \            return simplify(xNum8.mkString(\"/\"), nNum8.mkString(\"/\"))\n \
    \       }\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n\
    \        if(xNum9.last == nNum9.last){\n            return simplify(xNum9.mkString(\"\
    /\"), n", "        val nums = x.split(\"/\").map(_.toInt)\n        val dens =\
    \ n.split(\"/\").map(_.toInt)\n        val numsSum = nums.sum\n        val densSum\
    \ = dens.sum\n        if (numsSum == densSum) {\n            true\n        } else\
    \ {\n            false\n        }", "        val numer = x.split(\"/\")(0)\n \
    \       val denom = x.split(\"/\")(1)\n        val numInt = (numer).toInt\n  \
    \      val denomInt = (denom).toInt\n        val numInt2 = numInt * numInt\n \
    \       val denomInt2 = denomInt * denomInt\n        val numInt3 = numInt2 * numInt\n\
    \        val denomInt3 = denomInt2 * denomInt\n        val numInt4 = numInt3 *\
    \ numInt\n        val denomInt4 = denomInt3 * denomInt\n        val numInt5 =\
    \ numInt4 * numInt\n        val denomInt5 = denomInt4 * denomInt\n        val\
    \ numInt6 = numInt5 * numInt\n        val denomInt6 = denomInt5 * denomInt\n \
    \       val numInt7 = numInt6 * numInt\n        val denomInt7 = denomInt6 * denomInt\n\
    \        val numInt8 = numInt7 * numInt\n        val denomInt8 = denomInt7 * denomInt\n\
    \        val numInt9 = numInt8 * numInt\n        val denomInt9 = denomInt8 * denomInt\n\
    \        val numInt10 = numInt9 * numInt\n        val denomInt10 = denomInt9 *\
    \ denomInt\n        val numInt11 = numInt10 * numInt\n        val denomInt11 =\
    \ denomInt10 * denomInt\n        val numInt12 = numInt11 * numInt\n        val\
    \ denomInt12 = denomInt11 * denomInt\n        val numInt13 = numInt12 * numInt\n\
    \        val denomInt13 = denomInt12 * denomInt\n        val numInt14 = numInt13\
    \ * numInt\n        val denomInt14 = denomInt13 * denomInt\n        val numInt15\
    \ = numInt14 * numInt\n        val denomInt15 = denomInt14 * denomInt\n      \
    \  val numInt16 = numInt15 * numInt\n        val denomInt16 = denomInt15 * denomInt\n\
    \        val numInt17 = numInt16 * numInt\n        val denomInt17 = denomInt16\
    \ * denomInt\n        val numInt18 = numInt17 * numInt\n        val denomInt18\
    \ = denomInt17 * denomInt\n        val numInt19 = numInt18 * numInt\n        val\
    \ denomInt19 = denomInt18 * denomInt\n        val numInt20 = numInt19 * numInt\n\
    \        val denomInt20 = denomInt19 * denomInt\n        val numInt21 = numInt20\
    \ * numInt\n        val denomInt21 = denom", "        val nums = x.split(\"/\"\
    ).map(_.toInt)\n        val denoms = n.split(\"/\").map(_.toInt)\n        val\
    \ numsSum = nums.sum\n        val denomsSum = denoms.sum\n        val numsDiff\
    \ = nums.diff(denoms)\n        val denomsDiff = denoms.diff(nums)\n        val\
    \ numsSumDiff = numsSum - denomsSum\n        val denomsSumDiff = denomsSum - numsSum\n\
    \        val numsDiffSum = numsDiff + denomsDiff\n        val denomsDiffSum =\
    \ denomsDiff + numsDiff\n        val numsDiffSumDiff = numsDiffSum + denomsDiffSum\n\
    \        val denomsDiffSumDiff = denomsDiffSum + numsDiffSum\n        val numsDiffSumDiffDiff\
    \ = numsDiffSumDiff + denomsDiffSumDiff\n        val denomsDiffSumDiffDiff = denomsDiffSumDiff\
    \ + numsDiffSumDiff\n        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + denomsDiffSumDiffDiff\n\
    \        val denomsDiffSumDiffDiff = denomsDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + denomsDiffSumDiffDiff\n\
    \        val denomsDiffSumDiffDiff = denomsDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + denomsDiffSumDiffDiff\n\
    \        val denomsDiffSumDiffDiff = denomsDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + denomsDiffSumDiffDiff\n\
    \        val denomsDiffSumDiffDiff = denomsDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + denomsDiffSumDiffDiff\n\
    \        val denomsDiffSumDiffDiff = denomsDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = numsDiffSumDiffDiff + denomsDiffSumDiffDiff\n\
    \        val denomsDiffSumDiffDiff = denomsDiffSumDiffDiff + numsDiffSumDiffDiff\n\
    \        val numsDiffSumDiffDiff = nums", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val nDeno1 =\
    \ nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 = nNum1.dropRight(1)\n\
    \        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n        val xNum3 =\
    \ xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xDeno4 = xDeno3\n       \
    \ val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n        val nNum5\
    \ = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n\
    \        val xNum6 = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n\
    \        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n        val xNum7 =\
    \ xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n        val xDeno7\
    \ = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xDeno7\n       \
    \ val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n\
    \        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11\
    \ = xNum10.dropRight(1)\n        val ", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val numerator = x.head\n\
    \        val denominator = x.last\n        val numerator1 = numerator / denominator\n\
    \        val numerator2 = numerator % denominator\n        val denominator1 =\
    \ denominator / denominator\n        val denominator2 = denominator % denominator\n\
    \        val numerator3 = numerator1 * denominator2\n        val numerator4 =\
    \ numerator1 * denominator1\n        val numerator5 = numerator2 * denominator1\n\
    \        val numerator6 = numerator2 * denominator2\n        val numerator7 =\
    \ numerator3 * denominator2\n        val numerator8 = numerator3 * denominator1\n\
    \        val numerator9 = numerator4 * denominator2\n        val numerator10 =\
    \ numerator4 * denominator1\n        val numerator11 = numerator5 * denominator2\n\
    \        val numerator12 = numerator5 * denominator1\n        val numerator13\
    \ = numerator6 * denominator2\n        val numerator14 = numerator6 * denominator1\n\
    \        val numerator15 = numerator7 * denominator2\n        val numerator16\
    \ = numerator7 * denominator1\n        val numerator17 = numerator8 * denominator2\n\
    \        val numerator18 = numerator8 * denominator1\n        val numerator19\
    \ = numerator9 * denominator2\n        val numerator20 = numerator9 * denominator1\n\
    \        val numerator21 = numerator10 * denominator2\n        val numerator22\
    \ = numerator10 * denominator1\n        val numerator23 = numerator11 * denominator2\n\
    \        val numerator24 = numerator11 * denominator1\n        val numerator25\
    \ = numerator12 * denominator2\n        val numerator26 = numerator12 * denominator1\n\
    \        val numerator27 = numerator13 * denominator2\n        val numerator28\
    \ = numerator13 * denominator1\n        val numerator29 = numerator14 * denominator2\n\
    \        val numerator30 = numerator14 * denominator1\n        val numerator31\
    \ = numerator15 * denominator2\n        val numerator32 = numerator15 * denominator1\n\
    \        val numerator33 = numerator16 * denominator2\n        val numerator34\
    \ = numerator16 * denominator1\n        val numerator35 = numerator17 * denominator2\n\
    \        val numerator36 = numerator17 * denominator1\n        val numerator37\
    \ = numerator18 * denominator2\n        val numer", "        val numer = x.split(\"\
    /\")(0)\n        val denom = x.split(\"/\")(1)\n        val numerator = numer.toInt\n\
    \        val denominator = denom.toInt\n        if(numerator == 0 && denominator\
    \ == 0){\n            return false\n        }\n        if(numerator == 0 && denominator\
    \ != 0){\n            return true\n        }\n        if(numerator != 0 && denominator\
    \ == 0){\n            return true\n        }\n        if(numerator != 0 && denominator\
    \ != 0){\n            val num1 = numer/denominator\n            val num2 = numer%denominator\n\
    \            if(num1 == num2){\n                return true\n            }\n \
    \       }\n        return false", "        val xNum = x.split(\"/\").toInt\n \
    \       val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n     \
    \   val nDeno = nNum.last\n        val xNum1 = xNum.init\n        val nNum1 =\
    \ nNum.init\n        val xDeno1 = xNum1.last\n        val nDeno1 = nNum1.last\n\
    \        val xNum2 = xNum1.init\n        val nNum2 = nNum1.init\n        val xDeno2\
    \ = xNum2.last\n        val nDeno2 = nNum2.last\n        val xNum3 = xNum2.init\n\
    \        val nNum3 = nNum2.init\n        val xDeno3 = xNum3.last\n        val\
    \ nDeno3 = nNum3.last\n        val xNum4 = xNum3.init\n        val nNum4 = nNum3.init\n\
    \        val xDeno4 = xNum4.last\n        val nDeno4 = nNum4.last\n        val\
    \ xNum5 = xNum4.init\n        val nNum5 = nNum4.init\n        val xDeno5 = xNum5.last\n\
    \        val nDeno5 = nNum5.last\n        val xNum6 = xNum5.init\n        val\
    \ nNum6 = nNum5.init\n        val xDeno6 = xNum6.last\n        val nDeno6 = nNum6.last\n\
    \        val xNum7 = xNum6.init\n        val nNum7 = nNum6.init\n        val xDeno7\
    \ = xNum7.last\n        val nDeno7 = nNum7.last\n        val xNum8 = xNum7.init\n\
    \        val nNum8 = nNum7.init\n        val xDeno8 = xNum8.last\n        val\
    \ nDeno8 = nNum8.last\n        val xNum9 = xNum8.init\n        val nNum9 = nNum8.init\n\
    \        val xDeno9 = xNum9.last\n        val nDeno9 = nNum9.last\n        val\
    \ xNum10 = xNum9.init\n        val nNum10 = nNum9.init\n        val xDeno10 =\
    \ xNum10.last\n        val nDeno10 = nNum10.last\n        val xNum11 = xNum10.init\n\
    \        val nNum11 = nNum10.init\n        val xDeno11 = xNum11.last\n       \
    \ val nDeno11 = nNum11.last\n        val xNum12 = xNum11.init\n", "        val\
    \ xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n     \
    \   if(xNum.product(xNum.last) * nNum.product(nNum.last) == xNum.product(xNum.last)\
    \ * nNum.product(nNum.last)) {\n            return true\n        }\n        else\
    \ {\n            return false\n        }", "        val nums = x.split(\"/\")\n\
    \        val dens = n.split(\"/\")\n        val numsLength = nums.length\n   \
    \     val densLength = dens.length\n        if(numsLength != densLength){\n  \
    \          return false\n        }\n        val numsSum = nums.sum.toDouble\n\
    \        val densSum = dens.sum.toDouble\n        if(numsSum == densSum){\n  \
    \          return true\n        }\n        val numsSumInv = 1.0/numsSum\n    \
    \    val densSumInv = 1.0/densSum\n        val numsSumInv2 = numsSumInv * numsSum\n\
    \        val densSumInv2 = densSumInv * densSum\n        val numsSumInv3 = numsSumInv\
    \ * numsSum\n        val densSumInv3 = densSumInv * densSum\n        val numsSumInv4\
    \ = numsSumInv * numsSum\n        val densSumInv4 = densSumInv * densSum\n   \
    \     val numsSumInv5 = numsSumInv * numsSum\n        val densSumInv5 = densSumInv\
    \ * densSum\n        val numsSumInv6 = numsSumInv * numsSum\n        val densSumInv6\
    \ = densSumInv * densSum\n        val numsSumInv7 = numsSumInv * numsSum\n   \
    \     val densSumInv7 = densSumInv * densSum\n        val numsSumInv8 = numsSumInv\
    \ * numsSum\n        val densSumInv8 = densSumInv * densSum\n        val numsSumInv9\
    \ = numsSumInv * numsSum\n        val densSumInv9 = densSumInv * densSum\n   \
    \     val numsSumInv10 = numsSumInv * numsSum\n        val densSumInv10 = densSumInv\
    \ * densSum\n        val numsSumInv11 = numsSumInv * numsSum\n        val densSumInv11\
    \ = densSumInv * densSum\n        val numsSumInv12 = numsSumInv * numsSum\n  \
    \      val densSumInv12 = densSumInv * densSum\n        val numsSumInv13 = numsSumInv\
    \ * numsSum\n        val densSumInv13 = densSumInv * densSum\n        val numsSumInv14\
    \ = numsSumInv * numsSum", "        val xNum = x.split(\"/\").toInt\n        val\
    \ nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum))\
    \ {\n            true\n        } else {\n            false\n        }", "    \
    \    val nums = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"/\"\
    ).map(_.toInt)\n        val numsSum = nums.sum\n        val densSum = dens.sum\n\
    \        if (numsSum == densSum) {\n            true\n        } else {\n     \
    \       false\n        }", "        val xNum = x.split(\"/\").toInt\n        val\
    \ nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno\
    \ = nNum.last\n        if(xDeno == 0 || nDeno == 0) return false\n        if(xNum.last\
    \ == nNum.last) return true\n        if(xNum.last < nNum.last) return simplify(x\
    \ + \"/\" + nNum.last, n)\n        else return simplify(x + \"/\" + nNum.last,\
    \ x)", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     val xNum1 = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n \
    \       val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum1.dropRight(1)\n\
    \        val nNum2 = nNum1.dropRight(1)\n        val xDeno2 = xDeno1\n       \
    \ val nDeno2 = nDeno1\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        val xDeno3 = xDeno2\n        val nDeno3 = nDeno2\n\
    \        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xDeno4 = xDeno3\n        val nDeno4 = nDeno3\n        val xNum5 =\
    \ xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n        val xDeno5\
    \ = xDeno4\n        val nDeno5 = nDeno4\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xDeno6 = xDeno5\n       \
    \ val nDeno6 = nDeno5\n        val xNum7 = xNum6.dropRight(1)\n        val nNum7\
    \ = nNum6.dropRight(1)\n        val xDeno7 = xDeno6\n        val nDeno7 = nDeno6\n\
    \        val xNum8 = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n\
    \        val xDeno8 = xDeno7\n        val nDeno8 = nDeno7\n        val xNum9 =\
    \ xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n        val xDeno9\
    \ = xDeno8\n        val nDeno9 = nDeno8\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xDeno10 = xDeno9\n     \
    \   val nDeno10 = nDeno9\n        val xNum11 = xNum10.dropRight(1)\n        val ",
  "        val xNum = x.split(\"/\").toList\n        val nNum = n.split(\"/\").toList\n\
    \        val xNumLen = xNum.size\n        val nNumLen = nNum.size\n        val\
    \ xNumNum = xNum.zip(nNum).filter(_._1 == _._1).map(_._2).sum\n        val xNumDen\
    \ = xNum.zip(nNum).filter(_._1 == _._1).map(_._2).sum\n        val nNumNum = nNum.zip(xNum).filter(_._1\
    \ == _._1).map(_._2).sum\n        val nNumDen = nNum.zip(xNum).filter(_._1 ==\
    \ _._1).map(_._2).sum\n        (xNumNum == xNumDen && nNumNum == nNumDen)", " \
    \       val nums = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"\
    /\").map(_.toInt)\n        val numsSum = nums.sum\n        val densSum = dens.sum\n\
    \        val numsDiff = nums.diff(dens)\n        val densDiff = dens.diff(nums)\n\
    \        val numsDiffSum = numsDiff.sum\n        val densDiffSum = densDiff.sum\n\
    \        val numsDiffDiff = numsDiff.diff(densDiff)\n        val densDiffDiff\
    \ = densDiff.diff(numsDiff)\n        val numsDiffDiffSum = numsDiffDiff.sum\n\
    \        val densDiffDiffSum = densDiffDiff.sum\n        val numsDiffDiffDiff\
    \ = numsDiffDiff.diff(densDiffDiff)\n        val densDiffDiffDiff = densDiffDiff.diff(numsDiffDiff)\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiff.sum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiff.sum\n        val numsDiffDiffDiffDiff = numsDiffDiffDiff.diff(densDiffDiffDiff)\n\
    \        val densDiffDiffDiffDiff = densDiffDiffDiff.diff(numsDiffDiffDiff)\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiffSum\n        val numsDiffDiffDiffDiff = numsDiffDiffDiffDiff\n\
    \        val densDiffDiffDiffDiff = densDiffDiffDiffDiff\n        val numsDiffDiffDiffSum\
    \ = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum = densDiffDiffDiffSum\n\
    \        val numsDiffDiffDiffDiff = numsDiffDiffDiffDiff\n        val densDiffDiffDiffDiff\
    \ = densDiffDiffDiffDiff\n        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n\
    \        val densDiffDiffDiffSum = densDiffDiffDiffSum\n        val numsDiffDiffDiffDiff\
    \ = numsDiffDiffDiffDiff\n        val densDiffDiffDiffDiff = densDiffDiffDiffDiff\n\
    \        val numsDiffDiffDiffSum = numsDiffDiffDiffSum\n        val densDiffDiffDiffSum\
    \ = densDiffDiffDiffSum\n        val numsDiffDiff", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum)\
    \ == nNum.product(nNum) && xNum.product(xNum) == nNum.product(nNum)) {\n     \
    \       return true\n        } else {\n            return false\n        }", " \
    \       val numerator = x.split(\"/\")(0)\n        val denominator = n.split(\"\
    /\")(1)\n        val fraction = numerator / denominator\n        fraction.toDouble\
    \ == fraction", "        val numerator = x.split(\"/\")(0)\n        val denominator\
    \ = x.split(\"/\")(1)\n        val numeratorInt = numerator.toInt\n        val\
    \ denominatorInt = denominator.toInt\n        val numeratorIntInt = numeratorInt.toInt\n\
    \        val denominatorIntInt = denominatorInt.toInt\n        val numeratorIntIntInt\
    \ = numeratorIntInt * denominatorIntInt\n        val numeratorIntIntIntInt = numeratorIntIntInt\
    \ * denominatorIntIntInt\n        val numeratorIntIntIntIntInt = numeratorIntIntIntInt\
    \ * denominatorIntIntIntInt\n        val numeratorIntIntIntIntIntInt = numeratorIntIntIntIntInt\
    \ * denominatorIntIntIntIntIntInt\n        val numeratorIntIntIntIntIntIntInt\
    \ = numeratorIntIntIntIntIntInt * denominatorIntIntIntIntIntIntInt\n        val\
    \ numeratorIntIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntInt * denominatorIntIntIntIntIntIntIntIntInt\n\
    \        val numeratorIntIntIntIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntIntIntInt\
    \ * denominatorIntIntIntIntIntIntIntIntIntIntInt\n        val numeratorIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = numeratorIntIntIntIntIntIntIntIntIntIntIntIntInt * denominatorIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \        val numeratorIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ * denominatorIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \        val numeratorIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\
    \ = numeratorIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt *\
    \ denominatorIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt",
  "        val x = x.split(\"/\")\n        val n = n.split(\"/\")\n        val numerator\
    \ = x.head.toInt\n        val denominator = n.head.toInt\n        if(numerator\
    \ == 0 && denominator == 0) true\n        else numerator % denominator == 0",
  "        val numerator = x.split(\"/\")(0)\n        val denominator = n.split(\"\
    /\")(1)\n        val numeratorAsInt = numerator.toInt\n        val denominatorAsInt\
    \ = denominator.toInt\n        if (numeratorAsInt == denominatorAsInt) {\n   \
    \         return true\n        }\n        else {\n            return false\n \
    \       }", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     val xNum1 = xNum.init\n        val nNum1 = nNum.init\n        val xDeno1\
    \ = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n       \
    \ val nNum2 = nNum.tail\n        val xDeno2 = xDeno\n        val nDeno2 = nDeno\n\
    \        val xNum3 = xNum.init\n        val nNum3 = nNum.init\n        val xDeno3\
    \ = xDeno\n        val nDeno3 = nDeno\n        val xNum4 = xNum.tail\n       \
    \ val nNum4 = nNum.tail\n        val xDeno4 = xDeno\n        val nDeno4 = nDeno\n\
    \        val xNum5 = xNum.init\n        val nNum5 = nNum.init\n        val xDeno5\
    \ = xDeno\n        val nDeno5 = nDeno\n        val xNum6 = xNum.tail\n       \
    \ val nNum6 = nNum.tail\n        val xDeno6 = xDeno\n        val nDeno6 = nDeno\n\
    \        val xNum7 = xNum.init\n        val nNum7 = nNum.init\n        val xDeno7\
    \ = xDeno\n        val nDeno7 = nDeno\n        val xNum8 = xNum.tail\n       \
    \ val nNum8 = nNum.tail\n        val xDeno8 = xDeno\n        val nDeno8 = nDeno\n\
    \        val xNum9 = xNum.init\n        val nNum9 = nNum.init\n        val xDeno9\
    \ = xDeno\n        val nDeno9 = nDeno\n        val xNum10 = xNum.tail\n      \
    \  val nNum10 = nNum.tail\n        val xDeno10 = xDeno\n        val nDeno10 =\
    \ nDeno\n        val xNum11 = xNum.init\n        val nNum11 = nNum.init\n    \
    \    val xDeno11 = xDeno\n        val nDeno11 = nDeno\n        val xNum12 = xNum.tail\n\
    \        val nNum12 = nNum.tail\n        val xDeno12 = xDeno\n        val ", " \
    \       val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numInt = (numer.toInt / denom.toInt).toInt\n        val denomInt\
    \ = (denom.toInt / denom.toInt).toInt\n        if (numInt == denomInt)\n     \
    \       return true\n        else\n            return false", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n\
    \        val nNum1 = nNum.dropRight(1)\n        val xDeno1 = xNum1.last\n    \
    \    val nDeno1 = nNum1.last\n        val xNum2 = xNum1.dropRight(1)\n       \
    \ val nNum2 = nNum1.dropRight(1)\n        val xDeno2 = xNum2.last\n        val\
    \ nDeno2 = nNum2.last\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        val xDeno3 = xNum3.last\n        val nDeno3 =\
    \ nNum3.last\n        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xDeno4 = xNum4.last\n        val nDeno4 = nNum4.last\n        val\
    \ xNum5 = xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n       \
    \ val xDeno5 = xNum5.last\n        val nDeno5 = nNum5.last\n        val xNum6\
    \ = xNum5.dropRight(1)\n        val nNum6 = nNum5.dropRight(1)\n        val xDeno6\
    \ = xNum6.last\n        val nDeno6 = nNum6.last\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xDeno7 = xNum7.last\n   \
    \     val nDeno7 = nNum7.last\n        val xNum8 = xNum7.dropRight(1)\n      \
    \  val nNum8 = nNum7.dropRight(1)\n        val xDeno8 = xNum8.last\n        val\
    \ nDeno8 = nNum8.last\n        val xNum9 = xNum8.dropRight(1)\n        val nNum9\
    \ = nNum8.dropRight(1)\n        val xDeno9 = xNum9.last\n        val nDeno9 =\
    \ nNum9.last\n        val xNum10 = xNum9.dropRight(1)\n        val nNum10 = nNum9.dropRight(1)\n\
    \        val xDeno10 = xNum10.last\n        val nDeno10 = nNum10.last\n      \
    \  val xNum11 = xNum10.dropRight(1)\n", "        val nums = x.split(\"/\")\n \
    \       val dens = n.split(\"/\")\n        val numsLength = nums.length\n    \
    \    val densLength = dens.length\n        if (numsLength != densLength) {\n \
    \           return false\n        }\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var sum = 0\n        var product = 1\n        while\
    \ (i < numsLength && j < densLength) {\n            sum = nums(i) * dens(j)\n\
    \            product = product * sum\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        if (product == 1) {\n            return\
    \ true\n        }\n        return false", "        val nums = x.split(\"/\")\n\
    \        val dens = n.split(\"/\")\n        if (nums.length != dens.length) false\n\
    \        else {\n            var i = 0\n            var j = 0\n            var\
    \ sum = 0\n            while (i < nums.length && j < dens.length) {\n        \
    \        sum = sum + nums(i) * dens(j)\n                i = i + 1\n          \
    \      j = j + 1\n            }\n            if (sum == 0) true\n            else\
    \ false\n        }", "        val xNum = x.split(\"/\").toList\n        val nNum\
    \ = n.split(\"/\").toList\n        val xNum1 = xNum(0)\n        val nNum1 = nNum(0)\n\
    \        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n        val xNum3 =\
    \ xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n        val nNum4\
    \ = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n        val xNum6\
    \ = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n        val nNum7\
    \ = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n        val xNum9\
    \ = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n        val\
    \ nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 = nNum10\n \
    \       val xNum12 = xNum11\n        val nNum12 = nNum11\n        val xNum13 =\
    \ xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n        val\
    \ nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15 = nNum14\n\
    \        val xNum16 = xNum15\n        val nNum16 = nNum15\n        val xNum17\
    \ = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n       \
    \ val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19 = nNum18\n\
    \        val xNum20 = xNum19\n        val nNum20 = nNum19\n        val xNum21\
    \ = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n       \
    \ val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23 = nNum22\n\
    \        val xNum24 = xNum23\n        val nNum24 = nNum23\n        val xNum25\
    \ = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n       \
    \ val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27 = nNum26\n\
    \        val xNum", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        val xNum1 = xNum.init\n        val nNum1 = nNum.init\n        val xDeno1\
    \ = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum1.init\n      \
    \  val nNum2 = nNum1.init\n        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n\
    \        val xNum3 = xNum2.init\n        val nNum3 = nNum2.init\n        val xDeno3\
    \ = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 = xNum3.init\n    \
    \    val nNum4 = nNum3.init\n        val xDeno4 = xDeno3\n        val nDeno4 =\
    \ nDeno3\n        val xNum5 = xNum4.init\n        val nNum5 = nNum4.init\n   \
    \     val xDeno5 = xDeno4\n        val nDeno5 = nDeno4\n        val xNum6 = xNum5.init\n\
    \        val nNum6 = nNum5.init\n        val xDeno6 = xDeno5\n        val nDeno6\
    \ = nDeno5\n        val xNum7 = xNum6.init\n        val nNum7 = nNum6.init\n \
    \       val xDeno7 = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 =\
    \ xNum7.init\n        val nNum8 = nNum7.init\n        val xDeno8 = xDeno7\n  \
    \      val nDeno8 = nDeno7\n        val xNum9 = xNum8.init\n        val nNum9\
    \ = nNum8.init\n        val xDeno9 = xDeno8\n        val nDeno9 = nDeno8\n   \
    \     val xNum10 = xNum9.init\n        val nNum10 = nNum9.init\n        val xDeno10\
    \ = xDeno9\n        val nDeno10 = nDeno9\n        val xNum11 = xNum10.init\n \
    \       val nNum11 = nNum10.init\n        val xDeno11 = xDeno10\n        val nDeno11\
    \ = nDeno10\n        val xNum12 = xNum11.init\n        val ", "        val x =\
    \ x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n \
    \       val xx = x.toSet\n        val nn = n.toSet\n        val xn = xx.filter(_\
    \ != 0)\n        val nn = xn.filter(_ != 0)\n        val xx = xx.filter(_ != 0)\n\
    \        val nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n    \
    \    val nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n        val\
    \ nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n        val nn =\
    \ xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_\
    \ != 0)\n        val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n\
    \        val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n    \
    \    val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n        val\
    \ xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n        val xn =\
    \ xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n        val xn = xx.filter(_\
    \ != 0)\n        val nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n\
    \        val nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n    \
    \    val nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n        val\
    \ nn = xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n        val nn =\
    \ xn.filter(_ != 0)\n        val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_\
    \ != 0)\n        val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n\
    \        val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n    \
    \    val xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n        val\
    \ xn = xx.filter(_ != 0)\n        val nn = xn.filter(_ != 0)\n        val xn =\
    \ xx.filter(_", "        val fraction = x.split(\"/\").map(_.toInt)\n        val\
    \ numerator = fraction(0)\n        val denominator = fraction(1)\n        if (numerator\
    \ == 0 && denominator == 0) true\n        else numerator % denominator == 0",
  "        val xNum = x.split(\"/\").map(_.toInt)\n        val nNum = n.split(\"/\"\
    ).map(_.toInt)\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n\
    \        if(xDeno == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n\
    \        else if(xNum.last == 0) false\n        else if(xNum.last == nNum.last)\
    \ true\n        else if(xNum.last < nNum.last) simplify(xNum.dropRight(1).mkString+\"\
    /\"+nNum.dropRight(1).mkString, n.dropRight(1).mkString)\n        else simplify(xNum.dropRight(1).mkString+\"\
    /\"+nNum.dropRight(1).mkString, n.dropRight(1).mkString)", "        val nums =\
    \ x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLen = nums.length\n\
    \        val densLen = dens.length\n        val numsSum = nums.sum.toDouble\n\
    \        val densSum = dens.sum.toDouble\n        val numsSumInv = numsSum / densSum\n\
    \        val densSumInv = densSum / numsSum\n        val numsSumInv = numsSum\
    \ / densSum\n        val numsSumInv = numsSum / densSum\n        val numsSumInv\
    \ = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n        val\
    \ numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n\
    \        val numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum\
    \ / densSum\n        val numsSumInv = numsSum / densSum\n        val numsSumInv\
    \ = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n        val\
    \ numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n\
    \        val numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum\
    \ / densSum\n        val numsSumInv = numsSum / densSum\n        val numsSumInv\
    \ = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n        val\
    \ numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n\
    \        val numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum\
    \ / densSum\n        val numsSumInv = numsSum / densSum\n        val numsSumInv\
    \ = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n        val\
    \ numsSumInv = numsSum / densSum\n        val numsSumInv = numsSum / densSum\n\
    \        val numsSumInv = numsSum / densSum\n        val numsSumIn", "       \
    \ val xNum = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val xNum2\
    \ = xNum.map(_.toInt)\n        val nNum2 = nNum.map(_.toInt)\n        val xNum3\
    \ = xNum2.filter(_ > 0)\n        val nNum3 = nNum2.filter(_ > 0)\n        val\
    \ xNum4 = xNum3.filter(_ > 0)\n        val nNum4 = nNum3.filter(_ > 0)\n     \
    \   val xNum5 = xNum4.filter(_ > 0)\n        val nNum5 = nNum4.filter(_ > 0)\n\
    \        val xNum6 = xNum5.filter(_ > 0)\n        val nNum6 = nNum5.filter(_ >\
    \ 0)\n        val xNum7 = xNum6.filter(_ > 0)\n        val nNum7 = nNum6.filter(_\
    \ > 0)\n        val xNum8 = xNum7.filter(_ > 0)\n        val nNum8 = nNum7.filter(_\
    \ > 0)\n        val xNum9 = xNum8.filter(_ > 0)\n        val nNum9 = nNum8.filter(_\
    \ > 0)\n        val xNum10 = xNum9.filter(_ > 0)\n        val nNum10 = nNum9.filter(_\
    \ > 0)\n        val xNum11 = xNum10.filter(_ > 0)\n        val nNum11 = nNum10.filter(_\
    \ > 0)\n        val xNum12 = xNum11.filter(_ > 0)\n        val nNum12 = nNum11.filter(_\
    \ > 0)\n        val xNum13 = xNum12.filter(_ > 0)\n        val nNum13 = nNum12.filter(_\
    \ > 0)\n        val xNum14 = xNum13.filter(_ > 0)\n        val nNum14 = nNum13.filter(_\
    \ > 0)\n        val xNum15 = xNum14.filter(_ > 0)\n        val nNum15 = nNum14.filter(_\
    \ > 0)\n        val xNum16 = xNum15.filter(_ > 0)\n        val nNum16 = nNum15.filter(_\
    \ > 0)\n        val xNum17 = xNum16.filter(_ > 0)\n        val nNum17 = nNum16.filter(_\
    \ > 0)\n        val xNum18 = xNum17.filter(_ > 0)\n        val nNum18 = nNum17.filter(_\
    \ > 0)\n        val xNum19 = xNum18.filter(_ > 0)\n        val nNum19 = nNum18.filter(_\
    \ > 0)\n        val xNum20 = xNum19.filter(_ > 0)\n        val nNum20 = nNum19.filter(_\
    \ > 0)\n", "        val fraction = x.split(\"/\")\n        val numerator = fraction(0)\n\
    \        val denominator = fraction(1)\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsFloat = numerator.asInstanceOf[Float]\n\
    \        val denominatorAsFloat = denominator.asInstanceOf[Float]\n        val\
    \ numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n        val denominatorAsBigDecimal\
    \ = denominator.asInstanceOf[BigDecimal]\n        val numeratorAsBigInt = numerator.asInstanceOf[BigInt]\n\
    \        val denominatorAsBigInt = denominator.asInstanceOf[BigInt]\n        val\
    \ numeratorAsBoolean = numerator.asInstanceOf[Boolean]\n        val denominatorAsBoolean\
    \ = denominator.asInstanceOf[Boolean]\n        val numeratorAsString = numerator.asInstanceOf[String]\n\
    \        val denominatorAsString = denominator.asInstanceOf[String]\n        val\
    \ numeratorAsInt = numerator.asInstanceOf[Int]\n        val denominatorAsInt =\
    \ denominator.asInstanceOf[Int]\n        val numeratorAsDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorAsDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsFloat = numerator.asInstanceOf[Float]\n\
    \        val denominatorAsFloat = denominator.asInstanceOf[Float]\n        val\
    \ numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n        val denominatorAsBigDecimal\
    \ = denominator.asInstanceOf[BigDecimal]\n        val numeratorAsBigInt = numerator.asInstanceOf[BigInt]\n\
    \        val denominatorAsBigInt = denominator.asInstanceOf[BigInt]\n        val\
    \ numeratorAsBoolean = numerator.asInstanceOf[Boolean]\n        val denominatorAsBoolean\
    \ = denominator.asInstanceOf[Boolean]\n        val numeratorAsString = numerator.asInstanceOf[",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        if(xDeno\
    \ == 0 || nDeno == 0) false\n        else if(xDeno == nDeno) true\n        else\
    \ if(xNum.last == nNum.last) simplify(xNum.dropRight(1).mkString+\"/\"+nNum.dropRight(1).mkString,\
    \ n.dropRight(1).mkString)\n        else simplify(xNum.mkString+\"/\"+nNum.mkString,\
    \ n.mkString)", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum)) {\n         \
    \   return true\n        }\n        else {\n            return false\n       \
    \ }", "        val nums = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"\
    /\").map(_.toInt)\n        val numsSum = nums.sum\n        val densSum = dens.sum\n\
    \        if (numsSum == densSum) {\n            true\n        } else {\n     \
    \       false\n        }", "        val nums = x.split(\"/\")\n        val dens\
    \ = n.split(\"/\")\n        if (nums.length != dens.length) false\n        else\
    \ {\n            val numsMap = nums.toMap\n            val densMap = dens.toMap\n\
    \            val keys = numsMap.keySet.intersect(densMap.keySet)\n           \
    \ val numsSet = numsMap(keys)\n            val densSet = densMap(keys)\n     \
    \       val numsSetSize = numsSet.size\n            val densSetSize = densSet.size\n\
    \            if (numsSetSize != densSetSize) false\n            else {\n     \
    \           val numsSetIterator = numsSet.iterator\n                val densSetIterator\
    \ = densSet.iterator\n                val numsSetIteratorSize = numsSetIterator.size\n\
    \                val densSetIteratorSize = densSetIterator.size\n            \
    \    val numsSetIteratorIterator = numsSetIterator.iterator\n                val\
    \ densSetIteratorIterator = densSetIterator.iterator\n                val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n                val densSetIteratorIteratorSize\
    \ = densSetIteratorIterator.size\n                val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n                val densSetIteratorIteratorIterator\
    \ = densSetIteratorIterator.iterator\n                val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n                val densSetIteratorIteratorIteratorSize\
    \ = densSetIteratorIteratorIterator.size\n                val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n                val densSetIteratorIteratorIteratorIterator\
    \ = densSetIteratorIteratorIterator.iterator\n                val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n                val densSetIteratorIteratorIteratorIteratorSize\
    \ = densSetIteratorIteratorIteratorIterator.size\n                val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n                val densSetIteratorIteratorIteratorIteratorIterator\
    \ = densSetIteratorIteratorIteratorIterator.iterator\n                val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n                val\
    \ densSetIteratorIteratorIteratorIteratorIteratorSize = densSetIteratorIteratorIteratorIteratorIterator.size\n\
    \                val numsSetIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIterator.iterator\n                val\
    \ densSetIteratorIteratorIteratorIteratorIteratorIterator = densSetIteratorIterator",
  "        val fraction = x.split(\"/\")\n        val numerator = fraction(0)\n  \
    \      val denominator = fraction(1)\n        val numeratorInt = numerator.toInt\n\
    \        val denominatorInt = denominator.toInt\n        val numeratorFraction\
    \ = numeratorInt / denominatorInt\n        val numeratorFractionString = numeratorFraction.toString\n\
    \        val numeratorFractionFraction = numeratorFractionString.split(\"/\")\n\
    \        val numeratorFractionFractionInt = numeratorFractionFraction(0)\n   \
    \     val numeratorFractionFractionFractionInt = numeratorFractionFractionInt.toInt\n\
    \        val numeratorFractionFractionFraction = numeratorFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionString = numeratorFractionFractionFraction.toString\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionString.split(\"\
    /\")\n        val numeratorFractionFractionFractionFractionInt = numeratorFractionFractionFraction(0)\n\
    \        val numeratorFractionFractionFractionFractionInt = numeratorFractionFractionFractionInt.toInt\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionFractionString\
    \ = numeratorFractionFractionFractionFraction.toString\n        val numeratorFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionString.split(\"/\")\n        val\
    \ numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFraction(0)\n\
    \        val numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFractionInt.toInt\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionFractionString\
    \ = numeratorFractionFractionFractionFraction.toString\n        val numeratorFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionString.split(\"/\")\n        val\
    \ numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFraction(0)\n\
    \        val numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFractionInt.toInt\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionFractionInt\
    \ / denominatorInt\n        val numeratorFractionFractionFractionFractionString\
    \ = numeratorFractionFractionFractionFractionFraction.toString\n        val numeratorFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionString.split(\"/\")\n        val\
    \ numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFraction(0)\n\
    \        val numeratorFractionFractionFractionFractionFractionInt = numeratorFractionFractionFractionFractionInt.toInt\n\
    \        val numeratorFractionFractionFractionFraction = numeratorFractionFractionFractionFractionInt\
    \ / denominatorInt\n        val numerator", "        val numer = x.split(\"/\"\
    ).map(_.toInt)\n        val denom = n.split(\"/\").map(_.toInt)\n        val numSize\
    \ = numer\n        val denomSize = denom\n        if(numSize == denomSize){\n\
    \            val product = numSize * denomSize\n            if(product == numSize){\n\
    \                true\n            }else{\n                false\n           \
    \ }\n        }else{\n            false\n        }", "        val xNum = x.split(\"\
    /\").map(_.toInt)\n        val nNum = n.split(\"/\").map(_.toInt)\n        val\
    \ xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n\
    \        val nNum1 = nNum.dropRight(1)\n        val xDeno1 = xDeno\n        val\
    \ nDeno1 = nDeno\n        val xNum2 = xNum1.dropRight(1)\n        val nNum2 =\
    \ nNum1.dropRight(1)\n        val xDeno2 = xDeno1\n        val nDeno2 = nDeno1\n\
    \        val xNum3 = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n\
    \        val xDeno3 = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 =\
    \ xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n        val xDeno4\
    \ = xDeno3\n        val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n       \
    \ val nDeno5 = nDeno4\n        val xNum6 = xNum5.dropRight(1)\n        val nNum6\
    \ = nNum5.dropRight(1)\n        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n\
    \        val xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n\
    \        val xDeno7 = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 =\
    \ xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n        val xDeno8\
    \ = xDeno7\n        val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n       \
    \ val nDeno9 = nDeno8\n        val xNum10 = xNum9.dropRight(1)\n        val nNum10\
    \ = nNum9.dropRight(1)\n        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n\
    \        val xNum", "        val nums = x.split(\"/\").map(_.toInt)\n        val\
    \ denoms = n.split(\"/\").map(_.toInt)\n        val numsSum = nums.sum\n     \
    \   val denomsSum = denoms.sum\n        if (numsSum == denomsSum) {\n        \
    \    val numsProduct = nums.product\n            val denomsProduct = denoms.product\n\
    \            if (numsProduct == denomsProduct) {\n                val numsDiff\
    \ = nums.diff\n                val denomsDiff = denoms.diff\n                if\
    \ (numsDiff == denomsDiff) {\n                    val numsQuo = nums.quot(denoms.quot(numsSum))\n\
    \                    val denomsQuo = denoms.quot(denomsSum)\n                \
    \    if (numsQuo == denomsQuo) {\n                        val numsRem = nums.rem(denoms.rem(numsSum))\n\
    \                        val denomsRem = denoms.rem(denomsSum)\n             \
    \           if (numsRem == denomsRem) {\n                            val numsMod\
    \ = nums.mod(denoms.mod(numsSum))\n                            val denomsMod =\
    \ denoms.mod(denomsSum)\n                            if (numsMod == denomsMod)\
    \ {\n                                true\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n        false", "        val xNum = x.split(\"/\")\n        val\
    \ nNum = n.split(\"/\")\n        val xNumLen = xNum.length\n        val nNumLen\
    \ = nNum.length\n        if(xNumLen != nNumLen) {\n            return false\n\
    \        }\n        val xNumInts = xNum.map(_.toInt)\n        val nNumInts = nNum.map(_.toInt)\n\
    \        val xNumSum = xNumInts.sum\n        val nNumSum = nNumInts.sum\n    \
    \    if(xNumSum != nNumSum) {\n            return false\n        }\n        val\
    \ xNumProduct = xNumInts.product\n        val nNumProduct = nNumInts.product\n\
    \        if(xNumProduct != nNumProduct) {\n            return false\n        }\n\
    \        true", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numInts = numer.toInt\n        val denomInts = denom.toInt\n\
    \        val numIntArray = numInts.toArray\n        val denomIntArray = denomInts.toArray\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        val denomIntArrayLength = denomIntArray.length\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        val denomIntArrayLength = denomIntArray.length\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        val denomIntArrayLength = denomIntArray.length\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        val denomIntArrayLength = denomIntArray.length\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        val denomIntArrayLength = denomIntArray.length\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        val denomIntArrayLength = denomIntArray.length\n\
    \        val numIntArrayLength = numIntArray.length\n        val denomIntArrayLength\
    \ = denomIntArray.length\n        val numIntArrayLength = numIntArray.length\n\
    \        val denomIntArrayLength = denomIntArray.length\n        val numIntArrayLength\
    \ = numIntArray.length\n        ", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        val numeratorIsWhole = numerator % 1 == 0\n        val denominatorIsWhole\
    \ = denominator % 1 == 0\n        if(numeratorIsWhole && denominatorIsWhole){\n\
    \            return true\n        }\n        else{\n            return false\n\
    \        }", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLength = nums.length\n        val densLength = dens.length\n\
    \        if (numsLength != densLength) {\n            return false\n        }\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n\
    \        var sum = 0\n        var product = 1\n        while (i < numsLength)\
    \ {\n            sum = sum + nums(i).toInt\n            i = i + 1\n        }\n\
    \        while (j < densLength) {\n            product = product * dens(j).toInt\n\
    \            j = j + 1\n        }\n        if (sum == product) {\n           \
    \ return true\n        }\n        return false", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xDenoInt = (xDeno).toInt\n       \
    \ val nDenoInt = (nDeno).toInt\n        val xDenoSum = xDenoInt / xDenoInt\n \
    \       val nDenoSum = nDenoInt / nDenoInt\n        val xDenoSumInt = (xDenoSum).toInt\n\
    \        val nDenoSumInt = (nDenoSum).toInt\n        val xDenoSumSum = xDenoSumInt\
    \ / xDenoSumInt\n        val nDenoSumSum = nDenoSumInt / nDenoSumInt\n       \
    \ val xDenoSumSumInt = (xDenoSumSum).toInt\n        val nDenoSumSumInt = (nDenoSumSum).toInt\n\
    \        val xDenoSumSumSum = xDenoSumSumInt / xDenoSumSumInt\n        val nDenoSumSumSum\
    \ = nDenoSumSumInt / nDenoSumSumInt\n        val xDenoSumSumSumInt = (xDenoSumSumSum).toInt\n\
    \        val nDenoSumSumSumInt = (nDenoSumSumSum).toInt\n        val xDenoSumSumSumSum\
    \ = xDenoSumSumSumInt / xDenoSumSumSumInt\n        val nDenoSumSumSumSum = nDenoSumSumSumInt\
    \ / nDenoSumSumSumInt\n        val xDenoSumSumSumSumInt = (xDenoSumSumSumSum).toInt\n\
    \        val nDenoSumSumSumSumInt = (nDenoSumSumSumSum).toInt\n        val xDenoSumSumSumSumSum\
    \ = xDenoSumSumSumSumInt / xDenoSumSumSumSumInt\n        val nDenoSumSumSumSumSum\
    \ = nDenoSumSumSumSumInt / nDenoSumSumSumSumInt\n        val xDenoSumSumSumSumSumInt\
    \ = (xDenoSumSumSumSumSum).toInt\n        val nDenoSumSumSumSumSumInt = (nDenoSumSumSumSum).toInt\n\
    \        val xDenoSumSumSumSumSum = xDenoSumSumSumSumSumInt / xDenoSumSumSumSumSumInt\n\
    \        val nDenoSumSum", "        val x = x.split(\"/\").map(_.toInt)\n    \
    \    val n = n.split(\"/\").map(_.toInt)\n        val x0 = x(0)\n        val n0\
    \ = n(0)\n        val xn = x(1)\n        val nn = n(1)\n        val xd = x(0)\
    \ - xn\n        val nd = n(0) - nn\n        val xn = xn - xd\n        val nn =\
    \ nn - nd\n        (xn == 0 && nn == 0) || (xn != 0 && nn != 0)", "        val\
    \ xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n     \
    \   if(xNum.product(xNum) == nNum.product(nNum)) {\n            return true\n\
    \        }\n        else {\n            return false\n        }", "        val\
    \ nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength\
    \ = nums.length\n        val densLength = dens.length\n        val numsSum = nums.sum\n\
    \        val densSum = dens.sum\n        val numsSumInt = numsSum.toInt\n    \
    \    val densSumInt = densSum.toInt\n        val numsSumFraction = numsSumInt\
    \ / densSumInt\n        val densSumFraction = densSumInt / numsSumInt\n      \
    \  val numsSumFractionInt = numsSumFraction.toInt\n        val densSumFractionInt\
    \ = densSumFraction.toInt\n        val numsSumFractionFraction = numsSumFractionInt\
    \ / densSumFractionInt\n        val densSumFractionFraction = densSumFractionInt\
    \ / numsSumFractionInt\n        val numsSumFractionFractionInt = numsSumFractionFraction.toInt\n\
    \        val densSumFractionFractionInt = densSumFractionFraction.toInt\n    \
    \    val numsSumFractionFractionFraction = numsSumFractionFractionInt / densSumFractionFractionInt\n\
    \        val densSumFractionFractionFraction = densSumFractionFractionInt / numsSumFractionFractionInt\n\
    \        val numsSumFractionFractionFractionInt = numsSumFractionFractionFraction.toInt\n\
    \        val densSumFractionFractionFractionInt = densSumFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFraction = numsSumFractionFractionFractionInt\
    \ / densSumFractionFractionFractionInt\n        val densSumFractionFractionFractionFraction\
    \ = densSumFractionFractionFractionInt / numsSumFractionFractionFractionInt\n\
    \        val numsSumFractionFractionFractionFractionInt = numsSumFractionFractionFractionFraction.toInt\n\
    \        val densSumFractionFractionFractionFractionInt = densSumFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFractionInt\
    \ / densSumFractionFractionFractionFractionInt\n        val densSumFractionFractionFractionFractionFraction\
    \ = densSumFractionFractionFractionFractionInt / numsSumFractionFractionFractionFractionInt\n\
    \        val numsSumFractionFractionFractionFractionFractionInt = numsSumFractionFractionFractionFractionFraction.toInt\n\
    \        val densSumFractionFractionFractionFractionFractionInt = densSumFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFraction = numsSumFraction",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        if (numsLength\
    \ != densLength) {\n            return false\n        }\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var sum = 0\n        var product\
    \ = 1\n        while (i < numsLength && j < densLength) {\n            val numsElement\
    \ = nums(i)\n            val densElement = dens(j)\n            val numsElementInt\
    \ = numsElement.asInstanceOf[Int]\n            val densElementInt = densElement.asInstanceOf[Int]\n\
    \            sum += numsElementInt * densElementInt\n            product *= densElementInt\n\
    \            i += 1\n            j += 1\n        }\n        if (sum == product)\
    \ {\n            return true\n        }\n        return false", "        val x\
    \ = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val numerator = x(0)*n(0)\n        val denominator = x(1)*n(1)\n    \
    \    numerator == denominator && numerator > 0", "        val fraction = x.split(\"\
    /\").map(_.toInt)\n        val numerator = fraction(0)\n        val denominator\
    \ = fraction(1)\n        val fraction2 = numerator / denominator\n        val\
    \ fraction3 = numerator % denominator\n        val fraction4 = numerator / denominator\n\
    \        val fraction5 = numerator % denominator\n        val fraction6 = numerator\
    \ / denominator\n        val fraction7 = numerator % denominator\n        val\
    \ fraction8 = numerator / denominator\n        val fraction9 = numerator % denominator\n\
    \        val fraction10 = numerator / denominator\n        val fraction11 = numerator\
    \ % denominator\n        val fraction12 = numerator / denominator\n        val\
    \ fraction13 = numerator % denominator\n        val fraction14 = numerator / denominator\n\
    \        val fraction15 = numerator % denominator\n        val fraction16 = numerator\
    \ / denominator\n        val fraction17 = numerator % denominator\n        val\
    \ fraction18 = numerator / denominator\n        val fraction19 = numerator % denominator\n\
    \        val fraction20 = numerator / denominator\n        val fraction21 = numerator\
    \ % denominator\n        val fraction22 = numerator / denominator\n        val\
    \ fraction23 = numerator % denominator\n        val fraction24 = numerator / denominator\n\
    \        val fraction25 = numerator % denominator\n        val fraction26 = numerator\
    \ / denominator\n        val fraction27 = numerator % denominator\n        val\
    \ fraction28 = numerator / denominator\n        val fraction29 = numerator % denominator\n\
    \        val fraction30 = numerator / denominator\n        val fraction31 = numerator\
    \ % denominator\n        val fraction32 = numerator / denominator\n        val\
    \ fraction33 = numerator % denominator\n        val fraction34 = numerator / denominator\n\
    \        val fraction35 = numerator % denominator\n        val fraction36 = numerator\
    \ / denominator\n        val fraction37 = numerator % denominator\n        val\
    \ fraction38 = numerator / denominator\n        val fraction39 = numerator % denominator\n\
    \        val fraction40 = numerator / denominator\n        val fraction41 = numerator\
    \ % denominator\n        val fraction42 = numerator / denominator\n        val\
    \ fraction43 = numerator % denominator\n        val fraction44 = numerator / denominator\n\
    \        val fraction45 = numerator % denominator\n        val fraction46 = numerator\
    \ / denominator\n        val fraction47 = numerator % denominator\n        val\
    \ fraction48 = numerator / denominator\n        val fraction49 = numerator % denominator\n\
    \        val fraction50 = numerator / denominator\n        val fraction51 = ",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        if(xNum.product(xNum) == nNum.product(nNum) && xNum.product(xNum) ==\
    \ nNum.product(nNum)) {\n            return true\n        }\n        return false",
  "        val numer = x.split(\"/\").map(_.toInt)\n        val denom = n.split(\"\
    /\").map(_.toInt)\n        val numer_sum = numer.reduce((x,y) => x + y)\n    \
    \    val denom_sum = denom.reduce((x,y) => x + y)\n        val result = numer_sum\
    \ / denom_sum == numer_sum\n        result", "        val xNum = x.split(\"/\"\
    ).toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xNum1 = xNum.init\n        val nNum1\
    \ = nNum.init\n        val xDeno1 = xDeno\n        val nDeno1 = nDeno\n      \
    \  val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n        val xDeno2 =\
    \ xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n        val\
    \ nNum3 = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3 = nDeno\n\
    \        val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n        val xDeno4\
    \ = xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n       \
    \ val nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5 = nDeno\n\
    \        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n        val xDeno6\
    \ = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n       \
    \ val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7 = nDeno\n\
    \        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n        val xDeno8\
    \ = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n       \
    \ val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9 = nDeno\n\
    \        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n        val xDeno10\
    \ = xDeno\n        val nDeno10 = nDeno\n        val xNum11 = xNum.init\n     \
    \   val nNum11 = nNum.init\n        val xDeno11 = xDeno\n        val nDeno11 =\
    \ nDeno\n        val xNum12 = xNum.tail\n        val nNum12 = nNum.tail\n    \
    \    val xDeno12 = xDeno\n        val ", "        val nums = x.split(\"/\")\n\
    \        val dens = n.split(\"/\")\n        if (nums.length != dens.length)\n\
    \            return false\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var sum = 0\n        var temp = 0\n        while (i < nums.length\
    \ && j < dens.length) {\n            sum = nums(i) * dens(j)\n            temp\
    \ = sum\n            while (sum != 0) {\n                sum = sum / 10\n    \
    \            k++\n            }\n            val temp = nums(i) * dens(j)\n  \
    \          if (temp == sum)\n                return true\n            else if\
    \ (temp != sum)\n                return false\n            i++\n            j++\n\
    \        }\n        return false", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum))\n\
    \        {\n            true\n        }\n        else\n        {\n           \
    \ false\n        }", "        val numer = x.split(\"/\")(0)\n        val denom\
    \ = x.split(\"/\")(1)\n        val numInt = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt = (denom.toInt * denom.toInt).toInt\n        val numInt2\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt2 = (denom.toInt *\
    \ denom.toInt).toInt\n        val numInt3 = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt3 = (denom.toInt * denom.toInt).toInt\n        val numInt4\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt4 = (denom.toInt *\
    \ denom.toInt).toInt\n        val numInt5 = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt5 = (denom.toInt * denom.toInt).toInt\n        val numInt6\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt6 = (denom.toInt *\
    \ denom.toInt).toInt\n        val numInt7 = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt7 = (denom.toInt * denom.toInt).toInt\n        val numInt8\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt8 = (denom.toInt *\
    \ denom.toInt).toInt\n        val numInt9 = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt9 = (denom.toInt * denom.toInt).toInt\n        val numInt10\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt10 = (denom.toInt *\
    \ denom.toInt).toInt\n        val numInt11 = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt11 = (denom.toInt * denom.toInt).toInt\n        val numInt12\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt12 = (denom.toInt *\
    \ denom.toInt).toInt\n        val numInt13 = (numer.toInt * denom.toInt).toInt\n\
    \        val denomInt13 = (denom.toInt * denom.toInt).toInt\n        val numInt14\
    \ = (numer.toInt * denom.toInt).toInt\n        val denomInt14 = (denom.toInt *\
    \ denom.to", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     if(xDeno == 0 || nDeno == 0) return false\n        val xNum1 = xNum.init\n\
    \        val nNum1 = nNum.init\n        val xDeno1 = xDeno\n        val nDeno1\
    \ = nDeno\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n    \
    \    val xDeno2 = xDeno\n        val nDeno2 = nDeno\n        if(xDeno1 == xDeno2\
    \ && nDeno1 == nDeno2) return true\n        if(xDeno1 == xDeno2 && nDeno1 != nDeno2)\
    \ return false\n        if(xDeno1 != xDeno2 && nDeno1 == nDeno2) return false\n\
    \        if(xDeno1 != xDeno2 && nDeno1 != nDeno2) return false\n        if(xNum1.length\
    \ == nNum1.length && xNum2.length == nNum2.length && xNum1.length == xNum2.length\
    \ && xNum1.length == nNum1.length && xNum2.length == nNum2.length && xNum1.length\
    \ == xNum2.length && xNum1.length == nNum1.length && xNum2.length == nNum2.length\
    \ && xNum1.length == xNum2.length && xNum1.length == nNum1.length && xNum2.length\
    \ == nNum2.length && xNum1.length == xNum2.length && xNum1.length == nNum1.length\
    \ && xNum2.length == nNum2.length && xNum1.length == xNum2.length && xNum1.length\
    \ == nNum1.length && xNum2.length == nNum2.length && xNum1.length == xNum2.length\
    \ && xNum1.length == nNum1.length && xNum2.length == nNum2.length && xNum1.length\
    \ == xNum2.length && xNum1.length == nNum1.length && xNum2.length == nNum2.length\
    \ && xNum1.length == xNum2.length && xNum1.length == nNum1.length && xNum2.length\
    \ == nNum2.length && xNum1.length == xNum2.length && xNum1.length == nNum1.length\
    \ && xNum2.length == nNum2.length && xNum1.length == xNum", "        val fraction\
    \ = x.split(\"/\").map(_.toInt)\n        val numerator = fraction(0)\n       \
    \ val denominator = fraction(1)\n        val numeratorIsWhole = numerator == numerator.toInt\n\
    \        val denominatorIsWhole = denominator == denominator.toInt\n        val\
    \ numeratorIsNegative = numerator < 0\n        val denominatorIsNegative = denominator\
    \ < 0\n        val numeratorIsZero = numerator == 0\n        val denominatorIsZero\
    \ = denominator == 0\n        val numeratorIsNegativeOrZero = numeratorIsNegative\
    \ || numeratorIsZero\n        val denominatorIsNegativeOrZero = denominatorIsNegative\
    \ || denominatorIsZero\n        val numeratorIsNegativeOrZeroOrZero = numeratorIsNegativeOrZero\
    \ || denominatorIsNegativeOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZero || denominatorIsNegativeOrZeroOrZero\n   \
    \     val numeratorIsNegativeOrZeroOrZeroOrZeroOrZero = numeratorIsNegativeOrZeroOrZeroOrZero\
    \ || denominatorIsNegativeOrZeroOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZeroOrZero || denominatorIsNegativeOrZeroOrZeroOrZeroOrZero\n\
    \        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ || denominatorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZero\n        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || denominatorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\n\
    \        val numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ || denominatorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\n       \
    \ val numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = numeratorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ || denominatorIsNegativeOrZeroOrZeroOrZeroOrZeroOrZero", "        val nums =\
    \ x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength =\
    \ nums.length\n        val densLength = dens.length\n        if(numsLength !=\
    \ densLength) {\n            return false\n        }\n        val numsSet = nums.toSet\n\
    \        val densSet = dens.toSet\n        if(numsSet.size == densSet.size &&\
    \ densSet.size == 1) {\n            val numsSetIterator = numsSet.iterator\n \
    \           val densSetIterator = densSet.iterator\n            val numsSetIteratorNext\
    \ = numsSetIterator.next\n            val densSetIteratorNext = densSetIterator.next\n\
    \            val numsSetIteratorNextDouble = numsSetIterator.nextDouble\n    \
    \        val densSetIteratorNextDouble = densSetIterator.nextDouble\n        \
    \    if(numsSetIteratorNext == densSetIteratorNext) {\n                if(numsSetIteratorNextDouble\
    \ == densSetIteratorNextDouble) {\n                    return true\n         \
    \       }\n            }\n        }\n        return false", "        val xNum\
    \ = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product*(nNum.product)\
    \ == xNum.product*(nNum.product+1)) true else false", "        val nums = x.split(\"\
    /\").map(_.toInt)\n        val dens = n.split(\"/\").map(_.toInt)\n        val\
    \ numsSum = nums.sum\n        val densSum = dens.sum\n        val numsSumInv =\
    \ numsSum / densSum\n        val densSumInv = densSum / numsSum\n        val numsSumInv2\
    \ = numsSumInv * numsSumInv\n        val densSumInv2 = densSumInv * densSumInv\n\
    \        val numsSumInv3 = numsSumInv * numsSumInv * numsSumInv\n        val densSumInv3\
    \ = densSumInv * densSumInv * densSumInv\n        val numsSumInv4 = numsSumInv\
    \ * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv4 = densSumInv\
    \ * densSumInv * densSumInv * densSumInv\n        val numsSumInv5 = numsSumInv\
    \ * numsSumInv * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv5\
    \ = densSumInv * densSumInv * densSumInv * densSumInv * densSumInv\n        val\
    \ numsSumInv6 = numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv6 = densSumInv * densSumInv * densSumInv\
    \ * densSumInv * densSumInv * densSumInv\n        val numsSumInv7 = numsSumInv\
    \ * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\n\
    \        val densSumInv7 = densSumInv * densSumInv * densSumInv * densSumInv *\
    \ densSumInv * densSumInv * densSumInv\n        val numsSumInv8 = numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv8 = densSumInv * densSumInv * densSumInv\
    \ * densSumInv * densSumInv", "        val numer = x.split(\"/\")(0)\n       \
    \ val denom = x.split(\"/\")(1)\n        val numInts = numer.toInt\n        val\
    \ denomInts = denom.toInt\n        if (numInts == 0 || denomInts == 0) {\n   \
    \         return false\n        }\n        if (numInts == denomInts) {\n     \
    \       return true\n        }\n        if (numInts < denomInts) {\n         \
    \   val temp = numInts.toInt\n            numInts = denomInts.toInt\n        \
    \    denomInts = temp\n        }\n        val numInt = (numInts / denomInts).toInt\n\
    \        val denomInt = (denomInts / numInts).toInt\n        val numInt1 = (numInts.toDouble\
    \ / denomInts.toDouble).toInt\n        val denomInt1 = (denomInts.toDouble / numInts.toDouble).toInt\n\
    \        val numInt2 = (denomInts.toDouble / numInts.toDouble).toInt\n       \
    \ val denomInt2 = (denomInts.toDouble / denomInts.toDouble).toInt\n        val\
    \ numInt3 = (numInts.toDouble / denomInts.toDouble).toInt\n        val denomInt3\
    \ = (denomInts.toDouble / numInts.toDouble).toInt\n        val numInt4 = (numInts.toDouble\
    \ / denomInts.toDouble).toInt\n        val denomInt4 = (denomInts.toDouble / denomInts.toDouble).toInt\n\
    \        val numInt5 = (numInts.toDouble / denomInts.toDouble).toInt\n       \
    \ val denomInt5 = (denomInts.toDouble / numInts.toDouble).toInt\n        val numInt6\
    \ = (numInts.toDouble / denomInts.toDouble).toInt\n        val denomInt6 = (denomInts.toDouble\
    \ / denomInts.toDouble).toInt\n        val numInt7 = (numInts.toDouble / denomInts.toDouble).toInt\n\
    \        val denomInt7 = (denomInts.toDouble / numInts.toDouble).toInt\n     \
    \   val numInt8 = (numInts.toDouble / denomInts.toDouble).toInt\n        val denomInt8\
    \ = (denomInts.toDouble / denomInts.toDouble).toInt\n        val numInt9 = (numInts.toDouble\
    \ / denomInts.toDouble).toInt\n        val denomInt9 = (denomInts.toDouble / numInts.toDouble).toInt\n\
    \        val numInt10 = (numInts.", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n        val\
    \ nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n        val\
    \ nNum2 = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n       \
    \ val nNum3 = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n   \
    \     val nNum4 = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n\
    \        val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val fraction = x.split(\"/\").map(_.toInt)\n    \
    \    val numerator = fraction(0)\n        val denominator = fraction(1)\n    \
    \    val numeratorAndDenominator = numerator / denominator\n        val numeratorAndDenominatorAsString\
    \ = numeratorAndDenominator.toString\n        val numeratorAndDenominatorAsInt\
    \ = (numeratorAndDenominatorAsString.toInt)\n        val numeratorAndDenominatorAsDouble\
    \ = (numeratorAndDenominatorAsInt * 1.0)\n        val numeratorAndDenominatorAsFraction\
    \ = numeratorAndDenominatorAsDouble / denominator\n        val numeratorAndDenominatorAsFractionAsString\
    \ = numeratorAndDenominatorAsFraction.toString\n        val numeratorAndDenominatorAsFractionAsInt\
    \ = (numeratorAndDenominatorAsFractionAsString.toInt)\n        val numeratorAndDenominatorAsFractionAsDouble\
    \ = (numeratorAndDenominatorAsFractionAsInt * 1.0)\n        val numeratorAndDenominatorAsFractionAsFraction\
    \ = numeratorAndDenominatorAsFractionAsDouble / denominator\n        val numeratorAndDenominatorAsFractionAsFractionAsString\
    \ = numeratorAndDenominatorAsFractionAsFraction.toString\n        val numeratorAndDenominatorAsFractionAsFractionAsInt\
    \ = (numeratorAndDenominatorAsFractionAsFractionAsString.toInt)\n        val numeratorAndDenominatorAsFractionAsFractionAsDouble\
    \ = (numeratorAndDenominatorAsFractionAsFractionAsInt * 1.0)\n        val numeratorAndDenominatorAsFractionAsFractionAsFraction\
    \ = numeratorAndDenominatorAsFractionAsFractionAsDouble / denominator\n      \
    \  val numeratorAndDenominatorAsFractionAsFractionAsFractionAsString = numeratorAndDenominatorAsFractionAsFractionAsFraction.toString\n\
    \        val numeratorAndDenominatorAsFractionAsFractionAsFractionAsInt = (numeratorAndDenominatorAsFractionAsFractionAsFractionAsString.toInt)\n\
    \        val numeratorAndDenominatorAsFractionAsFractionAsFractionAsDouble = (numeratorAndDenominatorAsFractionAsFractionAsFractionAsInt\
    \ * 1.0)\n        val numeratorAndDenominatorAsFractionAsFractionAsFractionAsFraction\
    \ = numeratorAndDenominatorAsFractionAsFractionAsFractionAsDouble / denominator\n\
    \        val numeratorAndDenominatorAsFractionAsFractionAsFractionAsFractionAsString\
    \ = numeratorAndDenominatorAsFractionAsFractionAsFraction", "        val nums\
    \ = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val numsLength\
    \ = nums.length\n        val densLength = dens.length\n        val numsSum = nums.sum.toInt\n\
    \        val densSum = dens.sum.toInt\n        val numsProduct = nums.product\n\
    \        val densProduct = dens.product\n        val numsProductSum = numsProduct\
    \ * numsSum\n        val densProductSum = densProduct * densSum\n        val numsProductProduct\
    \ = numsProduct * densProduct\n        val densProductProduct = densProduct *\
    \ densProduct\n        val numsProductProductSum = numsProductProduct * numsProductSum\n\
    \        val densProductProductSum = densProductProduct * densProductSum\n   \
    \     val numsProductProductProduct = numsProductProduct * densProductProduct\n\
    \        val densProductProductProduct = densProductProduct * densProductProduct\n\
    \        val numsProductProductProductSum = numsProductProductProduct * numsProductProductSum\n\
    \        val densProductProductProductSum = densProductProductProduct * densProductProductSum\n\
    \        val numsProductProductProductProduct = numsProductProductProduct * densProductProductProduct\n\
    \        val densProductProductProductProduct = densProductProductProduct * densProductProductProduct\n\
    \        val numsProductProductProductProductSum = numsProductProductProductProduct\
    \ * numsProductProductSum\n        val densProductProductProductProductSum = densProductProductProductProduct\
    \ * densProductProductSum\n        val numsProductProductProductProductProduct\
    \ = numsProductProductProductProduct * densProductProductProduct\n        val\
    \ densProductProductProductProductProduct = densProductProductProductProduct *\
    \ densProductProductProduct\n        val numsProductProductProductProductProductSum\
    \ = numsProductProductProductProductProduct * numsProductProductSum\n        val\
    \ densProductProductProductProductSum = densProductProductProductProduct * densProductProductSum\n\
    \        val numsProductProductProductProductProductProduct = numsProductProductProductProductProduct\
    \ * densProductProductProductProduct\n        val densProductProductProductProductProductProduct\
    \ = densProductProductProductProductProduct * densProductProductProductProduct\n\
    \        val numsProductProductProductProductProductProductSum = numsProductProductProductProductProductProduct\
    \ * numsProductProductSum\n        val den", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val numerator = x.reduce((a,\
    \ b) => a * b)\n        val denominator = n.reduce((a, b) => a * b)\n        if\
    \ (numerator == denominator)\n            true\n        else\n            false",
  "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numInt: Int = numer.toInt\n        val denomInt: Int = denom.toInt\n\
    \        if (numInt % denomInt != 0) {\n            return false\n        }\n\
    \        val numInt1 = numInt / denomInt\n        val denomInt1 = denomInt / numInt\n\
    \        if (numInt1 == denomInt1) {\n            return true\n        }\n   \
    \     return false", "        val x = x.split(\"/\")\n        val n = n.split(\"\
    /\")\n        val num = new BigDecimal(x(0)).multiply(new BigDecimal(n(0))).toBigDecimal\n\
    \        val den = new BigDecimal(x(1)).multiply(new BigDecimal(n(1))).toBigDecimal\n\
    \        val result = num.divide(den, BigDecimal.RoundingMode.HALF_UP)\n     \
    \   val isWhole = result.toBigDecimal.equals(BigDecimal.ZERO)\n        isWhole",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        if (numsLength\
    \ != densLength) {\n            return false\n        }\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        var l = 0\n        var sum = 0\n\
    \        var product = 1\n        var isWhole = true\n        while (i < numsLength\
    \ && j < densLength) {\n            sum = nums(i) * dens(j)\n            product\
    \ = nums(i) * dens(j)\n            if (sum > product) {\n                isWhole\
    \ = false\n            }\n            i += 1\n            j += 1\n        }\n\
    \        if (isWhole) {\n            return true\n        }\n        return false",
  "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n\
    \        val xDeno = xNum.last\n        val nDeno = nNum.last\n        val xNum1\
    \ = xNum.init\n        val nNum1 = nNum.init\n        val xDeno1 = xDeno\n   \
    \     val nDeno1 = nDeno\n        val xNum2 = xNum.tail\n        val nNum2 = nNum.tail\n\
    \        val xDeno2 = xDeno\n        val nDeno2 = nDeno\n        val xNum3 = xNum.init\n\
    \        val nNum3 = nNum.init\n        val xDeno3 = xDeno\n        val nDeno3\
    \ = nDeno\n        val xNum4 = xNum.tail\n        val nNum4 = nNum.tail\n    \
    \    val xDeno4 = xDeno\n        val nDeno4 = nDeno\n        val xNum5 = xNum.init\n\
    \        val nNum5 = nNum.init\n        val xDeno5 = xDeno\n        val nDeno5\
    \ = nDeno\n        val xNum6 = xNum.tail\n        val nNum6 = nNum.tail\n    \
    \    val xDeno6 = xDeno\n        val nDeno6 = nDeno\n        val xNum7 = xNum.init\n\
    \        val nNum7 = nNum.init\n        val xDeno7 = xDeno\n        val nDeno7\
    \ = nDeno\n        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n    \
    \    val xDeno8 = xDeno\n        val nDeno8 = nDeno\n        val xNum9 = xNum.init\n\
    \        val nNum9 = nNum.init\n        val xDeno9 = xDeno\n        val nDeno9\
    \ = nDeno\n        val xNum10 = xNum.tail\n        val nNum10 = nNum.tail\n  \
    \      val xDeno10 = xDeno\n        val nDeno10 = nDeno\n        val xNum11 =\
    \ xNum.init\n        val nNum11 = nNum.init\n        val xDeno11 = xDeno\n   \
    \     val nDeno11 = nDeno\n        val xNum12 = xNum.tail\n        val nNum12\
    \ = nNum.tail\n        val xDeno12 = xDeno\n        val ", "        val nums =\
    \ x.split(\"/\").map(_.toInt)\n        val denoms = n.split(\"/\").map(_.toInt)\n\
    \        val numsSum = nums.sum\n        val denomsSum = denoms.sum\n        val\
    \ numsDiff = numsSum - denomsSum\n        val denomsDiff = denomsSum - numsSum\n\
    \        val numsDiffInt = numsDiff.toInt\n        val denomsDiffInt = denomsDiff.toInt\n\
    \        val numsDiffFraction = numsDiff / denomsDiff\n        val numsDiffFractionInt\
    \ = numsDiffFraction.toInt\n        val numsDiffFractionFraction = numsDiffFraction\
    \ / denomsDiff\n        val numsDiffFractionFractionInt = numsDiffFractionFraction.toInt\n\
    \        val numsDiffFractionFractionFraction = numsDiffFractionFraction / denomsDiff\n\
    \        val numsDiffFractionFractionFractionInt = numsDiffFractionFractionFraction.toInt\n\
    \        val numsDiffFractionFractionFractionFraction = numsDiffFractionFractionFraction\
    \ / denomsDiff\n        val numsDiffFractionFractionFractionFractionInt = numsDiffFractionFractionFractionFraction.toInt\n\
    \        val numsDiffFractionFractionFractionFractionFraction = numsDiffFractionFractionFractionFraction\
    \ / denomsDiff\n        val numsDiffFractionFractionFractionFractionFractionInt\
    \ = numsDiffFractionFractionFractionFractionFraction.toInt\n        val numsDiffFractionFractionFractionFractionFractionFraction\
    \ = numsDiffFractionFractionFractionFractionFraction / denomsDiff\n        val\
    \ numsDiffFractionFractionFractionFractionFractionFractionInt = numsDiffFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsDiffFractionFractionFractionFractionFractionFraction = numsDiffFractionFractionFractionFractionFraction\
    \ / denomsDiff\n        val numsDiffFractionFractionFractionFractionFractionFractionInt\
    \ = numsDiffFractionFractionFractionFractionFractionFraction.toInt\n        val\
    \ numsDiffFractionFractionFractionFractionFractionFractionFraction = numsDiffFractionFractionFractionFractionFractionFraction\
    \ / denomsDiff\n        val numsDiffFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numsDiffFractionFractionFractionFractionFractionFractionFraction.toInt\n \
    \       val numsDiffFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsDiffFractionFractionFractionFractionFractionFractionFraction / denomsDiff\n\
    \        val numsDiffFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numsDiffFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsDiffFractionFractionFraction", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        (xNum.head * nNum.head == xDeno) && (nNum.head\
    \ * xDeno == nDeno)", "        val xNum = x.split(\"/\").toInt\n        val nNum\
    \ = n.split(\"/\").toInt\n        if(xNum.product(xNum.last) * nNum.product(nNum.last)\
    \ == xNum.product(xNum.last) * nNum.product(nNum.last)) {\n            true\n\
    \        } else {\n            false\n        }", "        val xNum = x.split(\"\
    /\")\n        val nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n       \
    \ val nNum1 = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n\
    \        val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n\
    \        val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum28 = xNum27", "        val xNum = x.split(\"/\")\n\
    \        val nNum = n.split(\"/\")\n        if(xNum.length != nNum.length) false\n\
    \        else {\n            val xNumArray = xNum.map(_.toInt)\n            val\
    \ nNumArray = nNum.map(_.toInt)\n            if(xNumArray.length != nNumArray.length)\
    \ false\n            else {\n                val xNumArrayLength = xNumArray.length\n\
    \                val nNumArrayLength = nNumArray.length\n                if(xNumArrayLength\
    \ != nNumArrayLength) false\n                else {\n                    val xNumArrayLength\
    \ = xNumArray.length\n                    val nNumArrayLength = nNumArray.length\n\
    \                    if(xNumArrayLength == 0) true\n                    else {\n\
    \                        val xNumArrayLength = xNumArray.length\n            \
    \            val nNumArrayLength = nNumArray.length\n                        if(xNumArrayLength\
    \ == 0) true\n                        else {\n                            val\
    \ xNumArrayLength = xNumArray.length\n                            val nNumArrayLength\
    \ = nNumArray.length\n                            if(xNumArrayLength == 0) true\n\
    \                            else {\n                                val xNumArrayLength\
    \ = xNumArray.length\n                                val nNumArrayLength = nNumArray.length\n\
    \                                if(xNumArrayLength == 0) true\n             \
    \                   else {\n                                    val xNumArrayLength\
    \ = xNumArray.length\n                                    val nNumArrayLength\
    \ = nNumArray.length\n                                    if(xNumArrayLength ==\
    \ 0) true\n                                    else {\n                      \
    \                  val xNumArrayLength = xNumArray.length\n                  \
    \                      val nNumArrayLength = nNumArray.length\n              \
    \                          if(xNumArrayLength == 0) true\n                   \
    \                     else {\n                                            val\
    \ xNumArrayLength = xNumArray.length\n                                       \
    \     val nNumArrayLength = nNumArray.length\n                               \
    \             if(xNumArrayLength == 0) true\n                                \
    \            else {\n                                                val xNumArrayLength\
    \ = xNumArray.length\n                                                val nNumArrayLength\
    \ = nNumArray.length\n                                                if(xNumArrayLength\
    \ == 0) true\n                                                else {\n       \
    \                                             val xNumArrayLength = xNumArray.length\n\
    \                                                    val nNumArrayLength = nNumArray.length\n\
    \                                                    if(xNumArrayLength == 0)\
    \ true\n                                                    else {\n         \
    \                                               val xNumArrayLength = xNumArray.length\n\
    \                                                        val nNumArrayLength =\
    \ nNumArray.length\n                                                        if(xNumArrayLength\
    \ == 0) true\n                                                        else {\n\
    \                                                            val xNumArrayLength\
    \ = xNumArray.length\n                                                       \
    \     val nNumArrayLength = nNumArray.length\n                               \
    \                             if(xNumArrayLength == 0) true\n                \
    \                                            else {\n                        \
    \                                        val xNumArrayLength = xNumArray.length\n\
    \                                                                val nNum", " \
    \       val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numerator = numer\n        val denominator = denom\n        val numeratorInt\
    \ = numerator.toInt\n        val denominatorInt = denominator.toInt\n        val\
    \ numeratorIntInt = numeratorInt.toInt\n        val denominatorIntInt = denominatorInt.toInt\n\
    \        val numeratorIntIntInt = numeratorIntInt.toInt\n        val denominatorIntIntInt\
    \ = denominatorIntInt.toInt\n        val numeratorIntIntIntInt = numeratorIntIntInt.toInt\n\
    \        val denominatorIntIntIntInt = denominatorIntIntInt.toInt\n        val\
    \ numeratorIntIntIntIntInt = numeratorIntIntIntInt.toInt\n        val denominatorIntIntIntIntInt\
    \ = denominatorIntIntIntInt.toInt\n        val numeratorIntIntIntIntIntInt = numeratorIntIntIntIntInt.toInt\n\
    \        val denominatorIntIntIntIntIntInt = denominatorIntIntIntIntInt.toInt\n\
    \        val numeratorIntIntIntIntIntIntInt = numeratorIntIntIntIntIntInt.toInt\n\
    \        val denominatorIntIntIntIntIntIntInt = denominatorIntIntIntIntIntInt.toInt\n\
    \        val numeratorIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntInt.toInt\n\
    \        val denominatorIntIntIntIntIntIntIntIntInt = denominatorIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val numeratorIntIntIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val denominatorIntIntIntIntIntIntIntIntIntInt = denominatorIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val numeratorIntIntIntIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val denominatorIntIntIntIntIntIntIntIntIntIntIntInt = denominatorIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val numeratorIntIntIntIntIntIntIntIntIntIntIntIntIntInt = numeratorIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val denominatorIntIntIntIntIntIntIntIntIntIntIntIntIntInt = denominatorIntIntIntIntInt",
  "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numerator = numer\n        val denominator = denom\n        val numInt:\
    \ Int = numerator.toInt\n        val denomInt: Int = denom.toInt\n        val\
    \ numIntMod: Int = numInt % denomInt\n        val numIntModInt: Int = numIntMod.toInt\n\
    \        val numIntModIntMod: Int = numIntModInt % denomInt\n        val numIntModIntModInt:\
    \ Int = numIntModIntMod.toInt\n        val numIntModIntModIntMod: Int = numIntModIntModInt\
    \ % denomInt\n        val numIntModIntModIntModInt: Int = numIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModIntMod: Int = numIntModIntModIntModInt % denomInt\n\
    \        val numIntModIntModIntModIntMod: Int = numIntModIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModIntModInt: Int = numIntModIntModIntModIntModInt\
    \ % denomInt\n        val numIntModIntModIntModIntModIntMod: Int = numIntModIntModIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModIntModIntModInt: Int = numIntModIntModIntModIntModIntModInt\
    \ % denomInt\n        val numIntModIntModIntModIntModIntModIntMod: Int = numIntModIntModIntModIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModIntModIntModIntMod: Int = numIntModIntModIntModIntModIntModIntModInt\
    \ % denomInt\n        val numIntModIntModIntModIntModIntModIntModInt: Int = numIntModIntModIntModIntModIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModIntModIntModIntModIntMod: Int = numIntModIntModIntModIntModIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModIntModIntModIntModIntModInt: Int = numIntModIntModIntModIntModIntModIntModIntModIntMod.toInt\n\
    \        val numIntModIntModIntModInt", "        val nums = x.split(\"/\")\n \
    \       val dens = n.split(\"/\")\n        val numsLength = nums.length\n    \
    \    val densLength = dens.length\n        if (numsLength != densLength) {\n \
    \           return false\n        }\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var sum = 0\n        var product = 1\n        while\
    \ (i < numsLength && j < densLength) {\n            sum = nums(i) * dens(j)\n\
    \            product = product * sum\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        if (product == 1) {\n            return\
    \ true\n        }\n        return false", "        val x = x.split(\"/\").map(_.toInt)\n\
    \        val n = n.split(\"/\").map(_.toInt)\n        val numerator = x(0)\n \
    \       val denominator = n(0)\n        val fraction = numerator / denominator\n\
    \        val whole = fraction.toInt\n        val numerator2 = x(1)\n        val\
    \ denominator2 = n(1)\n        val fraction2 = numerator2 / denominator2\n   \
    \     val whole2 = fraction2.toInt\n        if (whole == whole2 && fraction ==\
    \ fraction2) true\n        else false", "        val nums = x.split(\"/\")\n \
    \       val dens = n.split(\"/\")\n        val numsSet = nums.toSet\n        val\
    \ densSet = dens.toSet\n        val numsSetSize = numsSet.size\n        val densSetSize\
    \ = densSet.size\n        val numsSetIsEmpty = numsSet.isEmpty\n        val densSetIsEmpty\
    \ = densSet.isEmpty\n        val numsSetIsZero = numsSet.isEmpty\n        val\
    \ densSetIsZero = densSet.isEmpty\n        val numsSetIsOne = numsSet.isEmpty\n\
    \        val densSetIsOne = densSet.isEmpty\n        val numsSetIsNegative = numsSet.isEmpty\n\
    \        val densSetIsNegative = densSet.isEmpty\n        val numsSetIsNegativeOne\
    \ = numsSet.isEmpty\n        val densSetIsNegativeOne = densSet.isEmpty\n    \
    \    val numsSetIsNegativeTwo = numsSet.isEmpty\n        val densSetIsNegativeTwo\
    \ = densSet.isEmpty\n        val numsSetIsNegativeThree = numsSet.isEmpty\n  \
    \      val densSetIsNegativeThree = densSet.isEmpty\n        val numsSetIsNegativeFour\
    \ = numsSet.isEmpty\n        val densSetIsNegativeFour = densSet.isEmpty\n   \
    \     val numsSetIsNegativeFive = numsSet.isEmpty\n        val densSetIsNegativeFive\
    \ = densSet.isEmpty\n        val numsSetIsNegativeSix = numsSet.isEmpty\n    \
    \    val densSetIsNegativeSix = densSet.isEmpty\n        val numsSetIsNegativeSeven\
    \ = numsSet.isEmpty\n        val densSetIsNegativeSeven = densSet.isEmpty\n  \
    \      val numsSetIsNegativeEight = numsSet.isEmpty\n        val densSetIsNegativeEight\
    \ = densSet.isEmpty\n        val numsSetIsNegativeNine = numsSet.isEmpty\n   \
    \     val densSetIsNegativeNine = densSet.isEmpty\n        val numsSetIsNegativeTen\
    \ = numsSet.isEmpty\n        val densSetIsNegativeTen = densSet.isEmpty\n    \
    \    val numsSetIsNegativeEleven = numsSet.isEmpty\n        val densSetIsNegativeEleven\
    \ = densSet.isEmpty\n        val ", "        val numer = x.split(\"/\").map(_.toInt)\n\
    \        val denom = n.split(\"/\").map(_.toInt)\n        val numer_sum = numer.reduce((a,\
    \ b) => a + b)\n        val denom_sum = denom.reduce((a, b) => a + b)\n      \
    \  val numer_product = numer.reduce((a, b) => a * b)\n        val denom_product\
    \ = denom.reduce((a, b) => a * b)\n        val numer_diff = numer_sum - numer_product\n\
    \        val denom_diff = denom_sum - denom_product\n        val numer_quotient\
    \ = numer_sum / denom_sum\n        val denom_quotient = denom_sum / numer_sum\n\
    \        val numer_remainder = numer_product - denom_product * numer_quotient\n\
    \        val denom_remainder = denom_product * denom_quotient\n        val numer_quotient_remainder\
    \ = numer_quotient - denom_quotient * numer_remainder\n        val denom_quotient_remainder\
    \ = denom_quotient * denom_remainder\n        val numer_quotient_remainder_sum\
    \ = numer_quotient_remainder.reduce((a, b) => a + b)\n        val denom_quotient_remainder_sum\
    \ = denom_quotient_remainder.reduce((a, b) => a + b)\n        val numer_quotient_remainder_product\
    \ = numer_quotient_remainder.reduce((a, b) => a * b)\n        val denom_quotient_remainder_product\
    \ = denom_quotient_remainder.reduce((a, b) => a * b)\n        val numer_quotient_remainder_diff\
    \ = numer_quotient_remainder_sum - numer_quotient_remainder_product\n        val\
    \ denom_quotient_remainder_diff = denom_quotient_remainder_sum - denom_quotient_remainder_product\n\
    \        val numer_quotient_remainder_quotient = numer_quotient_remainder_sum\
    \ / denom_quotient_remainder_sum\n        val denom_quotient_remainder_quotient\
    \ = denom_quotient_remainder_sum / numer_quotient_remainder_sum\n        val numer_quotient_remainder_remainder\
    \ = numer_quotient_remainder_product - denom_quotient_remainder_product * numer_quotient_remainder_quotient\n\
    \        val denom_quotient_remainder_remainder = denom_quotient_remainder_product\
    \ * denom_quotient_remainder_quotient\n        val numer_quotient_remainder_remainder_sum\
    \ = numer_quotient_remainder_remainder.reduce((a, b) => a + b)\n        val denom_quotient_remainder_remain",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ nums0 = nums(0).toInt\n        val dens0 = dens(0).toInt\n        val nums1\
    \ = nums(1).toInt\n        val dens1 = dens(1).toInt\n        val nums0 = nums0.toInt\n\
    \        val dens0 = dens0.toInt\n        val nums1 = nums1.toInt\n        val\
    \ dens1 = dens1.toInt\n        if (nums0 != dens0) {\n            return false\n\
    \        }\n        if (nums1 == dens1) {\n            return true\n        }\n\
    \        if (nums1 > dens1) {\n            val temp = nums1\n            nums1\
    \ = dens1\n            dens1 = temp\n        }\n        if (nums1 < dens1) {\n\
    \            val temp = nums1\n            nums1 = dens1\n            dens1 =\
    \ temp\n        }\n        if (nums1 == dens1) {\n            return true\n  \
    \      }\n        if (nums1 > dens1) {\n            val temp = nums1\n       \
    \     nums1 = dens1\n            dens1 = temp\n        }\n        if (nums1 <\
    \ dens1) {\n            val temp = nums1\n            nums1 = dens1\n        \
    \    dens1 = temp\n        }\n        if (nums1 == dens1) {\n            return\
    \ true\n        }\n        if (nums1 > dens1) {\n            val temp = nums1\n\
    \            nums1 = dens1\n            dens1 = temp\n        }\n        if (nums1\
    \ < dens1) {\n            val temp = nums1\n            nums1 = dens1\n      \
    \      dens1 = temp\n        }\n        if (nums1 == dens1) {\n            return\
    \ true\n        }\n        if (nums1 > dens1) {\n            val temp = nums1\n\
    \            nums1 = dens1\n            dens1 = temp\n        }\n        if (nums1\
    \ < dens1) {\n            val temp = nums1\n            nums1 = dens1\n      \
    \      dens1 = temp\n        }\n        if (nums1 == dens1) {\n            return\
    \ true\n        }\n        if (nums1 > dens1) {\n            val temp = nums1\n\
    \            nums1 = dens1\n            dens1 = temp\n        }\n        if (nums1\
    \ < dens1) {\n            val temp = nums1\n            nums1 = dens1\n      \
    \      dens1 = temp\n        }\n        if (nums1 == dens1) {\n            return\
    \ true\n        }\n        if (nums1 > dens1) {\n            val temp = nums1\n\
    \            nums1 = dens1\n            dens1 = temp\n        }\n        if (nums1\
    \ < dens1) {\n            val temp = nums1\n            nums1 = dens1\n      \
    \      dens1 = temp\n        }\n        if (nums1 == dens1) {\n            return\
    \ true\n        }", "        val fraction = Fraction(x.toInt, n.toInt)\n     \
    \   val numerator = fraction.numerator\n        val denominator = fraction.denominator\n\
    \        if (numerator == 0 && denominator == 0) true\n        else if (numerator\
    \ == 0 && denominator != 0) false\n        else if (numerator != 0 && denominator\
    \ == 0) false\n        else if (numerator != 0 && denominator != 0) true\n   \
    \     else simplify(numerator/denominator, denominator)", "        val xNum =\
    \ x.split(\"/\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno\
    \ = xNum.last\n        val nDeno = nNum.last\n        val xNum1 = xNum.dropRight(1)\n\
    \        val nNum1 = nNum.dropRight(1)\n        val xNum2 = xNum1.dropRight(1)\n\
    \        val nNum2 = nNum1.dropRight(1)\n        val xNum3 = xNum2.dropRight(1)\n\
    \        val nNum3 = nNum2.dropRight(1)\n        val xNum4 = xNum3.dropRight(1)\n\
    \        val nNum4 = nNum3.dropRight(1)\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xNum7 = xNum6.dropRight(1)\n\
    \        val nNum7 = nNum6.dropRight(1)\n        val xNum8 = xNum7.dropRight(1)\n\
    \        val nNum8 = nNum7.dropRight(1)\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xNum11 = xNum10.dropRight(1)\n\
    \        val nNum11 = nNum10.dropRight(1)\n        val xNum12 = xNum11.dropRight(1)\n\
    \        val nNum12 = nNum11.dropRight(1)\n        val xNum13 = xNum12.dropRight(1)\n\
    \        val nNum13 = nNum12.dropRight(1)\n        val xNum14 = xNum13.dropRight(1)\n\
    \        val nNum14 = nNum13.dropRight(1)\n        val xNum15 = xNum14.dropRight(1)\n\
    \        val nNum15 = nNum14.dropRight(1)\n        val xNum16 = xNum15.dropRight(1)\n\
    \        val nNum16 = nNum15.dropRight(1)\n        val xNum17 = xNum16.dropRight(1)\n\
    \        val nNum17 = nNum16.dropRight(1)\n        val xNum18 = xNum17.dropRight(1)\n\
    \        val nNum18 = nNum17.dropRight(1)\n        val xNum19 = xNum18.dropRight(1)\n\
    \        val nNum19 = nNum18.dropRight(1)\n        val xNum20 = xNum19.dropRight(1)\n\
    \        val nNum", "        val fraction = x.split(\"/\").map(_.toInt)\n    \
    \    val numerator = fraction(0)\n        val denominator = fraction(1)\n    \
    \    val numeratorIsWhole = numerator == numerator.toInt\n        val denominatorIsWhole\
    \ = denominator == denominator.toInt\n        numeratorIsWhole && denominatorIsWhole",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        val\
    \ numsLength = nums.length\n        val densLength = dens.length\n        val\
    \ numsSum = nums.sum.toInt\n        val densSum = dens.sum.toInt\n        val\
    \ numsSumFraction = numsSum / densSum\n        val numsSumFractionFraction = numsSumFraction.toDouble\n\
    \        val numsSumFractionFractionFraction = numsSumFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFraction = numsSumFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFraction = numsSumFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFraction =\
    \ numsSumFractionFractionFractionFractionFractionFractionFraction.toInt\n    \
    \    val numsSumFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toInt\n\
    \        val numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numsSumFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction.toDouble\n\
    \        val num", "        val nums = x.split(\"/\").map(_.toInt)\n        val\
    \ dens = n.split(\"/\").map(_.toInt)\n        val numsSum = nums.sum\n       \
    \ val densSum = dens.sum\n        if (numsSum == densSum) {\n            true\n\
    \        } else {\n            false\n        }", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        if(xDeno == 0 || nDeno == 0){\n      \
    \      return false\n        }\n        if(xNum.last == nNum.last){\n        \
    \    return true\n        }\n        if(xNum.last < nNum.last){\n            return\
    \ simplify(x+\"*\"+nNum.last, n)\n        }\n        if(xNum.last > nNum.last){\n\
    \            return simplify(x, n+\"*\"+xDeno)\n        }", "        val xNum\
    \ = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val xDeno = xNum(0)\n\
    \        val nDeno = nNum(0)\n        val xNumStr = xNum(1)\n        val nNumStr\
    \ = nNum(1)\n        val xDenoStr = xDeno + \"0\"\n        val nDenoStr = nDeno\
    \ + \"0\"\n        val xNumInt = xNumStr.toInt\n        val nNumInt = nNumStr.toInt\n\
    \        val xDenoInt = xDenoStr.toInt\n        val nDenoInt = nDenoStr.toInt\n\
    \        val xNumInt2 = xNumInt * xDenoInt\n        val nNumInt2 = nNumInt * nDenoInt\n\
    \        val xNumInt3 = xNumInt2 + xNumInt\n        val nNumInt3 = nNumInt2 +\
    \ nNumInt\n        val xNumInt4 = xNumInt3 + xNumInt\n        val nNumInt4 = nNumInt3\
    \ + nNumInt\n        val xNumInt5 = xNumInt4 + xNumInt\n        val nNumInt5 =\
    \ nNumInt4 + nNumInt\n        val xNumInt6 = xNumInt5 + xNumInt\n        val nNumInt6\
    \ = nNumInt5 + nNumInt\n        val xNumInt7 = xNumInt6 + xNumInt\n        val\
    \ nNumInt7 = nNumInt6 + nNumInt\n        val xNumInt8 = xNumInt7 + xNumInt\n \
    \       val nNumInt8 = nNumInt7 + nNumInt\n        val xNumInt9 = xNumInt8 + xNumInt\n\
    \        val nNumInt9 = nNumInt8 + nNumInt\n        val xNumInt10 = xNumInt9 +\
    \ xNumInt\n        val nNumInt10 = nNumInt9 + nNumInt\n        val xNumInt11 =\
    \ xNumInt10 + xNumInt\n        val nNumInt11 = nNumInt10 + nNumInt\n        val\
    \ xNumInt12 = xNumInt11 + xNumInt\n        val nNumInt12 = nNumInt11 + nNumInt\n\
    \        val xNumInt13 = xNumInt12 + xNumInt\n        val nNumInt13 = nNumInt12\
    \ + nNumInt\n        val xNumInt14 = xNumInt13 + xNumInt\n        val nNumInt14\
    \ = nNumInt13 + nNumInt\n", "        val fraction = x.split(\"/\").map(_.toInt)\n\
    \        val numerator = fraction(0)\n        val denominator = fraction(1)\n\
    \        if (numerator == 0 && denominator == 0) {\n            return false\n\
    \        }\n        if (numerator == 0 && denominator != 0) {\n            return\
    \ true\n        }\n        if (numerator != 0 && denominator == 0) {\n       \
    \     return false\n        }\n        if (numerator != 0 && denominator != 0)\
    \ {\n            if (numerator == denominator) {\n                return true\n\
    \            }\n            if (numerator < denominator) {\n                return\
    \ false\n            }\n        }\n        return true", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n\
    \        val nDeno = nNum.last\n        val xDenoNum = xNum.init\n        val\
    \ nDenoNum = nNum.init\n        val xDenoDeno = xDeno + nDeno\n        val nDenoDeno\
    \ = nDeno + xDeno\n        val xDenoDenoNum = xDenoDeno + nDenoDeno\n        val\
    \ nDenoDenoNum = nDenoDeno + xDenoDeno\n        val xDenoDenoDeno = xDenoDeno\
    \ + nDenoDeno\n        val nDenoDenoDeno = nDenoDeno + xDenoDenoDeno\n       \
    \ val xDenoDenoDenoNum = xDenoDenoDeno + nDenoDenoDeno\n        val nDenoDenoDenoNum\
    \ = nDenoDenoDeno + xDenoDenoDeno\n        val xDenoDenoDenoDeno = xDenoDenoDeno\
    \ + nDenoDenoDeno\n        val nDenoDenoDenoDeno = nDenoDenoDeno + xDenoDenoDenoDeno\n\
    \        val xDenoDenoDenoDenoNum = xDenoDenoDenoDeno + nDenoDenoDenoDeno\n  \
    \      val nDenoDenoDenoDenoNum = nDenoDenoDenoDeno + xDenoDenoDenoDenoDeno\n\
    \        val xDenoDenoDenoDenoDeno = xDenoDenoDenoDeno + nDenoDenoDenoDenoDeno\n\
    \        val nDenoDenoDenoDenoDeno = nDenoDenoDenoDenoDeno + xDenoDenoDenoDenoDenoDeno\n\
    \        val xDenoDenoDenoDenoDenoDeno = xDenoDenoDenoDenoDenoDeno + nDenoDenoDenoDenoDenoDeno\n\
    \        val nDenoDenoDenoDenoDenoDeno = nDenoDenoDenoDenoDenoDeno + xDenoDenoDenoDenoDenoDenoDeno\n",
  "        val numer = x.split(\"/\").map(_.toInt)\n        val denom = n.split(\"\
    /\").map(_.toInt)\n        val numer_sum = numer.reduce((x, y) => x + y)\n   \
    \     val denom_sum = denom.reduce((x, y) => x + y)\n        val numerator = numer_sum\
    \ / denom_sum\n        val denominator = denom_sum\n        numerator == numer",
  "        val x = x.split(\"/\")\n        val n = n.split(\"/\")\n        val xNum\
    \ = x.toInt\n        val nNum = n.toInt\n        val xDeno = xNum / nNum\n   \
    \     val nDeno = nNum / xNum\n        (xDeno == nDeno)", "        val x = x.split(\"\
    /\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n        val x0\
    \ = x(0)\n        val n0 = n(0)\n        val x1 = x(1)\n        val n1 = n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) - x(1)\n        val nd = n(0) - n(1)\n        val xm = x(0) * x(1)\n  \
    \      val nm = n(0) * n(1)\n        val xp = x(0) / x(1)\n        val np = n(0)\
    \ / n(1)\n        val xs = x(0) * n(1)\n        val ns = n(0) * n(1)\n       \
    \ val xr = x(0) / n(1)\n        val nr = n(0) / n(1)\n        val xr = x(0) *\
    \ n(1)\n        val nr = n(0) * n(1)\n        val xr = x(0) / n(1)\n        val\
    \ nr = n(0) / n(1)\n        val xr = x(0) * n(1)\n        val nr = n(0) * n(1)\n\
    \        val xr = x(0) / n(1)\n        val nr = n(0) / n(1)\n        val xr =\
    \ x(0) * n(1)\n        val nr = n(0) * n(1)\n        val xr = x(0) / n(1)\n  \
    \      val nr = n(0) / n(1)\n        val xr = x(0) * n(1)\n        val nr = n(0)\
    \ * n(1)\n        val xr = x(0) / n(1)\n        val nr = n(0) / n(1)\n       \
    \ val xr = x(0) * n(1)\n        val nr = n(0) * n(1)\n        val xr = x(0) /\
    \ n(1)\n        val nr = n(0) / n(1)\n        val xr = x(0) * n(1)\n        val\
    \ nr = n(0) * n(1)\n        val xr = x(0) / n(1)\n        val nr = n(0) / n(1)\n\
    \        val xr = x(0) * n(1)\n        val nr = n(0) * n(1)\n        val xr =\
    \ x(0) / n(1)\n        val nr = n(0) / n(1)\n        val xr = x(0) * n(1)\n  \
    \      val nr = n(0) * n(1)\n        val xr = x(0) / n(1)\n        val nr = n(0)\
    \ / n(1)\n        val xr = x(0) * n(1)\n        val nr = n(0) * n(1)\n", "   \
    \     val nums = x.split(\"/\").map(_.toInt)\n        val dens = n.split(\"/\"\
    ).map(_.toInt)\n        val numsSum = nums.sum\n        val densSum = dens.sum\n\
    \        val numsSumInv = numsSum / densSum\n        val densSumInv = densSum\
    \ / numsSum\n        val numsSumInv2 = numsSumInv * numsSumInv\n        val densSumInv2\
    \ = densSumInv * densSumInv\n        val numsSumInv3 = numsSumInv * numsSumInv\
    \ * numsSumInv\n        val densSumInv3 = densSumInv * densSumInv * densSumInv\n\
    \        val numsSumInv4 = numsSumInv * numsSumInv * numsSumInv * numsSumInv\n\
    \        val densSumInv4 = densSumInv * densSumInv * densSumInv * densSumInv\n\
    \        val numsSumInv5 = numsSumInv * numsSumInv * numsSumInv * numsSumInv *\
    \ numsSumInv\n        val densSumInv5 = densSumInv * densSumInv * densSumInv *\
    \ densSumInv * densSumInv\n        val numsSumInv6 = numsSumInv * numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv6 =\
    \ densSumInv * densSumInv * densSumInv * densSumInv * densSumInv * densSumInv\n\
    \        val numsSumInv7 = numsSumInv * numsSumInv * numsSumInv * numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv\n        val densSumInv7 = densSumInv *\
    \ densSumInv * densSumInv * densSumInv * densSumInv * densSumInv * densSumInv\n\
    \        val numsSumInv8 = numsSumInv * numsSumInv * numsSumInv * numsSumInv *\
    \ numsSumInv * numsSumInv * numsSumInv * numsSumInv\n        val densSumInv8 =\
    \ densSumInv * densSumInv * densSumInv * densSumInv * densSumInv", "        val\
    \ x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val numerator = x(0)\n        val denominator = x(1)\n        val numerator2\
    \ = n(0)\n        val denominator2 = n(1)\n        val numerator3 = numerator\
    \ * numerator2\n        val denominator3 = denominator * denominator2\n      \
    \  val numerator4 = numerator * numerator3\n        val denominator4 = denominator\
    \ * denominator3\n        val numerator5 = numerator * numerator4\n        val\
    \ denominator5 = denominator * denominator4\n        val numerator6 = numerator\
    \ * numerator5\n        val denominator6 = denominator * denominator5\n      \
    \  val numerator7 = numerator * numerator6\n        val denominator7 = denominator\
    \ * denominator6\n        val numerator8 = numerator * numerator7\n        val\
    \ denominator8 = denominator * denominator7\n        val numerator9 = numerator\
    \ * numerator8\n        val denominator9 = denominator * denominator8\n      \
    \  val numerator10 = numerator * numerator9\n        val denominator10 = denominator\
    \ * denominator9\n        val numerator11 = numerator * numerator10\n        val\
    \ denominator11 = denominator * denominator10\n        val numerator12 = numerator\
    \ * numerator11\n        val denominator12 = denominator * denominator11\n   \
    \     val numerator13 = numerator * numerator12\n        val denominator13 = denominator\
    \ * denominator12\n        val numerator14 = numerator * numerator13\n       \
    \ val denominator14 = denominator * denominator13\n        val numerator15 = numerator\
    \ * numerator14\n        val denominator15 = denominator * denominator14\n   \
    \     val numerator16 = numerator * numerator15\n        val denominator16 = denominator\
    \ * denominator15\n        val numerator17 = numerator * numerator16\n       \
    \ val denominator17 = denominator * denominator16\n        val numerator18 = numerator\
    \ * numerator17\n        val denominator18 = denominator * denominator17\n   \
    \     val numerator19 = numerator * numerator18\n        val denominator19 = denominator\
    \ * denominator18\n        val numerator20 = numerator * numerator19\n       \
    \ val denominator20 = denominator * denominator19\n        val numerator21 = numerator\
    \ * numerator20\n        val denominator21 = denominator * denominator20\n   \
    \     val numerator22 = numerator * numerator21\n        val denominator22 = denominator\
    \ * denominator21\n        val numerator23 = numerator * numerator22\n       \
    \ val denominator23 = ", "        val nums = x.split(\"/\")\n        val dens\
    \ = n.split(\"/\")\n        val numsLen = nums.length\n        val densLen = dens.length\n\
    \        if(numsLen != densLen){\n            return false\n        }\n      \
    \  val numsSet = nums.toSet\n        val densSet = dens.toSet\n        if(numsSet.size\
    \ == densSet.size){\n            val numsSetLen = numsSet.size\n            val\
    \ densSetLen = densSet.size\n            val numsSetSet = numsSet.toSet\n    \
    \        val densSetSet = densSet.toSet\n            if(numsSetLen == densSetLen){\n\
    \                val numsSetSetLen = numsSetSetLen\n                val densSetSetLen\
    \ = densSetSetLen\n                val numsSetSetSet = numsSetSet.toSet\n    \
    \            val densSetSetSet = densSetSet.toSet\n                if(numsSetSetLen\
    \ == densSetSetLen){\n                    val numsSetSetSetLen = numsSetSetSetLen\n\
    \                    val densSetSetSetLen = densSetSetSetLen\n               \
    \     val numsSetSetSetSet = numsSetSetSet.toSet\n                    val densSetSetSetSet\
    \ = densSetSetSet.toSet\n                    if(numsSetSetSetLen == densSetSetSetLen){\n\
    \                        val numsSetSetSetSetLen = numsSetSetSetSetLen\n     \
    \                   val densSetSetSetSetLen = densSetSetSetSetLen\n          \
    \              val numsSetSetSetSetSet = numsSetSetSetSet.toSet\n            \
    \            val densSetSetSetSetSet = densSetSetSetSet.toSet\n              \
    \          if(numsSetSetSetSetLen == densSetSetSetSetLen){\n                 \
    \           val numsSetSetSetSetSetLen = numsSetSetSetSetSetLen\n            \
    \                val densSetSetSetSetSetLen = densSetSetSetSetSetLen\n       \
    \                     val numsSetSetSetSetSetSet = numsSetSetSetSetSet.toSet\n\
    \                            val densSetSetSetSetSetSet = densSetSetSetSetSet.toSet\n\
    \                            if(numsSetSetSetSetSetLen == densSetSetSetSetSetSetLen){\n\
    \                                val numsSetSetSetSetSetSetSetLen = numsSetSetSet",
  "        val x = x.split(\"/\").map(_.toInt)\n        val n = n.split(\"/\").map(_.toInt)\n\
    \        val x0 = x(0)\n        val n0 = n(0)\n        val x1 = x(1)\n       \
    \ val n1 = n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n\
    \        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn =\
    \ x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n  \
    \      val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0)\
    \ + n(1)\n        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n       \
    \ val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) *\
    \ x(1)\n        val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val\
    \ nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n\
    \        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd =\
    \ x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n  \
    \      val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n        val nd = n(0)\
    \ * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n       \
    \ val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn = x(0) +\
    \ x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n        val\
    \ nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0) + n(1)\n\
    \        val xd = x(0) * x(1)\n        val nd = n(0) * n(1)\n        val xn =\
    \ x(0) + x(1)\n        val nn = n(0) + n(1)\n        val xd = x(0) * x(1)\n  \
    \      val nd = n(0) * n(1)\n        val xn = x(0) + x(1)\n        val nn = n(0)\
    \ + n(1)\n        val xd = x(0) * x(1)\n        ", "        val xNum = x.split(\"\
    /\").toInt\n        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum.last).equals(nNum.product(nNum.last)))\
    \ {\n            return true\n        }\n        else {\n            return false\n\
    \        }", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        val numsLen = nums.length\n        val densLen = dens.length\n \
    \       if (numsLen != densLen) {\n            return false\n        }\n     \
    \   var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n   \
    \     var product = 1\n        while (i < numsLen && j < densLen) {\n        \
    \    val numsVal = nums(i)\n            val densVal = dens(j)\n            val\
    \ numsValInt = numsVal.toInt\n            val densValInt = densVal.toInt\n   \
    \         if (numsValInt % densValInt == 0) {\n                sum += numsValInt\n\
    \                product *= densValInt\n                i += 1\n             \
    \   j += 1\n            } else {\n                k += 1\n            }\n    \
    \    }\n        if (i == numsLen) {\n            return true\n        }\n    \
    \    if (j == densLen) {\n            return true\n        }\n        if (k ==\
    \ densLen) {\n            return false\n        }\n        val numsVal = nums(i)\n\
    \        val densVal = dens(j)\n        val numsValInt = numsVal.toInt\n     \
    \   val densValInt = densVal.toInt\n        if (numsValInt % densValInt == 0)\
    \ {\n            sum += numsValInt\n            product *= densValInt\n      \
    \      i += 1\n            j += 1\n        } else {\n            k += 1\n    \
    \    }\n        if (product == 1) {\n            return true\n        }\n    \
    \    val productInt = product.toInt\n        val productFraction = productInt\
    \ / sum\n        val productFractionInt = productFraction.toInt\n        if (productFractionInt\
    \ % 1 == 0) {\n            return true\n        }\n        return false", "  \
    \      val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numerator = numer\n        val denominator = denom\n        val numeratorInt\
    \ = numerator.asInstanceOf[Int]\n        val denominatorInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorFraction = numeratorInt / denominatorInt\n        val numeratorFractionInt\
    \ = numeratorFraction.asInstanceOf[Int]\n        val numeratorFractionFraction\
    \ = numeratorFractionInt % denominatorInt\n        val numeratorFractionFractionInt\
    \ = numeratorFractionFraction.asInstanceOf[Int]\n        val numeratorFractionFractionFractionInt\
    \ = numeratorFractionFractionFraction.asInstanceOf[Int]\n        val numeratorFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionInt / denominatorInt\n        val numeratorFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFraction.asInstanceOf[Int]\n        val numeratorFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFraction.asInstanceOf[Int]\n    \
    \    val numeratorFractionFractionFractionFractionFractionFraction = numeratorFractionFractionFractionFractionFractionInt\
    \ % denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFraction.asInstanceOf[Int]\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFraction.asInstanceOf[Int]\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionInt / denominatorInt\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction.asInstanceOf[Int]\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFraction.asInstanceOf[Int]\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ % denominatorInt\n        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction.asInstanceOf[Int]\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction.asInstanceOf[Int]\n\
    \        val numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction\
    \ = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ / denominatorInt\n        val numer", "        val xNum = x.split(\"/\")\n \
    \       val nNum = n.split(\"/\")\n        val xNum1 = xNum(0)\n        val nNum1\
    \ = nNum(0)\n        val xNum2 = xNum(1)\n        val nNum2 = nNum(1)\n      \
    \  val xNum3 = xNum2\n        val nNum3 = nNum2\n        val xNum4 = xNum3\n \
    \       val nNum4 = nNum3\n        val xNum5 = xNum4\n        val nNum5 = nNum4\n\
    \        val xNum6 = xNum5\n        val nNum6 = nNum5\n        val xNum7 = xNum6\n\
    \        val nNum7 = nNum6\n        val xNum8 = xNum7\n        val nNum8 = nNum7\n\
    \        val xNum9 = xNum8\n        val nNum9 = nNum8\n        val xNum10 = xNum9\n\
    \        val nNum10 = nNum9\n        val xNum11 = xNum10\n        val nNum11 =\
    \ nNum10\n        val xNum12 = xNum11\n        val nNum12 = nNum11\n        val\
    \ xNum13 = xNum12\n        val nNum13 = nNum12\n        val xNum14 = xNum13\n\
    \        val nNum14 = nNum13\n        val xNum15 = xNum14\n        val nNum15\
    \ = nNum14\n        val xNum16 = xNum15\n        val nNum16 = nNum15\n       \
    \ val xNum17 = xNum16\n        val nNum17 = nNum16\n        val xNum18 = xNum17\n\
    \        val nNum18 = nNum17\n        val xNum19 = xNum18\n        val nNum19\
    \ = nNum18\n        val xNum20 = xNum19\n        val nNum20 = nNum19\n       \
    \ val xNum21 = xNum20\n        val nNum21 = nNum20\n        val xNum22 = xNum21\n\
    \        val nNum22 = nNum21\n        val xNum23 = xNum22\n        val nNum23\
    \ = nNum22\n        val xNum24 = xNum23\n        val nNum24 = nNum23\n       \
    \ val xNum25 = xNum24\n        val nNum25 = nNum24\n        val xNum26 = xNum25\n\
    \        val nNum26 = nNum25\n        val xNum27 = xNum26\n        val nNum27\
    \ = nNum26\n        val xNum28 = xNum27", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.product(xNum) == nNum.product(nNum)\
    \ && xNum.product(xNum) == nNum.product(nNum)) {\n            return true\n  \
    \      }\n        return false", "        val numer = x.split(\"/\")(0)\n    \
    \    val denom = x.split(\"/\")(1)\n        val numInt: Int = numer.toInt\n  \
    \      val denomInt: Int = denom.toInt\n        if (numInt == 0 || denomInt ==\
    \ 0) {\n            return false\n        }\n        if (numInt == denomInt) {\n\
    \            return true\n        }\n        if (denomInt > numInt) {\n      \
    \      val temp = numInt\n            numInt = denomInt\n            denomInt\
    \ = temp\n        }\n        val numInt1 = numInt * denomInt\n        val denomInt1\
    \ = denomInt * numInt\n        if (numInt1 == denomInt1) {\n            return\
    \ true\n        }\n        return false", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        val xDeno = xNum.last\n    \
    \    val nDeno = nNum.last\n        val xNum2 = xNum.dropRight(1)\n        val\
    \ nNum2 = nNum.dropRight(1)\n        val xDeno2 = xDeno\n        val nDeno2 =\
    \ nDeno\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3 = nNum2.dropRight(1)\n\
    \        val xDeno3 = xDeno2\n        val nDeno3 = nDeno2\n        val xNum4 =\
    \ xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n        val xDeno4\
    \ = xDeno3\n        val nDeno4 = nDeno3\n        val xNum5 = xNum4.dropRight(1)\n\
    \        val nNum5 = nNum4.dropRight(1)\n        val xDeno5 = xDeno4\n       \
    \ val nDeno5 = nDeno4\n        val xNum6 = xNum5.dropRight(1)\n        val nNum6\
    \ = nNum5.dropRight(1)\n        val xDeno6 = xDeno5\n        val nDeno6 = nDeno5\n\
    \        val xNum7 = xNum6.dropRight(1)\n        val nNum7 = nNum6.dropRight(1)\n\
    \        val xDeno7 = xDeno6\n        val nDeno7 = nDeno6\n        val xNum8 =\
    \ xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n        val xDeno8\
    \ = xDeno7\n        val nDeno8 = nDeno7\n        val xNum9 = xNum8.dropRight(1)\n\
    \        val nNum9 = nNum8.dropRight(1)\n        val xDeno9 = xDeno8\n       \
    \ val nDeno9 = nDeno8\n        val xNum10 = xNum9.dropRight(1)\n        val nNum10\
    \ = nNum9.dropRight(1)\n        val xDeno10 = xDeno9\n        val nDeno10 = nDeno9\n\
    \        val xNum11 = xNum10.dropRight(1)\n        val nNum11 = nNum10.dropRight(1)\n\
    \        val xDeno11 = xDeno10\n        val nDeno11 = nDeno10\n        val xNum12\
    \ = xNum11.dropRight(1)\n        val ", "        val xNum = x.split(\"/\").toInt\n\
    \        val nNum = n.split(\"/\").toInt\n        if(xNum.product*(nNum.product)\
    \ == xNum.product*nNum.product)\n            true\n        else\n            false",
  "        val xNum = x.split(\"/\")\n        val nNum = n.split(\"/\")\n        val\
    \ xNum2 = xNum.map(_.toInt)\n        val nNum2 = nNum.map(_.toInt)\n        val\
    \ xNum3 = xNum2.filter(_ > 0)\n        val nNum3 = nNum2.filter(_ > 0)\n     \
    \   val xNum4 = xNum3.filter(_ > 0)\n        val nNum4 = nNum3.filter(_ > 0)\n\
    \        val xNum5 = xNum4.filter(_ > 0)\n        val nNum5 = nNum4.filter(_ >\
    \ 0)\n        val xNum6 = xNum5.filter(_ > 0)\n        val nNum6 = nNum5.filter(_\
    \ > 0)\n        val xNum7 = xNum6.filter(_ > 0)\n        val nNum7 = nNum6.filter(_\
    \ > 0)\n        val xNum8 = xNum7.filter(_ > 0)\n        val nNum8 = nNum7.filter(_\
    \ > 0)\n        val xNum9 = xNum8.filter(_ > 0)\n        val nNum9 = nNum8.filter(_\
    \ > 0)\n        val xNum10 = xNum9.filter(_ > 0)\n        val nNum10 = nNum9.filter(_\
    \ > 0)\n        val xNum11 = xNum10.filter(_ > 0)\n        val nNum11 = nNum10.filter(_\
    \ > 0)\n        val xNum12 = xNum11.filter(_ > 0)\n        val nNum12 = nNum11.filter(_\
    \ > 0)\n        val xNum13 = xNum12.filter(_ > 0)\n        val nNum13 = nNum12.filter(_\
    \ > 0)\n        val xNum14 = xNum13.filter(_ > 0)\n        val nNum14 = nNum13.filter(_\
    \ > 0)\n        val xNum15 = xNum14.filter(_ > 0)\n        val nNum15 = nNum14.filter(_\
    \ > 0)\n        val xNum16 = xNum15.filter(_ > 0)\n        val nNum16 = nNum15.filter(_\
    \ > 0)\n        val xNum17 = xNum16.filter(_ > 0)\n        val nNum17 = nNum16.filter(_\
    \ > 0)\n        val xNum18 = xNum17.filter(_ > 0)\n        val nNum18 = nNum17.filter(_\
    \ > 0)\n        val xNum19 = xNum18.filter(_ > 0)\n        val nNum19 = nNum18.filter(_\
    \ > 0)\n        val xNum20 = xNum19.filter(_ > 0)\n        val nNum20 = nNum19.filter(_\
    \ > 0)\n", "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"\
    /\")(1)\n        val numerator = numer\n        val denominator = denom\n    \
    \    val numeratorAsInt = numerator.asInstanceOf[Int]\n        val denominatorAsInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorAsDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorAsDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n\
    \        val denominatorAsBigDecimal = denominator.asInstanceOf[BigDecimal]\n\
    \        val numeratorAsBigInt = numerator.asInstanceOf[BigInt]\n        val denominatorAsBigInt\
    \ = denominator.asInstanceOf[BigInt]\n        val numeratorAsBoolean = numerator.asInstanceOf[Boolean]\n\
    \        val denominatorAsBoolean = denominator.asInstanceOf[Boolean]\n      \
    \  val numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorAsDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorAsLong = numerator.asInstanceOf[Long]\n        val denominatorAsLong\
    \ = denominator.asInstanceOf[Long]\n        val numeratorAsBigDecimal = numerator.asInstanceOf[BigDecimal]\n\
    \        val denominatorAsBigDecimal = denominator.asInstanceOf[BigDecimal]\n\
    \        val numeratorAsBigInt = numerator.asInstanceOf[BigInt]\n        val denominatorAsBigInt\
    \ = denominator.asInstanceOf[BigInt]\n        val numeratorAsBoolean = numerator.asInstanceOf[Boolean]\n\
    \        val denominatorAsBoolean = denominator.asInstanceOf[Boolean]\n      \
    \  val numeratorAsString = numerator.asInstanceOf[String]\n        val denominatorAsString\
    \ = denominator.asInstanceOf[String]\n        val numeratorAsInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorAsInt = denominator.asInstanceOf[Int]\n        val numeratorAsDouble\
    \ = ", "        val fraction = x.split(\"/\").map(_.toInt)\n        val numerator\
    \ = fraction(0)\n        val denominator = fraction(1)\n        val numeratorIsWhole\
    \ = numerator == numerator.toInt\n        val denominatorIsWhole = denominator\
    \ == denominator.toInt\n        val numeratorIsPositiveWhole = numerator >= 0\n\
    \        val denominatorIsPositiveWhole = denominator >= 0\n        val numeratorIsNegativeWhole\
    \ = numerator < 0\n        val denominatorIsNegativeWhole = denominator < 0\n\
    \        val numeratorIsNegative = numeratorIsNegative || numeratorIsNegativeWhole\n\
    \        val denominatorIsNegative = denominatorIsNegative || denominatorIsNegativeWhole\n\
    \        val numeratorIsZero = numerator == 0\n        val denominatorIsZero =\
    \ denominator == 0\n        val numeratorIsPositive = numeratorIsPositive || numeratorIsPositiveWhole\n\
    \        val denominatorIsPositive = denominatorIsPositive || denominatorIsPositiveWhole\n\
    \        val numeratorIsNegative = numeratorIsNegative || numeratorIsNegativeWhole\n\
    \        val denominatorIsNegative = denominatorIsNegative || denominatorIsNegativeWhole\n\
    \        val numeratorIsZero = numerator == 0\n        val denominatorIsZero =\
    \ denominator == 0\n        val numeratorIsPositive = numeratorIsPositive || numeratorIsPositiveWhole\n\
    \        val denominatorIsPositive = denominatorIsPositive || denominatorIsPositiveWhole\n\
    \        val numeratorIsNegative = numeratorIsNegative || numeratorIsNegativeWhole\n\
    \        val denominatorIsNegative = denominatorIsNegative || denominatorIsNegativeWhole\n\
    \        val numeratorIsZero = numerator == 0\n        val denominatorIsZero =\
    \ denominator == 0\n        val numeratorIsPositive = numeratorIsPositive || numeratorIsPositiveWhole\n\
    \        val denominatorIsPositive = denominatorIsPositive || denominatorIsPositiveWhole\n\
    \        val numeratorIsNegative = numeratorIsNegative || numeratorIsNegativeWhole\n\
    \        val denominatorIsNegative = denominatorIsNegative || denominatorIsNegativeWhole\n\
    \        val numeratorIsZero = numerator == 0\n        val denominatorIsZero =\
    \ denominator == 0\n        val numeratorIsPositive = numeratorIsPositive || numeratorIsPositiveWhole\n\
    \        val denominatorIsPositive = denominatorIsPositive || denominatorIsPositiveWhole\n\
    \        val numeratorIsNegative = numeratorIsNegative || numeratorIsNegativeWhole\n\
    \        ", "        val nums = x.split(\"/\")\n        val dens = n.split(\"\
    /\")\n        if (nums.length != dens.length)\n            return false\n    \
    \    val numsMap = new mutable.HashMap[Int, Int]()\n        val densMap = new\
    \ mutable.HashMap[Int, Int]()\n        for (i <- 0 until nums.length)\n      \
    \      numsMap(nums(i).toInt) = nums(i).toInt\n        for (i <- 0 until dens.length)\n\
    \            densMap(dens(i).toInt) = dens(i).toInt\n        val numsKeys = numsMap.keys\n\
    \        val densKeys = densMap.keys\n        if (numsKeys.size != densKeys.size)\n\
    \            return false\n        for (i <- 0 until numsKeys.size) {\n      \
    \      if (numsMap(i) != densMap(i))\n                return false\n        }\n\
    \        true", "        val xNum = x.split(\"/\").toInt\n        val nNum = n.split(\"\
    /\").toInt\n        val xDeno = xNum.last\n        val nDeno = nNum.last\n   \
    \     val xNum1 = xNum.dropRight(1)\n        val nNum1 = nNum.dropRight(1)\n \
    \       val xDeno1 = xDeno\n        val nDeno1 = nDeno\n        val xNum2 = xNum1.dropRight(1)\n\
    \        val nNum2 = nNum1.dropRight(1)\n        val xDeno2 = xDeno1\n       \
    \ val nDeno2 = nDeno1\n        val xNum3 = xNum2.dropRight(1)\n        val nNum3\
    \ = nNum2.dropRight(1)\n        val xDeno3 = xDeno2\n        val nDeno3 = nDeno2\n\
    \        val xNum4 = xNum3.dropRight(1)\n        val nNum4 = nNum3.dropRight(1)\n\
    \        val xDeno4 = xDeno3\n        val nDeno4 = nDeno3\n        val xNum5 =\
    \ xNum4.dropRight(1)\n        val nNum5 = nNum4.dropRight(1)\n        val xDeno5\
    \ = xDeno4\n        val nDeno5 = nDeno4\n        val xNum6 = xNum5.dropRight(1)\n\
    \        val nNum6 = nNum5.dropRight(1)\n        val xDeno6 = xDeno5\n       \
    \ val nDeno6 = nDeno5\n        val xNum7 = xNum6.dropRight(1)\n        val nNum7\
    \ = nNum6.dropRight(1)\n        val xDeno7 = xDeno6\n        val nDeno7 = nDeno6\n\
    \        val xNum8 = xNum7.dropRight(1)\n        val nNum8 = nNum7.dropRight(1)\n\
    \        val xDeno8 = xDeno7\n        val nDeno8 = nDeno7\n        val xNum9 =\
    \ xNum8.dropRight(1)\n        val nNum9 = nNum8.dropRight(1)\n        val xDeno9\
    \ = xDeno8\n        val nDeno9 = nDeno8\n        val xNum10 = xNum9.dropRight(1)\n\
    \        val nNum10 = nNum9.dropRight(1)\n        val xDeno10 = xDeno9\n     \
    \   val nDeno10 = nDeno9\n        val xNum11 = xNum10.dropRight(1)\n        val ",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        if\
    \ (nums.length != dens.length)\n            return false\n        val numsSet\
    \ = nums.toSet\n        val densSet = dens.toSet\n        if (numsSet.size ==\
    \ densSet.size)\n            return true\n        val numsSetSize = numsSet.size\n\
    \        val densSetSize = densSet.size\n        if (numsSetSize == densSetSize)\n\
    \            return true\n        if (numsSetSize > densSetSize)\n           \
    \ return false\n        val numsSetIterator = numsSet.iterator\n        val densSetIterator\
    \ = densSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val densSetIteratorSize = densSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val densSetIteratorIterator = densSetIterator.iterator\n\
    \        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n    \
    \    val densSetIteratorIteratorSize = densSetIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n       \
    \ val densSetIteratorIteratorIterator = densSetIteratorIterator.iterator\n   \
    \     val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val densSetIteratorIteratorIteratorSize = densSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val densSetIteratorIteratorIteratorIterator = densSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val densSetIteratorIteratorIteratorIteratorSize = densSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val densSetIteratorIteratorIteratorIteratorIterator = densSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val densSetIteratorIteratorIteratorIteratorIteratorSize = densSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val densSetIteratorIteratorIteratorIteratorIteratorIterator = densSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator", "        val xNum = x.split(\"/\").toList\n   \
    \     val nNum = n.split(\"/\").toList\n        val xNum1 = xNum.head\n      \
    \  val nNum1 = nNum.head\n        val xNum2 = xNum.last\n        val nNum2 = nNum.last\n\
    \        val xNum3 = xNum.init\n        val nNum3 = nNum.init\n        val xNum4\
    \ = xNum.tail\n        val nNum4 = nNum.tail\n        val xNum5 = xNum.init\n\
    \        val nNum5 = nNum.init\n        val xNum6 = xNum.tail\n        val nNum6\
    \ = nNum.tail\n        val xNum7 = xNum.init\n        val nNum7 = nNum.init\n\
    \        val xNum8 = xNum.tail\n        val nNum8 = nNum.tail\n        val xNum9\
    \ = xNum.init\n        val nNum9 = nNum.init\n        val xNum10 = xNum.tail\n\
    \        val nNum10 = nNum.tail\n        val xNum11 = xNum.init\n        val nNum11\
    \ = nNum.init\n        val xNum12 = xNum.tail\n        val nNum12 = nNum.tail\n\
    \        val xNum13 = xNum.init\n        val nNum13 = nNum.init\n        val xNum14\
    \ = xNum.tail\n        val nNum14 = nNum.tail\n        val xNum15 = xNum.init\n\
    \        val nNum15 = nNum.init\n        val xNum16 = xNum.tail\n        val nNum16\
    \ = nNum.tail\n        val xNum17 = xNum.init\n        val nNum17 = nNum.init\n\
    \        val xNum18 = xNum.tail\n        val nNum18 = nNum.tail\n        val xNum19\
    \ = xNum.init\n        val nNum19 = nNum.init\n        val xNum20 = xNum.tail\n\
    \        val nNum20 = nNum.tail\n        val xNum21 = xNum.init\n        val nNum21\
    \ = nNum.init\n        val xNum22 = xNum.tail\n        val nNum22 = nNum.tail\n\
    \        val xNum23 = xNum.init\n        val nNum23 = nNum.init\n        val xNum24\
    \ = xNum.tail\n        val nNum24 = nNum.tail\n        val xNum25 = xNum.init\n",
  "        val xNum = x.split(\"/\").toList\n        val nNum = n.split(\"/\").toList\n\
    \        val xNum1 = xNum(0)\n        val nNum1 = nNum(0)\n        val xNum2 =\
    \ xNum(1)\n        val nNum2 = nNum(1)\n        val xNum3 = xNum2\n        val\
    \ nNum3 = nNum2\n        val xNum4 = xNum3\n        val nNum4 = nNum3\n      \
    \  val xNum5 = xNum4\n        val nNum5 = nNum4\n        val xNum6 = xNum5\n \
    \       val nNum6 = nNum5\n        val xNum7 = xNum6\n        val nNum7 = nNum6\n\
    \        val xNum8 = xNum7\n        val nNum8 = nNum7\n        val xNum9 = xNum8\n\
    \        val nNum9 = nNum8\n        val xNum10 = xNum9\n        val nNum10 = nNum9\n\
    \        val xNum11 = xNum10\n        val nNum11 = nNum10\n        val xNum12\
    \ = xNum11\n        val nNum12 = nNum11\n        val xNum13 = xNum12\n       \
    \ val nNum13 = nNum12\n        val xNum14 = xNum13\n        val nNum14 = nNum13\n\
    \        val xNum15 = xNum14\n        val nNum15 = nNum14\n        val xNum16\
    \ = xNum15\n        val nNum16 = nNum15\n        val xNum17 = xNum16\n       \
    \ val nNum17 = nNum16\n        val xNum18 = xNum17\n        val nNum18 = nNum17\n\
    \        val xNum19 = xNum18\n        val nNum19 = nNum18\n        val xNum20\
    \ = xNum19\n        val nNum20 = nNum19\n        val xNum21 = xNum20\n       \
    \ val nNum21 = nNum20\n        val xNum22 = xNum21\n        val nNum22 = nNum21\n\
    \        val xNum23 = xNum22\n        val nNum23 = nNum22\n        val xNum24\
    \ = xNum23\n        val nNum24 = nNum23\n        val xNum25 = xNum24\n       \
    \ val nNum25 = nNum24\n        val xNum26 = xNum25\n        val nNum26 = nNum25\n\
    \        val xNum27 = xNum26\n        val nNum27 = nNum26\n        val xNum",
  "        val numer = x.split(\"/\")(0)\n        val denom = x.split(\"/\")(1)\n\
    \        val numerator = numer\n        val denominator = denom\n        val numeratorAsInt\
    \ = numerator.toInt\n        val denominatorAsInt = denominator.toInt\n      \
    \  val numeratorAsDouble = numeratorAsInt.toDouble\n        val denominatorAsDouble\
    \ = denominatorAsInt.toDouble\n        val numeratorAsDoubleInt = numeratorAsInt.toInt\n\
    \        val denominatorAsDoubleInt = denominatorAsInt.toInt\n        val numeratorAsDoubleLong\
    \ = numeratorAsInt.toLong\n        val denominatorAsDoubleLong = denominatorAsInt.toLong\n\
    \        val numeratorAsDoubleDouble = numeratorAsDouble.toDouble\n        val\
    \ denominatorAsDoubleDouble = denominatorAsDouble.toDouble\n        val numeratorAsDoubleLongDouble\
    \ = numeratorAsDoubleLong.toDouble\n        val denominatorAsDoubleLongDouble\
    \ = denominatorAsDoubleLong.toDouble\n        val numeratorAsDoubleDoubleInt =\
    \ numeratorAsDoubleDoubleInt.toDouble\n        val denominatorAsDoubleDoubleInt\
    \ = denominatorAsDoubleDoubleInt.toDouble\n        val numeratorAsDoubleDoubleLong\
    \ = numeratorAsDoubleDoubleLong.toDouble\n        val denominatorAsDoubleDoubleLong\
    \ = denominatorAsDoubleDoubleLong.toDouble\n        val numeratorAsDoubleDoubleDouble\
    \ = numeratorAsDoubleDouble.toDouble\n        val denominatorAsDoubleDoubleDouble\
    \ = denominatorAsDoubleDouble.toDouble\n        val numeratorAsDoubleDoubleLongDouble\
    \ = numeratorAsDoubleDoubleLong.toDouble\n        val denominatorAsDoubleDoubleLongDouble\
    \ = denominatorAsDoubleDoubleLong.toDouble\n        val numeratorAsDoubleDoubleDoubleInt\
    \ = numeratorAsDoubleDoubleDoubleInt.toDouble\n        val denominatorAsDoubleDoubleDoubleInt\
    \ = denominatorAsDoubleDoubleDoubleInt.toDouble\n        val numeratorAsDoubleDoubleDoubleLong\
    \ = numeratorAsDoubleDoubleDoubleLong.toDouble\n        val denominatorAsDoubleDoubleDoubleLong\
    \ = denominatorAsDoubleDoubleDoubleLong.toDouble\n        val numeratorAsDoubleDoubleDoubleDouble\
    \ = numeratorAsDoubleDoubleDouble.toDouble\n        val denominatorAsDoubleDoubleDoubleDouble\
    \ = denominatorAsDoubleDoubleDouble.toDouble\n        val numeratorAsDoubleDoubleDoubleLongDouble\
    \ = numeratorAsDoubleDoubleDoubleLong.toDouble\n        val denominatorAsDoubleDoubleDoubleLongDouble\
    \ = denominatorAsDoubleDoubleDoubleLong.toDouble\n        val numeratorAsDoubleDoubleDoubleDoubleInt\
    \ = numeratorAsDoubleDoubleDoubleDoubleInt.to", "        val numer = x.split(\"\
    /\")(0)\n        val denom = x.split(\"/\")(1)\n        val numerator = numer\n\
    \        val denominator = denom\n        val numeratorInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorInt = denominator.asInstanceOf[Int]\n        val numeratorDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorDouble = numerator.asInstanceOf[Double]\n        val denominatorDouble\
    \ = denominator.asInstanceOf[Double]\n        val numeratorInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorInt = denominator.asInstanceOf[Int]\n        val numeratorDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt = denominator.asInstanceOf[Int]\n\
    \        val numeratorDouble = numerator.asInstanceOf[Double]\n        val denominatorDouble\
    \ = denominator.asInstanceOf[Double]\n        val numeratorInt = numerator.asInstanceOf[Int]\n\
    \        val denominatorInt = denominator.asInstanceOf[Int]\n        val numeratorDouble\
    \ = numerator.asInstanceOf[Double]\n        val denominatorDouble = denominator.asInstanceOf[Double]\n\
    \        val numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt\
    \ = denominator.asInstanceOf[Int]\n        val numeratorDouble = numerator.asInstanceOf[Double]\n\
    \        val denominatorDouble = denominator.asInstanceOf[Double]\n        val\
    \ numeratorInt = numerator.asInstanceOf[Int]\n        val denominatorInt = ",
  "        val nums = x.split(\"/\")\n        val dens = n.split(\"/\")\n        if\
    \ (nums.length != dens.length) false\n        else {\n            var i = 0\n\
    \            var j = 0\n            var k = 0\n            var sum = 0\n     \
    \       var count = 0\n            while (i < nums.length && j < dens.length)\
    \ {\n                if (nums(i).toInt == dens(j).toInt) {\n                 \
    \   sum = sum + nums(i).toInt\n                    count = count + 1\n       \
    \             i = i + 1\n                    j = j + 1\n                } else\
    \ {\n                    k = k + 1\n                }\n            }\n       \
    \     if (count == dens.length) true\n            else false\n        }"]
stop_tokens:
- "\n    }\n"
