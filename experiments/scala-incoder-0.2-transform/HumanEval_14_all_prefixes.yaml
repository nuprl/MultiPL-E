name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
  ))\n    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        val prefixes = mutable.ListBuffer.empty[String]\n        var\
    \ currentPrefix = \"\"\n        for (c <- string) {\n            if (c.isLetter)\
    \ {\n                currentPrefix = currentPrefix + c\n            } else {\n\
    \                prefixes += currentPrefix\n                currentPrefix = \"\
    \"\n            }\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0,currentLength)\n    \
    \        prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.foreach(x => prefixes += x)\n\
    \        prefixes.toList", "        var prefixes = List[String]()\n        var\
    \ currentPrefix = \"\"\n        var currentLength = string.length\n        var\
    \ currentIndex = 0\n        while (currentIndex < currentLength) {\n         \
    \   currentPrefix = string.substring(currentIndex, currentIndex + currentLength)\n\
    \            prefixes ::= currentPrefix\n            currentIndex += currentLength\n\
    \            currentLength -= 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        var currentPrefix = \"\"\n     \
    \   for (c <- string) {\n            if (currentPrefix.length > 0) {\n       \
    \         prefixes += currentPrefix\n            }\n            currentPrefix\
    \ = currentPrefix + c\n        }\n        prefixes += currentPrefix\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        var length = 0\n        while (length <\
    \ string.length) {\n            length += current.length\n            current\
    \ = current.substring(0,length)\n            prefixes += current\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.dropRight(1)\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").reverse.foreach(prefix => prefixes += prefix)\n  \
    \      prefixes.toList.reverse", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.dropRight(1)\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n  \
    \      while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.foreach(prefix => prefixes +=\
    \ prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for(i <- 0 until string.length){\n            currentPrefix\
    \ += string(i)\n            prefixes += currentPrefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            if(currentPrefix.length\
    \ > 0){\n                prefixes += currentPrefix\n            }\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ var prefixes = List[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = 0\n        for (c <- string) {\n            if (currentLength\
    \ == 0) {\n                currentPrefix = c\n                currentLength =\
    \ 1\n            } else {\n                if (c == currentPrefix) {\n       \
    \             currentLength += 1\n                } else {\n                 \
    \   prefixes ::= currentPrefix\n                    currentPrefix = c\n      \
    \              currentLength = 1\n                }\n            }\n        }\n\
    \        prefixes ::= currentPrefix\n        return prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        string.foreach(x =>\
    \ prefixes += x)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for(i\
    \ <- 0 until string.length){\n            currentLength = string(i)\n        \
    \    currentPrefix = string.substring(0,i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var current = string\n\
    \        var i = 0\n        while (i < string.length) {\n            val next\
    \ = string.substring(i, i + 1)\n            if (next == \"\") {\n            \
    \    prefixes += current\n                current = \"\"\n            } else {\n\
    \                current += next\n            }\n            i += 1\n        }\n\
    \        prefixes += current\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.foreach(x => {\n            val\
    \ prefix = string.substring(0, x)\n            prefixes += prefix\n        })\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n \
    \       while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n        for\
    \ (c <- string) {\n            if (c.isLetter) {\n                currentPrefix\
    \ = currentPrefix + c\n            } else {\n                prefixes += currentPrefix\n\
    \                currentPrefix = \"\"\n            }\n        }\n        prefixes\
    \ += currentPrefix\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(prefix => {\n            val newPrefixes = allPrefixes(prefix\
    \ + string.substring(prefix.length))\n            prefixes ++= newPrefixes\n \
    \       })\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (i <- 0 until string.length) {\n            currentLength = string(i)\n    \
    \        currentPrefix = currentPrefix.substring(0, currentLength)\n         \
    \   prefixes = prefixes :+ currentPrefix\n        }\n        prefixes", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix =\
    \ \"\"\n        for(i <- 0 until string.length){\n            currentPrefix +=\
    \ string.charAt(i)\n            prefixes += currentPrefix\n        }\n       \
    \ prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n      \
    \  allPrefixesRec(string, prefixes)\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < string.length) {\n            prefixes\
    \ += string.substring(0, i)\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for (c <- string) {\n            if (c.isLetter) {\n       \
    \         currentPrefix = currentPrefix + c\n            } else {\n          \
    \      prefixes += currentPrefix\n                currentPrefix = \"\"\n     \
    \       }\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for (c <- string) {\n            if (currentPrefix.length >\
    \ 0) {\n                prefixes += currentPrefix\n                currentPrefix\
    \ = \"\"\n            }\n            currentPrefix += c\n        }\n        prefixes\
    \ += currentPrefix\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < string.length) {\n            prefixes\
    \ += string.substring(0, i)\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(x => prefixes += x)\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        var currentPrefix = \"\"\n     \
    \   var currentLength = 0\n        for (c <- string) {\n            if (currentLength\
    \ == 0) {\n                currentPrefix = c\n                currentLength =\
    \ 1\n            } else {\n                if (c == currentPrefix) {\n       \
    \             currentLength += 1\n                } else {\n                 \
    \   prefixes += currentPrefix\n                    currentPrefix = c\n       \
    \             currentLength = 1\n                }\n            }\n        }\n\
    \        prefixes += currentPrefix\n        prefixes", "        var prefixes =\
    \ List[String]()\n        var currentPrefix = \"\"\n        var currentLength\
    \ = 0\n        for (c <- string) {\n            if (currentLength == 0) {\n  \
    \              currentPrefix = c\n                currentLength = 1\n        \
    \    } else {\n                if (c == currentPrefix) {\n                   \
    \ currentLength += 1\n                } else {\n                    prefixes ::=\
    \ currentPrefix\n                    currentPrefix = c\n                    currentLength\
    \ = 1\n                }\n            }\n        }\n        prefixes ::= currentPrefix\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        string.foreach(prefix =>\
    \ prefixes += prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for (c <- string) {\n            if\
    \ (currentPrefix.length > 0) {\n                prefixes += currentPrefix\n  \
    \          }\n            currentPrefix = currentPrefix + c\n        }\n     \
    \   prefixes += currentPrefix\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.foldLeft(prefixes) { (list, c)\
    \ =>\n            list :+ c.takeWhile(_ != 'a')\n        }", "        var prefixes\
    \ = List[String]()\n        var currentPrefix = \"\"\n        var currentLength\
    \ = 0\n        for (c <- string) {\n            if (currentLength == currentPrefix.length)\
    \ {\n                prefixes ::= currentPrefix\n                currentPrefix\
    \ = \"\"\n                currentLength = 0\n            }\n            currentLength\
    \ += 1\n            currentPrefix += c\n        }\n        prefixes ::= currentPrefix\n\
    \        return prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (i < string.length) {\n            prefixes += string.substring(0, i)\n    \
    \        i += 1\n        }\n        prefixes.toList", "        val prefixes =\
    \ mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes ::= currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < string.length) {\n            prefixes\
    \ += string.substring(0, i)\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").reverse.foreach(prefix => {\n            prefixes\
    \ += prefix\n        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (c <- string) {\n            if\
    \ (currentPrefix.length > 0) {\n                prefixes += currentPrefix\n  \
    \          }\n            currentPrefix = currentPrefix + c\n        }\n     \
    \   prefixes += currentPrefix\n        prefixes.toList", "        var prefixes\
    \ = List[String]()\n        var currentPrefix = \"\"\n        for(i <- 0 until\
    \ string.length){\n            currentPrefix = currentPrefix + string.charAt(i)\n\
    \            prefixes = prefixes ::: List(currentPrefix)\n        }\n        return\
    \ prefixes", "        val prefixes = mutable.ListBuffer[String]()\n        string.foreach(x\
    \ => prefixes += x)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length) {\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            if(currentPrefix.length\
    \ < string.length)\n                prefixes += currentPrefix\n        }\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n  \
    \      allPrefixesRec(string, prefixes)\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        string.foreach(x => {\n   \
    \         val prefixLength = string.length\n            val prefix = string.substring(0,\
    \ prefixLength)\n            prefixes += prefix\n        })\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length) {\n\
    \            currentPrefix += string(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (string.charAt(i) == string.charAt(i-1)) {\n                currentPrefix\
    \ += string.charAt(i)\n            } else {\n                prefixes += currentPrefix\n\
    \                currentPrefix = string.charAt(i)\n            }\n        }\n\
    \        prefixes += currentPrefix\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (c <- string) {\n            if (currentLength == 0) {\n                currentPrefix\
    \ = c\n                currentLength = 1\n            } else {\n             \
    \   if (c == currentPrefix) {\n                    currentLength += 1\n      \
    \          } else {\n                    prefixes += currentPrefix\n         \
    \           currentPrefix = c\n                    currentLength = 1\n       \
    \         }\n            }\n        }\n        prefixes += currentPrefix\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer[String]()\n      \
    \  var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n      \
    \      currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string, prefixes)\n\
    \        prefixes.toList", "        var prefixes = List[String]()\n        var\
    \ currentPrefix = \"\"\n        var currentLength = 0\n        for(c <- string)\
    \ {\n            currentLength += 1\n            currentPrefix = currentPrefix\
    \ + c\n            prefixes = prefixes :+ currentPrefix\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0,currentLength)\n    \
    \        prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foldLeft(prefixes) { (prefix, c) =>\n            prefix :+ c\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.substring(0,current.length-1)\n        }\n        prefixes.toList",
  "        var prefixes = List[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes = prefixes :+ current\n          \
    \  current = current.dropRight(1)\n        }\n        prefixes", "        val\
    \ prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n        while\
    \ (i < string.length) {\n            val prefix = string.substring(0, i)\n   \
    \         prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        var currentIndex = 0\n        while (currentIndex < currentLength) {\n\
    \            currentPrefix = string.substring(currentIndex, currentIndex + 1)\n\
    \            prefixes ::= currentPrefix\n            currentIndex += 1\n     \
    \   }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.foreach(x => prefixes += x)\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ var prefixes = List[String]()\n        var current = string\n        var index\
    \ = 0\n        while (index < current.length) {\n            prefixes = prefixes\
    \ ::: List(current.substring(index, current.length))\n            index = index\
    \ + 1\n        }\n        prefixes", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            if (string.charAt(i) == string.charAt(i-1)) {\n                currentPrefix\
    \ += string.charAt(i)\n            } else {\n                prefixes ::= currentPrefix\n\
    \                currentPrefix = string.charAt(i)\n            }\n        }\n\
    \        prefixes ::= currentPrefix\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n        for\
    \ (c <- string) {\n            if (currentPrefix.length > 0) {\n             \
    \   prefixes += currentPrefix\n                currentPrefix = \"\"\n        \
    \    }\n            currentPrefix += c\n        }\n        prefixes += currentPrefix\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentLength = 0\n        var currentPrefix = \"\"\n        for(c\
    \ <- string) {\n            if(currentLength == 0) {\n                currentPrefix\
    \ = c\n                currentLength = 1\n            } else {\n             \
    \   if(currentLength == 1) {\n                    prefixes += currentPrefix\n\
    \                    currentLength = 0\n                }\n                currentLength\
    \ += 1\n                currentPrefix = currentPrefix + c\n            }\n   \
    \     }\n        prefixes += currentPrefix\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        var prefixes = List[String]()\n        var\
    \ currentPrefix = \"\"\n        var currentLength = string.length\n        while\
    \ (currentLength > 0) {\n            currentPrefix = string.substring(0, currentLength)\n\
    \            prefixes ::= currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            val prefix\
    \ = string.take(i)\n            prefixes += prefix\n            i += 1\n     \
    \   }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(x => prefixes += x)\n        prefixes.toList", "     \
    \   var prefixes = List[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = 0\n        for(i <- 0 until string.length) {\n            currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            currentLength = currentLength\
    \ + 1\n            prefixes = prefixes ::: List(currentPrefix)\n        }\n  \
    \      prefixes", "        val prefixes = mutable.ListBuffer[String]()\n     \
    \   var currentPrefix = \"\"\n        for(i <- 0 until string.length) {\n    \
    \        currentPrefix += string(i)\n            prefixes += currentPrefix\n \
    \       }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ var prefixes = List[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = string.length\n        while (currentLength > 0) {\n       \
    \     currentPrefix = string.substring(0, currentLength)\n            prefixes\
    \ = prefixes :+ currentPrefix\n            currentLength = currentLength - 1\n\
    \        }\n        return prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (c <- string) {\n            if\
    \ (currentPrefix.length > 0) {\n                prefixes += currentPrefix\n  \
    \          }\n            currentPrefix = currentPrefix + c\n        }\n     \
    \   prefixes += currentPrefix\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.dropRight(1)\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.dropRight(1)\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        string.foreach { char =>\n     \
    \       val prefix = string.takeWhile(_ != char).mkString\n            prefixes\
    \ += prefix\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix: String\
    \ = \"\"\n        for(i <- 0 until string.length) {\n            currentPrefix\
    \ = currentPrefix + string(i)\n            prefixes += currentPrefix\n       \
    \ }\n        prefixes.toList", "        var prefixes = List[String]()\n      \
    \  var currentPrefix = \"\"\n        var currentLength = string.length\n     \
    \   while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes ::= currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes ::= currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        string.foldLeft(prefixes)\
    \ { (prefix, s) =>\n            prefix.append(s)\n            prefix.reverse\n\
    \        }", "        val prefixes = mutable.ListBuffer.empty[String]\n      \
    \  allPrefixesRec(string, prefixes)\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, \"\", prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        string.foldLeft(prefixes)((prefixes,\
    \ c) => {\n            val prefix = prefixes.last\n            val newPrefix =\
    \ prefix +: c.toList\n            prefixes += newPrefix\n            newPrefix\n\
    \        })", "        val prefixes = mutable.ListBuffer.empty[String]\n     \
    \   allPrefixesRec(string, prefixes)\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, \"\", prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(x => {\n            prefixes += x\n            prefixes\
    \ += x.dropWhile(_ == 'a')\n            prefixes += x.takeWhile(_ == 'a')\n  \
    \      })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (i < string.length) {\n            prefixes += string.substring(0, i)\n    \
    \        i += 1\n        }\n        prefixes.toList", "        val prefixes =\
    \ mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = string.length\n        while (currentLength > 0) {\n       \
    \     currentPrefix = string.substring(0, currentLength)\n            prefixes\
    \ += currentPrefix\n            currentLength -= 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (c <- string) {\n            if (currentLength == 0) {\n                currentPrefix\
    \ = c\n                currentLength = 1\n            } else {\n             \
    \   if (c == currentPrefix) {\n                    currentLength += 1\n      \
    \          } else {\n                    prefixes += currentPrefix\n         \
    \           currentPrefix = c\n                    currentLength = 1\n       \
    \         }\n            }\n        }\n        prefixes += currentPrefix\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer[String]()\n      \
    \  string.foreach(prefix => prefixes += prefix)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        string.foreach(x =>\
    \ prefixes += x)\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => {\n            prefixes += prefix\n\
    \            prefixes += prefix + \"a\"\n            prefixes += prefix + \"ab\"\
    \n            prefixes += prefix + \"abc\"\n        })\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = 0\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i) == string(i)) {\n                currentLength\
    \ += 1\n            } else {\n                currentLength = 0\n            \
    \    currentPrefix = currentPrefix + string(i)\n                prefixes += currentPrefix\n\
    \            }\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.dropRight(1)\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = 0\n        for (c <- string) {\n            if (currentLength\
    \ == 0) {\n                currentPrefix = c\n                currentLength =\
    \ 1\n            } else {\n                if (c == currentPrefix) {\n       \
    \             currentLength += 1\n                } else {\n                 \
    \   prefixes += currentPrefix\n                    currentPrefix = c\n       \
    \             currentLength = 1\n                }\n            }\n        }\n\
    \        prefixes += currentPrefix\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes += current\n            current =\
    \ current.substring(0,current.length-1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (c <- string) {\n            if (currentLength == currentPrefix.length) {\n\
    \                prefixes ::= currentPrefix\n                currentLength = 0\n\
    \                currentPrefix = \"\"\n            }\n            currentLength\
    \ += 1\n            currentPrefix += c\n        }\n        prefixes ::= currentPrefix\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n   \
    \     allPrefixesRec(string, prefixes)\n        prefixes.toList", "        var\
    \ prefixes = List[String]()\n        var currentPrefix = \"\"\n        var currentLength\
    \ = 0\n        var currentString = \"\"\n        for (c <- string) {\n       \
    \     if (currentLength == 0) {\n                currentPrefix = c\n         \
    \       currentLength = 1\n                currentString = c\n            } else\
    \ {\n                if (c == currentPrefix) {\n                    currentLength\
    \ += 1\n                } else {\n                    prefixes = prefixes :+ currentPrefix\n\
    \                    currentPrefix = c\n                    currentLength = 1\n\
    \                    currentString = c\n                }\n            }\n   \
    \     }\n        prefixes = prefixes :+ currentPrefix\n        return prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current.length != 0) {\n            prefixes += current.substring(0,\
    \ current.length-1)\n            current = current.substring(current.length-1)\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n        for(i\
    \ <- 0 until string.length){\n            currentPrefix += string.charAt(i)\n\
    \            prefixes += currentPrefix\n        }\n        prefixes", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n \
    \       while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            prefixes\
    \ += string.substring(0, i)\n            i += 1\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\"\
    ).foreach(prefix => prefixes += prefix)\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\n\
    \        for (c <- string) {\n            if (currentPrefix.length > 0) {\n  \
    \              prefixes += currentPrefix\n            }\n            currentPrefix\
    \ = currentPrefix + c\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.foreach(prefix\
    \ => prefixes += prefix)\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes ::= currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for (c <- string) {\n            if\
    \ (currentPrefix.length > 0) {\n                prefixes += currentPrefix\n  \
    \          }\n            currentPrefix = currentPrefix + c\n        }\n     \
    \   prefixes += currentPrefix\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foldLeft(prefixes)((prefixes, c) => {\n            prefixes +=\
    \ c\n            prefixes += c.takeWhile(_ != 'a')\n            prefixes += c.dropWhile(_\
    \ != 'a')\n            prefixes\n        })", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer.empty[String]\n        var currentPrefix:\
    \ String = \"\"\n        for (c <- string) {\n            if (currentPrefix.length\
    \ > 0) {\n                prefixes += currentPrefix\n            }\n         \
    \   currentPrefix = currentPrefix + c\n        }\n        prefixes += currentPrefix\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n   \
    \     allPrefixesRec(string, prefixes)\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ var prefixes = List[String]()\n        var currentPrefix = \"\"\n        var\
    \ currentLength = string.length\n        while (currentLength > 0) {\n       \
    \     currentPrefix = string.substring(0, currentLength)\n            prefixes\
    \ ::= currentPrefix\n            currentLength = currentLength - 1\n        }\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n   \
    \     string.foreach(x => {\n            val prefix = string\n            val\
    \ suffixes = string.drop(prefix.length)\n            suffixes.foreach(y => {\n\
    \                prefixes += prefix\n            })\n        })\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0,currentLength)\n    \
    \        prefixes += currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i) == string.charAt(i-1))\
    \ {\n                currentLength += 1\n            } else {\n              \
    \  currentLength = 1\n            }\n            if (currentLength > currentPrefix.length)\
    \ {\n                prefixes += currentPrefix\n                currentPrefix\
    \ = \"\"\n                currentLength = 0\n            }\n            currentPrefix\
    \ += string.charAt(i)\n        }\n        if (currentLength > currentPrefix.length)\
    \ {\n            prefixes += currentPrefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = 0\n        for(i <- 0 until string.length){\n\
    \            currentLength = string(i)\n            currentPrefix = currentPrefix\
    \ ++ string(i)\n            prefixes += currentPrefix\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var prefix = \"\"\n        var i = 0\n\
    \        while (i < string.length) {\n            prefix += string(i)\n      \
    \      i += 1\n            if (i < string.length) {\n                prefixes\
    \ += prefix\n            }\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n       \
    \ while (i < string.length) {\n            val prefix = string.substring(0, i)\n\
    \            prefixes += prefix\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList"]
stop_tokens:
- "\n    }\n"
