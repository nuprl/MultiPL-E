name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
  ))\n    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        val prefixes = mutable.ListBuffer.empty[String]\n        var\
    \ currentPrefix = \"\"\n        for (c <- string) {\n            if (c.isLetter)\
    \ {\n                currentPrefix = currentPrefix + c\n            } else {\n\
    \                prefixes += currentPrefix\n                currentPrefix = \"\
    \"\n            }\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0,currentLength)\n    \
    \        prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.foreach(x => prefixes += x)\n\
    \        prefixes.toList", "        var prefixes = List[String]()\n        var\
    \ currentPrefix = \"\"\n        var currentLength = string.length\n        var\
    \ currentIndex = 0\n        while (currentIndex < currentLength) {\n         \
    \   currentPrefix = string.substring(currentIndex, currentIndex + currentLength)\n\
    \            prefixes ::= currentPrefix\n            currentIndex += currentLength\n\
    \            currentLength -= 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        var currentPrefix = \"\"\n     \
    \   for (c <- string) {\n            if (currentPrefix.length > 0) {\n       \
    \         prefixes += currentPrefix\n            }\n            currentPrefix\
    \ = currentPrefix + c\n        }\n        prefixes += currentPrefix\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        var length = 0\n        while (length <\
    \ string.length) {\n            length += current.length\n            current\
    \ = current.substring(0,length)\n            prefixes += current\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.dropRight(1)\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").reverse.foreach(prefix => prefixes += prefix)\n  \
    \      prefixes.toList.reverse", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesHelper(string, prefixes)\n        prefixes.toList", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.dropRight(1)\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n  \
    \      while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.foreach(prefix => prefixes +=\
    \ prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for(i <- 0 until string.length){\n            currentPrefix\
    \ += string(i)\n            prefixes += currentPrefix\n        }\n        prefixes.toList"]
stop_tokens:
- "\n    }\n"
