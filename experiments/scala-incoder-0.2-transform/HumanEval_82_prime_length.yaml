name: HumanEval_82_prime_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns True if the string\n  \
  \  // length is a prime number or False otherwise\n    // Examples\n    // >>> primeLength((\"\
  Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n\
  \    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"\
  orange\"))\n    // (false)\n    def primeLength(string : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\"\
  )) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"\
  kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n   \
  \ assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\"))\
  \ == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"\
  Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"\
  HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"\
  gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\"\
  )) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"
completions: ["        val primes = mutable.Set[Int]()\n        for (i <- 1 to string.length){\n\
    \            val str = string.substring(0,i)\n            val prime = str.forall(x\
    \ => primes.contains(x))\n            if (prime) primes += i\n        }\n    \
    \    primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for(i <- 1 to string.length){\n            val x = string.charAt(i)\n\
    \            if(x == x.toInt){\n                primes.add(x)\n            }\n\
    \        }\n        primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for(i <- 2 to string.length-1){\n            if(string.charAt(i) == string.charAt(i+1)){\n\
    \                primes.add(i)\n            }\n        }\n        primes.isEmpty",
  "        val primes = mutable.Set[Int]()\n        for(i <- 1 to string.length){\n\
    \            val str = string.substring(0,i)\n            val prime = str.forall(x\
    \ => primes.contains(x))\n            if(prime){\n                primes += i\n\
    \            }\n        }\n        primes.size == string.length", "        val\
    \ primes = mutable.Set[Int]()\n        for(i <- 2 to string.length){\n       \
    \     if(string.charAt(i) == string.charAt(i-1)){\n                primes.add(i)\n\
    \            }\n        }\n        primes.size == string.length", "        val\
    \ primes = mutable.Set[Int]()\n        for(i <- 1 to string.length){\n       \
    \     val prime = string.charAt(i).toInt\n            if(primes.contains(prime)){\n\
    \                return false\n            }\n            primes += prime\n  \
    \      }\n        return true", "        val primes = mutable.Set[Int]()\n   \
    \     for(i <- 1 to string.length){\n            val str = string.substring(0,i)\n\
    \            val prime = str.forall(x => primes.contains(x))\n            if(prime){\n\
    \                primes += i\n            }\n        }\n        primes.size ==\
    \ string.length", "        val primes = mutable.ArrayBuffer(2)\n        val length\
    \ = string.length\n        var index = 0\n        while (index < length) {\n \
    \           val currentChar = string.charAt(index)\n            val isPrime =\
    \ true\n            val divisor = 2\n            while (divisor <= currentChar)\
    \ {\n                if (currentChar % divisor == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n                divisor\
    \ += 1\n            }\n            if (isPrime) {\n                primes += currentChar\n\
    \            }\n            index += 1\n        }\n        primes.length == length",
  "        val primes = mutable.Set[Int]()\n        for(i <- 1 to string.length){\n\
    \            val isPrime = string.charAt(i) == string.charAt(i-1)\n          \
    \  if(isPrime){\n                primes += i\n            }\n        }\n     \
    \   primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for (i <- 1 to string.length)\n            if (string.charAt(i) == string.charAt(i).toInt)\n\
    \                primes += string.charAt(i).toInt\n        primes.size == string.length",
  "        val primes = mutable.Set[Int]()\n        for(i <- 1 to string.length){\n\
    \            val n = string.charAt(i).toInt\n            if(n == 1){\n       \
    \         primes += n\n            }\n            else{\n                val isPrime\
    \ = true\n                for(j <- 2 to n){\n                    if(n % j == 0){\n\
    \                        isPrime = false\n                        break\n    \
    \                }\n                }\n                if(isPrime){\n        \
    \            primes += n\n                }\n            }\n        }\n      \
    \  primes.size == string.length", "        val primes = mutable.Set[Int]()\n \
    \       for(i <- 1 to string.length){\n            val prime = string.charAt(i).toInt\n\
    \            if(primes.contains(prime)){\n                return false\n     \
    \       }\n            primes += prime\n        }\n        true", "        val\
    \ primes = mutable.Set[Int]()\n        for(i <- 1 to string.length){\n       \
    \     val x = string.charAt(i).toInt\n            if(x == 1){\n              \
    \  primes.add(x)\n            }\n            else{\n                for(j <- 1\
    \ to string.length){\n                    val y = string.charAt(j).toInt\n   \
    \                 if(y == x){\n                        primes.add(y)\n       \
    \             }\n                }\n            }\n        }\n        primes.size\
    \ == string.length", "        val primes = mutable.Set[Int]()\n        val length\
    \ = string.length\n        for(i <- 0 until length) {\n            val remainder\
    \ = length % i\n            if(remainder == 0) {\n                primes.add(i)\n\
    \            }\n        }\n        primes.size == string.length", "        val\
    \ primes = mutable.Set[Int]()\n        for(i <- 2 to string.length){\n       \
    \     if(string.charAt(i) == string.charAt(i-1)){\n                primes.add(i)\n\
    \            }\n        }\n        primes.isEmpty", "        val primes = mutable.Set[Int]()\n\
    \        val length = string.length\n        for(i <- 0 until length) {\n    \
    \        val remainder = math.mod(i, length)\n            if(primes.contains(remainder))\
    \ {\n                return false\n            }\n            primes += i\n  \
    \      }\n        true", "        val primes = mutable.Set[Int]()\n        for(i\
    \ <- 1 to string.length){\n            val isPrime = string.charAt(i) == string.charAt(i-1)\n\
    \            if(isPrime){\n                primes += i\n            }\n      \
    \  }\n        primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        for (i <- 2 to string.length -1) {\n            if (string.charAt(i)\
    \ == string.charAt(i-1)) {\n                primes.add(i)\n            }\n   \
    \     }\n        primes.size == string.length", "        val primes = mutable.Set[Int]()\n\
    \        val length = string.length\n        for(i <- 1 to length) {\n       \
    \     val isPrime = string.charAt(i).asInstanceOf[Int] == 1\n            if(isPrime)\
    \ {\n                primes += i\n            }\n        }\n        primes.size\
    \ == length", "        val primes = mutable.Set[Int]()\n        for(i <- 1 to\
    \ string.length){\n            val str = string.substring(0,i)\n            val\
    \ prime = str.forall(x => primes.contains(x))\n            if(prime){\n      \
    \          primes += i\n            }\n        }\n        primes.size == string.length"]
stop_tokens:
- "\n    }\n"
