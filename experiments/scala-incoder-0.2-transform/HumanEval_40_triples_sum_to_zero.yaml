name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\
    \ set.add(x.toLong) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  set2.add(x)\n            } else if (set2.contains(x)) {\n                set3.add(x)\n\
    \            } else {\n                set.add(x.toLong)\n            }\n    \
    \    }\n        set3.size == 3 && set2.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2\
    \ != 0)\n        triples.forall(t => set.contains(t._1 + t._2))", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val zeros = l.filter(_\
    \ == 0)\n        val threes = l.filter(_ == 3)\n        val threesSumToZero =\
    \ threes.sum == zeros.length\n        threesSumToZero", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length"]
stop_tokens:
- "\n    }\n"
