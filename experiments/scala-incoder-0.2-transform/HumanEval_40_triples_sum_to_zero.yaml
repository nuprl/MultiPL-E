name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\
    \ set.add(x.toLong) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  set2.add(x)\n            } else if (set2.contains(x)) {\n                set3.add(x)\n\
    \            } else {\n                set.add(x.toLong)\n            }\n    \
    \    }\n        set3.size == 3 && set2.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2\
    \ != 0)\n        triples.forall(t => set.contains(t._1 + t._2))", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val zeros = l.filter(_\
    \ == 0)\n        val threes = l.filter(_ == 3)\n        val threesSumToZero =\
    \ threes.sum == zeros.length\n        threesSumToZero", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n      \
    \  set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val nums = l.toSet\n        val zeros = nums.filter(_ == 0)\n        val\
    \ threes = nums.filter(_ == 3)\n        zeros.size == 3 && threes.size == 3",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.Set[Long]()\n        l.foreach(x => set += x)\n      \
    \  set.size == 3 && set.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n         \
    \   if (set.contains(x)) {\n                return false\n            }\n    \
    \        else {\n                set += x\n            }\n        }\n        true",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false\
    \ else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong) }\n  \
    \      set.size == 3", "        val set = new mutable.HashSet[Long]()\n      \
    \  val set2 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set2.add(x) else set.add(x))\n        set2.size == 3", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n       \
    \ set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val zeros = l.filter(_ == 0)\n        val threes = l.filter(_\
    \ == 3)\n        val threesSet = threes.toSet\n        val zeroSet = zeros.toSet\n\
    \        threesSet.size == 3 && zeroSet.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val map = mutable.HashMap[Long, Long]()\n        l.foreach\
    \ { x => map.put(x, map.getOrElse(x, 0l) + x) }\n        map.size == 3", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size ==\
    \ l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach { x => set += x }\n\
    \        set.size == 3", "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2\
    \ > 0).filter(_._2 > 0).filter(_._1 > 0)\n        triples.forall(t => set.contains(t._1\
    \ + t._2))", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        l.foreach{x => if (set.add(x))\
    \ set2.add(x); else set3.add(x); set4.add(x)}\n        set2.size == 3 && set3.size\
    \ == 3 && set4.size == 3", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size ==\
    \ l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x))\n\
    \        set.size == 3", "        val set = mutable.Set[Long]()\n        l.foreach\
    \ { x => set += x }\n        set.size == 3 && set.forall(x => x == 0)", "    \
    \    val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.forall(x => x == 0)",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val sums = l.foldLeft(Map[Long, Long]()){\n         \
    \   case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + 1))\n        }\n     \
    \   sums.size == 3 && sums.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val map = mutable.HashMap[Long, Int]()\n        l.foreach\
    \ { x =>\n            val y = x - l.head\n            map.update(y, map.getOrElse(y,\
    \ 0) + 1l) }\n        map.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)", "        val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2\
    \ > 0).filter(_._2 > 0)\n        triples.forall(t => set.contains(t._1 + t._2))",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3 && set.forall(x => x == 0)", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n \
    \       set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false\
    \ else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n  \
    \      set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3", "        val set =\
    \ mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = mutable.Set[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong) }\n\
    \        set.size == 3", "        val nums = l.toSet\n        val numsSet = nums.toList\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSet = numsSet.toSet\n\
    \        val numsSetSetSize = numsSetSet.size\n        val numsSetSetSet = numsSetSet.toSet\n\
    \        val numsSetSetSetSize = numsSetSetSet.size\n        val numsSetSetSetSet\
    \ = numsSetSetSet.toSet\n        val numsSetSetSetSetSize = numsSetSetSetSet.size\n\
    \        val numsSetSetSetSetSet = numsSetSetSetSet.toSet\n        val numsSetSetSetSetSetSize\
    \ = numsSetSetSetSetSet.size\n        val numsSetSetSetSetSetSet = numsSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSize = numsSetSetSetSetSetSet.size\n      \
    \  val numsSetSetSetSetSetSetSet = numsSetSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSetSetSize\
    \ = numsSetSetSetSetSetSetSetSet.size\n        val numsSetSetSetSetSetSetSetSet\
    \ = numsSetSetSetSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSetSetSetSize\
    \ = numsSetSetSetSetSetSetSetSetSet.size\n        val numsSetSetSetSetSetSetSetSetSet\
    \ = numsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSetSetSetSetSize\
    \ = numsSetSetSetSetSetSetSetSetSet.size\n        val numsSetSetSetSetSetSetSetSetSet\
    \ = numsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSetSetSetSetSetSize\
    \ = numsSetSetSetSetSetSetSetSetSetSetSet.size\n        val numsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSetSetSetSetSetSetSize\
    \ = numsSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val numsSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val nums", "        val\
    \ set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set2.add(x) else set.add(x))\n        l.foreach(x => if (set2.contains(x)) set3.add(x)\
    \ else set2.add(x))\n        set3.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val nums = l.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSet2 = nums.toSet\n        val numsSet3 = nums.toSet\n      \
    \  val numsSet4 = nums.toSet\n        val numsSet5 = nums.toSet\n        val numsSet6\
    \ = nums.toSet\n        val numsSet7 = nums.toSet\n        val numsSet8 = nums.toSet\n\
    \        val numsSet9 = nums.toSet\n        val numsSet10 = nums.toSet\n     \
    \   val numsSet11 = nums.toSet\n        val numsSet12 = nums.toSet\n        val\
    \ numsSet13 = nums.toSet\n        val numsSet14 = nums.toSet\n        val numsSet15\
    \ = nums.toSet\n        val numsSet16 = nums.toSet\n        val numsSet17 = nums.toSet\n\
    \        val numsSet18 = nums.toSet\n        val numsSet19 = nums.toSet\n    \
    \    val numsSet20 = nums.toSet\n        val numsSet21 = nums.toSet\n        val\
    \ numsSet22 = nums.toSet\n        val numsSet23 = nums.toSet\n        val numsSet24\
    \ = nums.toSet\n        val numsSet25 = nums.toSet\n        val numsSet26 = nums.toSet\n\
    \        val numsSet27 = nums.toSet\n        val numsSet28 = nums.toSet\n    \
    \    val numsSet29 = nums.toSet\n        val numsSet30 = nums.toSet\n        val\
    \ numsSet31 = nums.toSet\n        val numsSet32 = nums.toSet\n        val numsSet33\
    \ = nums.toSet\n        val numsSet34 = nums.toSet\n        val numsSet35 = nums.toSet\n\
    \        val numsSet36 = nums.toSet\n        val numsSet37 = nums.toSet\n    \
    \    val numsSet38 = nums.toSet\n        val numsSet39 = nums.toSet\n        val\
    \ numsSet40 = nums.toSet\n        val numsSet41 = nums.toSet\n        val numsSet42\
    \ = nums.toSet\n        val numsSet43 = nums.toSet\n", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3", "        val nums = l.toSet\n        val\
    \ zeros = l.filter(_ == 0)\n        val threes = l.filter(_ == 3)\n        val\
    \ threesSet = threes.toSet\n        val threesSetSet = threesSet.map(_.toSet)\n\
    \        val threesSetSetSet = threesSetSet.map(_.toSet)\n        val threesSetSetSetSet\
    \ = threesSetSetSet.map(_.toSet)\n        val threesSetSetSetSetSet = threesSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSet = threesSetSetSetSetSet.map(_.toSet)\n \
    \       val threesSetSetSetSetSetSet = threesSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSet = threesSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val threesSetSetSetSetSetSetSetSetSet = threesSetSetSetSetSetSetSetSetSet",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size ==\
    \ l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = l.toSet\n        val triples = l.zip(l.tail).filter(_._2 != 0l).filter(_._2\
    \ != l.head).filter(_._2 != l.tail.head)\n        triples.forall(t => set.contains(t._1))",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n         \
    \   if (set.contains(x)) {\n                return false\n            }\n    \
    \        set += x\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val nums = l.toSet\n        val numsSet = nums.toList\n        val numsSetSet\
    \ = numsSet.toSet\n        val numsSetSetSet = numsSetSet.toSet\n        val numsSetSetSetSet\
    \ = numsSetSetSet.toSet\n        val numsSetSetSetSetSet = numsSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSet = numsSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSet\
    \ = numsSetSetSetSetSet.toSet\n        val numsSetSetSetSetSetSetSet = numsSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSet.toSet\n   \
    \     val numsSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSet.toSet\n      \
    \  val numsSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSet.toSet\n      \
    \  val numsSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSet.toSet\n   \
    \     val numsSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSetSetSetSetSetSetSetSetSetSetSet = numsSetSetSetSetSetSetSetSetSetSetSet.toSet\n",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x.toLong) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n      \
    \  set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set += x }\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.Set[Long]()\n\
    \        l.foreach { x => set += x }\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n         \
    \   if (set.contains(x)) {\n                return false\n            }\n    \
    \        set += x\n        }\n        true", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x.toLong) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (x != 0l) {\n            if (set.contains(x)) {\n \
    \               set.remove(x)\n                set2.remove(x)\n              \
    \  set3.remove(x)\n                set4.remove(x)\n            }\n           \
    \ else {\n                set.add(x.toLong)\n                set2.add(x.toLong)\n\
    \                set3.add(x.toLong)\n                set4.add(x.toLong)\n    \
    \        }\n        })\n        if (set3.size == 3l && set4.size == 3l && set2.size\
    \ == 3l) {\n            return true\n        }\n        else {\n            return\
    \ false\n        }", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) false else set.add(x))\n        set.size == 3", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        val set2\
    \ = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x))\
    \ set2.add(x) else set3.add(x))\n        if (set2.size == 3 && set3.size == 3\
    \ && set4.size == 3) {\n            true\n        } else {\n            false\n\
    \        }", "        val set = mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x.toLong) }\n        set.size == 3", "        val sums = l.foldLeft(List[Long]())((sums,\
    \ x) => sums ++ List(x))\n        sums.size == 3 && sums.distinct == List(0,0,0)",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ false else set.add(x))\n        set.size == 3", "        val set = l.toSet\n\
    \        set.size == 3 && set.forall(x => x == 0)", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false\
    \ else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.size == 3 && set.size\
    \ == l.length", "        val set = l.toSet\n        val set2 = l.toSet\n     \
    \   val set3 = l.toSet\n        val set4 = l.toSet\n        val set5 = l.toSet\n\
    \        val set6 = l.toSet\n        val set7 = l.toSet\n        val set8 = l.toSet\n\
    \        val set9 = l.toSet\n        val set10 = l.toSet\n        val set11 =\
    \ l.toSet\n        val set12 = l.toSet\n        val set13 = l.toSet\n        val\
    \ set14 = l.toSet\n        val set15 = l.toSet\n        val set16 = l.toSet\n\
    \        val set17 = l.toSet\n        val set18 = l.toSet\n        val set19 =\
    \ l.toSet\n        val set20 = l.toSet\n        val set21 = l.toSet\n        val\
    \ set22 = l.toSet\n        val set23 = l.toSet\n        val set24 = l.toSet\n\
    \        val set25 = l.toSet\n        val set26 = l.toSet\n        val set27 =\
    \ l.toSet\n        val set28 = l.toSet\n        val set29 = l.toSet\n        val\
    \ set30 = l.toSet\n        val set31 = l.toSet\n        val set32 = l.toSet\n\
    \        val set33 = l.toSet\n        val set34 = l.toSet\n        val set35 =\
    \ l.toSet\n        val set36 = l.toSet\n        val set37 = l.toSet\n        val\
    \ set38 = l.toSet\n        val set39 = l.toSet\n        val set40 = l.toSet\n\
    \        val set41 = l.toSet\n        val set42 = l.toSet\n        val set43 =\
    \ l.toSet\n        val set44 = l.toSet\n        val set45 = l.toSet\n        val\
    \ set46 = l.toSet\n        val set47 = l.toSet\n        val set48 = l.toSet\n\
    \        val set49 = l.toSet\n        val set50 = l.toSet\n        val set51 =\
    \ l.toSet\n        val set52 = l.toSet\n        val set53 = l.toSet\n        val\
    \ set54 = l.toSet\n        val set55 = l.toSet\n        val set56 = l.toSet\n\
    \        val set57 = l.toSet\n        val set58 = l.toSet\n        val set", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n         \
    \   if (set.contains(x)) {\n                return false\n            } else {\n\
    \                set += x\n            }\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
