language: scala
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ hexKey.put(x, hexKey.getOrElse(x, 0) + 1))\n        hexKey.values.toList.filter(x\
    \ => x > 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsknu_n45.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = hex.filter(x => x % 2 == 0).filter(x => x % 3 == 0).filter(x\
    \ => x % 5 == 0).filter(x => x % 7 == 0).filter(x => x % 11 == 0).filter(x =>\
    \ x % 13 == 0).filter(x => x % 17 == 0).filter(x => x % 19 == 0).filter(x => x\
    \ % 23 == 0).filter(x => x % 29 == 0).filter(x => x % 31 == 0).filter(x => x %\
    \ 37 == 0).filter(x => x % 41 == 0).filter(x => x % 43 == 0).filter(x => x % 47\
    \ == 0).filter(x => x % 53 == 0).filter(x => x % 59 == 0).filter(x => x % 61 ==\
    \ 0).filter(x => x % 67 == 0).filter(x => x % 71 == 0).filter(x => x % 73 == 0).filter(x\
    \ => x % 79 == 0).filter(x => x % 83 == 0).filter(x => x % 89 == 0).filter(x =>\
    \ x % 97 == 0).filter(x => x % 101 == 0).filter(x => x % 103 == 0).filter(x =>\
    \ x % 107 == 0).filter(x => x % 109 == 0).filter(x => x % 113 == 0).filter(x =>\
    \ x % 117 == 0).filter(x => x % 121 == 0).filter(x => x % 123 == 0).filter(x =>\
    \ x % 127 == 0).filter(x => x % 131 == 0).filter(x => x % 137 == 0).filter(x =>\
    \ x % 139 == 0).filter(x => x % 143 == 0).filter(x => x % 147 == 0).filter(x =>\
    \ x % 151 == 0).filter(x => x % 157 == 0).filter(x => x % 161 == 0).filter(x =>\
    \ x % 165 == 0).filter(x => x % 169 == 0).filter(x => x % 173 == 0).filter(x =>\
    \ x % 177 == 0).filter(x => x % 181 == 0).filter(x => x % 185 == 0).filter(x =>\
    \ x % 189 == 0).filter(x => x % 193 == 0).filter(x => x % 197 == 0).filter(x =>\
    \ x % 201 == 0).filter(x => x % 205 == 0).filter(x => x % 209 == 0).filter(x =>\
    \ x % 213 == 0).filter(x => x % 217 == 0).filter(x => x % 221 == 0).filter(x =>\
    \ x % 225 == 0).filter(x => x % 229 == 0).filter(x => x % 233 == 0).filter(x =>\
    \ x % 237 == 0).filter(x => x % 24\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphc90x66z.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphc90x66z.scala:27:1594 ------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = hex.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m3\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m5\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m7\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m13\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m17\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m19\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m23\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m29\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m31\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m41\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m43\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m47\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m53\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m59\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m61\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m71\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m73\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m79\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m83\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m89\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m97\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m103\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m107\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m109\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m113\e[0m == \e\
    [31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m117\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m121\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m123\e["
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexKey = new mutable.HashMap[String,\
    \ Long]()\n        hexString.toList.foreach(x => {\n            val hexKey = hexKey.getOrElse(x.toString,\
    \ 0L)\n            hexKey.update(x.toString, hexKey + 1)\n        })\n       \
    \ hexKey.getOrElse(\"0\", 0L)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2bq2gpj.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            hexKey.getOrElse(x, 0)\n        })\n        hexKey.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1riwpgz.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.filter(_ >= '0' && _ <='9').length\n        val hexDigits\
    \ = hex.filter(_ >= '0' && _ <='9').toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.to\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp32p49de2.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit * digit}\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpmebrqwch.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmpmebrqwch.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmpmebrqwch.scala:26)\n\tat Problem$.main(tmpmebrqwch.scala:31)\n\
    \tat Problem.main(tmpmebrqwch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = hex.filter(x => x % 2 == 0 && x != 0)\n        val primesCount\
    \ = primes.count()\n        val hexCount = hex.count()\n        val hexDigits\
    \ = hexCount / hex.length\n        val primeDigits = primesCount / primes.length\n\
    \        val primeDigit = primeDigits.toInt\n        val prime = primeDigits.toLong\n\
    \        val hexDigit = hexDigits.toLong\n        val hexDigitCount = hexDigit\
    \ / hex.length\n        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount\
    \ = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n        val\
    \ hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ldmswpa.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDi"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\"\
    ).toList\n        val numsLength = nums.length\n        val hexDigits = nums.map(_.toInt)\n\
    \        val hexDigitsLength = hexDigits.length\n        val hexDigitsLength =\
    \ hexDigitsLength.toLong\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8_wqu2s.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbb8clmtr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mh"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyArray = hexKey.toArray\n\
    \        val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArrayLength\n  \
    \      val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArray\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaouy76wk.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaouy76wk.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeyArrayLength\e[0m = hexKeyArray.length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexKeyArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpaouy76wk.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m = hexKeyArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaouy76wk.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m = hexKeyArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaouy76wk.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m = hexKeyArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definit"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit.toLong }\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzgshp3i7.scala:26:40 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value toHexString is not a member of Char.\n\e[31m   |\e\
    [0m      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          intWrapper(_$1)\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpzgshp3i7.scala:26:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c\
    \ => {\n            hexKey.put(c.toUpperCase, hexKey.getOrElse(c, 0l) + 1)\n \
    \       })\n        hexKey.getOrElse(\"A\", 0l) + 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptautfx67.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4fc_lfc.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexArray = hex.toArray\n        val hexCount = hexArray.length\n\
    \        val hexArray2 = hexArray.filter(_ % 2 == 0)\n        val hexArray3 =\
    \ hexArray2.filter(_ % 3 == 0)\n        val hexArray4 = hexArray3.filter(_ % 5\
    \ == 0)\n        val hexArray5 = hexArray4.filter(_ % 7 == 0)\n        val hexArray6\
    \ = hexArray5.filter(_ % 11 == 0)\n        val hexArray7 = hexArray6.filter(_\
    \ % 13 == 0)\n        val hexArray8 = hexArray7.filter(_ % 17 == 0)\n        val\
    \ hexArray9 = hexArray8.filter(_ % 19 == 0)\n        val hexArray10 = hexArray9.filter(_\
    \ % 23 == 0)\n        val hexArray11 = hexArray10.filter(_ % 29 == 0)\n      \
    \  val hexArray12 = hexArray11.filter(_ % 31 == 0)\n        val hexArray13 = hexArray12.filter(_\
    \ % 37 == 0)\n        val hexArray14 = hexArray13.filter(_ % 41 == 0)\n      \
    \  val hexArray15 = hexArray14.filter(_ % 43 == 0)\n        val hexArray16 = hexArray15.filter(_\
    \ % 47 == 0)\n        val hexArray17 = hexArray16.filter(_ % 51 == 0)\n      \
    \  val hexArray18 = hexArray17.filter(_ % 53 == 0)\n        val hexArray19 = hexArray18.filter(_\
    \ % 57 == 0)\n        val hexArray20 = hexArray19.filter(_ % 61 == 0)\n      \
    \  val hexArray21 = hexArray20.filter(_ % 67 == 0)\n        val hexArray22 = hexArray21.filter(_\
    \ % 71 == 0)\n        val hexArray23 = hexArray22.filter(_ % 73 == 0)\n      \
    \  val hexArray24 = hexArray23.filter(_ % 79 == 0)\n        val hexArray25 = hexArray24.filter(_\
    \ % 83 == 0)\n        val hexArray26 = hexArray25.filter(_ % 89 == 0)\n      \
    \  val hexArray27 = hexArray26.filter(_ % 97 == 0)\n        val hexArray28 = hexArray27.filter(_\
    \ % 101 == 0)\n        val hexArray29 = hexArray28.filter(_ % 103 == 0)\n    \
    \    val hexArray30 = hexArray29.filter(_ % 107 == 0)\n        val hexArray31\
    \ = hexArray30.filter(_ % 111 == 0)\n        val hexArray32 = hexArray31.filter(_\
    \ % 117\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1fr_jloj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1fr_jloj.scala:59:43 --------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \        \e[33mval\e[0m \e[36mhexArray32\e[0m = hexArray31.filter(_ % \e[31m117\e\
    [0m\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    Int\n\
    \e[31m   |\e[0m                                           Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fr_jloj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.count(_ == '0')\n        val hexDigits = hex.count(_\
    \ >= '0' && _ <='9')\n        val hexDigitPrimes = hexDigits.filter(_ > 0)\n \
    \       val hexDigitPrimeCount = hexDigitPrimes.count(_ > 0)\n        val hexDigitPrimePrimes\
    \ = hexDigitPrimes.filter(_ == 0)\n        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimes = hexDigitPrimePrimes.filter(_ ==\
    \ 0)\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_cjwfh58.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_cjwfh58.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.count(_ > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_cjwfh58.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(_ == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimes\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp_cjwfh58.scala:28:34 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hex.count(_ >= \e[31m'0'\e\
    [0m && _ <=\e[31m'9'\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \    Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_cjwfh58.scala:29:39 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = hexDigits.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).count(x => x == 0)\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2rik0xkx.scala:31)\n\tat Problem.main(tmp2rik0xkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexKey = hexKey.toList\n       \
    \ val hexKeyLen = hexKey.length\n        val hexKeySet = hexKey.toSet\n      \
    \  val hexKeySetLen = hexKeySet.size\n        val hexKeySetSet = hexKeySet.toSet\n\
    \        val hexKeySetSetLen = hexKeySetSet.size\n        val hexKeySetSetSetLen\
    \ = hexKeySetSetLen\n        val hexKeySetSetSetSetLen = hexKeySetSetSetLen\n\
    \        val hexKeySetSetSetSetLen = hexKeySetSetSetSetLen\n        val hexKeySetSetSetSetSetLen\
    \ = hexKeySetSetSetSetLen\n        val hexKeySetSetSetSetSetLen = hexKeySetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetLen\n     \
    \   val hexKeySetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetLen\n        val\
    \ hexKeySetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetLen\n        val\
    \ hexKeySetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetLen\n    \
    \    val hexKeySetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr42cv83u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr42cv83u.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeySetSetSetSetLen\e[0m = hexKeySetSetSetSetLen\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mhexKeySetSetSetSetLen is already defined as \e[33mvalue\e[0m \e[35mhexKeySetSetSetSetLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr42cv83u.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetSetSetSetSetLen\e[0m = hexKeySetSetSetSetSetLen\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySetSetSetSetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mhexKeySetSetSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr42cv83u.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetSetSetSetSetSetLen\e\
    [0m = hexKeySetSetSetSetSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySetSetSetSetSetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mhexKeySetSetSetSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr42cv83u.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetSetSetSetSetSetSetSetLen\e\
    [0m = hexKeySetSetSetSetSetSetSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyS"
  stdout: ''
  timestamp: 1659799582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).filter(_ > 0).count(x => x % 2 == 0)\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzfrcqmg9.scala:32)\n\tat Problem.main(tmpzfrcqmg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
