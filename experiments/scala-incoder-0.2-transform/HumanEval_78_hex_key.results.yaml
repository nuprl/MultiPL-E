language: scala
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ hexKey.put(x, hexKey.getOrElse(x, 0) + 1))\n        hexKey.values.toList.filter(x\
    \ => x > 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsknu_n45.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = hex.filter(x => x % 2 == 0).filter(x => x % 3 == 0).filter(x\
    \ => x % 5 == 0).filter(x => x % 7 == 0).filter(x => x % 11 == 0).filter(x =>\
    \ x % 13 == 0).filter(x => x % 17 == 0).filter(x => x % 19 == 0).filter(x => x\
    \ % 23 == 0).filter(x => x % 29 == 0).filter(x => x % 31 == 0).filter(x => x %\
    \ 37 == 0).filter(x => x % 41 == 0).filter(x => x % 43 == 0).filter(x => x % 47\
    \ == 0).filter(x => x % 53 == 0).filter(x => x % 59 == 0).filter(x => x % 61 ==\
    \ 0).filter(x => x % 67 == 0).filter(x => x % 71 == 0).filter(x => x % 73 == 0).filter(x\
    \ => x % 79 == 0).filter(x => x % 83 == 0).filter(x => x % 89 == 0).filter(x =>\
    \ x % 97 == 0).filter(x => x % 101 == 0).filter(x => x % 103 == 0).filter(x =>\
    \ x % 107 == 0).filter(x => x % 109 == 0).filter(x => x % 113 == 0).filter(x =>\
    \ x % 117 == 0).filter(x => x % 121 == 0).filter(x => x % 123 == 0).filter(x =>\
    \ x % 127 == 0).filter(x => x % 131 == 0).filter(x => x % 137 == 0).filter(x =>\
    \ x % 139 == 0).filter(x => x % 143 == 0).filter(x => x % 147 == 0).filter(x =>\
    \ x % 151 == 0).filter(x => x % 157 == 0).filter(x => x % 161 == 0).filter(x =>\
    \ x % 165 == 0).filter(x => x % 169 == 0).filter(x => x % 173 == 0).filter(x =>\
    \ x % 177 == 0).filter(x => x % 181 == 0).filter(x => x % 185 == 0).filter(x =>\
    \ x % 189 == 0).filter(x => x % 193 == 0).filter(x => x % 197 == 0).filter(x =>\
    \ x % 201 == 0).filter(x => x % 205 == 0).filter(x => x % 209 == 0).filter(x =>\
    \ x % 213 == 0).filter(x => x % 217 == 0).filter(x => x % 221 == 0).filter(x =>\
    \ x % 225 == 0).filter(x => x % 229 == 0).filter(x => x % 233 == 0).filter(x =>\
    \ x % 237 == 0).filter(x => x % 24\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphc90x66z.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphc90x66z.scala:27:1594 ------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = hex.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m3\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m5\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m7\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m13\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m17\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m19\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m23\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m29\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m31\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m41\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m43\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m47\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m53\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m59\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m61\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m71\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m73\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m79\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m83\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m89\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m97\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m103\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m107\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m109\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m113\e[0m == \e\
    [31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m117\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m121\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m123\e["
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexKey = new mutable.HashMap[String,\
    \ Long]()\n        hexString.toList.foreach(x => {\n            val hexKey = hexKey.getOrElse(x.toString,\
    \ 0L)\n            hexKey.update(x.toString, hexKey + 1)\n        })\n       \
    \ hexKey.getOrElse(\"0\", 0L)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2bq2gpj.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            hexKey.getOrElse(x, 0)\n        })\n        hexKey.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1riwpgz.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.filter(_ >= '0' && _ <='9').length\n        val hexDigits\
    \ = hex.filter(_ >= '0' && _ <='9').toList\n        val hexDigitCount = hexDigits.length\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n   \
    \     val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.toLong\n\
    \        val hexDigitCount = hexDigitCount.toLong\n        val hexDigitCount =\
    \ hexDigitCount.toLong\n        val hexDigitCount = hexDigitCount.to\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp32p49de2.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32p49de2.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit * digit}\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpmebrqwch.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmpmebrqwch.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmpmebrqwch.scala:26)\n\tat Problem$.main(tmpmebrqwch.scala:31)\n\
    \tat Problem.main(tmpmebrqwch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = hex.filter(x => x % 2 == 0 && x != 0)\n        val primesCount\
    \ = primes.count()\n        val hexCount = hex.count()\n        val hexDigits\
    \ = hexCount / hex.length\n        val primeDigits = primesCount / primes.length\n\
    \        val primeDigit = primeDigits.toInt\n        val prime = primeDigits.toLong\n\
    \        val hexDigit = hexDigits.toLong\n        val hexDigitCount = hexDigit\
    \ / hex.length\n        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount\
    \ = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n        val\
    \ hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        val hexDigitCount = hexDigits.toLong\n\
    \        val hexDigitCount = hexDigits.toLong\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ldmswpa.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ldmswpa.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDi"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\"\
    ).toList\n        val numsLength = nums.length\n        val hexDigits = nums.map(_.toInt)\n\
    \        val hexDigitsLength = hexDigits.length\n        val hexDigitsLength =\
    \ hexDigitsLength.toLong\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        val hexDigitsLength\
    \ = hexDigitsLength.toInt\n        val hexDigitsLength = hexDigitsLength.toInt\n\
    \        val hexDigitsLength = hexDigitsLength.toInt\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8_wqu2s.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mhexDigitsLength is already defined as \e[33mvalue\e[0m \e[35mhexDigitsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8_wqu2s.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsLength\e[0m = hexDigitsLength.toInt\n\
    \e[31"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbb8clmtr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mh"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyArray = hexKey.toArray\n\
    \        val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArrayLength\n  \
    \      val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArray\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaouy76wk.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaouy76wk.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeyArrayLength\e[0m = hexKeyArray.length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexKeyArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpaouy76wk.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m = hexKeyArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaouy76wk.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m = hexKeyArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaouy76wk.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m = hexKeyArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definit"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit.toLong }\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzgshp3i7.scala:26:40 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value toHexString is not a member of Char.\n\e[31m   |\e\
    [0m      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          intWrapper(_$1)\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpzgshp3i7.scala:26:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Char, Long]()\n        hex.foreach(c\
    \ => {\n            hexKey.put(c.toUpperCase, hexKey.getOrElse(c, 0l) + 1)\n \
    \       })\n        hexKey.getOrElse(\"A\", 0l) + 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptautfx67.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4fc_lfc.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexArray = hex.toArray\n        val hexCount = hexArray.length\n\
    \        val hexArray2 = hexArray.filter(_ % 2 == 0)\n        val hexArray3 =\
    \ hexArray2.filter(_ % 3 == 0)\n        val hexArray4 = hexArray3.filter(_ % 5\
    \ == 0)\n        val hexArray5 = hexArray4.filter(_ % 7 == 0)\n        val hexArray6\
    \ = hexArray5.filter(_ % 11 == 0)\n        val hexArray7 = hexArray6.filter(_\
    \ % 13 == 0)\n        val hexArray8 = hexArray7.filter(_ % 17 == 0)\n        val\
    \ hexArray9 = hexArray8.filter(_ % 19 == 0)\n        val hexArray10 = hexArray9.filter(_\
    \ % 23 == 0)\n        val hexArray11 = hexArray10.filter(_ % 29 == 0)\n      \
    \  val hexArray12 = hexArray11.filter(_ % 31 == 0)\n        val hexArray13 = hexArray12.filter(_\
    \ % 37 == 0)\n        val hexArray14 = hexArray13.filter(_ % 41 == 0)\n      \
    \  val hexArray15 = hexArray14.filter(_ % 43 == 0)\n        val hexArray16 = hexArray15.filter(_\
    \ % 47 == 0)\n        val hexArray17 = hexArray16.filter(_ % 51 == 0)\n      \
    \  val hexArray18 = hexArray17.filter(_ % 53 == 0)\n        val hexArray19 = hexArray18.filter(_\
    \ % 57 == 0)\n        val hexArray20 = hexArray19.filter(_ % 61 == 0)\n      \
    \  val hexArray21 = hexArray20.filter(_ % 67 == 0)\n        val hexArray22 = hexArray21.filter(_\
    \ % 71 == 0)\n        val hexArray23 = hexArray22.filter(_ % 73 == 0)\n      \
    \  val hexArray24 = hexArray23.filter(_ % 79 == 0)\n        val hexArray25 = hexArray24.filter(_\
    \ % 83 == 0)\n        val hexArray26 = hexArray25.filter(_ % 89 == 0)\n      \
    \  val hexArray27 = hexArray26.filter(_ % 97 == 0)\n        val hexArray28 = hexArray27.filter(_\
    \ % 101 == 0)\n        val hexArray29 = hexArray28.filter(_ % 103 == 0)\n    \
    \    val hexArray30 = hexArray29.filter(_ % 107 == 0)\n        val hexArray31\
    \ = hexArray30.filter(_ % 111 == 0)\n        val hexArray32 = hexArray31.filter(_\
    \ % 117\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1fr_jloj.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1fr_jloj.scala:59:43 --------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \        \e[33mval\e[0m \e[36mhexArray32\e[0m = hexArray31.filter(_ % \e[31m117\e\
    [0m\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    Int\n\
    \e[31m   |\e[0m                                           Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fr_jloj.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.count(_ == '0')\n        val hexDigits = hex.count(_\
    \ >= '0' && _ <='9')\n        val hexDigitPrimes = hexDigits.filter(_ > 0)\n \
    \       val hexDigitPrimeCount = hexDigitPrimes.count(_ > 0)\n        val hexDigitPrimePrimes\
    \ = hexDigitPrimes.filter(_ == 0)\n        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimes = hexDigitPrimePrimes.filter(_ ==\
    \ 0)\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimes.count(_\
    \ > 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ == 0)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_cjwfh58.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_cjwfh58.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.count(_ > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_cjwfh58.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(_ == \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimes\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmp_cjwfh58.scala:28:34 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hex.count(_ >= \e[31m'0'\e\
    [0m && _ <=\e[31m'9'\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \    Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_cjwfh58.scala:29:39 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = hexDigits.filter(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).count(x => x == 0)\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2rik0xkx.scala:31)\n\tat Problem.main(tmp2rik0xkx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexKey = hexKey.toList\n       \
    \ val hexKeyLen = hexKey.length\n        val hexKeySet = hexKey.toSet\n      \
    \  val hexKeySetLen = hexKeySet.size\n        val hexKeySetSet = hexKeySet.toSet\n\
    \        val hexKeySetSetLen = hexKeySetSet.size\n        val hexKeySetSetSetLen\
    \ = hexKeySetSetLen\n        val hexKeySetSetSetSetLen = hexKeySetSetSetLen\n\
    \        val hexKeySetSetSetSetLen = hexKeySetSetSetSetLen\n        val hexKeySetSetSetSetSetLen\
    \ = hexKeySetSetSetSetLen\n        val hexKeySetSetSetSetSetLen = hexKeySetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetLen\n     \
    \   val hexKeySetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetLen\n        val\
    \ hexKeySetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetLen\n        val\
    \ hexKeySetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetLen\n    \
    \    val hexKeySetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hexKeySetSetSetSetSetSetSetSetSetSetSetLen = hexKeySetSetSetSetSetSetSetSetSetSetSetSetLen\n\
    \        val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr42cv83u.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr42cv83u.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeySetSetSetSetLen\e[0m = hexKeySetSetSetSetLen\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mhexKeySetSetSetSetLen is already defined as \e[33mvalue\e[0m \e[35mhexKeySetSetSetSetLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr42cv83u.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetSetSetSetSetLen\e[0m = hexKeySetSetSetSetSetLen\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySetSetSetSetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mhexKeySetSetSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr42cv83u.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetSetSetSetSetSetLen\e\
    [0m = hexKeySetSetSetSetSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySetSetSetSetSetSetLen is already defined as \e[33mvalue\e\
    [0m \e[35mhexKeySetSetSetSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr42cv83u.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetSetSetSetSetSetSetSetLen\e\
    [0m = hexKeySetSetSetSetSetSetSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyS"
  stdout: ''
  timestamp: 1659799582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).filter(_ > 0).count(x => x % 2 == 0)\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzfrcqmg9.scala:32)\n\tat Problem.main(tmpzfrcqmg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0l){ (sum, digit) => sum + digit * digit}\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp8_cs1akt.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmp8_cs1akt.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmp8_cs1akt.scala:26)\n\tat Problem$.main(tmp8_cs1akt.scala:31)\n\
    \tat Problem.main(tmp8_cs1akt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexArray = hex.map(_.toInt)\n        val hexArray2 = hexArray.filter(_\
    \ % 2 == 0)\n        val hexArray3 = hexArray2.filter(_ % 3 == 0)\n        val\
    \ hexArray4 = hexArray3.filter(_ % 5 == 0)\n        val hexArray5 = hexArray4.filter(_\
    \ % 7 == 0)\n        val hexArray6 = hexArray5.filter(_ % 11 == 0)\n        val\
    \ hexArray7 = hexArray6.filter(_ % 13 == 0)\n        val hexArray8 = hexArray7.filter(_\
    \ % 17 == 0)\n        val hexArray9 = hexArray8.filter(_ % 19 == 0)\n        val\
    \ hexArray10 = hexArray9.filter(_ % 23 == 0)\n        val hexArray11 = hexArray10.filter(_\
    \ % 29 == 0)\n        val hexArray12 = hexArray11.filter(_ % 31 == 0)\n      \
    \  val hexArray13 = hexArray12.filter(_ % 37 == 0)\n        val hexArray14 = hexArray13.filter(_\
    \ % 41 == 0)\n        val hexArray15 = hexArray14.filter(_ % 43 == 0)\n      \
    \  val hexArray16 = hexArray15.filter(_ % 47 == 0)\n        val hexArray17 = hexArray16.filter(_\
    \ % 53 == 0)\n        val hexArray18 = hexArray17.filter(_ % 59 == 0)\n      \
    \  val hexArray19 = hexArray18.filter(_ % 61 == 0)\n        val hexArray20 = hexArray19.filter(_\
    \ % 67 == 0)\n        val hexArray21 = hexArray20.filter(_ % 71 == 0)\n      \
    \  val hexArray22 = hexArray21.filter(_ % 73 == 0)\n        val hexArray23 = hexArray22.filter(_\
    \ % 79 == 0)\n        val hexArray24 = hexArray23.filter(_ % 83 == 0)\n      \
    \  val hexArray25 = hexArray24.filter(_ % 89 == 0)\n        val hexArray26 = hexArray25.filter(_\
    \ % 97 == 0)\n        val hexArray27 = hexArray26.filter(_ % 101 == 0)\n     \
    \   val hexArray28 = hexArray27.filter(_ % 103 == 0)\n        val hexArray29 =\
    \ hexArray28.filter(_ % 107 == 0)\n        val hexArray30 = hexArray29.filter(_\
    \ % 111 == 0)\n        val hexArray31 = hexArray30.filter(_ % 113 == 0)\n    \
    \    val hexArray32 = hexArray31.filter(_ % 127 == 0)\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnjj_5rwp.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnjj_5rwp.scala:26:40\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ toHexString is not a member of Char.\n\e[31m   |\e[0m      An extension method\
    \ was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m          intWrapper(_$1)\n\e[31m\e[31m-- Error: /tmp/tmpnjj_5rwp.scala:26:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\e[31m\e\
    [31m   |\e[0m                                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnjj_5rwp.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbzp0a2o.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m ="
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbzp0a2o.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi1c3qwx.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toUpperCase)\n\
    \        val hexCount = hex.count(_ == '0')\n        val hexDigits = hex.count(_\
    \ == 'A' || _ == 'B' || _ == 'C' || _ == 'D' || _ == 'E' || _ == 'F')\n      \
    \  val hexPrimes = hex.count(_ == '2' || _ == '3' || _ == '5' || _ == '7' || _\
    \ == 'B' || _ == 'D')\n        val hexPrime = hex.count(_ == '2' || _ == '3' ||\
    \ _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n        val hexPrime2 = hex.count(_\
    \ == '2' || _ == '3' || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n      \
    \  val hexPrime3 = hex.count(_ == '2' || _ == '3' || _ == '5' || _ == '7' || _\
    \ == 'B' || _ == 'D')\n        val hexPrime4 = hex.count(_ == '2' || _ == '3'\
    \ || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n        val hexPrime5 = hex.count(_\
    \ == '2' || _ == '3' || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n      \
    \  val hexPrime6 = hex.count(_ == '2' || _ == '3' || _ == '5' || _ == '7' || _\
    \ == 'B' || _ == 'D')\n        val hexPrime7 = hex.count(_ == '2' || _ == '3'\
    \ || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n        val hexPrime8 = hex.count(_\
    \ == '2' || _ == '3' || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n      \
    \  val hexPrime9 = hex.count(_ == '2' || _ == '3' || _ == '5' || _ == '7' || _\
    \ == 'B' || _ == 'D')\n        val hexPrime10 = hex.count(_ == '2' || _ == '3'\
    \ || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n        val hexPrime11 = hex.count(_\
    \ == '2' || _ == '3' || _ == '5' || _ == '7' || _ == 'B' || _ == 'D')\n      \
    \  val hexPrime12 = hex.count(_ == '2' || _ == '3' || _ == '5' || _ == '7' ||\
    \ _ == 'B' || _ == 'D')\n        val hexPrime13 = hex.count(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzu8zomwb.scala:42:35 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mhexPrime13\e[0m = hex.count(\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpzu8zomwb.scala:27:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexCount\e[0m = hex.count(_\
    \ == \e[31m'0'\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzu8zomwb.scala:28:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigits\e[0m = hex.count(_ == \e[31m'A'\e[0m || _ == \e[31m'B'\e[0m\
    \ || _ == \e[31m'C'\e[0m || _ == \e[31m'D'\e[0m || _ == \e[31m'E'\e[0m || _ ==\
    \ \e[31m'F'\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzu8zomwb.scala:29:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexPrimes\e[0m = hex.count(_ == \e[31m'2'\e[0m || _ == \e[31m'3'\e[0m\
    \ || _ == \e[31m'5'\e[0m || _ == \e[31m'7'\e[0m || _ == \e[31m'B'\e[0m || _ ==\
    \ \e[31m'D'\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzu8zomwb.scala:30:33\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexPrime\e[0m = hex.count(_ == \e[31m'2'\e[0m || _ == \e[31m'3'\e[0m ||\
    \ _ == \e[31m'5'\e[0m || _ == \e[31m'7'\e[0m || _ == \e[31m'B'\e[0m || _ == \e\
    [31m'D'\e[0m)\n\e[31m\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 16)\n        val hexKey4\
    \ = hexKey.map(x => x % 32)\n        val hexKey5 = hexKey.map(x => x % 64)\n \
    \       val hexKey6 = hexKey.map(x => x % 128)\n        val hexKey7 = hexKey.map(x\
    \ => x % 256)\n        val hexKey8 = hexKey.map(x => x % 512)\n        val hexKey9\
    \ = hexKey.map(x => x % 1024)\n        val hexKey10 = hexKey.map(x => x % 2048)\n\
    \        val hexKey11 = hexKey.map(x => x % 4096)\n        val hexKey12 = hexKey.map(x\
    \ => x % 8192)\n        val hexKey13 = hexKey.map(x => x % 16384)\n        val\
    \ hexKey14 = hexKey.map(x => x % 32768)\n        val hexKey15 = hexKey.map(x =>\
    \ x % 65536)\n        val hexKey16 = hexKey.map(x => x % 131072)\n        val\
    \ hexKey17 = hexKey.map(x => x % 262144)\n        val hexKey18 = hexKey.map(x\
    \ => x % 524288)\n        val hexKey19 = hexKey.map(x => x % 1048576)\n      \
    \  val hexKey20 = hexKey.map(x => x % 2097152)\n        val hexKey21 = hexKey.map(x\
    \ => x % 4194304)\n        val hexKey22 = hexKey.map(x => x % 8388608)\n     \
    \   val hexKey23 = hexKey.map(x => x % 16777216)\n        val hexKey24 = hexKey.map(x\
    \ => x % 33554432)\n        val hexKey25 = hexKey.map(x => x % 67108864)\n   \
    \     val hexKey26 = hexKey.map(x => x % 134217728)\n        val hexKey27 = hexKey.map(x\
    \ => x % 268435456)\n        val hexKey28 = hexKey.map(x => x % 536870912)\n \
    \       val hexKey29 = hexKey.map(x => x % 1073741824)\n        val hexKey30 =\
    \ hexKey.map(x => x % 2147483648)\n        val hexKey31 = hexKey.map(x \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqpynqll.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpaqpynqll.scala:56:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m56 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhexKey30\e[0m = hexKey.map(\e[36mx\e[0m => x % \e[31m2147483648\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           number too large\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqpynqll.scala:57:34 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mhexKey31\e[0m = hexKey.map(x\
    \ \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e\
    [0m                                  Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaqpynqll.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:29:26\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:31:26\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 10)\n        val hexKey4\
    \ = hexKey.map(x => x % 10)\n        val hexKey5 = hexKey.map(x => x % 10)\n \
    \       val hexKey6 = hexKey.map(x => x % 10)\n        val hexKey7 = hexKey.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey.map(x => x % 10)\n        val hexKey9\
    \ = hexKey.map(x => x % 10)\n        val hexKey10 = hexKey.map(x => x % 10)\n\
    \        val hexKey11 = hexKey.map(x => x % 10)\n        val hexKey12 = hexKey.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey.map(x => x % 10)\n        val hexKey14\
    \ = hexKey.map(x => x % 10)\n        val hexKey15 = hexKey.map(x => x % 10)\n\
    \        val hexKey16 = hexKey.map(x => x % 10)\n        val hexKey17 = hexKey.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey.map(x => x % 10)\n        val hexKey19\
    \ = hexKey.map(x => x % 10)\n        val hexKey20 = hexKey.map(x => x % 10)\n\
    \        val hexKey21 = hexKey.map(x => x % 10)\n        val hexKey22 = hexKey.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey.map(x => x % 10)\n        val hexKey24\
    \ = hexKey.map(x => x % 10)\n        val hexKey25 = hexKey.map(x => x % 10)\n\
    \        val hexKey26 = hexKey.map(x => x % 10)\n        val hexKey27 = hexKey.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey.map(x => x % 10)\n        val hexKey29\
    \ = hexKey.map(x => x % 10)\n        val hexKey30 = hexKey.map(x => x % 10)\n\
    \        val hexKey31 = hexKey.map(x => x % 10)\n        val hexKey32 = hexKey.map(x\
    \ => x % 10)\n        val hexKey33 = hexKey.map(x => x % 10)\n        val hexKey34\
    \ = hexKey.map(x => x % 10)\n        val hexKey35\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk444gccd.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpk444gccd.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbn0_t94g.scala:32)\n\tat Problem.main(tmpbn0_t94g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val hexPrimes = mutable.Set[Long]()\n\
    \        val hexPrime = mutable.Set[Long]()\n        val hexPrime2 = mutable.Set[Long]()\n\
    \        val hexPrime3 = mutable.Set[Long]()\n        val hexPrime4 = mutable.Set[Long]()\n\
    \        val hexPrime5 = mutable.Set[Long]()\n        val hexPrime6 = mutable.Set[Long]()\n\
    \        val hexPrime7 = mutable.Set[Long]()\n        val hexPrime8 = mutable.Set[Long]()\n\
    \        val hexPrime9 = mutable.Set[Long]()\n        val hexPrime10 = mutable.Set[Long]()\n\
    \        val hexPrime11 = mutable.Set[Long]()\n        val hexPrime12 = mutable.Set[Long]()\n\
    \        val hexPrime13 = mutable.Set[Long]()\n        val hexPrime14 = mutable.Set[Long]()\n\
    \        val hexPrime15 = mutable.Set[Long]()\n        val hexPrime16 = mutable.Set[Long]()\n\
    \        val hexPrime17 = mutable.Set[Long]()\n        val hexPrime18 = mutable.Set[Long]()\n\
    \        val hexPrime19 = mutable.Set[Long]()\n        val hexPrime20 = mutable.Set[Long]()\n\
    \        val hexPrime21 = mutable.Set[Long]()\n        val hexPrime22 = mutable.Set[Long]()\n\
    \        val hexPrime23 = mutable.Set[Long]()\n        val hexPrime24 = mutable.Set[Long]()\n\
    \        val hexPrime25 = mutable.Set[Long]()\n        val hexPrime26 = mutable.Set[Long]()\n\
    \        val hexPrime27 = mutable.Set[Long]()\n        val hexPrime28 = mutable.Set[Long]()\n\
    \        val hexPrime29 = mutable.Set[Long]()\n        val hexPrime30 = mutable.Set[Long]()\n\
    \        val hexPrime31 = mutable.Set[Long]()\n        val hexPrime32 = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaaup7zvg.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaaup7zvg.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaaup7zvg.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexPrimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaaup7zvg.scala:29:23 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexPrime\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaaup7zvg.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexPrime2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaaup7zvg.scala:31:24 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexPrime3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\")\n        val numsCount = nums.length\n        val numsDigits = nums.map(_.toInt)\n\
    \        val numsDigitCount = numsDigits.length\n        val numsDigitSum = numsDigits.sum\n\
    \        val numsDigitSum2 = numsDigitSum * numsDigitSum\n        val numsDigitSum3\
    \ = numsDigitSum2 * numsDigitSum\n        val numsDigitSum4 = numsDigitSum3 *\
    \ numsDigitSum\n        val numsDigitSum5 = numsDigitSum4 * numsDigitSum\n   \
    \     val numsDigitSum6 = numsDigitSum5 * numsDigitSum\n        val numsDigitSum7\
    \ = numsDigitSum6 * numsDigitSum\n        val numsDigitSum8 = numsDigitSum7 *\
    \ numsDigitSum\n        val numsDigitSum9 = numsDigitSum8 * numsDigitSum\n   \
    \     val numsDigitSum10 = numsDigitSum9 * numsDigitSum\n        val numsDigitSum11\
    \ = numsDigitSum10 * numsDigitSum\n        val numsDigitSum12 = numsDigitSum11\
    \ * numsDigitSum\n        val numsDigitSum13 = numsDigitSum12 * numsDigitSum\n\
    \        val numsDigitSum14 = numsDigitSum13 * numsDigitSum\n        val numsDigitSum15\
    \ = numsDigitSum14 * numsDigitSum\n        val numsDigitSum16 = numsDigitSum15\
    \ * numsDigitSum\n        val numsDigitSum17 = numsDigitSum16 * numsDigitSum\n\
    \        val numsDigitSum18 = numsDigitSum17 * numsDigitSum\n        val numsDigitSum19\
    \ = numsDigitSum18 * numsDigitSum\n        val numsDigitSum20 = numsDigitSum19\
    \ * numsDigitSum\n        val numsDigitSum21 = numsDigitSum20 * numsDigitSum\n\
    \        val numsDigitSum22 = numsDigitSum21 * numsDigitSum\n        val numsDigitSum23\
    \ = numsDigitSum22 * numsDigitSum\n        val numsDigitSum24 = numsDigitSum23\
    \ * numsDigitSum\n        val numsDigitSum25 = numsDigitSum24 * numsDigitSum\n\
    \        val numsDigitSum26 = numsDigitSum25 * numsDigit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp006lu5gf.scala:55:46 ------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mnumsDigitSum26\e[0m = numsDigitSum25\
    \ * numsDigit\n\e[31m\e[31m   |\e[0m                                         \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \      Not found: numsDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp006lu5gf.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbzp0a2o.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexLength = hexString.length\n\
    \        val hexDigits = hexString.map(x => x.toChar)\n        val hexDigitCount\
    \ = hexDigits.length\n        val hexDigitMap = hexDigits.groupBy(x => x.toInt)\n\
    \        val hexDigitMapCount = hexDigitMap.length\n        val hexDigitMapKeys\
    \ = hexDigitMap.keys\n        val hexDigitMapValues = hexDigitMap.values\n   \
    \     val hexDigitMapKeysCount = hexDigitMapKeys.length\n        val hexDigitMapValuesCount\
    \ = hexDigitMapValues.length\n        val hexDigitMapKeysValues = hexDigitMapKeys.zip(hexDigitMapValues)\n\
    \        val hexDigitMapKeysValuesCount = hexDigitMapKeysValues.length\n     \
    \   val hexDigitMapKeysValuesValuesCount = hexDigitMapKeysValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesCount = hexDigitMapKeysValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesCount = hexDigitMapKeysValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesCount = hexDigitMapKeysValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesCount = hexDigitMapKeysValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesCount =\
    \ hexDigitMapKeysValuesValuesValuesValuesValuesValuesValues.length\n        val\
    \ hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesCount = hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesCount\
    \ = hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesCount\
    \ = hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesCount\
    \ = hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesCount\
    \ = hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesCount\
    \ = hexDigitMapKeysValuesValues\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2rr91ey6.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesCount\e\
    [0m = hexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitMapKeysValuesValuesValuesValuesValuesValuesValuesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2rr91ey6.scala:32:43 ------------------------\e[0m\e[0m\n\
    \e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value length is not a member of Map[Int,\
    \ String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2rr91ey6.scala:35:51\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapKeysCount\e[0m = hexDigitMapKeys.length\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           value length is not a member of Iterable[Int]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp2rr91ey6.scala:36:55 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesCount\e\
    [0m = hexDigitMapValues.length\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \       value length is not a member of Iterable[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2rr91ey6.scala:38:63 ------------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapKeysValuesCount\e\
    [0m = hexDigitMapKeysValues.length\n\e[31m\e[31m   |\e[0m                    \
    \     "
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey2 = new mutable.HashMap[Int, Int]()\n        val hexKey3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey5 = new mutable.HashMap[Int, Int]()\n        val hexKey6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey8 = new mutable.HashMap[Int, Int]()\n        val hexKey9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey12 = new mutable.HashMap[Int, Int]()\n        val hexKey13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey15 = new mutable.HashMap[Int, Int]()\n        val hexKey16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey18 = new mutable.HashMap[Int, Int]()\n        val hexKey19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey21 = new mutable.HashMap[Int, Int]()\n        val hexKey22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey24 = new mutable.HashMap[Int, Int]()\n        val hexKey25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey27 = new mutable.HashMap[Int, Int]()\n        val hexKey28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey30 = new mutable.HashMap[Int, Int]()\n        val hexKey31 = new mutable.HashMap[Int,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:29:26\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:31:26\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmz2w6fsw.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = hexCount.toLong\n   \
    \     val hexKeyList = hexKey.toList\n        val hexKeyListCount = hexKeyList.length\n\
    \        val hexKeyList2 = hexKeyList.map(x => x.toLong)\n        val hexKeyList3\
    \ = hexKeyList2.map(x => x.toLong)\n        val hexKeyList4 = hexKeyList3.map(x\
    \ => x.toLong)\n        val hexKeyList5 = hexKeyList4.map(x => x.toLong)\n   \
    \     val hexKeyList6 = hexKeyList5.map(x => x.toLong)\n        val hexKeyList7\
    \ = hexKeyList6.map(x => x.toLong)\n        val hexKeyList8 = hexKeyList7.map(x\
    \ => x.toLong)\n        val hexKeyList9 = hexKeyList8.map(x => x.toLong)\n   \
    \     val hexKeyList10 = hexKeyList9.map(x => x.toLong)\n        val hexKeyList11\
    \ = hexKeyList10.map(x => x.toLong)\n        val hexKeyList12 = hexKeyList11.map(x\
    \ => x.toLong)\n        val hexKeyList13 = hexKeyList12.map(x => x.toLong)\n \
    \       val hexKeyList14 = hexKeyList13.map(x => x.toLong)\n        val hexKeyList15\
    \ = hexKeyList14.map(x => x.toLong)\n        val hexKeyList16 = hexKeyList15.map(x\
    \ => x.toLong)\n        val hexKeyList17 = hexKeyList16.map(x => x.toLong)\n \
    \       val hexKeyList18 = hexKeyList17.map(x => x.toLong)\n        val hexKeyList19\
    \ = hexKeyList18.map(x => x.toLong)\n        val hexKeyList20 = hexKeyList19.map(x\
    \ => x.toLong)\n        val hexKeyList21 = hexKeyList20.map(x => x.toLong)\n \
    \       val hexKeyList22 = hexKeyList21.map(x => x.toLong)\n        val hexKeyList23\
    \ = hexKeyList22.map(x => x.toLong)\n        val hexKeyList24 = hexKeyList23.map(x\
    \ => x.toLong)\n        val hexKeyList25 = hexKeyList24.map(x => x.toLong)\n \
    \       val hexKeyList26 = hexKeyList25.map(x => x.toLong)\n        val \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplj8saxgb.scala:56:11 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmplj8saxgb.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyList\e[0m = hexKey.toList\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m       value toList is not a member of Long - did you mean hexKey.toInt?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplj8saxgb.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexDigits = hexString.toList\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x)\n        val hexDigitMapCount = hexDigitMap.length\n        val hexDigitMapKeys\
    \ = hexDigitMap.keys.toList\n        val hexDigitMapValues = hexDigitMap.toList\n\
    \        val hexDigitMapValuesCount = hexDigitMapValues.length\n        val hexDigitMapValuesKeys\
    \ = hexDigitMapValues.keys.toList\n        val hexDigitMapValuesValues = hexDigitMapValues.toList\n\
    \        val hexDigitMapValuesValuesCount = hexDigitMapValuesValues.length\n \
    \       val hexDigitMapValuesValuesKeys = hexDigitMapValuesValues.keys.toList\n\
    \        val hexDigitMapValuesValuesValues = hexDigitMapValuesValues.toList\n\
    \        val hexDigitMapValuesValuesValuesCount = hexDigitMapValuesValuesValues.length\n\
    \        val hexDigitMapValuesValuesValuesKeys = hexDigitMapValuesValuesValues.keys.toList\n\
    \        val hexDigitMapValuesValuesValuesValues = hexDigitMapValuesValuesValues.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesCount = hexDigitMapValuesValuesValuesValues.length\n\
    \        val hexDigitMapValuesValuesValuesValuesKeys = hexDigitMapValuesValuesValuesValues.keys.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesValues = hexDigitMapValuesValuesValuesValues.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesCount = hexDigitMapValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesKeys = hexDigitMapValuesValuesValuesValuesValues.keys.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesValues = hexDigitMapValuesValuesValuesValuesValues.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesValuesCount = hexDigitMapValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesValuesKeys = hexDigitMapValuesValuesValuesValuesValuesValuesValues.keys.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesValuesValuesValues = hexDigitMapValuesValuesValuesValuesValuesValuesValuesValuesValues.toList\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesValuesValuesValuesCount\
    \ = hexDigitMapValuesValuesValuesValuesValuesValuesValuesValuesValuesValues.length\n\
    \        val hexDigitMapValuesValuesValuesValuesValuesValuesValuesValuesKeys =\
    \ hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9iu7rvkf.scala:31:43 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapCount\e[0m =\
    \ hexDigitMap.length\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value length is not a member of Map[Char,\
    \ List[Char]]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9iu7rvkf.scala:35:54\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapValuesKeys\e[0m = hexDigitMapValues.keys.toList\n\e[31m\e[31m \
    \  |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue keys is not a member of List[(Char, List[Char])] - did you mean\
    \ hexDigitMapValues.head?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9iu7rvkf.scala:38:66\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMapValuesValuesKeys\e[0m = hexDigitMapValuesValues.keys.toList\n\e\
    [31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue keys is not a member of List[(Char, List[Char])] - did\
    \ you mean hexDigitMapValuesValues.head?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9iu7rvkf.scala:41:78 ------------------------\e[0m\e[0m\n\e[31m41 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitMapValuesValuesValuesKeys\e[0m = hexDigitMapValuesValuesValues.keys.toList\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue keys is not a member of List[(Char, List[Char])] - did\
    \ you mean hexDigitMapValuesValuesValues.head?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp9iu7rvkf.scala:44:90 ------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesValuesValuesValuesKeys\e\
    [0m = hexDigitMapValuesValuesValuesValues.keys.toList\n\e[31m\e[31m   |\e[0m \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue keys is not a member of List[(Char, List[Char])] - did\
    \ you mean hexDigitMapValuesValuesValuesValues."
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val hexPrimes\
    \ = primes.filter(x => hex.contains(x))\n        val hexPrime = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hexPrime2 = hexPrimes.reduce((x, y) => x * y)\n  \
    \      val hexPrime3 = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime4\
    \ = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime5 = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hexPrime6 = hexPrimes.reduce((x, y) => x * y)\n  \
    \      val hexPrime7 = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime8\
    \ = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime9 = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hexPrime10 = hexPrimes.reduce((x, y) => x * y)\n \
    \       val hexPrime11 = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime12\
    \ = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime13 = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hexPrime14 = hexPrimes.reduce((x, y) => x * y)\n \
    \       val hexPrime15 = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime16\
    \ = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime17 = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hexPrime18 = hexPrimes.reduce((x, y) => x * y)\n \
    \       val hexPrime19 = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime20\
    \ = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime21 = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hexPrime22 = hexPrimes.reduce((x, y) => x * y)\n \
    \       val hexPrime23 = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime24\
    \ = hexPrimes.reduce((x, y) => x * y)\n        val hexPrime25 = hexPrimes.reduce((x,\
    \ y) => x * y)\n        val hex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5903ve3w.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5903ve3w.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5903ve3w.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0l) {\n            (acc, x) => acc + (x.toLong\
    \ * 16 + x.toLong)\n        }\n        hexKey\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwzda2svu.scala:33)\n\tat Problem.main(tmpwzda2svu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\")\n        val hexNums = nums.map(_.toInt)\n        val primes = hexNums.filter(x\
    \ => isPrime(x))\n        primes.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5r_9j5gn.scala:28:41 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = hexNums.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \      Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexMap = mutable.Map[Int, Int]()\n\
    \        var hexIndex = 0\n        while(hexIndex < hexCount) {\n            val\
    \ hexValue = hex(hexIndex)\n            val hexDigit = hexValue - 48\n       \
    \     if(hexMap.get(hexDigit) == null) {\n                hexMap += (hexDigit\
    \ -> 1)\n            } else {\n                hexMap(hexDigit) += 1\n       \
    \     }\n            hexIndex += 1\n        }\n        val hexMapCount = hexMap.length\n\
    \        val hexMapMapped = hexMap.map(x => (x._1, x._2)).toMap\n        val hexMapMappedCount\
    \ = hexMapMapped.length\n        val hexMapMappedMapped = hexMapMapped.map(x =>\
    \ (x._1, x._2)).toMap\n        val hexMapMappedMappedCount = hexMapMappedMapped.length\n\
    \        val hexMapMappedMappedMapped = hexMapMappedMapped.map(x => (x._1, x._2)).toMap\n\
    \        val hexMapMappedMappedMappedCount = hexMapMappedMappedMapped.length\n\
    \        val hexMapMappedMappedMappedMapped = hexMapMappedMappedMapped.map(x =>\
    \ (x._1, x._2)).toMap\n        val hexMapMappedMappedMappedMappedCount = hexMapMappedMappedMappedMapped.length\n\
    \        val hexMapMappedMappedMappedMappedMapped = hexMapMappedMappedMappedMapped.map(x\
    \ => (x._1, x._2)).toMap\n        val hexMapMappedMappedMappedMappedCount = hexMapMappedMappedMappedMapped.length\n\
    \        val hexMapMappedMappedMappedMappedMapped = hexMapMappedMappedMappedMapped.map(x\
    \ => (x._1, x._2)).toMap\n        val hexMapMappedMappedMappedMappedMappedCount\
    \ = hexMapMappedMappedMappedMappedMapped.length\n        val hexMapMappedMappedMappedMappedMappedMapped\
    \ = hexMapMappedMappedMappedMappedMapped.map(x => (x._1, x._2)).toMap\n      \
    \  val hexMapMappedMappedMappedMappedMappedCount = hexMapMappedMappedMappedMappedMapped.length\n\
    \        val hexMapMappedMappedMappedMappedMappedMapped = hexMapMap\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0k3v80m.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mhexMapMappedMappedMappedMappedCount\e\
    [0m = hexMapMappedMappedMappedMapped.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexMapMappedMappedMappedMappedCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mhexMapMappedMappedMappedMappedCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0k3v80m.scala:51:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexMapMappedMappedMappedMappedMapped\e[0m = hexMapMappedMappedMappedMapped.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexMapMappedMappedMappedMappedMapped is already defined as\
    \ \e[33mvalue\e[0m \e[35mhexMapMappedMappedMappedMappedMapped\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz0k3v80m.scala:54:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexMapMappedMappedMappedMappedMappedCount\e[0m = hexMapMappedMappedMappedMappedMapped.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexMapMappedMappedMappedMappedMappedCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexMapMappedMappedMappedMappedMappedCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz0k3v80m.scala:55:12 ---------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexMapMappedMappedMappedMappedMappedMapped\e\
    [0m = hexMapMap\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\")\n        val hexNums = nums.map(_.toInt)\n        val primes = hexNums.filter(x\
    \ => isPrime(x))\n        primes.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfutaspdi.scala:28:41 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = hexNums.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \      Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexMap = mutable.Map[Int, Int]()\n\
    \        val hexMap2 = mutable.Map[Int, Int]()\n        val hexMap3 = mutable.Map[Int,\
    \ Int]()\n        val hexMap4 = mutable.Map[Int, Int]()\n        val hexMap5 =\
    \ mutable.Map[Int, Int]()\n        val hexMap6 = mutable.Map[Int, Int]()\n   \
    \     val hexMap7 = mutable.Map[Int, Int]()\n        val hexMap8 = mutable.Map[Int,\
    \ Int]()\n        val hexMap9 = mutable.Map[Int, Int]()\n        val hexMap10\
    \ = mutable.Map[Int, Int]()\n        val hexMap11 = mutable.Map[Int, Int]()\n\
    \        val hexMap12 = mutable.Map[Int, Int]()\n        val hexMap13 = mutable.Map[Int,\
    \ Int]()\n        val hexMap14 = mutable.Map[Int, Int]()\n        val hexMap15\
    \ = mutable.Map[Int, Int]()\n        val hexMap16 = mutable.Map[Int, Int]()\n\
    \        val hexMap17 = mutable.Map[Int, Int]()\n        val hexMap18 = mutable.Map[Int,\
    \ Int]()\n        val hexMap19 = mutable.Map[Int, Int]()\n        val hexMap20\
    \ = mutable.Map[Int, Int]()\n        val hexMap21 = mutable.Map[Int, Int]()\n\
    \        val hexMap22 = mutable.Map[Int, Int]()\n        val hexMap23 = mutable.Map[Int,\
    \ Int]()\n        val hexMap24 = mutable.Map[Int, Int]()\n        val hexMap25\
    \ = mutable.Map[Int, Int]()\n        val hexMap26 = mutable.Map[Int, Int]()\n\
    \        val hexMap27 = mutable.Map[Int, Int]()\n        val hexMap28 = mutable.Map[Int,\
    \ Int]()\n        val hexMap29 = mutable.Map[Int, Int]()\n        val hexMap30\
    \ = mutable.Map[Int, Int]()\n        val hexMap31 = mutable.Map[Int, Int]()\n\
    \        val hexMap32 = mutable.Map[Int, Int]()\n        val hexMap33 = mutable.Map[Int,\
    \ Int]()\n        val hexMap34 = mutable.Map[Int, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexMap2\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:30:22 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:31:22 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexMap4\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:32:22 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16))\n        val hexKey2 = hexKey.map(x\
    \ => x % 16)\n        val hexKey3 = hexKey.map(x => x % 16)\n        val hexKey4\
    \ = hexKey.map(x => x % 16)\n        val hexKey5 = hexKey.map(x => x % 16)\n \
    \       val hexKey6 = hexKey.map(x => x % 16)\n        val hexKey7 = hexKey.map(x\
    \ => x % 16)\n        val hexKey8 = hexKey.map(x => x % 16)\n        val hexKey9\
    \ = hexKey.map(x => x % 16)\n        val hexKey10 = hexKey.map(x => x % 16)\n\
    \        val hexKey11 = hexKey.map(x => x % 16)\n        val hexKey12 = hexKey.map(x\
    \ => x % 16)\n        val hexKey13 = hexKey.map(x => x % 16)\n        val hexKey14\
    \ = hexKey.map(x => x % 16)\n        val hexKey15 = hexKey.map(x => x % 16)\n\
    \        val hexKey16 = hexKey.map(x => x % 16)\n        val hexKey17 = hexKey.map(x\
    \ => x % 16)\n        val hexKey18 = hexKey.map(x => x % 16)\n        val hexKey19\
    \ = hexKey.map(x => x % 16)\n        val hexKey20 = hexKey.map(x => x % 16)\n\
    \        val hexKey21 = hexKey.map(x => x % 16)\n        val hexKey22 = hexKey.map(x\
    \ => x % 16)\n        val hexKey23 = hexKey.map(x => x % 16)\n        val hexKey24\
    \ = hexKey.map(x => x % 16)\n        val hexKey25 = hexKey.map(x => x % 16)\n\
    \        val hexKey26 = hexKey.map(x => x % 16)\n        val hexKey27 = hexKey.map(x\
    \ => x % 16)\n        val hexKey28 = hexKey.map(x => x % 16)\n        val hexKey29\
    \ = hexKey.map(x => x % 16)\n        val hexKey30 = hexKey.map(x => x % 16)\n\
    \        val hexKey31 = hexKey.map(x => x % 16)\n        val hexKey32 = hexKey.map(x\
    \ => x % 16)\n        val hexKey33 = hexKey.map(x => x % 16)\n        val hexKey34\
    \ = hexKey.map(x => x % \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpspmssab3.scala:60:42 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mhexKey34\e[0m = hexKey.map(\e\
    [36mx\e[0m => x % \n\e[31m\e[31m   |\e[0m                                    \
    \      ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpspmssab3.scala:61:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:    B is a type variable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpspmssab3.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hexLength * hexLength\n\
    \        val hexKeyArray = Array.ofDim[Long](hexKey)\n        val hexKeyArray2\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray3 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray4 = Array.ofDim[Long](hexKey)\n        val hexKeyArray5\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray6 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray7 = Array.ofDim[Long](hexKey)\n        val hexKeyArray8\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray9 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray10 = Array.ofDim[Long](hexKey)\n        val hexKeyArray11\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray12 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray13 = Array.ofDim[Long](hexKey)\n        val hexKeyArray14\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray15 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray16 = Array.ofDim[Long](hexKey)\n        val hexKeyArray17\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray18 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray19 = Array.ofDim[Long](hexKey)\n        val hexKeyArray20\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray21 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray22 = Array.ofDim[Long](hexKey)\n        val hexKeyArray23\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray24 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray25 = Array.ofDim[Long](hexKey)\n        val hexKeyArray26\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray27 = Array.ofDim[Long](hexKey)\n\
    \        val hexKeyArray28 = Array.ofDim[Long](hexKey)\n        val hexKeyArray29\
    \ = Array.ofDim[Long](hexKey)\n        val hexKeyArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuhjdqj2d.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuhjdqj2d.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi1c3qwx.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hexCount / 2\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.Map[Int,\
    \ Int]()\n        val hexDigitMap2 = mutable.Map[Int, Int]()\n        val hexDigitMap3\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap4 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap5 = mutable.Map[Int, Int]()\n        val hexDigitMap6\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap7 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap8 = mutable.Map[Int, Int]()\n        val hexDigitMap9\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap10 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap11 = mutable.Map[Int, Int]()\n        val hexDigitMap12\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap13 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap14 = mutable.Map[Int, Int]()\n        val hexDigitMap15\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap16 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap17 = mutable.Map[Int, Int]()\n        val hexDigitMap18\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap19 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap20 = mutable.Map[Int, Int]()\n        val hexDigitMap21\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap22 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap23 = mutable.Map[Int, Int]()\n        val hexDigitMap24\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap25 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap26 = mutable.Map[Int, Int]()\n        val hexDigitMap27\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap28 = mutable.Map[Int, Int]()\n\
    \        val hexDigitMap29 = mutable.Map[Int, Int]()\n        val hexDigitMap30\
    \ = mutable.Map[Int, Int]()\n        val hexDigitMap31 = mutable.Map[\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6va2mf_x.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6va2mf_x.scala:29:38 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigits.length\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            value length is not a member of Int\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6va2mf_x.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6va2mf_x.scala:31:27\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap2\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6va2mf_x.scala:32:27 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6va2mf_x.scala:33:27\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap4\e[0m = mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m  "
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexKey = hex.map(x => x.toInt)\n\
    \        val hexKeyLen = hexKey.length\n        val hexKeyLen2 = hexKeyLen / 2\n\
    \        val hexKeyLen3 = hexKeyLen2 / 2\n        val hexKeyLen4 = hexKeyLen3\
    \ / 2\n        val hexKeyLen5 = hexKeyLen4 / 2\n        val hexKeyLen6 = hexKeyLen5\
    \ / 2\n        val hexKeyLen7 = hexKeyLen6 / 2\n        val hexKeyLen8 = hexKeyLen7\
    \ / 2\n        val hexKeyLen9 = hexKeyLen8 / 2\n        val hexKeyLen10 = hexKeyLen9\
    \ / 2\n        val hexKeyLen11 = hexKeyLen10 / 2\n        val hexKeyLen12 = hexKeyLen11\
    \ / 2\n        val hexKeyLen13 = hexKeyLen12 / 2\n        val hexKeyLen14 = hexKeyLen13\
    \ / 2\n        val hexKeyLen15 = hexKeyLen14 / 2\n        val hexKeyLen16 = hexKeyLen15\
    \ / 2\n        val hexKeyLen17 = hexKeyLen16 / 2\n        val hexKeyLen18 = hexKeyLen17\
    \ / 2\n        val hexKeyLen19 = hexKeyLen18 / 2\n        val hexKeyLen20 = hexKeyLen19\
    \ / 2\n        val hexKeyLen21 = hexKeyLen20 / 2\n        val hexKeyLen22 = hexKeyLen21\
    \ / 2\n        val hexKeyLen23 = hexKeyLen22 / 2\n        val hexKeyLen24 = hexKeyLen23\
    \ / 2\n        val hexKeyLen25 = hexKeyLen24 / 2\n        val hexKeyLen26 = hexKeyLen25\
    \ / 2\n        val hexKeyLen27 = hexKeyLen26 / 2\n        val hexKeyLen28 = hexKeyLen27\
    \ / 2\n        val hexKeyLen29 = hexKeyLen28 / 2\n        val hexKeyLen30 = hexKeyLen29\
    \ / 2\n        val hexKeyLen31 = hexKeyLen30 / 2\n        val hexKeyLen32 = hexKeyLen31\
    \ / 2\n        val hexKeyLen33 = hexKeyLen32 / 2\n        val hexKeyLen34 = hexKeyLen33\
    \ / 2\n        val hexKeyLen35 = hexKeyLen34 / 2\n        val hexKeyLen36 = hex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfn849x0.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).asInstanceOf[Int]).toSet\n       \
    \ val hexKeySet = hexKey.toSet\n        val hexKeySet2 = hexKey.filter(x => hexKeySet.contains(x))\n\
    \        hexKeySet2.size\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxruyl68.scala:33)\n\tat Problem.main(tmpwxruyl68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmperoh92au.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmperoh92au.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmperoh92au.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmperoh92au.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmperoh92au.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ h"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.toCharArray\n\
    \        val numsLength = nums.length\n        val numsLength = numsLength - 1\n\
    \        var count = 0\n        var prime = 0\n        var primeCount = 0\n  \
    \      var primeCount2 = 0\n        var primeCount3 = 0\n        var primeCount4\
    \ = 0\n        var primeCount5 = 0\n        var primeCount6 = 0\n        var primeCount7\
    \ = 0\n        var primeCount8 = 0\n        var primeCount9 = 0\n        var primeCount10\
    \ = 0\n        var primeCount11 = 0\n        var primeCount12 = 0\n        var\
    \ primeCount13 = 0\n        var primeCount14 = 0\n        var primeCount15 = 0\n\
    \        var primeCount16 = 0\n        var primeCount17 = 0\n        var primeCount18\
    \ = 0\n        var primeCount19 = 0\n        var primeCount20 = 0\n        var\
    \ primeCount21 = 0\n        var primeCount22 = 0\n        var primeCount23 = 0\n\
    \        var primeCount24 = 0\n        var primeCount25 = 0\n        var primeCount26\
    \ = 0\n        var primeCount27 = 0\n        var primeCount28 = 0\n        var\
    \ primeCount29 = 0\n        var primeCount30 = 0\n        var primeCount31 = 0\n\
    \        var primeCount32 = 0\n        var primeCount33 = 0\n        var primeCount34\
    \ = 0\n        var primeCount35 = 0\n        var primeCount36 = 0\n        var\
    \ primeCount37 = 0\n        var primeCount38 = 0\n        var primeCount39 = 0\n\
    \        var primeCount40 = 0\n        var primeCount41 = 0\n        var primeCount42\
    \ = 0\n        var primeCount43 = 0\n        var primeCount44 = 0\n        var\
    \ primeCount45 = 0\n        var primeCount46 = 0\n        var primeCount47 = 0\n\
    \        var primeCount48 = 0\n        var primeCount49 = 0\n        var primeCount50\
    \ = 0\n        var primeCount51 = 0\n        var primeCount52 = 0\n        var\
    \ primeCount53 = 0\n        var primeCount54 = 0\n        var primeCount55 = 0\n\
    \        var primeCount56 = 0\n        var primeCount57 = 0\n        var primeCount58\
    \ = 0\n        var primeCount59 = 0\n        var primeCount60 = 0\n        var\
    \ primeCount61 = 0\n        var primeCount62 = 0\n        var primeCount63 = 0\n\
    \        var primeCount64 = 0\n        var primeCount65 = 0\n        var primeCount66\
    \ = 0\n        var primeCount67 = 0\n        var primeCount68 = 0\n        var\
    \ primeCount69 = 0\n        var primeCount70 = 0\n        var primeCount71 = 0\n\
    \        var primeCount72 = 0\n        var primeCount73 = 0\n        var primeCount74\
    \ = 0\n        var primeCount75 = 0\n        var primeCount76 = 0\n        var\
    \ primeCount77 = 0\n        var primeCount78 = 0\n        var primeCount79 = 0\n\
    \        var primeCount80 = 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2kiktt93.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsLength\e[0m = numsLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLength is already defined as \e[33mvalue\e[0m \e[35mnumsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp2kiktt93.scala:111:5 --------------------\e[0m\e[0m\n\
    \e[31m111 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m   \
    \  Found:    Unit\n\e[31m    |\e[0m     Required: Long\n\e[31m    |\e[0m\n\e[31m\
    \    |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.toCharArray\n\
    \        val numsLen = nums.length\n        val numsLen2 = numsLen * 2\n     \
    \   val numsLen3 = numsLen2 * 3\n        val numsLen4 = numsLen3 * 5\n       \
    \ val numsLen5 = numsLen4 * 7\n        val numsLen6 = numsLen5 * 11\n        val\
    \ numsLen7 = numsLen6 * 13\n        val numsLen8 = numsLen7 * 17\n        val\
    \ numsLen9 = numsLen8 * 19\n        val numsLen10 = numsLen9 * 21\n        val\
    \ numsLen11 = numsLen10 * 23\n        val numsLen12 = numsLen11 * 25\n       \
    \ val numsLen13 = numsLen12 * 27\n        val numsLen14 = numsLen13 * 29\n   \
    \     val numsLen15 = numsLen14 * 31\n        val numsLen16 = numsLen15 * 33\n\
    \        val numsLen17 = numsLen16 * 35\n        val numsLen18 = numsLen17 * 37\n\
    \        val numsLen19 = numsLen18 * 39\n        val numsLen20 = numsLen19 * 41\n\
    \        val numsLen21 = numsLen20 * 43\n        val numsLen22 = numsLen21 * 45\n\
    \        val numsLen23 = numsLen22 * 47\n        val numsLen24 = numsLen23 * 49\n\
    \        val numsLen25 = numsLen24 * 51\n        val numsLen26 = numsLen25 * 53\n\
    \        val numsLen27 = numsLen26 * 55\n        val numsLen28 = numsLen27 * 57\n\
    \        val numsLen29 = numsLen28 * 59\n        val numsLen30 = numsLen29 * 61\n\
    \        val numsLen31 = numsLen30 * 63\n        val numsLen32 = numsLen31 * 65\n\
    \        val numsLen33 = numsLen32 * 67\n        val numsLen34 = numsLen33 * 69\n\
    \        val numsLen35 = numsLen34 * 71\n        val numsLen36 = numsLen35 * 73\n\
    \        val numsLen37 = numsLen36 * 75\n        val numsLen38 = num\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdf2ra7ap.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\").map(_.toInt)\n        val primes = nums.filter(num => num > 1 && num % 2\
    \ != 0).map(num => num * 2)\n        val primesCount = primes.count(_ > 1)\n \
    \       primesCount.toLong\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzzwjvni.scala:32)\n\tat Problem.main(tmphzzwjvni.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16))\n        val hexKey2 = hexKey.map(x\
    \ => (x % 16))\n        val hexKey3 = hexKey2.map(x => (x % 16))\n        val\
    \ hexKey4 = hexKey3.map(x => (x % 16))\n        val hexKey5 = hexKey4.map(x =>\
    \ (x % 16))\n        val hexKey6 = hexKey5.map(x => (x % 16))\n        val hexKey7\
    \ = hexKey6.map(x => (x % 16))\n        val hexKey8 = hexKey7.map(x => (x % 16))\n\
    \        val hexKey9 = hexKey8.map(x => (x % 16))\n        val hexKey10 = hexKey9.map(x\
    \ => (x % 16))\n        val hexKey11 = hexKey10.map(x => (x % 16))\n        val\
    \ hexKey12 = hexKey11.map(x => (x % 16))\n        val hexKey13 = hexKey12.map(x\
    \ => (x % 16))\n        val hexKey14 = hexKey13.map(x => (x % 16))\n        val\
    \ hexKey15 = hexKey14.map(x => (x % 16))\n        val hexKey16 = hexKey15.map(x\
    \ => (x % 16))\n        val hexKey17 = hexKey16.map(x => (x % 16))\n        val\
    \ hexKey18 = hexKey17.map(x => (x % 16))\n        val hexKey19 = hexKey18.map(x\
    \ => (x % 16))\n        val hexKey20 = hexKey19.map(x => (x % 16))\n        val\
    \ hexKey21 = hexKey20.map(x => (x % 16))\n        val hexKey22 = hexKey21.map(x\
    \ => (x % 16))\n        val hexKey23 = hexKey22.map(x => (x % 16))\n        val\
    \ hexKey24 = hexKey23.map(x => (x % 16))\n        val hexKey25 = hexKey24.map(x\
    \ => (x % 16))\n        val hexKey26 = hexKey25.map(x => (x % 16))\n        val\
    \ hexKey27 = hexKey26.map(x => (x % 16))\n        val hexKey28 = hexKey27.map(x\
    \ => (x % 16))\n        val hexKey29 = hexKey28.map(x => (x % 16))\n        val\
    \ hexKey30 = hexKey29.map(x => (x % 16))\n        val hex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8sar435s.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8sar435s.scala:58:5 ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpyggjdyjk.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmpyggjdyjk.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmpyggjdyjk.scala:26)\n\tat Problem$.main(tmpyggjdyjk.scala:31)\n\
    \tat Problem.main(tmpyggjdyjk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8vglu561.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:29:25 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:30:25 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:31:25 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprime"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).filter(_ > 0).count() * 16\n      \
    \  hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphff8zsza.scala:27:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = hex.map(\e\
    [36mx\e[0m => x % \e[31m16\e[0m).filter(_ > \e[31m0\e[0m).count() * \e[31m16\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m: (p: Int => Boolean): Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLen = hexKey.size\n        val hexKeyLenMinusOne =\
    \ hexKeyLen - 1\n        val hexKeyLenMinusTwo = hexKeyLen - 2\n        val hexKeyLenMinusThree\
    \ = hexKeyLen - 3\n        val hexKeyLenMinusFour = hexKeyLen - 4\n        val\
    \ hexKeyLenMinusFive = hexKeyLen - 5\n        val hexKeyLenMinusSix = hexKeyLen\
    \ - 6\n        val hexKeyLenMinusSeven = hexKeyLen - 7\n        val hexKeyLenMinusEight\
    \ = hexKeyLen - 8\n        val hexKeyLenMinusNine = hexKeyLen - 9\n        val\
    \ hexKeyLenMinusTen = hexKeyLen - 10\n        val hexKeyLenMinusEleven = hexKeyLen\
    \ - 11\n        val hexKeyLenMinusTwelve = hexKeyLen - 12\n        val hexKeyLenMinusThirteen\
    \ = hexKeyLen - 13\n        val hexKeyLenMinusFourteen = hexKeyLen - 14\n    \
    \    val hexKeyLenMinusFifteen = hexKeyLen - 15\n        val hexKeyLenMinusSixteen\
    \ = hexKeyLen - 16\n        val hexKeyLenMinusSeventeen = hexKeyLen - 17\n   \
    \     val hexKeyLenMinusEighteen = hexKeyLen - 18\n        val hexKeyLenMinusNineteen\
    \ = hexKeyLen - 19\n        val hexKeyLenMinusTwenty = hexKeyLen - 20\n      \
    \  val hexKeyLenMinusThirty = hexKeyLen - 30\n        val hexKeyLenMinusFourty\
    \ = hexKeyLen - 40\n        val hexKeyLenMinusFifty = hexKeyLen - 50\n       \
    \ val hexKeyLenMinusSixty = hexKeyLen - 60\n        val hexKeyLenMinusSeventy\
    \ = hexKeyLen - 70\n        val hexKeyLenMinusEighty = hexKeyLen - 80\n      \
    \  val hexKeyLenMinusNinety = hexKeyLen - 90\n        val hexKeyLenMinusOnehundred\
    \ = hexKeyLen - 100\n        val hexKeyLenMinusOnethousand = hexKeyLen - 1000\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgzg4twnn.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzg4twnn.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0l){\n            (acc, c) =>\n           \
    \     acc + (if (c % 2 == 0) c else -c)\n        }\n        hexKey\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppdsxhuv5.scala:35)\n\tat Problem.main(tmppdsxhuv5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbn0_t94g.scala:32)\n\tat Problem.main(tmpbn0_t94g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => math.pow(16, x))\n        val hexKeySum = hexKey.sum\n\
    \        val hexKeySum2 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum3\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum4 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum5 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum6 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum7\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum8 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum9 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum10 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum11\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum12 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum13 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum14 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum15\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum16 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum17 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum18 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum19\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum20 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum21 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum22 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum23\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum24 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum25 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum26 = hexKey.map(x => math.pow(16, x))\n        val hexKeySum27\
    \ = hexKey.map(x => math.pow(16, x))\n        val hexKeySum28 = hexKey.map(x =>\
    \ math.pow(16, x))\n        val hexKeySum29 = hexKey.map(x => math.pow(16, x))\n\
    \        val hexKeySum30 = hexKey.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpppnn0v3n.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpppnn0v3n.scala:58:5 ---------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn76t9xh.scala:26:40 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value toHexString is not a member of Char.\n\e[31m   |\e\
    [0m      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          longWrapper(_$1)\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpbn76t9xh.scala:26:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbn76t9xh.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            hexKey.getOrElse(x, 0)\n        })\n        hexKey.toSeq.filter(x\
    \ => x._2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbax1_g5d.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyArray = hexKey.toArray\n        val hexKeyArrayLength = hexKeyArray.length\n\
    \        val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hexKeyArrayLength\n   \
    \     val hexKeyArrayLength = hexKeyArrayLength\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength\n        val hexKeyArrayLength = hex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr_v_x9nq.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr_v_x9nq.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr_v_x9nq.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr_v_x9nq.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr_v_x9nq.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexCount = hexString.length\n\
    \        val hexDigits = hexString.length\n        val hexDigitCount = hexDigits/2\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hexDigitCount*hexDigitCount\n\
    \        val hexDigitCount = hexDigitCount*hexDigitCount\n        val hexDigitCount\
    \ = hexDigitCount*hexDigitCount\n        val hexDigitCount = hex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjsochst0.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount*hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjsochst0.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount*hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjsochst0.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount*hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjsochst0.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount*hexDigitCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjsochst0.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitCount*"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbzp0a2o.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdbzp0a2o.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val primes = hex.filter(x => x % 2 == 0 && x != 0)\n        val primesCount\
    \ = primes.count(x => x % 2 == 0 && x != 0)\n        primesCount + primes.count(x\
    \ => x % 3 == 0 && x != 0)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7asoip6.scala:32)\n\tat Problem.main(tmpe7asoip6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = hex.filter(x => x % 2 == 0).filter(x => x % 3 == 0).filter(x\
    \ => x % 5 == 0).filter(x => x % 7 == 0).filter(x => x % 11 == 0).filter(x =>\
    \ x % 13 == 0).filter(x => x % 17 == 0).filter(x => x % 19 == 0).filter(x => x\
    \ % 23 == 0).filter(x => x % 29 == 0).filter(x => x % 31 == 0).filter(x => x %\
    \ 37 == 0).filter(x => x % 41 == 0).filter(x => x % 43 == 0).filter(x => x % 47\
    \ == 0).filter(x => x % 53 == 0).filter(x => x % 59 == 0).filter(x => x % 61 ==\
    \ 0).filter(x => x % 67 == 0).filter(x => x % 71 == 0).filter(x => x % 73 == 0).filter(x\
    \ => x % 79 == 0).filter(x => x % 83 == 0).filter(x => x % 89 == 0).filter(x =>\
    \ x % 97 == 0).filter(x => x % 101 == 0).filter(x => x % 103 == 0).filter(x =>\
    \ x % 107 == 0).filter(x => x % 109 == 0).filter(x => x % 113 == 0).filter(x =>\
    \ x % 117 == 0).filter(x => x % 121 == 0).filter(x => x % 123 == 0).filter(x =>\
    \ x % 127 == 0).filter(x => x % 131 == 0).filter(x => x % 133 == 0).filter(x =>\
    \ x % 137 == 0).filter(x => x % 139 == 0).filter(x => x % 143 == 0).filter(x =>\
    \ x % 147 == 0).filter(x => x % 151 == 0).filter(x => x % 153 == 0).filter(x =>\
    \ x % 157 == 0).filter(x => x % 161 == 0).filter(x => x % 163 == 0).filter(x =>\
    \ x % 167 == 0).filter(x => x % 171 == 0).filter(x => x % 173 == 0).filter(x =>\
    \ x % 177 == 0).filter(x => x % 181 == 0).filter(x => x % 183 == 0).filter(x =>\
    \ x % 187 == 0).filter(x => x % 191 == 0).filter(x => x % 193 == 0).filter(x =>\
    \ x % 197 == 0).filter(x => x % 201 == 0).filter(x => x % 203 == 0).filter(x =>\
    \ x % 207 == 0).filter(x => x % 209 == 0).filter(x => x % 213 == 0).filter(x =>\
    \ x % 217 == 0).filter(x => x % 22\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnp_zjug.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptnp_zjug.scala:27:1594 ------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = hex.filter(\e[36mx\e[0m => x % \e\
    [31m2\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m3\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m5\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m7\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m13\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m17\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m19\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m23\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m29\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m31\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m37\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m41\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m43\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m47\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m53\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m59\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m61\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m71\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m73\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m79\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m83\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m89\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m97\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m101\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m103\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m107\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m109\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m113\e[0m == \e\
    [31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m117\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m121\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m123\e["
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        hex.foreach(x => {\n            val hexKey = hexKey + (x ->\
    \ 1)\n        })\n        hexKey.foreach(x => {\n            val hexKey = hexKey\
    \ + (x -> hexKey.getOrElse(x, 0) * hexLength)\n        })\n        hexKey.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_12m6f_u.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexLen = hex.length\n        val hexKey = hex.map(x => (x % 16).asInstanceOf[Int]).toArray\n\
    \        val hexKeyLen = hexKey.length\n        val hexKeyPrime = hexKey.filter(x\
    \ => x % 2 == 0).length\n        val hexKeyPrimeLen = hexKeyPrime\n        val\
    \ hexKeyPrimePrime = hexKeyPrimePrime * hexKeyPrime\n        val hexKeyPrimePrimeLen\
    \ = hexKeyPrimePrime\n        val hexKeyPrimePrimePrimePrime = hexKeyPrimePrimePrimePrime\
    \ * hexKeyPrimePrimePrime\n        val hexKeyPrimePrimePrimePrimePrime = hexKeyPrimePrimePrimePrimePrime\
    \ * hexKeyPrimePrimePrimePrimePrime\n        val hexKeyPrimePrimePrimePrimePrimePrime\
    \ = hexKeyPrimePrimePrimePrimePrimePrimePrime * hexKeyPrimePrimePrimePrimePrimePrimePrime\n\
    \        val hexKeyPrimePrimePrimePrimePrimePrimePrime = hexKeyPrimePrimePrimePrimePrimePrimePrimePrime\
    \ * hexKeyPrimePrimePrimePrimePrimePrimePrimePrime\n        val hexKeyPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrime * hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \        val hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrime = hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ * hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n        val\
    \ hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ * hexKeyPrimePrimePrimePrimePrimePrimePri\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq4u19p3v.scala:32:31 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyPrimePrime\e[0m =\
    \ hexKeyPrimePrime * hexKeyPrime\n\e[31m\e[31m   |\e[0m                      \
    \         ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35mhexKeyPrimePrime\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpq4u19p3v.scala:34:41 ---------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyPrimePrimePrimePrime\e\
    [0m = hexKeyPrimePrimePrimePrime * hexKeyPrimePrimePrime\n\e[31m\e[31m   |\e[0m\
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \       Recursive \e[33mvalue\e[0m \e[35mhexKeyPrimePrimePrimePrime\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq4u19p3v.scala:35:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeyPrimePrimePrimePrimePrime\e[0m = hexKeyPrimePrimePrimePrimePrime\
    \ * hexKeyPrimePrimePrimePrimePrime\n\e[31m\e[31m   |\e[0m                   \
    \                           ^\e[0m\n\e[31m   |\e[0m              Recursive \e\
    [33mvalue\e[0m \e[35mhexKeyPrimePrimePrimePrimePrime\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4u19p3v.scala:40:76 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mhexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m = hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime * hexKeyPrimePrimePrimePrimePrimePrimePri\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: hexKeyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation availabl"
  stdout: ''
  timestamp: 1660009577
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbn0_t94g.scala:32)\n\tat Problem.main(tmpbn0_t94g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength = new mutable.HashSet[Long]()\n        val hexKeyLength2\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength3 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength4 = new mutable.HashSet[Long]()\n        val hexKeyLength5\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength6 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength7 = new mutable.HashSet[Long]()\n        val hexKeyLength8\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength9 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength10 = new mutable.HashSet[Long]()\n        val hexKeyLength11\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength12 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength13 = new mutable.HashSet[Long]()\n        val hexKeyLength14\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength15 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength16 = new mutable.HashSet[Long]()\n        val hexKeyLength17\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength18 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength19 = new mutable.HashSet[Long]()\n        val hexKeyLength20\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength21 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength22 = new mutable.HashSet[Long]()\n        val hexKeyLength23\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength24 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength25 = new mutable.HashSet[Long]()\n        val hexKeyLength26\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength27 = new mutable.HashSet[Long]()\n\
    \        val hexKeyLength28 = new mutable.HashSet[Long]()\n        val hexKeyLength29\
    \ = new mutable.HashSet[Long]()\n        val hexKeyLength30 = new mutable.HashSet[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpz_2s3qm0.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_2s3qm0.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_2s3qm0.scala:29:31\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKeyLength\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz_2s3qm0.scala:30:32 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength2\e[0m = \e\
    [33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz_2s3qm0.scala:31:32 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mhexKeyLength3\e[0m = \e[33mnew\e[0m mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_2s3qm0.scala:32:32 ------------------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        var count = 0\n        for(i <- 0 until hexLength) {\n     \
    \       val hexDigit = hex(i)\n            if(hexKey.contains(hexDigit)) {\n \
    \               count += 1\n            } else {\n                hexKey.put(hexDigit,\
    \ count)\n                count += 1\n            }\n        }\n        hexKey.getOrElse(hexLength,\
    \ 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi6k4nlm_.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.filter(_ >= '0' && _ <='9').length\n        val hexDigit\
    \ = hex.filter(_ >= '0' && _ <='9').toInt\n        val hexDigitCount = hexDigit.length\n\
    \        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount\
    \ - 1\n        val hexDigitCount = hexDigitCount - 1\n        val hexDigitCount\
    \ = hexDigitCount - 1\n        val hexDigitCount = hexDigitCount - 1\n       \
    \ val hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsij_8mm.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsij_8mm.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsij_8mm.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsij_8mm.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsij_8mm.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hexDigitCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1660009585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexKey = hexString.toUpperCase.map(x\
    \ => (x to hexString.indexOf(x)).sum)\n        hexKey.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofiji7ri.scala:28:75\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e\
    [0m = hexString.toUpperCase.map(\e[36mx\e[0m => (x to hexString.indexOf(x)).sum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                          Found:    Int\n\e[31m   |\e[0m                    \
    \                                      Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0l){ (sum, digit) =>\n            val prime\
    \ = sum + digit\n            if (prime < 10) {\n                prime\n      \
    \      } else if (prime < 100) {\n                prime * 2\n            } else\
    \ if (prime < 1000) {\n                prime * 3\n            } else if (prime\
    \ < 10000) {\n                prime * 5\n            } else if (prime < 100000)\
    \ {\n                prime * 7\n            } else if (prime < 1000000) {\n  \
    \              prime * 11\n            } else if (prime < 10000000) {\n      \
    \          prime * 13\n            } else {\n                prime * 17\n    \
    \        }\n        }\n        hexKey\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpiezd74l2.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmpiezd74l2.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmpiezd74l2.scala:26)\n\tat Problem$.main(tmpiezd74l2.scala:50)\n\
    \tat Problem.main(tmpiezd74l2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        var hexKeyCount = 0\n        var hexKeyCount2 = 0\n        var\
    \ hexKeyCount3 = 0\n        var hexKeyCount4 = 0\n        var hexKeyCount5 = 0\n\
    \        var hexKeyCount6 = 0\n        var hexKeyCount7 = 0\n        var hexKeyCount8\
    \ = 0\n        var hexKeyCount9 = 0\n        var hexKeyCount10 = 0\n        var\
    \ hexKeyCount11 = 0\n        var hexKeyCount12 = 0\n        var hexKeyCount13\
    \ = 0\n        var hexKeyCount14 = 0\n        var hexKeyCount15 = 0\n        var\
    \ hexKeyCount16 = 0\n        var hexKeyCount17 = 0\n        var hexKeyCount18\
    \ = 0\n        var hexKeyCount19 = 0\n        var hexKeyCount20 = 0\n        var\
    \ hexKeyCount21 = 0\n        var hexKeyCount22 = 0\n        var hexKeyCount23\
    \ = 0\n        var hexKeyCount24 = 0\n        var hexKeyCount25 = 0\n        var\
    \ hexKeyCount26 = 0\n        var hexKeyCount27 = 0\n        var hexKeyCount28\
    \ = 0\n        var hexKeyCount29 = 0\n        var hexKeyCount30 = 0\n        var\
    \ hexKeyCount31 = 0\n        var hexKeyCount32 = 0\n        var hexKeyCount33\
    \ = 0\n        var hexKeyCount34 = 0\n        var hexKeyCount35 = 0\n        var\
    \ hexKeyCount36 = 0\n        var hexKeyCount37 = 0\n        var hexKeyCount38\
    \ = 0\n        var hexKeyCount39 = 0\n        var hexKeyCount40 = 0\n        var\
    \ hexKeyCount41 = 0\n        var hexKeyCount42 = 0\n        var hexKeyCount43\
    \ = 0\n        var hexKeyCount44 = 0\n        var hexKeyCount45 = 0\n        var\
    \ hexKeyCount46 = 0\n        var hexKeyCount47 = 0\n        var hexKeyCount48\
    \ = 0\n        var hexKeyCount49 = 0\n        var hexKeyCount50 = 0\n        var\
    \ hexKeyCount51 = 0\n        var hexKeyCount52 = 0\n        var hexKeyCount53\
    \ = 0\n        var hexKeyCount54 = 0\n        var hexKeyCount55 = 0\n        var\
    \ hexKeyCount56 = 0\n        var hexKeyCount57 = 0\n        var hexKeyCount58\
    \ = 0\n        var hexKeyCount59 = 0\n        var hexKeyCount60 = 0\n        var\
    \ hexKeyCount61 = 0\n        var hexKeyCount62 = 0\n        var hexKeyCount63\
    \ = 0\n        var hexKeyCount64 = 0\n        var hexKeyCount65 = 0\n        var\
    \ hexKeyCount66 = 0\n        var hexKeyCount67 = 0\n        var hexKeyCount68\
    \ = 0\n        var hexKeyCount69 = 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1zxagh2k.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1zxagh2k.scala:98:5\
    \ ---------------------\e[0m\e[0m\n\e[31m98 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hex"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\")\n        val numsCount = nums.length\n        val hexDigits = nums.map(_.toInt)\n\
    \        val hexDigitsCount = hexDigits.length\n        val hexDigitsToCount =\
    \ hexDigits.map(_.toInt)\n        val hexDigitsToCountCount = hexDigitsToCount.length\n\
    \        val hexDigitsToCountCountCount = hexDigitsToCountCount.length\n     \
    \   val hexDigitsToCountCountCountCount = hexDigitsToCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCount = hexDigitsToCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.length\n\
    \        val hexDigitsToCountCountCountCountCountCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvxt204_.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbvxt204_.scala:32:63\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitsToCountCountCount\e[0m = hexDigitsToCountCount.length\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbvxt204_.scala:33:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitsToCountCountCountCount\e[0m = hexDigitsToCountCountCountCount.length\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35mhexDigitsToCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbvxt204_.scala:34:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitsToCountCountCountCountCount\e[0m = hexDigitsToCountCountCountCountCount.length\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m         Recursive \e[33mvalue\e[0m \e[35mhexDigitsToCountCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbvxt204_.scala:35:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitsToCountCountCountCountCountCount\e[0m = hexDigitsToCountCountCountCountCountCount.length\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mhexDigitsToCountCountCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[3"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.filter(_ >= '0'\
    \ && _ <='9').length\n        val hexPrimes = hex.filter(_ >= '0' && _ <='9' &&\
    \ _ != 'A' && _ != 'B' && _ != 'C' && _ != 'D' && _ != 'E' && _ != 'F').length\n\
    \        val hexPrime = hexPrimes.toDouble\n        val hexPrimeCount = hexPrime.toInt\n\
    \        val hexPrimeDigits = hexPrime.toCharArray\n        val hexPrimeDigitCount\
    \ = hexPrimeDigits.length\n        val hexPrimePrimes = hexPrimeDigits.filter(_\
    \ >= '0' && _ <='9').filter(_ != 'A' && _ != 'B' && _ != 'C' && _ != 'D' && _\
    \ != 'E' && _ != 'F').length\n        val hexPrimePrime = hexPrimePrimes.toDouble\n\
    \        val hexPrimePrimeCount = hexPrimePrime.toInt\n        val hexPrimePrimeDigits\
    \ = hexPrimePrime.toCharArray\n        val hexPrimePrimeDigitCount = hexPrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimes = hexPrimePrimeDigits.filter(_ >= '0' && _ <='9').filter(_\
    \ != 'A' && _ != 'B' && _ != 'C' && _ != 'D' && _ != 'E' && _ != 'F').length\n\
    \        val hexPrimePrimePrime = hexPrimePrimePrimes.toDouble\n        val hexPrimePrimePrimeCount\
    \ = hexPrimePrimePrime.toInt\n        val hexPrimePrimePrimeDigits = hexPrimePrimePrime.toCharArray\n\
    \        val hexPrimePrimePrimeDigitCount = hexPrimePrimePrimeDigits.length\n\
    \        val hexPrimePrimePrimePrimes = hexPrimePrimePrimeDigits.filter(_ >= '0'\
    \ && _ <='9').filter(_ != 'A' && _ != 'B' && _ != 'C' && _ != 'D' && _ != 'E'\
    \ && _ != 'F').length\n        val hexPrimePrimePrimePrime = hexPrimePrimePrimePrimes.toDouble\n\
    \        val hexPrimePrimePrimePrimeCount = hexPrimePrimePrimePrime.toInt\n  \
    \      val hexPrimePrimePrimePrimeDigits = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9py2b7iq.scala:47:43 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mhexPrimePrimePrimePrimeDigits\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp9py2b7iq.scala:28:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigits\e[0m = hex.filter(_ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp9py2b7iq.scala:29:35\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexPrimes\e[0m = hex.filter(_ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m\
    \ && _ != \e[31m'A'\e[0m && _ != \e[31m'B'\e[0m && _ != \e[31m'C'\e[0m && _ !=\
    \ \e[31m'D'\e[0m && _ != \e[31m'E'\e[0m && _ != \e[31m'F'\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9py2b7iq.scala:32:38\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mhexPrimeDigits\e[0m = hexPrime.toCharArray\n\e[31m\e[31m   |\e[0m        \
    \                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                value toCharArray is not a member of Double\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp9py2b7iq.scala:48:5 ---------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \        val hexDigitCount = hexDigitMap.length\n        val hexDigitMap = hexDigits.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf8qztso6.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8qztso6.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8qztso6.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount is already defined as \e[33mvalue\e[0m \e[35mhexDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8qztso6.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = hexDigits.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mhexDigitMap is already defined as \e[33mvalue\e[0m \e[35mhexDigitMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8qztso6.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mhexDigitCount\e[0m = hexDigitMap.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexDigitCount"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val numList = num.split(\"\"\
    ).toList\n        val numList2 = numList.map(_.toInt)\n        val numList3 =\
    \ numList2.filter(_%2==0)\n        val numList4 = numList3.filter(_%2==0)\n  \
    \      val numList5 = numList4.filter(_%2==0)\n        val numList6 = numList5.filter(_%2==0)\n\
    \        val numList7 = numList6.filter(_%2==0)\n        val numList8 = numList7.filter(_%2==0)\n\
    \        val numList9 = numList8.filter(_%2==0)\n        val numList10 = numList9.filter(_%2==0)\n\
    \        val numList11 = numList10.filter(_%2==0)\n        val numList12 = numList11.filter(_%2==0)\n\
    \        val numList13 = numList12.filter(_%2==0)\n        val numList14 = numList13.filter(_%2==0)\n\
    \        val numList15 = numList14.filter(_%2==0)\n        val numList16 = numList15.filter(_%2==0)\n\
    \        val numList17 = numList16.filter(_%2==0)\n        val numList18 = numList17.filter(_%2==0)\n\
    \        val numList19 = numList18.filter(_%2==0)\n        val numList20 = numList19.filter(_%2==0)\n\
    \        val numList21 = numList20.filter(_%2==0)\n        val numList22 = numList21.filter(_%2==0)\n\
    \        val numList23 = numList22.filter(_%2==0)\n        val numList24 = numList23.filter(_%2==0)\n\
    \        val numList25 = numList24.filter(_%2==0)\n        val numList26 = numList25.filter(_%2==0)\n\
    \        val numList27 = numList26.filter(_%2==0)\n        val numList28 = numList27.filter(_%2==0)\n\
    \        val numList29 = numList28.filter(_%2==0)\n        val numList30 = numList29.filter(_%2==0)\n\
    \        val numList31 = numList30.filter(_%2==0)\n        val numList32 = numList31.filter(_%2==0)\n\
    \        val numList33 = numList32.filter(_%2==0)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpo4s_ghe9.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4s_ghe9.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x)\n        val hexDigitMapCount = hexDigitMap.length\n        val hexDigitMapValues\
    \ = hexDigitMap.mapValues(_.length)\n        val hexDigitMapValuesCount = hexDigitMapValues.length\n\
    \        val hexDigitMapValuesSum = hexDigitMapValues.sum\n        val hexDigitMapValuesSumCount\
    \ = hexDigitMapValuesSum.length\n        val hexDigitMapValuesSumSum = hexDigitMapValuesSum.sum\n\
    \        val hexDigitMapValuesSumSumCount = hexDigitMapValuesSumSum.length\n \
    \       val hexDigitMapValuesSumSumSum = hexDigitMapValuesSumSum.sum\n       \
    \ val hexDigitMapValuesSumSumSumCount = hexDigitMapValuesSumSumSum.length\n  \
    \      val hexDigitMapValuesSumSumSumSum = hexDigitMapValuesSumSumSum.sum\n  \
    \      val hexDigitMapValuesSumSumSumSumCount = hexDigitMapValuesSumSumSumSum.length\n\
    \        val hexDigitMapValuesSumSumSumSumSum = hexDigitMapValuesSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSum.length\n\
    \        val hexDigitMapValuesSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSum.length\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSumSum.length\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSumSum.length\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumSum = hexDigitMapValuesSumSumSumSumSumSumSumSum.sum\n\
    \        val hexDigitMapValuesSumSumSumSumSumSumSumSumCount = hexDigitMapValuesSumSumSumSumSumSumSumSumSum.length\n\
    \        val hexDigitMapValues\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqv4jdagc.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqv4jdagc.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitMapValuesSumSumSumSumSumSumSum\e[0m = hexDigitMapValuesSumSumSumSumSumSumSumSum.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapValuesSumSumSumSumSumSumSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitMapValuesSumSumSumSumSumSumSum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqv4jdagc.scala:49:12 ---------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesSumSumSumSumSumSumSumCount\e\
    [0m = hexDigitMapValuesSumSumSumSumSumSumSumSum.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitMapValuesSumSumSumSumSumSumSumCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitMapValuesSumSumSumSumSumSumSumCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpqv4jdagc.scala:31:43 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitMapCount\e[0m = hexDigitMap.length\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    value length is not a member of Map[Int, Array[Int]]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqv4jdagc.scala:33:55 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMapValuesCount\e\
    [0m = hexDigitMapValues.length\n\e[31m\e[31m   |\e[0m                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val numList = num.toList\n \
    \       var count = 0\n        var prime = 0\n        var primeCount = 0\n   \
    \     var primePrime = 0\n        var primePrimeCount = 0\n        var primePrimePrime\
    \ = 0\n        var primePrimePrimeCount = 0\n        var primePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimeCount = 0\n        var primePrimePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimePrimeCount = 0\n        var primePrimePrimePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimePrimePrimeCount = 0\n        var primePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimeCount = 0\n        var primePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimeCount = 0\n       \
    \ var primePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n  \
    \      var primePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n     \
    \   var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n        var\
    \ primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n        var primePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4dacivrc.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4dacivrc.scala:50:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mprimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime is\
    \ already defined as \e[33mvariable\e[0m \e[35mprimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4dacivrc.scala:51:12 ---------------------------\e[0m\e[0m\n\e\
    [31m51 |\e[0m        \e[33mvar\e[0m \e[36mprimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mprimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4dacivrc.scala:57:5 ---------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitPrimes = hexDigits.filter(x\
    \ => x % 2 == 0).map(x => x % 10)\n        val hexDigitPrimeCount = hexDigitPrimes.length\n\
    \        val hexDigitPrimePrimes = hexDigitPrimes.filter(x => x % 2 == 0).map(x\
    \ => x % 10)\n        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimes = hexDigitPrimePrimes.filter(x => x % 2\
    \ == 0).map(x => x % 10)\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimePrimes.filter(x\
    \ => x % 2 == 0).map(x => x % 10)\n        val hexDigitPrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimes.filter(x => x % 2 == 0).map(x => x % 10)\n \
    \       val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimes.filter(x\
    \ => x % 2 == 0).map(x => x % 10)\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimePrimes.length\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(x => x % 2 == 0).map(x\
    \ => x % 10)\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt7zi3mhm.scala:42:59 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(\e[36mx\e[0m => x %\
    \ \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x % \e[31m10\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                           ^\e[0m\n\
    \e[31m   |\e[0m Recursive \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimePrimes\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7zi3mhm.scala:44:64\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimes\e[0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Not found: hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt7zi3mhm.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyArray = hexKey.toArray\n        val hexKeyArrayLength = hexKeyArray.length\n\
    \        val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hexKeyArray.length\n \
    \       val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArrayLength\
    \ = hexKeyArray.length\n        val hexKeyArrayLength = hex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmyzmofxt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmyzmofxt.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmyzmofxt.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmyzmofxt.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmyzmofxt.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArray.length"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\")\n        val hexNums = nums.map(_.toInt)\n        val primes = hexNums.filter(_.isPrime)\n\
    \        primes.count(_ % 2 == 0).asInstanceOf[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnolg6rhz.scala:28:38 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = hexNums.filter(_.isPrime)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value isPrime is not a member of\
    \ Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:27:21 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8vglu561.scala:28:24 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:29:25 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:30:25 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:31:25 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8vglu561.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mprime"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toChar).map(_.toInt)\n\
    \        val hexKeys = mutable.Set[Long]()\n        hex.foreach(x => {\n     \
    \       val y = hex.filter(_ != x)\n            val z = (x % y).toInt\n      \
    \      if (z == 0) hexKeys += x\n        })\n        hexKeys.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n \
    \   assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp061d9zry.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKeys\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp061d9zry.scala:30:23 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mz\e[0m = (x % y).toInt\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m%\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e\
    [0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x:\
    \ Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\
    \e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((y : IndexedSeq[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyList2 = hexKeyList.map(x => x % 10)\n        val hexKeyList3\
    \ = hexKeyList2.filter(x => x != 0)\n        val hexKeyList4 = hexKeyList3.map(x\
    \ => x % 10)\n        val hexKeyList5 = hexKeyList4.filter(x => x != 0)\n    \
    \    val hexKeyList6 = hexKeyList5.map(x => x % 10)\n        val hexKeyList7 =\
    \ hexKeyList6.filter(x => x != 0)\n        val hexKeyList8 = hexKeyList7.map(x\
    \ => x % 10)\n        val hexKeyList9 = hexKeyList8.filter(x => x != 0)\n    \
    \    val hexKeyList10 = hexKeyList9.map(x => x % 10)\n        val hexKeyList11\
    \ = hexKeyList10.filter(x => x != 0)\n        val hexKeyList12 = hexKeyList11.map(x\
    \ => x % 10)\n        val hexKeyList13 = hexKeyList12.filter(x => x != 0)\n  \
    \      val hexKeyList14 = hexKeyList13.map(x => x % 10)\n        val hexKeyList15\
    \ = hexKeyList14.filter(x => x != 0)\n        val hexKeyList16 = hexKeyList15.map(x\
    \ => x % 10)\n        val hexKeyList17 = hexKeyList16.filter(x => x != 0)\n  \
    \      val hexKeyList18 = hexKeyList17.map(x => x % 10)\n        val hexKeyList19\
    \ = hexKeyList18.filter(x => x != 0)\n        val hexKeyList20 = hexKeyList19.map(x\
    \ => x % 10)\n        val hexKeyList21 = hexKeyList20.filter(x => x != 0)\n  \
    \      val hexKeyList22 = hexKeyList21.map(x => x % 10)\n        val hexKeyList23\
    \ = hexKeyList22.filter(x => x != 0)\n        val hexKeyList24 = hexKeyList23.map(x\
    \ => x % 10)\n        val hexKeyList25 = hexKeyList24.filter(x => x != 0)\n  \
    \      val hexKeyList26 = hexKeyList25.map(x => x % 10)\n        val hexKeyList27\
    \ = hexKeyList26.filter(x => x != 0)\n        val hexKeyList28 = hexKeyList27.map(x\
    \ => x % 10)\n        val hexKeyList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsv_9w7_.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprsv_9w7_.scala:57:5 ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hexLength.toLong\n \
    \       val hexKeyArray = hexKey.toArray\n        val hexKeyArrayLength = hexKeyArray.length\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).filter(_ > 0).count\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp75uv1pod.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        hexKey\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (hexKey : (Int\
    \ => Boolean) => Int)\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\")\n        val numsLen = nums.length\n        val numsLen2 = numsLen / 2\n\
    \        val numsLen3 = numsLen / 3\n        val numsLen4 = numsLen / 4\n    \
    \    val numsLen5 = numsLen / 5\n        val numsLen6 = numsLen / 6\n        val\
    \ numsLen7 = numsLen / 7\n        val numsLen8 = numsLen / 8\n        val numsLen9\
    \ = numsLen / 9\n        val numsLen10 = numsLen / 10\n        val numsLen11 =\
    \ numsLen / 11\n        val numsLen12 = numsLen / 12\n        val numsLen13 =\
    \ numsLen / 13\n        val numsLen14 = numsLen / 14\n        val numsLen15 =\
    \ numsLen / 15\n        val numsLen16 = numsLen / 16\n        val numsLen17 =\
    \ numsLen / 17\n        val numsLen18 = numsLen / 18\n        val numsLen19 =\
    \ numsLen / 19\n        val numsLen20 = numsLen / 20\n        val numsLen21 =\
    \ numsLen / 21\n        val numsLen22 = numsLen / 22\n        val numsLen23 =\
    \ numsLen / 23\n        val numsLen24 = numsLen / 24\n        val numsLen25 =\
    \ numsLen / 25\n        val numsLen26 = numsLen / 26\n        val numsLen27 =\
    \ numsLen / 27\n        val numsLen28 = numsLen / 28\n        val numsLen29 =\
    \ numsLen / 29\n        val numsLen30 = numsLen / 30\n        val numsLen31 =\
    \ numsLen / 31\n        val numsLen32 = numsLen / 32\n        val numsLen33 =\
    \ numsLen / 33\n        val numsLen34 = numsLen / 34\n        val numsLen35 =\
    \ numsLen / 35\n        val numsLen36 = numsLen / 36\n        val numsLen37 =\
    \ numsLen / 37\n        val numsLen38 = numsLen / 38\n        val numsLen39 =\
    \ numsLen / 39\n        val numsLen40 = nums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7n4zdh2n.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3lla9mav.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3lla9mav.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3lla9mav.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3lla9mav.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3lla9mav.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m ="
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\").map(_.toInt)\n        val primes = nums.filter(x => x % 2 == 0 && x != 0)\n\
    \        val primesCount = primes.length\n        val primesSum = primes.sum\n\
    \        val primesSum2 = primesSum * primesSum\n        val primesSum3 = primesSum2\
    \ * primesSum\n        val primesSum4 = primesSum3 * primesSum\n        val primesSum5\
    \ = primesSum4 * primesSum\n        val primesSum6 = primesSum5 * primesSum\n\
    \        val primesSum7 = primesSum6 * primesSum\n        val primesSum8 = primesSum7\
    \ * primesSum\n        val primesSum9 = primesSum8 * primesSum\n        val primesSum10\
    \ = primesSum9 * primesSum\n        val primesSum11 = primesSum10 * primesSum\n\
    \        val primesSum12 = primesSum11 * primesSum\n        val primesSum13 =\
    \ primesSum12 * primesSum\n        val primesSum14 = primesSum13 * primesSum\n\
    \        val primesSum15 = primesSum14 * primesSum\n        val primesSum16 =\
    \ primesSum15 * primesSum\n        val primesSum17 = primesSum16 * primesSum\n\
    \        val primesSum18 = primesSum17 * primesSum\n        val primesSum19 =\
    \ primesSum18 * primesSum\n        val primesSum20 = primesSum19 * primesSum\n\
    \        val primesSum21 = primesSum20 * primesSum\n        val primesSum22 =\
    \ primesSum21 * primesSum\n        val primesSum23 = primesSum22 * primesSum\n\
    \        val primesSum24 = primesSum23 * primesSum\n        val primesSum25 =\
    \ primesSum24 * primesSum\n        val primesSum26 = primesSum25 * primesSum\n\
    \        val primesSum27 = primesSum26 * primesSum\n        val primesSum28 =\
    \ primesSum27 * primesSum\n        val primesSum29 = primesSum28 * primesSum\n\
    \        val primesSum30 = primesSum29 * primesSum\n        val primesSum31 =\
    \ primesSum30 * primes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5bm6q7_s.scala:59:38 -----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mprimesSum31\e[0m = primesSum30\
    \ * primes\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((primes : Array[Int]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bm6q7_s.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\")\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbbyg_zyp.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\")\n        val numsLen = nums.length\n        val numsLen2 = numsLen * numsLen\n\
    \        val numsLen3 = numsLen2 * numsLen\n        val numsLen4 = numsLen3 *\
    \ numsLen\n        val numsLen5 = numsLen4 * numsLen\n        val numsLen6 = numsLen5\
    \ * numsLen\n        val numsLen7 = numsLen6 * numsLen\n        val numsLen8 =\
    \ numsLen7 * numsLen\n        val numsLen9 = numsLen8 * numsLen\n        val numsLen10\
    \ = numsLen9 * numsLen\n        val numsLen11 = numsLen10 * numsLen\n        val\
    \ numsLen12 = numsLen11 * numsLen\n        val numsLen13 = numsLen12 * numsLen\n\
    \        val numsLen14 = numsLen13 * numsLen\n        val numsLen15 = numsLen14\
    \ * numsLen\n        val numsLen16 = numsLen15 * numsLen\n        val numsLen17\
    \ = numsLen16 * numsLen\n        val numsLen18 = numsLen17 * numsLen\n       \
    \ val numsLen19 = numsLen18 * numsLen\n        val numsLen20 = numsLen19 * numsLen\n\
    \        val numsLen21 = numsLen20 * numsLen\n        val numsLen22 = numsLen21\
    \ * numsLen\n        val numsLen23 = numsLen22 * numsLen\n        val numsLen24\
    \ = numsLen23 * numsLen\n        val numsLen25 = numsLen24 * numsLen\n       \
    \ val numsLen26 = numsLen25 * numsLen\n        val numsLen27 = numsLen26 * numsLen\n\
    \        val numsLen28 = numsLen27 * numsLen\n        val numsLen29 = numsLen28\
    \ * numsLen\n        val numsLen30 = numsLen29 * numsLen\n        val numsLen31\
    \ = numsLen30 * numsLen\n        val numsLen32 = numsLen31 * numsLen\n       \
    \ val numsLen33 = numsLen32 * nums\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpus0agko2.scala:59:34 -----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mnumsLen33\e[0m = numsLen32\
    \ * nums\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m*\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((nums : Array[String]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpus0agko2.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbb8clmtr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbb8clmtr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mh"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexLen = hex.length\n        val hexKey = hex.foldLeft(0)((sum, digit)\
    \ => {\n            val hexDigit = digit % 16\n            val hexDigitCount =\
    \ hexDigit / 16\n            val hexDigitPrime = hexDigit % 16\n            val\
    \ hexDigitPrimeCount = hexDigitPrime / 16\n            val hexDigitPrimePrime\
    \ = hexDigitPrime % 16\n            val hexDigitPrimePrimeCount = hexDigitPrimePrime\
    \ / 16\n            val hexDigitPrimePrimePrime = hexDigitPrimePrime % 16\n  \
    \          val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrime / 16\n \
    \           val hexDigitPrimePrimePrimePrime = hexDigitPrimePrimePrime % 16\n\
    \            val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrime\
    \ / 16\n            val hexDigitPrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrime\
    \ % 16\n            val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrime\
    \ / 16\n            val hexDigitPrimePrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimePrime\
    \ % 16\n            val hexDigitPrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrime\
    \ / 16\n            val hexDigitPrimePrimePrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimePrimePrime\
    \ % 16\n            val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimePrimePrime\
    \ / 16\n            val hexDigitPrimePrimePrimePrimePrimePrimePrimePrime = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ % 16\n            val hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime / 16\n            val\
    \ hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5i2omitl.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5i2omitl.scala:49:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp5i2omitl.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5i2omitl.scala:45:67\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m            \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrime\e[0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ % \e[31m16\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5i2omitl.scala:46:77\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m            \e[33mval\e[0m\
    \ \e[36mhexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\e[0m = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ / \e[31m16\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: hexDigitPrimePrimePrimePrimePrimePrimePrimePrimePrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5i2omitl.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Int\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength =\
    \ hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n      \
    \  val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyList.length\n        val hexKeyListLength\
    \ = hexKeyList.length\n        val hexKeyListLength = hexKeyList.length\n    \
    \    val hexKeyListLength = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpalqtsbpn.scala:72:30 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpalqtsbpn.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeyListLength\e[0m = hexKeyList.length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexKeyListLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexKeyListLength\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpalqtsbpn.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m = hexKeyList.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpalqtsbpn.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m = hexKeyList.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpalqtsbpn.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m = hexKeyList.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mhexKeyListLe"
  stdout: ''
  timestamp: 1660009598
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\").map(_.toInt).toList\n        val primes = nums.filter(num => num > 1).map(num\
    \ => num * num).toSet\n        val hexDigits = nums.filter(num => num % 2 == 0).map(num\
    \ => num * 16).toSet\n        val hexKeys = hexDigits.map(hexDigit => hexDigit\
    \ + primes.count(hexDigit => hexDigit == hexDigit))\n        hexKeys.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"AB\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp11wmt3lc.scala:26)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.hexKey(tmp11wmt3lc.scala:26)\n\
    \tat Problem$.main(tmp11wmt3lc.scala:33)\n\tat Problem.main(tmp11wmt3lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    W+\")\n        val hexs = nums.map(_.toInt)\n        val primes = hexs.filter(x\
    \ => isPrime(x)).map(x => (x, hexs.count(_ == x)))\n        primes.map(x => (x._1,\
    \ x._2.toLong)).maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq29vpvqv.scala:28:38 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = hexs.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => (x, hexs.count(_ == x)))\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: isPrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(1l) {\n            (acc, elem) => acc * elem\
    \ % 10\n        }\n        hexKey\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17p8idwk.scala:33)\n\tat Problem.main(tmp17p8idwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val hexLength\
    \ = hex.length\n        val hexKeyLength = hexKey.size\n        val hexKeySet\
    \ = hexKey.toSet\n        val hexKeySetLength = hexKeySet.size\n        val hexKeySetLength\
    \ = hexKeySetLength\n        val hexKeySetLength2 = hexKeySetLength * hexKeyLength\n\
    \        val hexKeySetLength3 = hexKeySetLength2 * hexKeyLength\n        val hexKeySetLength4\
    \ = hexKeySetLength3 * hexKeyLength\n        val hexKeySetLength5 = hexKeySetLength4\
    \ * hexKeyLength\n        val hexKeySetLength6 = hexKeySetLength5 * hexKeyLength\n\
    \        val hexKeySetLength7 = hexKeySetLength6 * hexKeyLength\n        val hexKeySetLength8\
    \ = hexKeySetLength7 * hexKeyLength\n        val hexKeySetLength9 = hexKeySetLength8\
    \ * hexKeyLength\n        val hexKeySetLength10 = hexKeySetLength9 * hexKeyLength\n\
    \        val hexKeySetLength11 = hexKeySetLength10 * hexKeyLength\n        val\
    \ hexKeySetLength12 = hexKeySetLength11 * hexKeyLength\n        val hexKeySetLength13\
    \ = hexKeySetLength12 * hexKeyLength\n        val hexKeySetLength14 = hexKeySetLength13\
    \ * hexKeyLength\n        val hexKeySetLength15 = hexKeySetLength14 * hexKeyLength\n\
    \        val hexKeySetLength16 = hexKeySetLength15 * hexKeyLength\n        val\
    \ hexKeySetLength17 = hexKeySetLength16 * hexKeyLength\n        val hexKeySetLength18\
    \ = hexKeySetLength17 * hexKeyLength\n        val hexKeySetLength19 = hexKeySetLength18\
    \ * hexKeyLength\n        val hexKeySetLength20 = hexKeySetLength19 * hexKeyLength\n\
    \        val hexKeySetLength21 = hexKeySetLength20 * hexKeyLength\n        val\
    \ hexKeySetLength22 = hexKeySetLength21 * hexKeyLength\n        val hexKeySetLength23\
    \ = hexKeySetLength22 * hexKeyLength\n        val hexKeySetLength24 = hex\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmperog4qo7.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeySetLength\e[0m = hexKeySetLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeySetLength is already defined as \e[33mvalue\e[0m \e[35mhexKeySetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmperog4qo7.scala:27:25 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmperog4qo7.scala:28:21\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmperog4qo7.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hexLength.toLong\n \
    \       val hexKeyList = hexKey.toList\n        val hexKeyListLength = hexKeyList.length\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmeofllgk.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmeofllgk.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmeofllgk.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmeofllgk.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmeofllgk.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e["
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexLength = hex.length\n        val hexKey = hex.map(x => math.pow(16,\
    \ hexLength - x - 1))\n        val hexKeySum = hexKey.sum\n        val hexKeySumInt\
    \ = math.pow(16, hexLength - hexKeySum)\n        val hexKeySumIntInt = math.pow(16,\
    \ hexLength - hexKeySumInt)\n        val hexKeySumIntInt = math.pow(16, hexLength\
    \ - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n\
    \        val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n   \
    \     val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n      \
    \  val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n        val\
    \ hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n        val hexKeySumIntInt\
    \ = math.pow(16, hexLength - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16,\
    \ hexLength - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16, hexLength\
    \ - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n\
    \        val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n   \
    \     val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n      \
    \  val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n        val\
    \ hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n        val hexKeySumIntInt\
    \ = math.pow(16, hexLength - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16,\
    \ hexLength - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16, hexLength\
    \ - hexKeySumIntInt)\n        val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n\
    \        val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n   \
    \     val hexKeySumIntInt = math.pow(16, hexLength - hexKeySumIntInt)\n      \
    \  val hexKeySum\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw12kbez1.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw12kbez1.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeySumIntInt\e[0m = math.pow(\e[31m16\e[0m, hexLength - hexKeySumIntInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySumIntInt is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeySumIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw12kbez1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeySumIntInt\e[0m = math.pow(\e\
    [31m16\e[0m, hexLength - hexKeySumIntInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySumIntInt is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeySumIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw12kbez1.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeySumIntInt\e[0m = math.pow(\e\
    [31m16\e[0m, hexLength - hexKeySumIntInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeySumIntInt is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeySumIntInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw12kbez1.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mhexKeySumIntInt\e[0m = math.pow(\e\
    [31m16\e[0m, hexLength - hexKeySumIntInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        val hexKey2 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKey3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey4 = new mutable.HashMap[Int, Int]()\n        val hexKey5\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey7 = new mutable.HashMap[Int, Int]()\n        val hexKey8\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKey9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey11 = new mutable.HashMap[Int, Int]()\n        val hexKey12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey13 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey14 = new mutable.HashMap[Int, Int]()\n        val hexKey15 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey16 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey17 = new mutable.HashMap[Int, Int]()\n        val hexKey18 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey19 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey20 = new mutable.HashMap[Int, Int]()\n        val hexKey21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey23 = new mutable.HashMap[Int, Int]()\n        val hexKey24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey25 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey26 = new mutable.HashMap[Int, Int]()\n        val hexKey27 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey28 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey29 = new mutable.HashMap[Int, Int]()\n        val hexKey30 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKey31 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKey32 = new \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp186ybvmf.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp186ybvmf.scala:27:25 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:28:26\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:29:26 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKey3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:30:26\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp186ybvmf.scala:31:26 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[3"
  stdout: ''
  timestamp: 1659799358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\").map(_.toInt)\n        val primes = nums.filter(x => x > 1).map(x => math.gcd(x,\
    \ x))\n        val primesCount = primes.count(x => x > 1)\n        val primesSum\
    \ = primes.sum\n        val primesSum2 = primes.sum * primes.sum\n        val\
    \ primesSum3 = primes.sum * primes.sum * primes.sum\n        val primesSum4 =\
    \ primes.sum * primes.sum * primes.sum * primes.sum\n        val primesSum5 =\
    \ primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\n        val\
    \ primesSum6 = primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum\n        val primesSum7 = primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum\n        val primesSum8\
    \ = primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum\n        val primesSum9 = primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum\n        val primesSum10\
    \ = primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum\n        val primesSum11 = primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum\
    \ * primes.sum * primes.sum * primes.sum * primes.sum * primes.sum * prime\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr9xhfu9l.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = nums.filter(\e\
    [36mx\e[0m => x > \e[31m1\e[0m).map(\e[36mx\e[0m => math.gcd(x, x))\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value gcd is not a\
    \ member of math\n\e[31m\e[31m-- Error: /tmp/tmpr9xhfu9l.scala:27:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = nums.filter(\e\
    [36mx\e[0m => x > \e[31m1\e[0m).map(\e[36mx\e[0m => math.gcd(x, x))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr9xhfu9l.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi1c3qwx.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqi1c3qwx.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey.map(x => x % 16)\n        val hexKey4\
    \ = hexKey.map(x => x % 32)\n        val hexKey5 = hexKey.map(x => x % 64)\n \
    \       val hexKey6 = hexKey.map(x => x % 128)\n        val hexKey7 = hexKey.map(x\
    \ => x % 256)\n        val hexKey8 = hexKey.map(x => x % 512)\n        val hexKey9\
    \ = hexKey.map(x => x % 1024)\n        val hexKey10 = hexKey.map(x => x % 2048)\n\
    \        val hexKey11 = hexKey.map(x => x % 4096)\n        val hexKey12 = hexKey.map(x\
    \ => x % 8192)\n        val hexKey13 = hexKey.map(x => x % 16384)\n        val\
    \ hexKey14 = hexKey.map(x => x % 32768)\n        val hexKey15 = hexKey.map(x =>\
    \ x % 65536)\n        val hexKey16 = hexKey.map(x => x % 131072)\n        val\
    \ hexKey17 = hexKey.map(x => x % 262144)\n        val hexKey18 = hexKey.map(x\
    \ => x % 524288)\n        val hexKey19 = hexKey.map(x => x % 1048576)\n      \
    \  val hexKey20 = hexKey.map(x => x % 2097152)\n        val hexKey21 = hexKey.map(x\
    \ => x % 4194304)\n        val hexKey22 = hexKey.map(x => x % 8388608)\n     \
    \   val hexKey23 = hexKey.map(x => x % 16777216)\n        val hexKey24 = hexKey.map(x\
    \ => x % 33554432)\n        val hexKey25 = hexKey.map(x => x % 67108864)\n   \
    \     val hexKey26 = hexKey.map(x => x % 134217728)\n        val hexKey27 = hexKey.map(x\
    \ => x % 268435456)\n        val hexKey28 = hexKey.map(x => x % 536870912)\n \
    \       val hexKey29 = hexKey.map(x => x % 1073741824)\n        val hexKey30 =\
    \ hexKey.map(x => x % 2147483648)\n        val hexKey31 = hexKey.map(x \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqpynqll.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpaqpynqll.scala:56:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m56 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhexKey30\e[0m = hexKey.map(\e[36mx\e[0m => x % \e[31m2147483648\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           number too large\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaqpynqll.scala:57:34 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mhexKey31\e[0m = hexKey.map(x\
    \ \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e\
    [0m                                  Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaqpynqll.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hex.foldLeft(0l){ (sum,\
    \ digit) =>\n            val hexDigit = digit.toLong\n            val hexDigitCount\
    \ = hexDigit / 16\n            val hexDigitRemainder = hexDigit % 16\n       \
    \     val hexDigitSum = sum + hexDigitCount\n            val hexDigitRemainderSum\
    \ = hexDigitSum + hexDigitRemainder\n            val hexDigitSumHex = hexDigitSum.toHexString\n\
    \            val hexDigitRemainderSumHex = hexDigitRemainderSum.toHexString\n\
    \            val hexDigitSumHexDigit = hexDigitSumHex.charAt(0)\n            val\
    \ hexDigitRemainderSumHexDigit = hexDigitRemainderSumHex.charAt(0)\n         \
    \   val hexDigitSumHexDigitCount = hexDigitSumHexDigit / 16\n            val hexDigitSumHexDigitRemainder\
    \ = hexDigitSumHexDigit % 16\n            val hexDigitSumHexDigitRemainderSum\
    \ = hexDigitSumHexDigitRemainder + hexDigitSumHexDigitCount\n            val hexDigitSumHexDigitRemainderSumHex\
    \ = hexDigitSumHexDigitRemainderSum.toHexString\n            val hexDigitSumHexDigitRemainderSumHexDigit\
    \ = hexDigitSumHexDigitRemainderSumHex.charAt(0)\n            val hexDigitSumHexDigitRemainderSumHexDigitCount\
    \ = hexDigitSumHexDigitRemainderSumHexDigit / 16\n            val hexDigitSumHexDigitRemainderSumHexDigitRemainder\
    \ = hexDigitSumHexDigitRemainderSumHexDigit\n            val hexDigitSumHexDigitRemainderSumHexDigitRemainderSum\
    \ = hexDigitSumHexDigitRemainderSumHexDigitRemainder + hexDigitSumHexDigitRemainderSumHexDigitCount\n\
    \            val hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHex = hexDigitSumHexDigitRemainderSumHexDigitRemainderSum.toHexString\n\
    \            val hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHexDigit =\
    \ hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHex.charAt(0)\n         \
    \   val hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHexDigitCount = hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHexDigit\n\
    \            val hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHexDigitRemainder\
    \ = hexDigitSumHexDigitRemainderSumHexDigitRemainderSumHexDigit\n            val\
    \ hexDigit\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp__fwnm5n.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp__fwnm5n.scala:62:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp__fwnm5n.scala:53:11 -----------------------------\e[0m\e[0m\n\
    \e[31m53 |\e[0m    assert(hexKey((\e[31m\"AB\"\e[0m)) == (\e[31m1l\e[0m));\n\e\
    [31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvalue\e\
    [0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp__fwnm5n.scala:54:11 -----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    assert(hexKey((\e[31m\"1077E\"\e[0m)) == (\e[31m2l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp__fwnm5n.scala:55:11 -----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    assert(hexKey((\e[31m\"ABED1A33\"\e[0m)) == (\e[31m4l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp__fwnm5n.scala:56:11 -----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    assert(hexKey((\e[31m\"2020\"\e[0m)) == (\e[31m2l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp__fwnm5n.scala:57:11 -----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    assert(hexKey((\e[31m\"123456789ABCDEF0\"\e[0m))\
    \ == (\e[31m6l"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\"\
    ).toList\n        val hex = nums.map(_.toInt)\n        val hexDigits = hex.map(x\
    \ => x % 16).distinct\n        val hexDigitCount = hexDigits.size\n        val\
    \ hexDigitPrimes = hexDigits.filter(x => x % 2 == 0).size\n        val hexDigitPrimeCount\
    \ = hexDigitPrimes.size\n        val hexDigitPrimePrimes = hexDigitPrimes.filter(x\
    \ => x % 3 == 0).size\n        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimes = hexDigitPrimePrimes.filter(x => x % 5\
    \ == 0).size\n        val hexDigitPrimePrimePrimeCount = hexDigitPrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimes = hexDigitPrimePrimePrimes.filter(x\
    \ => x % 7 == 0).size\n        val hexDigitPrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimes.filter(x\
    \ => x % 11 == 0).size\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimes.filter(x\
    \ => x % 13 == 0).size\n        val hexDigitPrimePrimePrimePrimePrimeCount = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimes = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(x\
    \ => x % 17 == 0).size\n        val hexDigitPrimePrimePrimePrimePrimePrimeCount\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimes.size\n        val hexDigitPrimePrimePrimePrimePrimePrimePrimes\
    \ = hexDigitPrimePrimePrimePrimePrimePrimePrimePrimes.filter(x => x % 19 == 0).size\n\
    \        val hexDigitPrimePrimePrimePrimePrimePrimePrimeCount = hexDigitPri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnbkgfhq.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimeCount\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimes.size\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimeCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimeCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcnbkgfhq.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimePrimePrimePrimePrimes\e\
    [0m = hexDigitPrimePrimePrimePrimePrimePrimePrimes.filter(\e[36mx\e[0m => x %\
    \ \e[31m17\e[0m == \e[31m0\e[0m).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitPrimePrimePrimePrimePrimePrimes is already defined\
    \ as \e[33mvalue\e[0m \e[35mhexDigitPrimePrimePrimePrimePrimePrimes\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcnbkgfhq.scala:31:48 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitPrimeCount\e[0m = hexDigitPrimes.size\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value size is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcnbkgfhq.scala:32:49 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimePrimes\e[0m\
    \ = hexDigitPrimes.filter(\e[36mx\e[0m => x % \e[31m3\e[0m == \e[31m0\e[0m).size\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexArray = hex.toArray\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2yqr43s6.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2yqr43s6.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2yqr43s6.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2yqr43s6.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2yqr43s6.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e"
  stdout: ''
  timestamp: 1660009600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbn0_t94g.scala:32)\n\tat Problem.main(tmpbn0_t94g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\").map(_.toInt)\n        val primes = nums.filter(x => isPrime(x))\n      \
    \  primes.length\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwxxu5gkh.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = nums.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      Not\
    \ found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashSet[Int]()\n        hex.foreach(x => {\n\
    \            val hexDigit = hex(x).asInstanceOf[Int]\n            hexKey.add(hexDigit)\n\
    \        })\n        hexKey.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_udmdgm.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).filter(_ > 0).count(_ == 2)\n     \
    \   hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_x0oldq.scala:32)\n\tat Problem.main(tmpv_x0oldq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hexLength.toLong\n \
    \       val hexKeyArray = hexKey.toArray\n        val hexKeyArrayLength = hexKeyArray.length\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\").map(_.toInt)\n        val primes = nums.filter(x => x % 2 == 0).filter(x\
    \ => x % 3 == 0).filter(x => x % 5 == 0).filter(x => x % 7 == 0).filter(x => x\
    \ % 11 == 0).filter(x => x % 13 == 0).filter(x => x % 17 == 0).filter(x => x %\
    \ 19 == 0).filter(x => x % 23 == 0).filter(x => x % 29 == 0).filter(x => x % 31\
    \ == 0).filter(x => x % 37 == 0).filter(x => x % 41 == 0).filter(x => x % 43 ==\
    \ 0).filter(x => x % 47 == 0).filter(x => x % 53 == 0).filter(x => x % 59 == 0).filter(x\
    \ => x % 61 == 0).filter(x => x % 67 == 0).filter(x => x % 71 == 0).filter(x =>\
    \ x % 73 == 0).filter(x => x % 79 == 0).filter(x => x % 83 == 0).filter(x => x\
    \ % 89 == 0).filter(x => x % 97 == 0).filter(x => x % 101 == 0).filter(x => x\
    \ % 107 == 0).filter(x => x % 113 == 0).filter(x => x % 119 == 0).filter(x =>\
    \ x % 127 == 0).filter(x => x % 131 == 0).filter(x => x % 137 == 0).filter(x =>\
    \ x % 143 == 0).filter(x => x % 149 == 0).filter(x => x % 153 == 0).filter(x =>\
    \ x % 157 == 0).filter(x => x % 163 == 0).filter(x => x % 169 == 0).filter(x =>\
    \ x % 173 == 0).filter(x => x % 177 == 0).filter(x => x % 183 == 0).filter(x =>\
    \ x % 189 == 0).filter(x => x % 193 == 0).filter(x => x % 197 == 0).filter(x =>\
    \ x % 203 == 0).filter(x => x % 209 == 0).filter(x => x % 213 == 0).filter(x =>\
    \ x % 217 == 0).filter(x => x % 223 == 0).filter(x => x % 227 == 0).filter(x =>\
    \ x % 233 == 0).filter(x => x % 239 == 0).filter(x => x % 243 == 0).filter(x =>\
    \ x % 247 == 0).filter(x => x % 251 == 0).filter(x => x % 257 == 0).filter(x =>\
    \ x % 263 == 0).filter(x => x % 269 == 0).filter(x => x % 273 == 0).filter(x =>\
    \ x % 277 == 0).filter(x => x % 283 == 0).filter(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp94a7_45o.scala:27:1594 -------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = nums.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m3\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m5\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m7\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m11\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m13\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m17\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m19\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m23\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m29\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m31\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m37\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m43\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m47\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m53\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m59\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m61\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m67\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m71\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m73\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m79\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m83\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m89\e[0m == \e[31m0\e\
    [0m).filter(\e[36mx\e[0m => x % \e[31m97\e[0m == \e[31m0\e[0m).filter(\e[36mx\e\
    [0m => x % \e[31m101\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m107\e\
    [0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m113\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m119\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m127\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m131\e[0m == \e\
    [31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m137\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx\e[0m => x % \e[31m143\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e\
    [31m149\e[0m == \e[31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m153\e[0m == \e\
    [31m0\e[0m).filter(\e[36mx\e[0m => x % \e[31m157\e[0m == \e[31m0\e[0m).filter(\e\
    [36mx"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.toCharArray.map(_.toInt)\n\
    \        val numsLength = nums.length\n        val numsLength = numsLength.toLong\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesLength\
    \ = primes.length\n        val primesLength = primesLength.toLong\n        val\
    \ primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        val primesLength = primesLength.toLong\n        val primesLength = primesLength.toLong\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp5v6uyy_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsLength\e[0m = numsLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsLength is already defined as \e[33mvalue\e[0m \e[35mnumsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp5v6uyy_.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mprimesLength\e[0m = primesLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mprimesLength is already defined as \e[33mvalue\e[0m \e[35mprimesLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp5v6uyy_.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mprimesLength\e[0m = primesLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mprimesLength is already defined as \e[33mvalue\e[0m \e[35mprimesLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp5v6uyy_.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mprimesLength\e[0m = primesLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mprimesLength is already defined as \e[33mvalue\e[0m \e[35mprimesLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp5v6uyy_.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mprimesLength\e[0m = primesLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mprime"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLen = hexKey.length\n        var i = 0\n        while\
    \ (i < hexLen) {\n            val hexDigit = hex(i)\n            val hexKeyDigit\
    \ = hexKey.getOrElse(hexDigit, 0)\n            hexKey.put(hexDigit, hexKeyDigit\
    \ + 1)\n            i += 1\n        }\n        val hexKeyLen = hexKey.length\n\
    \        var j = 0\n        while (j < hexKeyLen) {\n            val hexKeyDigit\
    \ = hexKey.get(j)\n            if (hexKeyDigit == 2) {\n                hexKey.remove(j)\n\
    \                hexKeyLen -= 1\n            }\n            j += 1\n        }\n\
    \        hexKey.toSeq.sum\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaeijg0ob.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLen\e[0m = hexKey.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mhexKeyLen is already defined as \e[33mvalue\e[0m \e[35mhexKeyLen\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaeijg0ob.scala:28:25 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.count\n        val hexDigits = hexCount / 2\n    \
    \    val hexDigitPrimes = hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits * hexDigits\
    \ * hexDigits * hexDigits * hexDig\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmped89kzhn.scala:28:33 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hexCount\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue / is not a member of (Char => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmped89kzhn.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hexLength.toLong\n \
    \       val hexKeyArray = hexKey.toArray\n        val hexKeyArrayLength = hexKeyArray.length\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength.toLong\n\
    \        val hexKeyArrayLength = hexKeyArrayLength.toLong\n        val hexKeyArrayLength\
    \ = hexKeyArrayLength.toLong\n        val hexKeyArrayLength = hexKeyArrayLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyArrayLength\e[0m =\
    \ hexKeyArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwfkig6c5.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.filter(_ >= '0' && _ <='9').length\n        val hexKeyPrime\
    \ = hex.filter(_ >= '0' && _ <='9' && _ != 'A' && _ != 'B' && _ != 'C' && _ !=\
    \ 'D' && _ != 'E' && _ != 'F').length\n        hexKey + (hexKeyPrime * 2)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpq5z1294p.scala:27:32 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = hex.filter(_\
    \ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m).length\n\e[31m\e[31m   |\e[0m     \
    \                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpq5z1294p.scala:28:37 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexKeyPrime\e[0m = hex.filter(_\
    \ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m && _ != \e[31m'A'\e[0m && _ != \e[31m'B'\e\
    [0m && _ != \e[31m'C'\e[0m && _ != \e[31m'D'\e[0m && _ != \e[31m'E'\e[0m && _\
    \ != \e[31m'F'\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => math.pow(16, x))\n        val hexKeySum = hexKey.sum\n\
    \        val hexKeySumInt = hexKeySum.toInt\n        val hexKeySumIntInt = hexKeySumInt.toInt\n\
    \        val hexKeySumIntIntInt = hexKeySumIntInt.toInt\n        val hexKeySumIntIntIntInt\
    \ = hexKeySumIntIntInt.toInt\n        val hexKeySumIntIntIntIntInt = hexKeySumIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntInt = hexKeySumIntIntIntIntInt.toInt\n  \
    \      val hexKeySumIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt =\
    \ hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n       \
    \ val hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt =\
    \ hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n    \
    \    val hexKeySumIntIntIntIntInt\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdeyhnct2.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdeyhnct2.scala:36:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeySumIntIntIntIntIntIntIntInt\e[0m = hexKeySumIntIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m            Recursive \e[33mvalue\e[0m \e[35mhexKeySumIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdeyhnct2.scala:37:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeySumIntIntIntIntIntIntIntIntIntInt\e[0m = hexKeySumIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m      Recursive \e[33mvalue\e[0m \e[35mhexKeySumIntIntIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdeyhnct2.scala:38:60\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeySumIntIntIntIntIntIntIntIntIntIntIntInt\e[0m = hexKeySumIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mhexKeySumIntIntIntIntIntIntIntIntIntIntIntInt\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdeyhnct2.scala:39:66\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKeySumIntIntIntIntIntIntIntIntIntIntIntIntIntInt\e[0m = hexKeySumIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hexCount / 2\n   \
    \     val hexDigitCount = hexDigits.length\n        val hexDigitMap = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap2 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap3 = mutable.HashMap[Int, Int]()\n        val hexDigitMap4 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap5 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap6 = mutable.HashMap[Int, Int]()\n        val hexDigitMap7 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap8 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap9 = mutable.HashMap[Int, Int]()\n        val hexDigitMap10 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap11 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap12 = mutable.HashMap[Int, Int]()\n        val hexDigitMap13 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap14 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap15 = mutable.HashMap[Int, Int]()\n        val hexDigitMap16 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap17 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap18 = mutable.HashMap[Int, Int]()\n        val hexDigitMap19 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap20 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap21 = mutable.HashMap[Int, Int]()\n        val hexDigitMap22 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap23 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap24 = mutable.HashMap[Int, Int]()\n        val hexDigitMap25 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap26 = mutable.HashMap[Int, Int]()\n        val\
    \ hexDigitMap27 = mutable.HashMap[Int, Int]()\n        val hexDigitMap28 = mutable.HashMap[Int,\
    \ Int]()\n        val hexDigitMap29 = mutable.HashMap[Int, Int\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqjgj98sj.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqjgj98sj.scala:29:38\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitCount\e[0m = hexDigits.length\n\e[31m\e[31m   |\e[0m             \
    \               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \     value length is not a member of Int\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqjgj98sj.scala:30:26 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mhexDigitMap\e[0m = mutable.HashMap[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqjgj98sj.scala:31:27 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap2\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqjgj98sj.scala:32:27\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mhexDigitMap3\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqjgj98sj.scala:33:27 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexDigitMap4\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hex"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.length\n        val primesMap = new mutable.HashMap[Int,\
    \ Int]()\n        val primesMapCount = primesMap.length\n        val primesMapKey\
    \ = new mutable.HashMap[Int, Int]()\n        val primesMapKeyCount = primesMapKey.length\n\
    \        val primesMapValue = new mutable.HashMap[Int, Int]()\n        val primesMapValueCount\
    \ = primesMapValue.length\n        val primesMapValueKey = new mutable.HashMap[Int,\
    \ Int]()\n        val primesMapValueKeyCount = primesMapValueKey.length\n    \
    \    val primesMapValueValue = new mutable.HashMap[Int, Int]()\n        val primesMapValueValueCount\
    \ = primesMapValueValue.length\n        val primesMapValueValueKey = new mutable.HashMap[Int,\
    \ Int]()\n        val primesMapValueValueKeyCount = primesMapValueValueKey.length\n\
    \        val primesMapValueValueValue = new mutable.HashMap[Int, Int]()\n    \
    \    val primesMapValueValueValueCount = primesMapValueValueValue.length\n   \
    \     val primesMapValueValueValueKey = new mutable.HashMap[Int, Int]()\n    \
    \    val primesMapValueValueValueKeyCount = primesMapValueValueValueKey.length\n\
    \        val primesMapValueValueValueValue = new mutable.HashMap[Int, Int]()\n\
    \        val primesMapValueValueValueValueCount = primesMapValueValueValueValue.length\n\
    \        val primesMapValueValueValueValueKey = new mutable.HashMap[Int, Int]()\n\
    \        val primesMapValueValueValueValueKeyCount = primesMapValueValueValueValueKey.length\n\
    \        val primesMapValueValueValueValueValue = new mutable.HashMap[Int, Int]()\n\
    \        val primesMapValueValueValueValueCount = primesMapValueValueValueValueValue.length\n\
    \        val primesMapValueValueValueValueKey = new mutable.HashMap[Int, Int]()\n\
    \        val primesMapValueValueValueValueKeyCount = primesMapValueValueValueValueKey.length\n\
    \        val primes\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8p5wza7y.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8p5wza7y.scala:52:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesMapValueValueValueValueCount\e[0m = primesMapValueValueValueValueValue.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesMapValueValueValueValueCount is already defined as \e\
    [33mvalue\e[0m \e[35mprimesMapValueValueValueValueCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8p5wza7y.scala:53:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesMapValueValueValueValueKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesMapValueValueValueValueKey is already defined as \e\
    [33mvalue\e[0m \e[35mprimesMapValueValueValueValueKey\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8p5wza7y.scala:54:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesMapValueValueValueValueKeyCount\e[0m = primesMapValueValueValueValueKey.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesMapValueValueValueValueKeyCount is already defined as\
    \ \e[33mvalue\e[0m \e[35mprimesMapValueValueValueValueKeyCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8p5wza7y.scala:28:25\
    \ ------------------------\e[0m\e[0m\n\e[31m28 "
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxq6b5hrr.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq6b5hrr.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq6b5hrr.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq6b5hrr.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq6b5hrr.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxq6b5hrr.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).asInstanceOf[Int])\n        val hexKeyMap\
    \ = hexKey.toMap\n        val hexKeyMap2 = hexKeyMap.filter(_._2 % 2 == 0)\n \
    \       val hexKeyMap3 = hexKeyMap2.filter(_._2 % 3 == 0)\n        val hexKeyMap4\
    \ = hexKeyMap3.filter(_._2 % 5 == 0)\n        val hexKeyMap5 = hexKeyMap4.filter(_._2\
    \ % 7 == 0)\n        val hexKeyMap6 = hexKeyMap5.filter(_._2 % 11 == 0)\n    \
    \    val hexKeyMap7 = hexKeyMap6.filter(_._2 % 13 == 0)\n        val hexKeyMap8\
    \ = hexKeyMap7.filter(_._2 % 17 == 0)\n        val hexKeyMap9 = hexKeyMap8.filter(_._2\
    \ % 19 == 0)\n        val hexKeyMap10 = hexKeyMap9.filter(_._2 % 23 == 0)\n  \
    \      val hexKeyMap11 = hexKeyMap10.filter(_._2 % 29 == 0)\n        val hexKeyMap12\
    \ = hexKeyMap11.filter(_._2 % 31 == 0)\n        val hexKeyMap13 = hexKeyMap12.filter(_._2\
    \ % 37 == 0)\n        val hexKeyMap14 = hexKeyMap13.filter(_._2 % 41 == 0)\n \
    \       val hexKeyMap15 = hexKeyMap14.filter(_._2 % 43 == 0)\n        val hexKeyMap16\
    \ = hexKeyMap15.filter(_._2 % 47 == 0)\n        val hexKeyMap17 = hexKeyMap16.filter(_._2\
    \ % 51 == 0)\n        val hexKeyMap18 = hexKeyMap17.filter(_._2 % 55 == 0)\n \
    \       val hexKeyMap19 = hexKeyMap18.filter(_._2 % 59 == 0)\n        val hexKeyMap20\
    \ = hexKeyMap19.filter(_._2 % 63 == 0)\n        val hexKeyMap21 = hexKeyMap20.filter(_._2\
    \ % 67 == 0)\n        val hexKeyMap22 = hexKeyMap21.filter(_._2 % 71 == 0)\n \
    \       val hexKeyMap23 = hexKeyMap22.filter(_._2 % 75 == 0)\n        val hexKeyMap24\
    \ = hexKeyMap23.filter(_._2 % 79 == 0)\n        val hexKeyMap25 = hexKeyMap24.filter(_._2\
    \ % 83 == 0)\n        val hexKey\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3czhluec.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp3czhluec.scala:28:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhexKeyMap\e[0m = hexKey.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m                                    where:    K is a type variable\n\e\
    [31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp3czhluec.scala:54:5 ---------------------\e[0m\e[0m\n\
    \e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexMap = mutable.Map[Int, Int]()\n\
    \        val hexMap2 = mutable.Map[Int, Int]()\n        val hexMap3 = mutable.Map[Int,\
    \ Int]()\n        val hexMap4 = mutable.Map[Int, Int]()\n        val hexMap5 =\
    \ mutable.Map[Int, Int]()\n        val hexMap6 = mutable.Map[Int, Int]()\n   \
    \     val hexMap7 = mutable.Map[Int, Int]()\n        val hexMap8 = mutable.Map[Int,\
    \ Int]()\n        val hexMap9 = mutable.Map[Int, Int]()\n        val hexMap10\
    \ = mutable.Map[Int, Int]()\n        val hexMap11 = mutable.Map[Int, Int]()\n\
    \        val hexMap12 = mutable.Map[Int, Int]()\n        val hexMap13 = mutable.Map[Int,\
    \ Int]()\n        val hexMap14 = mutable.Map[Int, Int]()\n        val hexMap15\
    \ = mutable.Map[Int, Int]()\n        val hexMap16 = mutable.Map[Int, Int]()\n\
    \        val hexMap17 = mutable.Map[Int, Int]()\n        val hexMap18 = mutable.Map[Int,\
    \ Int]()\n        val hexMap19 = mutable.Map[Int, Int]()\n        val hexMap20\
    \ = mutable.Map[Int, Int]()\n        val hexMap21 = mutable.Map[Int, Int]()\n\
    \        val hexMap22 = mutable.Map[Int, Int]()\n        val hexMap23 = mutable.Map[Int,\
    \ Int]()\n        val hexMap24 = mutable.Map[Int, Int]()\n        val hexMap25\
    \ = mutable.Map[Int, Int]()\n        val hexMap26 = mutable.Map[Int, Int]()\n\
    \        val hexMap27 = mutable.Map[Int, Int]()\n        val hexMap28 = mutable.Map[Int,\
    \ Int]()\n        val hexMap29 = mutable.Map[Int, Int]()\n        val hexMap30\
    \ = mutable.Map[Int, Int]()\n        val hexMap31 = mutable.Map[Int, Int]()\n\
    \        val hexMap32 = mutable.Map[Int, Int]()\n        val hexMap33 = mutable.Map[Int,\
    \ Int]()\n        val hexMap34 = mutable.Map[Int, Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexMap2\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:30:22 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:31:22 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexMap4\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:32:22 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8di1isw.scala:33:22 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = new mutable.HashMap[Int, Int]()\n        hex.foreach(x =>\
    \ {\n            hexKey.getOrElse(x, 0)\n        })\n        hexKey.size\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7wxxuth.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).toLong)\n        val hexKeyCount =\
    \ hexKey.count(x => x > 0)\n        val hexKeySum = hexKey.sum\n        val hexKeySum2\
    \ = hexKeySum * hexKeySum\n        val hexKeySum3 = hexKeySum2 * hexKeySum\n \
    \       val hexKeySum4 = hexKeySum3 * hexKeySum\n        val hexKeySum5 = hexKeySum4\
    \ * hexKeySum\n        val hexKeySum6 = hexKeySum5 * hexKeySum\n        val hexKeySum7\
    \ = hexKeySum6 * hexKeySum\n        val hexKeySum8 = hexKeySum7 * hexKeySum\n\
    \        val hexKeySum9 = hexKeySum8 * hexKeySum\n        val hexKeySum10 = hexKeySum9\
    \ * hexKeySum\n        val hexKeySum11 = hexKeySum10 * hexKeySum\n        val\
    \ hexKeySum12 = hexKeySum11 * hexKeySum\n        val hexKeySum13 = hexKeySum12\
    \ * hexKeySum\n        val hexKeySum14 = hexKeySum13 * hexKeySum\n        val\
    \ hexKeySum15 = hexKeySum14 * hexKeySum\n        val hexKeySum16 = hexKeySum15\
    \ * hexKeySum\n        val hexKeySum17 = hexKeySum16 * hexKeySum\n        val\
    \ hexKeySum18 = hexKeySum17 * hexKeySum\n        val hexKeySum19 = hexKeySum18\
    \ * hexKeySum\n        val hexKeySum20 = hexKeySum19 * hexKeySum\n        val\
    \ hexKeySum21 = hexKeySum20 * hexKeySum\n        val hexKeySum22 = hexKeySum21\
    \ * hexKeySum\n        val hexKeySum23 = hexKeySum22 * hexKeySum\n        val\
    \ hexKeySum24 = hexKeySum23 * hexKeySum\n        val hexKeySum25 = hexKeySum24\
    \ * hexKeySum\n        val hexKeySum26 = hexKeySum25 * hexKeySum\n        val\
    \ hexKeySum27 = hexKeySum26 * hexKeySum\n        val hexKeySum28 = hexKeySum27\
    \ * hexKeySum\n        val hexKeySum29 = hexKeySum28 * hexKeySum\n        val\
    \ hexKeySum30 = hexKeySum29 * hexKeySum\n        val hexKeySum31 = hexKeySum30\
    \ * hexKeySum\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2_5gq2dn.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\")\n\
    \        val numsCount = nums.length\n        val primes = mutable.Set[Long]()\n\
    \        val primesCount = primes.length\n        val primesSum = primes.sum\n\
    \        val primesSumCount = primesSum.length\n        val primesSumCount2 =\
    \ primesSumCount/2\n        val primesSumCount3 = primesSumCount*primesSumCount2\n\
    \        val primesSumCount4 = primesSumCount3*primesSumCount\n        val primesSumCount5\
    \ = primesSumCount4*primesSumCount\n        val primesSumCount6 = primesSumCount5*primesSumCount\n\
    \        val primesSumCount7 = primesSumCount6*primesSumCount\n        val primesSumCount8\
    \ = primesSumCount7*primesSumCount\n        val primesSumCount9 = primesSumCount8*primesSumCount\n\
    \        val primesSumCount10 = primesSumCount9*primesSumCount\n        val primesSumCount11\
    \ = primesSumCount10*primesSumCount\n        val primesSumCount12 = primesSumCount11*primesSumCount\n\
    \        val primesSumCount13 = primesSumCount12*primesSumCount\n        val primesSumCount14\
    \ = primesSumCount13*primesSumCount\n        val primesSumCount15 = primesSumCount14*primesSumCount\n\
    \        val primesSumCount16 = primesSumCount15*primesSumCount\n        val primesSumCount17\
    \ = primesSumCount16*primesSumCount\n        val primesSumCount18 = primesSumCount17*primesSumCount\n\
    \        val primesSumCount19 = primesSumCount18*primesSumCount\n        val primesSumCount20\
    \ = primesSumCount19*primesSumCount\n        val primesSumCount21 = primesSumCount20*primesSumCount\n\
    \        val primesSumCount22 = primesSumCount21*primesSumCount\n        val primesSumCount23\
    \ = primesSumCount22*primesSumCount\n        val primesSumCount24 = primesSumCount23*primesSumCount\n\
    \        val primesSumCount25 = primesSumCount24*primesSumCount\n        val primesSumCount26\
    \ = primesSumCount25*primesSumCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9n3d164s.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9n3d164s.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4fc_lfc.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4fc_lfc.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1659799582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.filter(_ >= '0'\
    \ && _ <='9')\n        val hexDigitCount = hexDigits.length\n        val hexDigitPrimes\
    \ = hexDigits.filter(_ % 2 == 0)\n        val hexDigitPrimeCount = hexDigitPrimes.length\n\
    \        val hexPrimes = hexDigitPrimes.filter(_ > 1)\n        val hexPrimeCount\
    \ = hexPrimes.length\n        val hexPrimePrimes = hexPrimes.filter(_ % 3 == 0)\n\
    \        val hexPrimePrimeCount = hexPrimePrimes.length\n        val hexPrimePrimePrimes\
    \ = hexPrimePrimes.filter(_ > 1)\n        val hexPrimePrimePrimeCount = hexPrimePrimePrimes.length\n\
    \        val hexPrimePrimePrimePrimes = hexPrimePrimePrimes.filter(_ % 5 == 0)\n\
    \        val hexPrimePrimePrimePrimeCount = hexPrimePrimePrimePrimes.length\n\
    \        val hexPrimePrimePrimePrimePrimes = hexPrimePrimePrimePrimePrimes.filter(_\
    \ > 1)\n        val hexPrimePrimePrimePrimePrimeCount = hexPrimePrimePrimePrimePrimes.length\n\
    \        val hexPrimePrimePrimePrimePrimePrimes = hexPrimePrimePrimePrimePrimePrimes.filter(_\
    \ % 7 == 0)\n        val hexPrimePrimePrimePrimePrimePrimeCount = hexPrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexPrimePrimePrimePrimePrimePrimePrimes = hexPrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ > 1)\n        val hexPrimePrimePrimePrimePrimePrimePrimeCount = hexPrimePrimePrimePrimePrimePrimePrimePrimePrimes.length\n\
    \        val hexPrimePrimePrimePrimePrimePrimePrimePrimes = hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(_\
    \ % 11 == 0)\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = hexPrimePrimePrimePrimePri\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4vsbs3p_.scala:28:35 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hex.filter(_\
    \ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp4vsbs3p_.scala:40:44 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mhexPrimePrimePrimePrimePrimes\e\
    [0m = hexPrimePrimePrimePrimePrimes.filter(_ > \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                            ^\e[0m\n\e[31m   |\e[0m       \
    \         Recursive \e[33mvalue\e[0m \e[35mhexPrimePrimePrimePrimePrimes\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4vsbs3p_.scala:42:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexPrimePrimePrimePrimePrimePrimes\e[0m = hexPrimePrimePrimePrimePrimePrimes.filter(_\
    \ % \e[31m7\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                            ^\e[0m\n\e[31m   |\e[0m           Recursive \e[33mvalue\e\
    [0m \e[35mhexPrimePrimePrimePrimePrimePrimes\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4vsbs3p_.scala:46:59 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mhexPrimePrimePrimePrimePrimePrimePrimePrimes\e\
    [0m = hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes.filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Not found: hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4vsbs3p_.scala:45:58\
    \ --------------------"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = hex.map(x => x.toInt)\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toInt\n        val hexKeyLength = hexKeyLength.toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpvcacjc.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpvcacjc.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpvcacjc.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpvcacjc.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbpvcacjc.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhex"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\"\
    ).toList\n        val hex = nums.map(_.toInt)\n        val primes = hex.filter(x\
    \ => x % 2 == 0 && x != 0)\n        val primesCount = primes.count\n        val\
    \ hexCount = hex.count\n        val hexKey = (hexCount / primesCount).toLong\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0_b12ohw.scala:31:31 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = (hexCount\
    \ / primesCount).toLong\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue / is not a member of (Int => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap2 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap3 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap4 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap5 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap7 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap8 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap10 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap11 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap12 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKeyMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap15 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap16 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKeyMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap18 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap19 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap20 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKeyMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap22 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap23 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap24 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKeyMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyMap26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexKeyMap27 = new mutable.HashMap[Int, Int]()\n        val hexKeyMap28 = new\
    \ mutable.HashMap[Int, Int]()\n        val hexKeyMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5e303m9v.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5e303m9v.scala:28:25\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5e303m9v.scala:29:28 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5e303m9v.scala:30:29 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mhexKeyMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5e303m9v.scala:31:29\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKeyMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5e303m9v.scala:32:29 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyMap4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap["
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\").toList\n\
    \        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp011y37w0.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011y37w0.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011y37w0.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011y37w0.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011y37w0.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp011y37w0.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexMap = hex.groupBy(x => x % 10)\n        val primes = hexMap.filter(_._2.length\
    \ == 1).map(_._1)\n        val hexDigits = hex.filter(_ > 'A' && _ < 'F').length\n\
    \        val hexDigitPrimes = hex.filter(_ > 'A' && _ < 'F').filter(_ % 10 ==\
    \ 0).length\n        val hexDigitPrimes2 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 1).length\n        val hexDigitPrimes3 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 2).length\n        val hexDigitPrimes4 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 3).length\n        val hexDigitPrimes5 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 4).length\n        val hexDigitPrimes6 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 5).length\n        val hexDigitPrimes7 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 6).length\n        val hexDigitPrimes8 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 7).length\n        val hexDigitPrimes9 = hex.filter(_ > 'A' && _ < 'F').filter(_\
    \ % 10 == 8).length\n        val hexDigitPrimes10 = hex.filter(_ > 'A' && _ <\
    \ 'F').filter(_ % 10 == 9).length\n        val hexDigitPrimes11 = hex.filter(_\
    \ > 'A' && _ < 'F').filter(_ % 10 == 10).length\n        val hexDigitPrimes12\
    \ = hex.filter(_ > 'A' && _ < 'F').filter(_ % 10 == 11).length\n        val hexDigitPrimes13\
    \ = hex.filter(_ > 'A' && _ < 'F').filter(_ % 10 == 12).length\n        val hexDigitPrimes14\
    \ = hex.filter(_ > 'A' && _ < 'F').filter(_ % 10 == 13).length\n        val hexDigitPrimes15\
    \ = hex.filter(_ > 'A' && _ < 'F').filter(_ % 10 == 14).length\n        val hexDigitPrimes16\
    \ = hex.filter(_ > 'A' && _ < '\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzciny9w7.scala:45:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes16\e[0m =\
    \ hex.filter(_ > \e[31m'A'\e[0m && _ < '\n\e[31m\e[31m   |\e[0m              \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                    unclosed character literal\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpzciny9w7.scala:29:35 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexDigits\e[0m = hex.filter(_\
    \ > \e[31m'A'\e[0m && _ < \e[31m'F'\e[0m).length\n\e[31m\e[31m   |\e[0m      \
    \                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpzciny9w7.scala:30:40 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes\e[0m = hex.filter(_\
    \ > \e[31m'A'\e[0m && _ < \e[31m'F'\e[0m).filter(_ % \e[31m10\e[0m == \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzciny9w7.scala:31:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitPrimes2\e[0m = hex.filter(_ > \e[31m'A'\e[0m && _ < \e[31m'F'\e\
    [0m).filter(_ % \e[31m10\e[0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m \
    \                                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmpzciny9w7.scala:32:41 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitPrimes3\e[0m = hex.filter(_\
    \ > \e[31m'A'\e[0m && _ < \e[31m'F'\e[0m).filter(_ % \e[31m10\e[0m == \e[31m2\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzciny"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(1l) {\n            case (acc, hexDigit) =>\
    \ \n                val hexDigitCount = hexDigit.toInt\n                val hexDigitPrime\
    \ = hexDigitCount % 2 == 0\n                val hexDigitPrime2 = hexDigitPrime\
    \ && hexDigitCount != 1\n                val hexDigitPrime3 = hexDigitPrime2 &&\
    \ hexDigitCount != 2\n                val hexDigitPrime4 = hexDigitPrime3 && hexDigitCount\
    \ != 3\n                val hexDigitPrime5 = hexDigitPrime4 && hexDigitCount !=\
    \ 4\n                val hexDigitPrime6 = hexDigitPrime5 && hexDigitCount != 5\n\
    \                val hexDigitPrime7 = hexDigitPrime6 && hexDigitCount != 6\n \
    \               val hexDigitPrime8 = hexDigitPrime7 && hexDigitCount != 7\n  \
    \              val hexDigitPrime9 = hexDigitPrime8 && hexDigitCount != 8\n   \
    \             val hexDigitPrime10 = hexDigitPrime9 && hexDigitCount != 9\n   \
    \             val hexDigitPrime11 = hexDigitPrime10 && hexDigitCount != 10\n \
    \               val hexDigitPrime12 = hexDigitPrime11 && hexDigitCount != 11\n\
    \                val hexDigitPrime13 = hexDigitPrime12 && hexDigitCount != 12\n\
    \                val hexDigitPrime14 = hexDigitPrime13 && hexDigitCount != 13\n\
    \                val hexDigitPrime15 = hexDigitPrime14 && hexDigitCount != 14\n\
    \                val hexDigitPrime16 = hexDigitPrime15 && hexDigitCount != 15\n\
    \                val hexDigitPrime17 = hexDigitPrime16 && hexDigitCount != 16\n\
    \                val hexDigitPrime18 = hexDigitPrime17 && hexDigitCount != 17\n\
    \                val hexDigitPrime19 = hexDigitPrime18 && hexDigitCount != 18\n\
    \                val hexDigitPrime20 = hexDigitPrime19 && hexDigitCount != 19\n\
    \                val hexDigitPrime21 = hexDigitPrime20 && hexDigitCount != 20\n\
    \                val hexDigitPrime22 = hexDigitPrime21 && hexDigitCount != 21\n\
    \                val hexDigitPrime23 = hexDigitPrime22 && hexDigitCount != 22\n\
    \                val hexDigitPrime24 = hexDigitPrime23 && hexDigitCount != 23\n\
    \                val hexDigitPrime\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpchinl6w8.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but unindent found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpchinl6w8.scala:66:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpchinl6w8.scala:57:11 -----------------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m    assert(hexKey((\e[31m\"AB\"\e[0m)) == (\e[31m1l\e[0m));\n\e\
    [31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvalue\e\
    [0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpchinl6w8.scala:58:11 -----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    assert(hexKey((\e[31m\"1077E\"\e[0m)) == (\e[31m2l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpchinl6w8.scala:59:11 -----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    assert(hexKey((\e[31m\"ABED1A33\"\e[0m)) == (\e[31m4l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpchinl6w8.scala:60:11 -----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    assert(hexKey((\e[31m\"2020\"\e[0m)) == (\e[31m2l\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpchinl6w8.scala:61:11 -----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    assert(hexKey((\e[31m\"123456789ABCDEF0\"\e[0m))\
    \ == (\e["
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet\
    \ = primes.toSet\n        val primesCount = primes.count(_ > 0)\n        val primesCount2\
    \ = primesCount * primesCount\n        val primesCount3 = primesCount2 * primesCount\n\
    \        val primesCount4 = primesCount3 * primesCount\n        val primesCount5\
    \ = primesCount4 * primesCount\n        val primesCount6 = primesCount5 * primesCount\n\
    \        val primesCount7 = primesCount6 * primesCount\n        val primesCount8\
    \ = primesCount7 * primesCount\n        val primesCount9 = primesCount8 * primesCount\n\
    \        val primesCount10 = primesCount9 * primesCount\n        val primesCount11\
    \ = primesCount10 * primesCount\n        val primesCount12 = primesCount11 * primesCount\n\
    \        val primesCount13 = primesCount12 * primesCount\n        val primesCount14\
    \ = primesCount13 * primesCount\n        val primesCount15 = primesCount14 * primesCount\n\
    \        val primesCount16 = primesCount15 * primesCount\n        val primesCount17\
    \ = primesCount16 * primesCount\n        val primesCount18 = primesCount17 * primesCount\n\
    \        val primesCount19 = primesCount18 * primesCount\n        val primesCount20\
    \ = primesCount19 * primesCount\n        val primesCount21 = primesCount20 * primesCount\n\
    \        val primesCount22 = primesCount21 * primesCount\n        val primesCount23\
    \ = primesCount22 * primesCount\n        val primesCount24 = primesCount23 * primesCount\n\
    \        val primesCount25 = primesCount24 * primesCount\n        val primesCount26\
    \ = primesCount25 * primesCount\n        val primesCount27 = primesCount26 * primesCount\n\
    \        val primesCount28 = primesCount27 * primesCount\n        val primesCount29\
    \ = primesCount28 * primesCount\n        val primes\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkz56rrme.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkz56rrme.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkz56rrme.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\")\n        val numsLen = nums.length\n        val numsLen2 = numsLen / 2\n\
    \        val numsLen3 = numsLen / 3\n        val numsLen4 = numsLen / 4\n    \
    \    val numsLen5 = numsLen / 5\n        val numsLen6 = numsLen / 6\n        val\
    \ numsLen7 = numsLen / 7\n        val numsLen8 = numsLen / 8\n        val numsLen9\
    \ = numsLen / 9\n        val numsLen10 = numsLen / 10\n        val numsLen11 =\
    \ numsLen / 11\n        val numsLen12 = numsLen / 12\n        val numsLen13 =\
    \ numsLen / 13\n        val numsLen14 = numsLen / 14\n        val numsLen15 =\
    \ numsLen / 15\n        val numsLen16 = numsLen / 16\n        val numsLen17 =\
    \ numsLen / 17\n        val numsLen18 = numsLen / 18\n        val numsLen19 =\
    \ numsLen / 19\n        val numsLen20 = numsLen / 20\n        val numsLen21 =\
    \ numsLen / 21\n        val numsLen22 = numsLen / 22\n        val numsLen23 =\
    \ numsLen / 23\n        val numsLen24 = numsLen / 24\n        val numsLen25 =\
    \ numsLen / 25\n        val numsLen26 = numsLen / 26\n        val numsLen27 =\
    \ numsLen / 27\n        val numsLen28 = numsLen / 28\n        val numsLen29 =\
    \ numsLen / 29\n        val numsLen30 = numsLen / 30\n        val numsLen31 =\
    \ numsLen / 31\n        val numsLen32 = numsLen / 32\n        val numsLen33 =\
    \ numsLen / 33\n        val numsLen34 = numsLen / 34\n        val numsLen35 =\
    \ numsLen / 35\n        val numsLen36 = numsLen / 36\n        val numsLen37 =\
    \ numsLen / 37\n        val numsLen38 = numsLen / 38\n        val numsLen39 =\
    \ numsLen / 39\n        val numsLen40 = nums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpne30zxms.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitCount = hexDigits.length\n        val hexDigitMap = hexDigits.groupBy(x\
    \ => x).mapValues(_.size)\n        val hexDigitMapCount = hexDigitMap.size\n \
    \       val hexDigitMapKeys = hexDigitMap.keys.toList\n        val hexDigitMapValues\
    \ = hexDigitMap.values.toList\n        val hexDigitMapValuesCount = hexDigitMapValues.size\n\
    \        val hexDigitMapValuesSum = hexDigitMapValues.sum\n        val hexDigitMapValuesSumCount\
    \ = hexDigitMapValuesSum.toInt\n        val hexDigitMapValuesSumCount2 = hexDigitMapValuesSumCount\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount3 = hexDigitMapValuesSumCount2\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount4 = hexDigitMapValuesSumCount3\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount5 = hexDigitMapValuesSumCount4\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount6 = hexDigitMapValuesSumCount5\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount7 = hexDigitMapValuesSumCount6\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount8 = hexDigitMapValuesSumCount7\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount9 = hexDigitMapValuesSumCount8\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount10 = hexDigitMapValuesSumCount9\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount11 = hexDigitMapValuesSumCount10\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount12 = hexDigitMapValuesSumCount11\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount13 = hexDigitMapValuesSumCount12\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount14 = hexDigitMapValuesSumCount13\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount15 = hexDigitMapValuesSumCount14\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount16 = hexDigitMapValuesSumCount15\
    \ * hexDigitMapValuesSumCount\n        val hexDigitMapValuesSumCount17 = hexDigitMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1x5mvvn2.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexArray = hexString.toList\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArray.length\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2v1lp8sq.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2v1lp8sq.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2v1lp8sq.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2v1lp8sq.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2v1lp8sq.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hex"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => if (x == 'A') 1 else 0).sum\n        hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbn0_t94g.scala:32)\n\tat Problem.main(tmpbn0_t94g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\")\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbbyg_zyp.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(_.toInt)\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ > hex(0))\n        val primesCount2 = primes.count(_ > hex(1))\n\
    \        val primesCount3 = primes.count(_ > hex(2))\n        val primesCount4\
    \ = primes.count(_ > hex(3))\n        val primesCount5 = primes.count(_ > hex(4))\n\
    \        val primesCount6 = primes.count(_ > hex(5))\n        val primesCount7\
    \ = primes.count(_ > hex(6))\n        val primesCount8 = primes.count(_ > hex(7))\n\
    \        val primesCount9 = primes.count(_ > hex(8))\n        val primesCount10\
    \ = primes.count(_ > hex(9))\n        val primesCount11 = primes.count(_ > hex(10))\n\
    \        val primesCount12 = primes.count(_ > hex(11))\n        val primesCount13\
    \ = primes.count(_ > hex(12))\n        val primesCount14 = primes.count(_ > hex(13))\n\
    \        val primesCount15 = primes.count(_ > hex(14))\n        val primesCount16\
    \ = primes.count(_ > hex(15))\n        val primesCount17 = primes.count(_ > hex(16))\n\
    \        val primesCount18 = primes.count(_ > hex(17))\n        val primesCount19\
    \ = primes.count(_ > hex(18))\n        val primesCount20 = primes.count(_ > hex(19))\n\
    \        val primesCount21 = primes.count(_ > hex(20))\n        val primesCount22\
    \ = primes.count(_ > hex(21))\n        val primesCount23 = primes.count(_ > hex(22))\n\
    \        val primesCount24 = primes.count(_ > hex(23))\n        val primesCount25\
    \ = primes.count(_ > hex(24))\n        val primesCount26 = primes.count(_ > hex(25))\n\
    \        val primesCount27 = primes.count(_ > hex(26))\n        val primesCount28\
    \ = primes.count(_ > hex(27))\n        val primesCount29 = primes.count(_ > hex(28))\n\
    \        val primesCount30 = primes.count(_ > hex(29))\n        val primes\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsb_ckp1m.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb_ckp1m.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsb_ckp1m.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.foldLeft(0l) { (sum, digit) => sum + digit * digit }\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4002ke5h.scala:31)\n\tat Problem.main(tmp4002ke5h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val numArray = num.toCharArray\n\
    \        val numArrayLength = numArray.length\n        val hexKeyArray = Array.ofDim[Long](numArrayLength)\n\
    \        val hexKeyArrayLength = hexKeyArray.length\n        val hexKeyArray2\
    \ = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray2Length = hexKeyArray2.length\n\
    \        val hexKeyArray3 = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray3Length\
    \ = hexKeyArray3.length\n        val hexKeyArray4 = Array.ofDim[Long](numArrayLength)\n\
    \        val hexKeyArray4Length = hexKeyArray4.length\n        val hexKeyArray5\
    \ = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray5Length = hexKeyArray5.length\n\
    \        val hexKeyArray6 = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray6Length\
    \ = hexKeyArray6.length\n        val hexKeyArray7 = Array.ofDim[Long](numArrayLength)\n\
    \        val hexKeyArray7Length = hexKeyArray7.length\n        val hexKeyArray8\
    \ = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray8Length = hexKeyArray8.length\n\
    \        val hexKeyArray9 = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray9Length\
    \ = hexKeyArray9.length\n        val hexKeyArray10 = Array.ofDim[Long](numArrayLength)\n\
    \        val hexKeyArray10Length = hexKeyArray10.length\n        val hexKeyArray11\
    \ = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray11Length = hexKeyArray11.length\n\
    \        val hexKeyArray12 = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray12Length\
    \ = hexKeyArray12.length\n        val hexKeyArray13 = Array.ofDim[Long](numArrayLength)\n\
    \        val hexKeyArray13Length = hexKeyArray13.length\n        val hexKeyArray14\
    \ = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray14Length = hexKeyArray14.length\n\
    \        val hexKeyArray15 = Array.ofDim[Long](numArrayLength)\n        val hexKeyArray15Length\
    \ = hexKeyArray15.length\n        val hexKeyArray16 = Array.ofDim[Long](numArrayLength)\n\
    \        val hexKeyArray16Length = hexKeyArray16.length\n        val hexKeyArray17\
    \ = Array.ofDim[\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyff5yf4.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphyff5yf4.scala:61:5 ---------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0l){ (sum, digit) => sum + digit * 16l}\n \
    \       hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphby9g074.scala:31)\n\tat Problem.main(tmphby9g074.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val hex2 = hex.map(x => x % 10)\n        val hex3 = hex2.map(x => x %\
    \ 10)\n        val hex4 = hex3.map(x => x % 10)\n        val hex5 = hex4.map(x\
    \ => x % 10)\n        val hex6 = hex5.map(x => x % 10)\n        val hex7 = hex6.map(x\
    \ => x % 10)\n        val hex8 = hex7.map(x => x % 10)\n        val hex9 = hex8.map(x\
    \ => x % 10)\n        val hex10 = hex9.map(x => x % 10)\n        val hex11 = hex10.map(x\
    \ => x % 10)\n        val hex12 = hex11.map(x => x % 10)\n        val hex13 =\
    \ hex12.map(x => x % 10)\n        val hex14 = hex13.map(x => x % 10)\n       \
    \ val hex15 = hex14.map(x => x % 10)\n        val hex16 = hex15.map(x => x % 10)\n\
    \        val hex17 = hex16.map(x => x % 10)\n        val hex18 = hex17.map(x =>\
    \ x % 10)\n        val hex19 = hex18.map(x => x % 10)\n        val hex20 = hex19.map(x\
    \ => x % 10)\n        val hex21 = hex20.map(x => x % 10)\n        val hex22 =\
    \ hex21.map(x => x % 10)\n        val hex23 = hex22.map(x => x % 10)\n       \
    \ val hex24 = hex23.map(x => x % 10)\n        val hex25 = hex24.map(x => x % 10)\n\
    \        val hex26 = hex25.map(x => x % 10)\n        val hex27 = hex26.map(x =>\
    \ x % 10)\n        val hex28 = hex27.map(x => x % 10)\n        val hex29 = hex28.map(x\
    \ => x % 10)\n        val hex30 = hex29.map(x => x % 10)\n        val hex31 =\
    \ hex30.map(x => x % 10)\n        val hex32 = hex31.map(x => x % 10)\n       \
    \ val hex33 = hex32.map(x => x % 10)\n        val hex34 = hex33.map(x => x % 10)\n\
    \        val hex35 = hex34.map(x => x % 10)\n        val hex36 = hex35.map(x =>\
    \ x % 10)\n        val hex37 = hex36.map(x => x % 10)\n        val hex38 = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplbaswblp.scala:63:19 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \e[36mhex38\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplbaswblp.scala:64:5 ---------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n        val hexKey33\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp027nk649.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp027nk649.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKey.length\n        val hex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgavafj7j.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgavafj7j.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeyLength\e[0m = hexKey.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgavafj7j.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKey.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgavafj7j.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKey.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mhexKeyLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgavafj7j.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexKeyLength\e[0m = hexKey.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgavafj7j.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\
    D+\")\n        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbbyg_zyp.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbyg_zyp.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit * digit}\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpmebrqwch.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmpmebrqwch.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmpmebrqwch.scala:26)\n\tat Problem$.main(tmpmebrqwch.scala:31)\n\
    \tat Problem.main(tmpmebrqwch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString).mkString\n\
    \        val hexArray = hex.split(\"\\\\\")\n        val hexArrayLength = hexArray.length\n\
    \        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength =\
    \ hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n      \
    \  val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength - 1\n    \
    \    val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength = hexArrayLength\
    \ - 1\n        val hexArrayLength = hexArrayLength - 1\n        val hexArrayLength\
    \ = hexArrayLength - 1\n        val hexArrayLength = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppbt05mit.scala:76:28 ---------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppbt05mit.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppbt05mit.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppbt05mit.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexArrayLength is already defined as \e[33mvalue\e[0m \e[35mhexArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppbt05mit.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexArrayLength\e[0m = hexArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhe"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\").toList\n\
    \        val numsCount = nums.length\n        val hexDigits = nums.map(x => x.toInt)\n\
    \        val hexDigitsCount = hexDigits.length\n        val primes = hexDigits.filter(x\
    \ => x % 2 == 0 && x != 0)\n        val primesCount = primes.length\n        val\
    \ hexDigitsToPrimes = primes.zip(hexDigits).filter(_._1 == _._2)\n        val\
    \ hexDigitsToPrimesCount = hexDigitsToPrimes.length\n        val primesToHexDigits\
    \ = hexDigitsToPrimes.map(x => x._2)\n        val primesToHexDigitsCount = primesToHexDigits.length\n\
    \        val primesToHexDigitsToPrimes = primesToHexDigits.zip(primes).filter(_._1\
    \ == _._2)\n        val primesToHexDigitsToPrimesCount = primesToHexDigitsToPrimes.length\n\
    \        val primesToHexDigitsToPrimesToHexDigits = primesToHexDigitsToPrimes.map(x\
    \ => x._2)\n        val primesToHexDigitsToPrimesToHexDigitsCount = primesToHexDigitsToPrimesToHexDigits.length\n\
    \        val primesToHexDigitsToPrimesToHexDigitsToPrimes = primesToHexDigitsToPrimesToHexDigits.zip(primes).filter(_._1\
    \ == _._2)\n        val primesToHexDigitsToPrimesToHexDigitsToPrimesCount = primesToHexDigitsToPrimesToHexDigitsToPrimes.length\n\
    \        val primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigits = primesToHexDigitsToPrimesToHexDigitsToPrimes.map(x\
    \ => x._2)\n        val primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigitsCount\
    \ = primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigits.length\n        val\
    \ primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigitsToPrimes = primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigits.zip(primes).filter(_._1\
    \ == _._2)\n        val primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigitsToPrimesCount\
    \ = primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc595e96z.scala:32:63 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsToPrimes\e[0m =\
    \ primes.zip(hexDigits).filter(_._1 == _._2)\n\e[31m\e[31m   |\e[0m          \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         value _1 is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpc595e96z.scala:36:79 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mprimesToHexDigitsToPrimes\e\
    [0m = primesToHexDigits.zip(primes).filter(_._1 == _._2)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                         value _1\
    \ is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc595e96z.scala:40:117\
    \ -----------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesToHexDigitsToPrimesToHexDigitsToPrimes\e[0m = primesToHexDigitsToPrimesToHexDigits.zip(primes).filter(_._1\
    \ == _._2)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value _1 is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc595e96z.scala:44:155\
    \ -----------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigitsToPrimes\e[0m = primesToHexDigitsToPrimesToHexDigitsToPrimesToHexDigits.zip(primes).filter(_._1\
    \ == _._2)\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \                                 ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                        value _1 is not a member of Int\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpc595e96z.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: "
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 16).filter(_ > 0).count() * 16\n      \
    \  hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphff8zsza.scala:27:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhexKey\e[0m = hex.map(\e\
    [36mx\e[0m => x % \e[31m16\e[0m).filter(_ > \e[31m0\e[0m).count() * \e[31m16\e\
    [0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m: (p: Int => Boolean): Int\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexMap = hex.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap2\
    \ = hexMap.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap3 = hexMap2.map(x\
    \ => (x % 16).asInstanceOf[Int])\n        val hexMap4 = hexMap3.map(x => (x %\
    \ 16).asInstanceOf[Int])\n        val hexMap5 = hexMap4.map(x => (x % 16).asInstanceOf[Int])\n\
    \        val hexMap6 = hexMap5.map(x => (x % 16).asInstanceOf[Int])\n        val\
    \ hexMap7 = hexMap6.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap8\
    \ = hexMap7.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap9 = hexMap8.map(x\
    \ => (x % 16).asInstanceOf[Int])\n        val hexMap10 = hexMap9.map(x => (x %\
    \ 16).asInstanceOf[Int])\n        val hexMap11 = hexMap10.map(x => (x % 16).asInstanceOf[Int])\n\
    \        val hexMap12 = hexMap11.map(x => (x % 16).asInstanceOf[Int])\n      \
    \  val hexMap13 = hexMap12.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap14\
    \ = hexMap13.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap15 = hexMap14.map(x\
    \ => (x % 16).asInstanceOf[Int])\n        val hexMap16 = hexMap15.map(x => (x\
    \ % 16).asInstanceOf[Int])\n        val hexMap17 = hexMap16.map(x => (x % 16).asInstanceOf[Int])\n\
    \        val hexMap18 = hexMap17.map(x => (x % 16).asInstanceOf[Int])\n      \
    \  val hexMap19 = hexMap18.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap20\
    \ = hexMap19.map(x => (x % 16).asInstanceOf[Int])\n        val hexMap21 = hexMap20.map(x\
    \ => (x % 16).asInstanceOf[Int])\n        val hexMap22 = hexMap21.map(x => (x\
    \ % 16).asInstanceOf[Int])\n        val hexMap23\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr_8iu71t.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr_8iu71t.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit * 16L }\n\
    \        hexKey % 10L\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl141pycv.scala:31)\n\tat Problem.main(tmpl141pycv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toLong\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toLong\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toLong\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzpgtc0m8.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m ="
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexString = hex.mkString(\"\")\n        val hexStringList = hexString.split(\"\
    \\\\\")\n        val hexStringListLength = hexStringList.length\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexStringListLength - 1\n        val\
    \ hexStringListLength = hexStringListLength - 1\n        val hexStringListLength\
    \ = hexStringListLength - 1\n        val hexStringListLength = hexStringListLength\
    \ - 1\n        val hexStringListLength = hexString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprgb9_cub.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexStringListLength\e[0m\
    \ = hexStringListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexStringListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprgb9_cub.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexStringListLength\e[0m\
    \ = hexStringListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexStringListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprgb9_cub.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexStringListLength\e[0m\
    \ = hexStringListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexStringListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprgb9_cub.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexStringListLength\e[0m\
    \ = hexStringListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexStringListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mhexStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprgb9_cub.scala:34:12 ---------"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        val primesSet2 = mutable.Set[Int]()\n        val primesSet3 = mutable.Set[Int]()\n\
    \        val primesSet4 = mutable.Set[Int]()\n        val primesSet5 = mutable.Set[Int]()\n\
    \        val primesSet6 = mutable.Set[Int]()\n        val primesSet7 = mutable.Set[Int]()\n\
    \        val primesSet8 = mutable.Set[Int]()\n        val primesSet9 = mutable.Set[Int]()\n\
    \        val primesSet10 = mutable.Set[Int]()\n        val primesSet11 = mutable.Set[Int]()\n\
    \        val primesSet12 = mutable.Set[Int]()\n        val primesSet13 = mutable.Set[Int]()\n\
    \        val primesSet14 = mutable.Set[Int]()\n        val primesSet15 = mutable.Set[Int]()\n\
    \        val primesSet16 = mutable.Set[Int]()\n        val primesSet17 = mutable.Set[Int]()\n\
    \        val primesSet18 = mutable.Set[Int]()\n        val primesSet19 = mutable.Set[Int]()\n\
    \        val primesSet20 = mutable.Set[Int]()\n        val primesSet21 = mutable.Set[Int]()\n\
    \        val primesSet22 = mutable.Set[Int]()\n        val primesSet23 = mutable.Set[Int]()\n\
    \        val primesSet24 = mutable.Set[Int]()\n        val primesSet25 = mutable.Set[Int]()\n\
    \        val primesSet26 = mutable.Set[Int]()\n        val primesSet27 = mutable.Set[Int]()\n\
    \        val primesSet28 = mutable.Set[Int]()\n        val primesSet29 = mutable.Set[Int]()\n\
    \        val primesSet30 = mutable.Set[Int]()\n        val primesSet31 = mutable.Set[Int]()\n\
    \        val primesSet32 = mutable.Set[Int]()\n        val primesSet33 = mutable.Set[Int]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmployczbqi.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanatio"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\").toList\n\
    \        val numsMap = nums.map(x => x.toLong).toMap\n        val numsMap2 = numsMap.filter(_._2\
    \ % 2 == 0)\n        val numsMap3 = numsMap2.filter(_._2 % 3 == 0)\n        val\
    \ numsMap4 = numsMap3.filter(_._2 % 5 == 0)\n        val numsMap5 = numsMap4.filter(_._2\
    \ % 7 == 0)\n        val numsMap6 = numsMap5.filter(_._2 % 11 == 0)\n        val\
    \ numsMap7 = numsMap6.filter(_._2 % 13 == 0)\n        val numsMap8 = numsMap7.filter(_._2\
    \ % 17 == 0)\n        val numsMap9 = numsMap8.filter(_._2 % 19 == 0)\n       \
    \ val numsMap10 = numsMap9.filter(_._2 % 23 == 0)\n        val numsMap11 = numsMap10.filter(_._2\
    \ % 29 == 0)\n        val numsMap12 = numsMap11.filter(_._2 % 31 == 0)\n     \
    \   val numsMap13 = numsMap12.filter(_._2 % 37 == 0)\n        val numsMap14 =\
    \ numsMap13.filter(_._2 % 41 == 0)\n        val numsMap15 = numsMap14.filter(_._2\
    \ % 43 == 0)\n        val numsMap16 = numsMap15.filter(_._2 % 47 == 0)\n     \
    \   val numsMap17 = numsMap16.filter(_._2 % 51 == 0)\n        val numsMap18 =\
    \ numsMap17.filter(_._2 % 55 == 0)\n        val numsMap19 = numsMap18.filter(_._2\
    \ % 59 == 0)\n        val numsMap20 = numsMap19.filter(_._2 % 63 == 0)\n     \
    \   val numsMap21 = numsMap20.filter(_._2 % 67 == 0)\n        val numsMap22 =\
    \ numsMap21.filter(_._2 % 71 == 0)\n        val numsMap23 = numsMap22.filter(_._2\
    \ % 73 == 0)\n        val numsMap24 = numsMap23.filter(_._2 % 79 == 0)\n     \
    \   val numsMap25 = numsMap24.filter(_._2 % 83 == 0)\n        val numsMap26 =\
    \ numsMap25.filter(_._2 % 89 == 0)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv7124sc7.scala:27:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsMap\e[0m = nums.map(\e\
    [36mx\e[0m => x.toLong).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            Cannot prove that Long <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                       where:    K is a type variable\n\e[31m\
    \   |\e[0m                                                 V is a type variable\n\
    \e[31m   |\e[0m                                       .\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpv7124sc7.scala:53:5 ---------------------\e[0m\e\
    [0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexArray = hex.map(_.toInt)\n        val hexArray2 = hexArray.filter(_\
    \ % 2 == 0)\n        val hexArray3 = hexArray2.filter(_ % 3 == 0)\n        val\
    \ hexArray4 = hexArray3.filter(_ % 5 == 0)\n        val hexArray5 = hexArray4.filter(_\
    \ % 7 == 0)\n        val hexArray6 = hexArray5.filter(_ % 11 == 0)\n        val\
    \ hexArray7 = hexArray6.filter(_ % 13 == 0)\n        val hexArray8 = hexArray7.filter(_\
    \ % 17 == 0)\n        val hexArray9 = hexArray8.filter(_ % 19 == 0)\n        val\
    \ hexArray10 = hexArray9.filter(_ % 23 == 0)\n        val hexArray11 = hexArray10.filter(_\
    \ % 29 == 0)\n        val hexArray12 = hexArray11.filter(_ % 31 == 0)\n      \
    \  val hexArray13 = hexArray12.filter(_ % 37 == 0)\n        val hexArray14 = hexArray13.filter(_\
    \ % 41 == 0)\n        val hexArray15 = hexArray14.filter(_ % 43 == 0)\n      \
    \  val hexArray16 = hexArray15.filter(_ % 47 == 0)\n        val hexArray17 = hexArray16.filter(_\
    \ % 53 == 0)\n        val hexArray18 = hexArray17.filter(_ % 59 == 0)\n      \
    \  val hexArray19 = hexArray18.filter(_ % 61 == 0)\n        val hexArray20 = hexArray19.filter(_\
    \ % 67 == 0)\n        val hexArray21 = hexArray20.filter(_ % 71 == 0)\n      \
    \  val hexArray22 = hexArray21.filter(_ % 73 == 0)\n        val hexArray23 = hexArray22.filter(_\
    \ % 79 == 0)\n        val hexArray24 = hexArray23.filter(_ % 83 == 0)\n      \
    \  val hexArray25 = hexArray24.filter(_ % 89 == 0)\n        val hexArray26 = hexArray25.filter(_\
    \ % 97 == 0)\n        val hexArray27 = hexArray26.filter(_ % 101 == 0)\n     \
    \   val hexArray28 = hexArray27.filter(_ % 107 == 0)\n        val hexArray29 =\
    \ hexArray28.filter(_ % 113 == 0)\n        val hexArray30 = hexArray29.filter(_\
    \ % 119 == 0)\n        val hexArray31 = hexArray30.filter(_ % 127 == 0)\n    \
    \    val hexArray32 = hexArray31.filter(_ % 131 == 0)\n        val hex\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n\
    \    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) ==\
    \ (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfgfvhjuf.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfgfvhjuf.scala:26:40\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value\
    \ toHexString is not a member of Char.\n\e[31m   |\e[0m      An extension method\
    \ was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m          intWrapper(_$1)\n\e[31m\e[31m-- Error: /tmp/tmpfgfvhjuf.scala:26:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\e[31m\e\
    [31m   |\e[0m                                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfgfvhjuf.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyLength = hexKey.length\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKeyLength.toInt\n\
    \        val hexKeyLength = hexKeyLength.toLong\n        val hexKeyLength = hexKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36louxth.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36louxth.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36louxth.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36louxth.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeyLength is already defined as \e[33mvalue\e[0m \e[35mhexKeyLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp36louxth.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = hexKeyLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKeyList = hexKey.toList\n\
    \        val hexKeyListLength = hexKeyList.size\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n        val hexKeyListLength\
    \ = hexKeyListLength.toInt\n        val hexKeyListLength = hexKeyListLength.toInt\n\
    \        val hexKeyListLength = hexKeyListLength.toInt\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hexKeyListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexKeyListLength is already defined as \e[33mvalue\e[0m \e\
    [35mhexKeyListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfbeyqr7w.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexKeyListLength\e[0m =\
    \ hex"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexDigits = hex.map(x => x.toInt)\n\
    \        val hexDigitsCount = hexDigits.length\n        val hexDigitsToCount =\
    \ hexDigits.toList\n        val hexDigitsToCountCount = hexDigitsToCount.size\n\
    \        val hexDigitsToCountCountCount = hexDigitsToCountCount.size\n       \
    \ val hexDigitsToCountCountCountCount = hexDigitsToCountCountCount.size\n    \
    \    val hexDigitsToCountCountCountCountCount = hexDigitsToCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCount = hexDigitsToCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCount = hexDigitsToCountCountCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount.size\n\
    \        val hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp16c56pu6.scala:32:63 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsToCountCountCount\e\
    [0m = hexDigitsToCountCount.size\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                              value size is not a member of Int\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp16c56pu6.scala:37:66 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mhexDigitsToCountCountCountCountCountCountCountCount\e\
    [0m = hexDigitsToCountCountCountCountCountCountCountCount.size\n\e[31m\e[31m \
    \  |\e[0m                                                                  ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mhexDigitsToCountCountCountCountCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp16c56pu6.scala:38:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitsToCountCountCountCountCountCountCountCountCountCount\e[0m = hexDigitsToCountCountCountCountCountCountCountCountCountCount.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mhexDigitsToCountCountCountCountCountCountCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp16c56pu6.scala:39:86\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mhexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m = hexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mhexDigitsToCountCountCountCountCountCountCountCountCountCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => (x % 16).asInstanceOf[Int]).toSet\n       \
    \ val hexKeySet = hexKey.toSet\n        val hexKeySet2 = hexKey.toSet\n      \
    \  val hexKeySet3 = hexKey.toSet\n        val hexKeySet4 = hexKey.toSet\n    \
    \    val hexKeySet5 = hexKey.toSet\n        val hexKeySet6 = hexKey.toSet\n  \
    \      val hexKeySet7 = hexKey.toSet\n        val hexKeySet8 = hexKey.toSet\n\
    \        val hexKeySet9 = hexKey.toSet\n        val hexKeySet10 = hexKey.toSet\n\
    \        val hexKeySet11 = hexKey.toSet\n        val hexKeySet12 = hexKey.toSet\n\
    \        val hexKeySet13 = hexKey.toSet\n        val hexKeySet14 = hexKey.toSet\n\
    \        val hexKeySet15 = hexKey.toSet\n        val hexKeySet16 = hexKey.toSet\n\
    \        val hexKeySet17 = hexKey.toSet\n        val hexKeySet18 = hexKey.toSet\n\
    \        val hexKeySet19 = hexKey.toSet\n        val hexKeySet20 = hexKey.toSet\n\
    \        val hexKeySet21 = hexKey.toSet\n        val hexKeySet22 = hexKey.toSet\n\
    \        val hexKeySet23 = hexKey.toSet\n        val hexKeySet24 = hexKey.toSet\n\
    \        val hexKeySet25 = hexKey.toSet\n        val hexKeySet26 = hexKey.toSet\n\
    \        val hexKeySet27 = hexKey.toSet\n        val hexKeySet28 = hexKey.toSet\n\
    \        val hexKeySet29 = hexKey.toSet\n        val hexKeySet30 = hexKey.toSet\n\
    \        val hexKeySet31 = hexKey.toSet\n        val hexKeySet32 = hexKey.toSet\n\
    \        val hexKeySet33 = hexKey.toSet\n        val hexKeySet34 = hexKey.toSet\n\
    \        val hexKeySet35 = hexKey.toSet\n        val hexKeySet36 = hexKey.toSet\n\
    \        val hexKeySet37 = hexKey.toSet\n        val hexKeySet38 = hexKey.toSet\n\
    \        val hexKeySet39 = hexKey.toSet\n        val hexKeySet40 = hexKey.toSet\n\
    \        val hexKeySet41 = hex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkfujxtzh.scala:69:5\
    \ ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLen = hex.length\n        val hexMap = mutable.Map[Int, Int]()\n\
    \        val hexMapLen = hexMap.length\n        val hexMap2 = mutable.Map[Int,\
    \ Int]()\n        val hexMap2Len = hexMap2.length\n        val hexMap3 = mutable.Map[Int,\
    \ Int]()\n        val hexMap3Len = hexMap3.length\n        val hexMap4 = mutable.Map[Int,\
    \ Int]()\n        val hexMap4Len = hexMap4.length\n        val hexMap5 = mutable.Map[Int,\
    \ Int]()\n        val hexMap5Len = hexMap5.length\n        val hexMap6 = mutable.Map[Int,\
    \ Int]()\n        val hexMap6Len = hexMap6.length\n        val hexMap7 = mutable.Map[Int,\
    \ Int]()\n        val hexMap7Len = hexMap7.length\n        val hexMap8 = mutable.Map[Int,\
    \ Int]()\n        val hexMap8Len = hexMap8.length\n        val hexMap9 = mutable.Map[Int,\
    \ Int]()\n        val hexMap9Len = hexMap9.length\n        val hexMap10 = mutable.Map[Int,\
    \ Int]()\n        val hexMap10Len = hexMap10.length\n        val hexMap11 = mutable.Map[Int,\
    \ Int]()\n        val hexMap11Len = hexMap11.length\n        val hexMap12 = mutable.Map[Int,\
    \ Int]()\n        val hexMap12Len = hexMap12.length\n        val hexMap13 = mutable.Map[Int,\
    \ Int]()\n        val hexMap13Len = hexMap13.length\n        val hexMap14 = mutable.Map[Int,\
    \ Int]()\n        val hexMap14Len = hexMap14.length\n        val hexMap15 = mutable.Map[Int,\
    \ Int]()\n        val hexMap15Len = hexMap15.length\n        val hexMap16 = mutable.Map[Int,\
    \ Int]()\n        val hexMap16Len = hexMap16.length\n        val hexMap17 = mutable.Map[Int,\
    \ Int]()\n        val hexMap17Len = hexMap17.length\n        val hexMap18 = mutable.Map[Int,\
    \ Int]()\n        val hexMap18Len = hexMap18.length\n        val hexMap19 = mutable.Map[Int,\
    \ Int]()\n        val hexMap19Len = hexMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplaywtkag.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplaywtkag.scala:30:22 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexMap2\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplaywtkag.scala:32:22 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexMap3\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplaywtkag.scala:34:22 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mhexMap4\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplaywtkag.scala:36:22 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mhexMap5\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplaywtkag.scala:38:22 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0"
  stdout: ''
  timestamp: 1660009623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => (x % 16).toInt)\n        val hexKey3 = hexKey2.map(x => (x % 16).toInt)\n\
    \        val hexKey4 = hexKey3.map(x => (x % 16).toInt)\n        val hexKey5 =\
    \ hexKey4.map(x => (x % 16).toInt)\n        val hexKey6 = hexKey5.map(x => (x\
    \ % 16).toInt)\n        val hexKey7 = hexKey6.map(x => (x % 16).toInt)\n     \
    \   val hexKey8 = hexKey7.map(x => (x % 16).toInt)\n        val hexKey9 = hexKey8.map(x\
    \ => (x % 16).toInt)\n        val hexKey10 = hexKey9.map(x => (x % 16).toInt)\n\
    \        val hexKey11 = hexKey10.map(x => (x % 16).toInt)\n        val hexKey12\
    \ = hexKey11.map(x => (x % 16).toInt)\n        val hexKey13 = hexKey12.map(x =>\
    \ (x % 16).toInt)\n        val hexKey14 = hexKey13.map(x => (x % 16).toInt)\n\
    \        val hexKey15 = hexKey14.map(x => (x % 16).toInt)\n        val hexKey16\
    \ = hexKey15.map(x => (x % 16).toInt)\n        val hexKey17 = hexKey16.map(x =>\
    \ (x % 16).toInt)\n        val hexKey18 = hexKey17.map(x => (x % 16).toInt)\n\
    \        val hexKey19 = hexKey18.map(x => (x % 16).toInt)\n        val hexKey20\
    \ = hexKey19.map(x => (x % 16).toInt)\n        val hexKey21 = hexKey20.map(x =>\
    \ (x % 16).toInt)\n        val hexKey22 = hexKey21.map(x => (x % 16).toInt)\n\
    \        val hexKey23 = hexKey22.map(x => (x % 16).toInt)\n        val hexKey24\
    \ = hexKey23.map(x => (x % 16).toInt)\n        val hexKey25 = hexKey24.map(x =>\
    \ (x % 16).toInt)\n        val hexKey26 = hexKey25.map(x => (x % 16).toInt)\n\
    \        val hexKey27 = hexKey26.map(x => (x % 16).toInt)\n        val hexKey28\
    \ = hex\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"\
    )) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplntp96h9.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\\\\\"\
    ).toList\n        val hexNums = nums.map(_.toInt)\n        val hexNumsCount =\
    \ hexNums.size\n        val hexNumsSum = hexNums.sum\n        val hexNumsSum2\
    \ = hexNumsSum * hexNumsSum\n        val hexNumsSum3 = hexNumsSum2 * hexNumsSum\n\
    \        val hexNumsSum4 = hexNumsSum3 * hexNumsSum\n        val hexNumsSum5 =\
    \ hexNumsSum4 * hexNumsSum\n        val hexNumsSum6 = hexNumsSum5 * hexNumsSum\n\
    \        val hexNumsSum7 = hexNumsSum6 * hexNumsSum\n        val hexNumsSum8 =\
    \ hexNumsSum7 * hexNumsSum\n        val hexNumsSum9 = hexNumsSum8 * hexNumsSum\n\
    \        val hexNumsSum10 = hexNumsSum9 * hexNumsSum\n        val hexNumsSum11\
    \ = hexNumsSum10 * hexNumsSum\n        val hexNumsSum12 = hexNumsSum11 * hexNumsSum\n\
    \        val hexNumsSum13 = hexNumsSum12 * hexNumsSum\n        val hexNumsSum14\
    \ = hexNumsSum13 * hexNumsSum\n        val hexNumsSum15 = hexNumsSum14 * hexNumsSum\n\
    \        val hexNumsSum16 = hexNumsSum15 * hexNumsSum\n        val hexNumsSum17\
    \ = hexNumsSum16 * hexNumsSum\n        val hexNumsSum18 = hexNumsSum17 * hexNumsSum\n\
    \        val hexNumsSum19 = hexNumsSum18 * hexNumsSum\n        val hexNumsSum20\
    \ = hexNumsSum19 * hexNumsSum\n        val hexNumsSum21 = hexNumsSum20 * hexNumsSum\n\
    \        val hexNumsSum22 = hexNumsSum21 * hexNumsSum\n        val hexNumsSum23\
    \ = hexNumsSum22 * hexNumsSum\n        val hexNumsSum24 = hexNumsSum23 * hexNumsSum\n\
    \        val hexNumsSum25 = hexNumsSum24 * hexNumsSum\n        val hexNumsSum26\
    \ = hexNumsSum25 * hexNumsSum\n        val hexNumsSum27 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg4pb2na2.scala:55:26 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mhexNumsSum27\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg4pb2na2.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap2 = new mutable.HashMap[Int, Int]()\n        val hexMap3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexMap4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap5 = new mutable.HashMap[Int, Int]()\n        val hexMap6\
    \ = new mutable.HashMap[Int, Int]()\n        val hexMap7 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap8 = new mutable.HashMap[Int, Int]()\n        val hexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val hexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap11 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap12 = new mutable.HashMap[Int, Int]()\n        val hexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap14 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap15 = new mutable.HashMap[Int, Int]()\n        val hexMap16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap17 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap18 = new mutable.HashMap[Int, Int]()\n        val hexMap19 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap20 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap21 = new mutable.HashMap[Int, Int]()\n        val hexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap23 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap24 = new mutable.HashMap[Int, Int]()\n        val hexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap26 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap27 = new mutable.HashMap[Int, Int]()\n        val hexMap28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexMap29 = new mutable.HashMap[Int, Int]()\n        val\
    \ hexMap30 = new mutable.HashMap[Int, Int]()\n        val hexMap31 = new mutable.HashMap[Int,\
    \ Int]()\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hp3r_0b.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mhexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hp3r_0b.scala:29:26\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_hp3r_0b.scala:30:26 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexMap3\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hp3r_0b.scala:31:26\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mhexMap4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_hp3r_0b.scala:32:26 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexMap5\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = hex.foldLeft(0l) { (acc,\
    \ c) =>\n            val hexDigit = c.toInt\n            val hexDigitCount = hexDigit\
    \ / 16\n            val hexDigitRemainder = hexDigit % 16\n            val hexDigitRemainderCount\
    \ = hexDigitRemainder / 16\n            val hexDigitRemainderRemainder = hexDigitRemainder\
    \ % 16\n            val hexDigitRemainderRemainderCount = hexDigitRemainderRemainder\
    \ / 16\n            val hexDigitRemainderRemainderRemainder = hexDigitRemainderRemainder\
    \ % 16\n            val hexDigitRemainderRemainderRemainderCount = hexDigitRemainderRemainderRemainder\
    \ / 16\n            val hexDigitRemainderRemainderRemainderRemainder = hexDigitRemainderRemainderRemainder\
    \ % 16\n            val hexDigitRemainderRemainderRemainderRemainderCount = hexDigitRemainderRemainderRemainderRemainder\
    \ / 16\n            val hexDigitRemainderRemainderRemainderRemainderRemainder\
    \ = hexDigitRemainderRemainderRemainderRemainder % 16\n            val hexDigitRemainderRemainderRemainderRemainderRemainderCount\
    \ = hexDigitRemainderRemainderRemainderRemainderRemainder / 16\n            val\
    \ hexDigitRemainderRemainderRemainderRemainderRemainderRemainder = hexDigitRemainderRemainderRemainderRemainderRemainder\
    \ % 16\n            val hexDigitRemainderRemainderRemainderRemainderRemainderCount\
    \ = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder / 16\n    \
    \        val hexDigitRemainderRemainderRemainderRemainderRemainderRemainder =\
    \ hexDigitRemainderRemainderRemainderRemainderRemainderRemainder % 16\n      \
    \      val hexDigitRemainderRemainderRemainderRemainderRemainderCount = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 16\n            val hexDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder % 16\n    \
    \        val hexDigitRemainderRemainderRemainderRemainderRemainderCount = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / 16\n            val hexDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder % 16\n    \
    \        val hexDigitRemainderRemainderRemainderRemainderRemainderCount = hexDigitRemainderRemainderRemainderRemainderRemain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvl1bycvl.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvl1bycvl.scala:42:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e\
    [0m \e[36mhexDigitRemainderRemainderRemainderRemainderRemainderCount\e[0m = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ / \e[31m16\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitRemainderRemainderRemainderRemainderRemainderCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitRemainderRemainderRemainderRemainderRemainderCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvl1bycvl.scala:43:16 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m            \e[33mval\e[0m \e[36mhexDigitRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder % \e[31m16\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhexDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35mhexDigitRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvl1bycvl.scala:44:16 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m            \e[33mval\e[0m \e[36mhexDigitRemainderRemainderRemainderRemainderRemainderCount\e\
    [0m = hexDigitRemainderRemainderRemainderRemainderRemainderRemainder / \e[31m16\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.map(x => x.toInt)\n\
    \        val primes = mutable.Set[Long]()\n        val hexPrimes = mutable.Set[Long]()\n\
    \        val hexPrime = mutable.Set[Long]()\n        val hexPrimePrime = mutable.Set[Long]()\n\
    \        val hexPrimePrimePrime = mutable.Set[Long]()\n        val hexPrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val hexPrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val hexPrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n       \
    \ val hexPrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val\
    \ hexPrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val\
    \ hexPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n   \
    \     val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ mutable.Set[Long]()\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val hexPrimePrimePri\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3be39_n4.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3be39_n4.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3be39_n4.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexPrimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3be39_n4.scala:29:23\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mhexPrime\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3be39_n4.scala:30:28\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mhexPrimePrime\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3be39_n4.scala:31:33 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mhexPrimePrimePrime\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Not found: mutable\n\e[31m   |\e\
    [0m"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexLength = hex.length\n        val hexKey = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength = new mutable.HashMap[Int, Int]()\n       \
    \ val hexKeyLength2 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength3\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength4 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength5 = new mutable.HashMap[Int, Int]()\n      \
    \  val hexKeyLength6 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength7\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength8 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength9 = new mutable.HashMap[Int, Int]()\n      \
    \  val hexKeyLength10 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength11\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength12 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength13 = new mutable.HashMap[Int, Int]()\n     \
    \   val hexKeyLength14 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength15\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength16 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength17 = new mutable.HashMap[Int, Int]()\n     \
    \   val hexKeyLength18 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength19\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength20 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength21 = new mutable.HashMap[Int, Int]()\n     \
    \   val hexKeyLength22 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength23\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength24 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength25 = new mutable.HashMap[Int, Int]()\n     \
    \   val hexKeyLength26 = new mutable.HashMap[Int, Int]()\n        val hexKeyLength27\
    \ = new mutable.HashMap[Int, Int]()\n        val hexKeyLength28 = new mutable.HashMap[Int,\
    \ Int]()\n        val hexKeyLength\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) ==\
    \ (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\"\
    )) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpro4o_e8f.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpro4o_e8f.scala:28:25\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKey\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpro4o_e8f.scala:29:31 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpro4o_e8f.scala:30:32 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mhexKeyLength2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpro4o_e8f.scala:31:32\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mhexKeyLength3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpro4o_e8f.scala:32:32 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mhexKeyLength4\e[0m ="
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexKey = hex.foldLeft(0L){\n            case (acc, c) =>\n      \
    \          val hexDigit = hexToInt(c)\n                val hexDigitCount = hexDigit\
    \ / 16\n                val hexDigitRemainder = hexDigit % 16\n              \
    \  val hexDigitCount = hexDigitCount + hexDigitRemainder\n                val\
    \ hexDigitCount = hexDigitCount + hexDigitCount\n                val hexDigitCount\
    \ = hexDigitCount + hexDigitCount\n                val hexDigitCount = hexDigitCount\
    \ + hexDigitCount\n                val hexDigitCount = hexDigitCount + hexDigitCount\n\
    \                val hexDigitCount = hexDigitCount + hexDigitCount\n         \
    \       val hexDigitCount = hexDigitCount + hexDigitCount\n                val\
    \ hexDigitCount = hexDigitCount + hexDigitCount\n                val hexDigitCount\
    \ = hexDigitCount + hexDigitCount\n                val hexDigitCount = hexDigitCount\
    \ + hexDigitCount\n                val hexDigitCount = hexDigitCount + hexDigitCount\n\
    \                val hexDigitCount = hexDigitCount + hexDigitCount\n         \
    \       val hexDigitCount = hexDigitCount + hexDigitCount\n                val\
    \ hexDigitCount = hexDigitCount + hexDigitCount\n                val hexDigitCount\
    \ = hexDigitCount + hexDigitCount\n                val hexDigitCount = hexDigitCount\
    \ + hexDigitCount\n                val hexDigitCount = hexDigitCount + hexDigitCount\n\
    \                val hexDigitCount = hexDigitCount + hexDigitCount\n         \
    \       val hexDigitCount = hexDigitCount + hexDigitCount\n                val\
    \ hexDigitCount = hexDigitCount + hexDigitCount\n                val hexDigitCount\
    \ = hexDigitCount + hexDigitCount\n                val hexDigitCount = hexDigitCount\
    \ + hexDigitCount\n                val hexDigitCount = hexDigitCount + hexDigitCount\n\
    \                val hexDigitCount = hexDigitCount + hexDigitCount\n         \
    \       val hexDigitCount = hexDigitCount + hexDigitCount\n                val\
    \ hexDigitCount = hexDigitCount + hexDigitCount\n                val hexDigitCount\
    \ = hexDigitCount + hexDigitCount\n                val hexDigitCount = hexDigitCount\
    \ + hexDigitCount\n                val hexDigitCount = hexDigitCount + hexDigitCount\n\
    \                val hexDigitCount = hexDigitCount + hexDigitCount\n         \
    \       val hexDigitCount = hexDigitCount + hexDigitCount\n                val\
    \ hexDigitCount = hexDigitCount + hexDigitCount\n                val hexDigitCount\
    \ = hexDigitCount + hexDigitCount\n                val hexDigitCount = hexDigitCount\
    \ + hexDigitCount\n                val hexDigitCount = hex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm3bdpuzi.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm3bdpuzi.scala:29:31\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e\
    [0m \e[36mhexDigit\e[0m = hexToInt(c)\n\e[31m\e[31m   |\e[0m                 \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: hexToInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3bdpuzi.scala:66:39\
    \ --------------------\e[0m\e[0m\n\e[31m66 |\e[0m                \e[33mval\e[0m\
    \ \e[36mhexDigitCount\e[0m = hex\n\e[31m\e[31m   |\e[0m                      \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \   Found:    Unit\n\e[31m   |\e[0m                                       Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpm3bdpuzi.scala:69:11\
    \ -----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    assert(hexKey((\e\
    [31m\"AB\"\e[0m)) == (\e[31m1l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m           \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpm3bdpuzi.scala:70:11\
    \ -----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    assert(hexKey((\e\
    [31m\"1077E\"\e[0m)) == (\e[31m2l\e[0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m           \e[33mvalue\e[0m \e[35mhexKey\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpm3bdpuzi.scala:71:11\
    \ -----------------------------\e[0m\e[0m\n\e[31m71 |\e[0m    assert(hexKey((\e\
    [31m\"ABED1A33\"\e[0m)) == (\e[31m4l\e[0m));\n\e[31m\e[31m   |\e[0m          \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvalue\e[0m \e[35mhexKey\e[0m does\
    \ not t"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\").toList\n\
    \        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        val primesCount\
    \ = primes.count(_ > 0)\n        val hexDigits = nums.filter(x => x != \"A\" &&\
    \ x != \"B\" && x != \"C\" && x != \"D\" && x != \"E\" && x != \"F\")\n      \
    \  val hexDigitCount = hexDigits.size\n        val hexDigitPrimes = hexDigits.filter(x\
    \ => primes.contains(x.toInt))\n        val hexDigitPrimeCount = hexDigitPrimes.size\n\
    \        val hexDigitPrimePrimes = hexDigitPrimes.filter(x => primes.contains(x.toInt))\n\
    \        val hexDigitPrimePrimeCount = hexDigitPrimePrimes.size\n        val hexDigitPrimePrimePrimes\
    \ = hexDigitPrimePrimes.filter(x => primes.contains(x.toInt))\n        val hexDigitPrimePrimePri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) ==\
    \ (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
    )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
    )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptr52waem.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptr52waem.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2\e[0m, \e[31m3\e[0m, \e[31m5\e[0m,\
    \ \e[31m7\e[0m, \e[31m11\e[0m, \e[31m13\e[0m, \e[31m17\e[0m, \e[31m19\e[0m, \e\
    [31m23\e[0m, \e[31m29\e[0m, \e[31m31\e[0m, \e[31m37\e[0m, \e[31m41\e[0m, \e[31m43\e\
    [0m, \e[31m47\e[0m, \e[31m53\e[0m, \e[31m59\e[0m, \e[31m61\e[0m, \e[31m67\e[0m,\
    \ \e[31m71\e[0m, \e[31m73\e[0m, \e[31m79\e[0m, \e[31m83\e[0m, \e[31m89\e[0m, \e\
    [31m97\e[0m, \e[31m101\e[0m, \e[31m103\e[0m, \e[31m107\e[0m, \e[31m109\e[0m, \e\
    [31m113\e[0m, \e[31m127\e[0m, \e[31m131\e[0m, \e[31m137\e[0m, \e[31m139\e[0m,\
    \ \e[31m149\e[0m, \e[31m151\e[0m, \e[31m157\e[0m, \e[31m163\e[0m, \e[31m167\e\
    [0m, \e[31m173\e[0m, \e[31m179\e[0m, \e[31m181\e[0m, \e[31m191\e[0m, \e[31m193\e\
    [0m, \e[31m197\e[0m, \e[31m199\e[0m, \e[31m211\e[0m, \e[31m223\e[0m, \e[31m227\e\
    [0m, \e[31m229\e[0m, \e[31m233\e[0m, \e[31m239\e[0m, \e[31m241\e[0m, \e[31m251\e\
    [0m, \e[31m257\e[0m, \e[31m263\e[0m, \e[31m269\e[0m, \e[31m271\e[0m, \e[31m277\e\
    [0m, \e[31m281\e[0m, \e[31m283\e[0m, \e[31m293\e[0m, \e[31m307\e[0m, \e[31m311\e\
    [0m, \e[31m313\e[0m, \e[31m317\e[0m, \e[31m331\e[0m, \e[31m337\e[0m, \e[31m347\e\
    [0m, \e[31m349\e[0m, \e[31m353\e[0m, \e[31m359\e[0m, \e[31m367\e[0m, \e[31m373\e\
    [0m, \e[31m379\e[0m, \e[31m383\e[0m, \e[31m389\e[0m, \e[31m397\e[0m, \e[31m401\e\
    [0m, \e[31m409\e[0m, \e[31m419\e[0m, \e[31m421\e[0m, \e[31m431\e[0m, \e[31m433\e\
    [0m, \e[31m439\e[0m, \e[31m443\e[0m, \e[31m449\e[0m, \e[31m457\e[0m, \e[31m461\e\
    [0m, \e[31m463\e[0m, \e[31m467\e[0m, \e[31m479\e[0m, \e[31m487\e[0m, \e[31m491\e\
    [0m, \e[31m499\e[0m, \e[31m503\e[0m, \e[31m509\e[0m, \e[31m521\e[0m, \e[31m523\e\
    [0m, \e[31m541\e[0m, \e[31m547\e[0m, \e[31m557\e[0m, \e[31m563\e[0m, \e[31m569\e\
    [0m, \e[31m571\e[0m, \e[31m577\e[0m, \e[31m587\e[0m, \e[31m593\e[0m, \e[31m599\e\
    [0m, \e[31m601\e[0m, \e[31m607\e[0m, \e[31m613\e[0m, \e[31m617\e[0m, \e[31m619\e\
    [0m, \e[31m631\e[0m, \e[31m641\e[0m, \e[31m643\e[0m, \e[31m647\e[0m, \e[31m653\e\
    [0m, \e[31m659\e[0m, \e[31m661\e[0m, \e[31m673\e[0m, \e[31m67"
  stdout: ''
  timestamp: 1660009625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq7c799_.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmprq7c799_.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmprq7c799_.scala:26)\n\tat Problem$.main(tmprq7c799_.scala:31)\n\
    \tat Problem.main(tmprq7c799_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toHexString)\n\
    \        val hexKey = hex.map(x => x.toInt)\n        val hexKey2 = hexKey.map(x\
    \ => x % 10)\n        val hexKey3 = hexKey2.map(x => x % 10)\n        val hexKey4\
    \ = hexKey3.map(x => x % 10)\n        val hexKey5 = hexKey4.map(x => x % 10)\n\
    \        val hexKey6 = hexKey5.map(x => x % 10)\n        val hexKey7 = hexKey6.map(x\
    \ => x % 10)\n        val hexKey8 = hexKey7.map(x => x % 10)\n        val hexKey9\
    \ = hexKey8.map(x => x % 10)\n        val hexKey10 = hexKey9.map(x => x % 10)\n\
    \        val hexKey11 = hexKey10.map(x => x % 10)\n        val hexKey12 = hexKey11.map(x\
    \ => x % 10)\n        val hexKey13 = hexKey12.map(x => x % 10)\n        val hexKey14\
    \ = hexKey13.map(x => x % 10)\n        val hexKey15 = hexKey14.map(x => x % 10)\n\
    \        val hexKey16 = hexKey15.map(x => x % 10)\n        val hexKey17 = hexKey16.map(x\
    \ => x % 10)\n        val hexKey18 = hexKey17.map(x => x % 10)\n        val hexKey19\
    \ = hexKey18.map(x => x % 10)\n        val hexKey20 = hexKey19.map(x => x % 10)\n\
    \        val hexKey21 = hexKey20.map(x => x % 10)\n        val hexKey22 = hexKey21.map(x\
    \ => x % 10)\n        val hexKey23 = hexKey22.map(x => x % 10)\n        val hexKey24\
    \ = hexKey23.map(x => x % 10)\n        val hexKey25 = hexKey24.map(x => x % 10)\n\
    \        val hexKey26 = hexKey25.map(x => x % 10)\n        val hexKey27 = hexKey26.map(x\
    \ => x % 10)\n        val hexKey28 = hexKey27.map(x => x % 10)\n        val hexKey29\
    \ = hexKey28.map(x => x % 10)\n        val hexKey30 = hexKey29.map(x => x % 10)\n\
    \        val hexKey31 = hexKey30.map(x => x % 10)\n        val hexKey32 = hexKey31.map(x\
    \ => x % 10)\n\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbn76t9xh.scala:26:40 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m      value toHexString is not a member of Char.\n\e[31m   |\e\
    [0m      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          longWrapper(_$1)\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpbn76t9xh.scala:26:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhex\e[0m = num.toCharArray.map(_.toHexString)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbn76t9xh.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val primes = mutable.Set[Int]()\n        val primesSet = mutable.Set[Int]()\n\
    \        val primesSet2 = mutable.Set[Int]()\n        val primesSet3 = mutable.Set[Int]()\n\
    \        val primesSet4 = mutable.Set[Int]()\n        val primesSet5 = mutable.Set[Int]()\n\
    \        val primesSet6 = mutable.Set[Int]()\n        val primesSet7 = mutable.Set[Int]()\n\
    \        val primesSet8 = mutable.Set[Int]()\n        val primesSet9 = mutable.Set[Int]()\n\
    \        val primesSet10 = mutable.Set[Int]()\n        val primesSet11 = mutable.Set[Int]()\n\
    \        val primesSet12 = mutable.Set[Int]()\n        val primesSet13 = mutable.Set[Int]()\n\
    \        val primesSet14 = mutable.Set[Int]()\n        val primesSet15 = mutable.Set[Int]()\n\
    \        val primesSet16 = mutable.Set[Int]()\n        val primesSet17 = mutable.Set[Int]()\n\
    \        val primesSet18 = mutable.Set[Int]()\n        val primesSet19 = mutable.Set[Int]()\n\
    \        val primesSet20 = mutable.Set[Int]()\n        val primesSet21 = mutable.Set[Int]()\n\
    \        val primesSet22 = mutable.Set[Int]()\n        val primesSet23 = mutable.Set[Int]()\n\
    \        val primesSet24 = mutable.Set[Int]()\n        val primesSet25 = mutable.Set[Int]()\n\
    \        val primesSet26 = mutable.Set[Int]()\n        val primesSet27 = mutable.Set[Int]()\n\
    \        val primesSet28 = mutable.Set[Int]()\n        val primesSet29 = mutable.Set[Int]()\n\
    \        val primesSet30 = mutable.Set[Int]()\n        val primesSet31 = mutable.Set[Int]()\n\
    \        val primesSet32 = mutable.Set[Int]()\n        val primesSet33 = mutable.Set[Int]()\n\
    \        val prime\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmployczbqi.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:29:25\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:30:25\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmployczbqi.scala:31:25\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanatio"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toInt)\n\
    \        val hexKey = hex.map(x => math.pow(16, x))\n        val hexKeySum = hexKey.sum\n\
    \        val hexKeySumInt = hexKeySum.toInt\n        val hexKeySumInt = hexKeySumInt.toLong\n\
    \        hexKeySumInt\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn4a_0qy4.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mhexKeySumInt\e[0m = hexKeySumInt.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mhexKeySumInt is already defined as \e[33mvalue\e[0m \e[35mhexKeySumInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray\n\
    \        val hexCount = hex.length\n        val hexKey = hex.map(x => x.toInt).map(x\
    \ => x * x).sum\n        val hexKey2 = hexKey.toLong\n        val hexKey3 = hexKey2.toLong\n\
    \        val hexKey4 = hexKey3.toLong\n        val hexKey5 = hexKey4.toLong\n\
    \        val hexKey6 = hexKey5.toLong\n        val hexKey7 = hexKey6.toLong\n\
    \        val hexKey8 = hexKey7.toLong\n        val hexKey9 = hexKey8.toLong\n\
    \        val hexKey10 = hexKey9.toLong\n        val hexKey11 = hexKey10.toLong\n\
    \        val hexKey12 = hexKey11.toLong\n        val hexKey13 = hexKey12.toLong\n\
    \        val hexKey14 = hexKey13.toLong\n        val hexKey15 = hexKey14.toLong\n\
    \        val hexKey16 = hexKey15.toLong\n        val hexKey17 = hexKey16.toLong\n\
    \        val hexKey18 = hexKey17.toLong\n        val hexKey19 = hexKey18.toLong\n\
    \        val hexKey20 = hexKey19.toLong\n        val hexKey21 = hexKey20.toLong\n\
    \        val hexKey22 = hexKey21.toLong\n        val hexKey23 = hexKey22.toLong\n\
    \        val hexKey24 = hexKey23.toLong\n        val hexKey25 = hexKey24.toLong\n\
    \        val hexKey26 = hexKey25.toLong\n        val hexKey27 = hexKey26.toLong\n\
    \        val hexKey28 = hexKey27.toLong\n        val hexKey29 = hexKey28.toLong\n\
    \        val hexKey30 = hexKey29.toLong\n        val hexKey31 = hexKey30.toLong\n\
    \        val hexKey32 = hexKey31.toLong\n        val hexKey33 = hexKey32.toLong\n\
    \        val hexKey34 = hexKey33.toLong\n        val hexKey35 = hexKey34.toLong\n\
    \        val hexKey36 = hexKey35.toLong\n        val hexKey37 = hexKey36.toLong\n\
    \        val hexKey38 = hexKey37.toLong\n        val hexKey39 = hexKey38.toLong\n\
    \        val hexKey40 = hexKey39.toLong\n        val hexKey41 = hexKey40.toLong\n\
    \        val hexKey42 = hex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n\
    \    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) ==\
    \ (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0cvcvunb.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val nums = num.split(\"\").toList\n\
    \        val hexNums = nums.map(_.toInt)\n        val primes = hexNums.filter(x\
    \ => isPrime(x))\n        primes.count(x => hexNums.contains(x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1wwafqi9.scala:28:41 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = hexNums.filter(\e\
    [36mx\e[0m => isPrime(x))\n\e[31m\e[31m   |\e[0m                             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \      Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.map(x => x % 10).sum\n        hexKey\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hexKey((\"AB\")) == (1l));\n    assert(hexKey((\"\
    1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\")) == (4l));\n    assert(hexKey((\"\
    2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"\
    112233445566778899AABBCCDDEEFF00\")) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmprq7c799_.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmprq7c799_.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmprq7c799_.scala:26)\n\tat Problem$.main(tmprq7c799_.scala:31)\n\
    \tat Problem.main(tmprq7c799_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have been tasked to write a function that receives \n    // a\
    \ hexadecimal number as a string and counts the number of hexadecimal \n    //\
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ // greater than 1 that is not a product of two smaller natural numbers).\n \
    \   // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n   \
    \ // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"\
    123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n\
    \    def hexKey(num : String) : Long = {\n        val hex = num.toCharArray.map(_.toString.toInt)\n\
    \        val hexKey = hex.foldLeft(0L){ (sum, digit) => sum + digit * digit}\n\
    \        hexKey\n    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"\
    AB\")) == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"\
    ABED1A33\")) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"\
    123456789ABCDEF0\")) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"A\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpmebrqwch.scala:26)\n\
    \tat Problem$.$anonfun$adapted$1(tmpmebrqwch.scala:26)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:934)\n\
    \tat Problem$.hexKey(tmpmebrqwch.scala:26)\n\tat Problem$.main(tmpmebrqwch.scala:31)\n\
    \tat Problem.main(tmpmebrqwch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799583
