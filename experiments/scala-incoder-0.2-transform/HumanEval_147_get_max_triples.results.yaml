language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val s = a.length\
    \ - 1\n        val t = a.length - 1\n        val r = a.length - 1\n        val\
    \ p = a.length - 1\n        val q = a.length - 1\n        val l = a.length - 1\n\
    \        val u = a.length - 1\n        val v = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val w = a.length - 1\n        val x = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpydi17z4p.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpydi17z4p.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mw is already defined\
    \ as \e[33mvalue\e[0m \e[35mw\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpydi17z4p.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx\
    \ is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpydi17z4p.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36my\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpydi17z4p.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined\
    \ as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpydi17z4p.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mw\
    \ is already de"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = j * j - j + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = k * k - k\
    \ + 1\n            k += 1\n        }\n        for(i <- 0 until n) {\n        \
    \    for(j <- 0 until n) {\n                for(k <- 0 until n) {\n          \
    \          if(i == j && j == k) {\n                        count += 1\n      \
    \              }\n                    if(a(i) == a(j) && a(j) == a(k)) {\n   \
    \                     count += 1\n                    }\n                }\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp748xgx5q.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp748xgx5q.scala:38:25\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp748xgx5q.scala:39:29 --------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp748xgx5q.scala:40:33 --------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (n : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0\n        for(i\
    \ <- 0 until n){\n            val j = i * i - i + 1\n            val k = i * i\
    \ + j\n            val sum = sum + k\n            val key = sum % 3\n        \
    \    val value = a(i) + a(j) + a(k)\n            if(value.equals(k)){\n      \
    \          count(key) = count(key) + 1\n            }\n            a(i) = value\n\
    \        }\n        count(0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl28gc7td.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl28gc7td.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl28gc7td.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val maxCount = 0\n   \
    \     val maxTriples = mutable.Map[Long, Long]()\n        for(i<- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      if(i<j && i<k && j<k) {\n                a(i) = i\n                count(i)\
    \ = 1\n                count(k) = 1\n                count(j) = 1\n          \
    \      maxCount = max(maxCount, count(i))\n                maxCount = max(maxCount,\
    \ count(k))\n                maxCount = max(maxCount, count(j))\n            }\n\
    \        }\n        for(i<- 1 to n) {\n            val j = i * i - i + 1\n   \
    \         val k = i * i + i + j\n            if(a(i) == i && a(i) == k && a(i)\
    \ == j) {\n                maxTriples(i) = 1\n            }\n        }\n     \
    \   maxCount\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpay4jsh3x.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpay4jsh3x.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpay4jsh3x.scala:18:25\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpay4jsh3x.scala:19:21 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mfor\e[0m(i<- \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m\
    \                     ^\e[0m\n\e[31m   |\e[0m                     Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpay4jsh3x.scala:27:25 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                maxCount = max(maxCount, count(i))\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val maxCount\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n+1)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n   \
    \     a(4) = 21\n        var count = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        while(i < a.length && j < a.length && k < a.length)\
    \ {\n            if(a(i) + a[j] + a(k) == 3) {\n                count += 1\n \
    \               i += 1\n                j += 1\n                k += 1\n     \
    \       }\n            if(a(i) + a[j] + a(k) == 7) {\n                count +=\
    \ 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            if(a(i) + a[j] + a(k) == 13) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            if(a(i) + a[j] + a(k) == 21) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpybfwtni4.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybfwtni4.scala:26:24\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(a(i)\
    \ + a[\e[35mj\e[0m] + a(k) == \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \               ^\e[0m\n\e[31m   |\e[0m                        Not found: type\
    \ j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybfwtni4.scala:32:24\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m(a(i)\
    \ + a[\e[35mj\e[0m] + a(k) == \e[31m7\e[0m) {\n\e[31m\e[31m   |\e[0m         \
    \               ^\e[0m\n\e[31m   |\e[0m                        Not found: type\
    \ j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybfwtni4.scala:38:24\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[33mif\e[0m(a(i)\
    \ + a[\e[35mj\e[0m] + a(k) == \e[31m13\e[0m) {\n\e[31m\e[31m   |\e[0m        \
    \                ^\e[0m\n\e[31m   |\e[0m                        Not found: type\
    \ j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybfwtni4.scala:44:24\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m            \e[33mif\e[0m(a(i)\
    \ + a[\e[35mj\e[0m] + a(k) == \e[31m21\e[0m) {\n\e[31m\e[31m   |\e[0m        \
    \                ^\e[0m\n\e[31m   |\e[0m                        Not found: type\
    \ j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        val k = m\n        val i\
    \ = 1 \n        val j = 1\n        val k = 1\n        val sum = 0\n        while(i\
    \ < n && j < n && k < n) {\n            val sum = sum + a(i) + a(j) + a(k) \n\
    \            i = i + 1\n            j = j + 1\n            k = k + 1\n       \
    \ }\n        if(sum % 3 == 0) {\n            return sum\n        }\n        else\
    \ {\n            return 0\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbpxaqdbc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpxaqdbc.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpbpxaqdbc.scala:24:22 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = sum + a(i) + a(j)\
    \ + a(k) \n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m\
    \                      Recursive \e[33mvalue\e[0m \e[35msum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbpxaqdbc.scala:25:14 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i = i + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbpxaqdbc.scala:26:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            j = j +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpbpxaqdbc.scala:27:14 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            k = k + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val k\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659798427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpba8dkv2m.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpba8dkv2m.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpba8dkv2m.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpba8dkv2m.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpba8dkv2m.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpba8dkv2m.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi\
    \ is already de"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpar3oa4vw.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:25:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = n - 1\n        val m = m - 2\n    \
    \    val i = 2\n        val j = 0\n        val k = 0\n        var count = 0\n\
    \        while (i < m && j < n && k < m) {\n            val temp = a(i)\n    \
    \        a(i) = a(i) + a(i + 1) + a(i + 2)\n            val temp1 = a(i)\n   \
    \         a(i) = temp + temp1 + temp2\n            val temp2 = a(i)\n        \
    \    a(i) = temp + temp1 + temp2\n            val temp3 = a(i)\n            a(i)\
    \ = temp + temp1 + temp2\n            count += 1\n            i += 1\n       \
    \     j += 1\n            k += 1\n        }\n        count * 3\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn0ojy9tc.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn0ojy9tc.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn0ojy9tc.scala:33:14 ------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn0ojy9tc.scala:34:14\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpn0ojy9tc.scala:35:14 ------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m            k += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ k.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        var i =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2 % 3 == 0).map(_._1)\n\
    \        triples.foreach { triple =>\n            val tripleCount = triples.count(_._1\
    \ == triple)\n            if (tripleCount > maxTriples(triple)) {\n          \
    \      maxTriples(triple) = tripleCount\n                maxTriple(triple) = triple\n\
    \            }\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTriple = maxTriples.maxBy(_._1)._2\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n            return 0\n        }\n       \
    \ val maxTripleCount = maxTriples.values.max\n        if (maxTripleCount == 0)\
    \ {\n            return 0\n        }\n        val maxTripleCount = maxTriples.values.max\n\
    \        if (maxTripleCount == 0) {\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55hzj7x0.scala:96:0 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp55hzj7x0.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriple\e[0m = maxTriples.maxBy(_._1)._2\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriple\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp55hzj7x0.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleCount\e[0m = maxTriples.values.max\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTripleCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTripleCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp55hzj7x0.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleCount\e[0m = maxTriples.values.max\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTripleCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTripleCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp55hzj7x0.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTripleCount\e[0m = maxTriples.values.max\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTripleCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxTripleCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var count = 0\n        while (i < n && j < n && k\
    \ < n) {\n            a(i) = i * i - i + 1\n            i += 1\n            j\
    \ += 1\n            k += 1\n            count += 1\n        }\n        if (count\
    \ > 0) {\n            val max = scala.math.max(scala.math.max(a(i), a(i)), a(i))\n\
    \            val min = scala.math.min(scala.math.min(a(i), a(i)), a(i))\n    \
    \        val sum = scala.math.sum(a(i))\n            val product = scala.math.prod(scala.math.prod(a(i),\
    \ a(i), a(i)))\n            val triples = scala.math.ceil(product / m)\n     \
    \       val triple = scala.math.ceil(sum / m)\n            val triple2 = scala.math.ceil(sum\
    \ / triple)\n            val triple3 = scala.math.ceil(sum / triple2)\n      \
    \      val triple4 = scala.math.ceil(sum / triple3)\n            val triple5 =\
    \ scala.math.ceil(sum / triple4)\n            val triple6 = scala.math.ceil(sum\
    \ / triple5)\n            val triple7 = scala.math.ceil(sum / triple6)\n     \
    \       val triple8 = scala.math.ceil(sum / triple7)\n            val triple9\
    \ = scala.math.ceil(sum / triple8)\n            val triple10 = scala.math.ceil(sum\
    \ / triple9)\n            val triple11 = scala.math.ceil(sum / triple10)\n   \
    \         val triple12 = scala.math.ceil(sum / triple11)\n            val triple13\
    \ = scala.math.ceil(sum / triple12)\n            val triple14 = scala.math.ceil(sum\
    \ / triple13)\n            val triple15 = scala.math.ceil(sum / triple14)\n  \
    \          val triple16 = scala.math.ceil(sum / triple15)\n            val triple17\
    \ = scala.math.ceil(sum / triple16)\n            val triple18 = scala.math.ceil(sum\
    \ / triple17)\n            val triple19 = scala.math.ceil(sum / triple18)\n  \
    \          val triple20 = scala.math.ceil(sum / triple19)\n            val triple21\
    \ = scala.math.ceil(sum / triple20)\n            val triple22 = scala.math.ceil(sum\
    \ / triple21)\n            val triple23 = scala.math.ceil(sum / triple22)\n  \
    \          val triple24 = scala.math.ceil(sum / triple23)\n            val triple25\
    \ = scala.math.ceil(sum / triple24)\n            val triple26 = scala.math.ceil(sum\
    \ / triple25)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkjqkmk2f.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkjqkmk2f.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkjqkmk2f.scala:31:33\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m\
    \ \e[36msum\e[0m = scala.math.sum(a(i))\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value sum is\
    \ not a member of math\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkjqkmk2f.scala:32:37\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m\
    \ \e[36mproduct\e[0m = scala.math.prod(scala.math.prod(a(i), a(i), a(i)))\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value prod is not a member of math\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkjqkmk2f.scala:32:53 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mproduct\e[0m = scala.math.prod(scala.math.prod(a(i),\
    \ a(i), a(i)))\n\e[31m\e[31m   |\e[0m                                        \
    \  ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value prod is not a member of math\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkjqkmk2f.scala:69:1 ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m}\n\
    \e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m\
    \ Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpkjqkmk2f.scala:62:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m62 |\e[0m   "
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val count = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val tripleSum = mutable.ArrayBuffer.empty[Long]\n        val tripleSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val tripleSumsSums = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val tripleSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n       \
    \ val tripleSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val tripleSumsSums\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj5wqs6ay.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5wqs6ay.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5wqs6ay.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5wqs6ay.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5wqs6ay.scala:19:16\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5wqs6ay.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mk\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m--"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n\
    \ + 1)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n\
    \        a(4) = 21\n        var count = 0\n        var i = 0\n        while (i\
    \ < n) {\n            var j = i + 1\n            while (j < n) {\n           \
    \     var k = j + 1\n                while (k < n) {\n                    if (a(i)\
    \ + a(j) + a(k) == 3) {\n                        count += 1\n                \
    \    }\n                    k += 1\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9anzpiy7.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var a = new Array[Long](n)\n        while(i\
    \ < n) {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n  \
    \      while(j < n) {\n            a(j) = a(j) + a(j) + a(j)\n            j +=\
    \ 1\n        }\n        while(k < n) {\n            if(a(k) % 3 == 0) {\n    \
    \            return k\n            }\n            k += 1\n        }\n        return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8wpqga6.scala:18:32\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val triples\
    \ = mutable.ListBuffer[Long]()\n        for (i <- 0 until n) {\n            a(i)\
    \ = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n            for\
    \ (j <- 0 until n) {\n                for (k <- 0 until n) {\n               \
    \     if (a(i) + a(j) + a(k) % 3 == 0) {\n                        triples += a(i)\
    \ + a(j) + a(k) \n                    }\n                }\n            }\n  \
    \      }\n        triples.toList.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe2o9mc27.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpe2o9mc27.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        while(i < n) {\n            a(i) = i * i - i + 1\n\
    \            i += 1\n            count += 1\n        }\n        while(j < n) {\n\
    \            a(j) = i * i - i + 1\n            j += 1\n            count += 1\n\
    \        }\n        while(k < n) {\n            a(k) = i * i - i + 1\n       \
    \     k += 1\n            count += 1\n        }\n        val triples = a.filter(_\
    \ % 3 == 0).length\n        count * triples\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg0w1617k.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ArrayBuffer.empty[Long]\n        val max = 0\n \
    \       val min = 0\n        val maxTriples = 0\n        val minTriples = 0\n\
    \        val maxTriple = 0\n        val minTriple = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpakncki4s.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpakncki4s.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpakncki4s.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mminTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpakncki4s.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpakncki4s.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mminTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpakncki4s.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for( i <- 1 to n){\n \
    \           val j = i * i - i + 1\n            val k = i * i + i + 1\n       \
    \     if( j < k && j % 3 == 0){\n                a(i) = j\n                count(i)\
    \ = count(i) + 1\n            }\n        }\n        count(a.max)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm5pthky9.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5pthky9.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm5pthky9.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = mutable.ArrayBuffer.empty[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_47fe7ut.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_47fe7ut.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_47fe7ut.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_47fe7ut.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_47fe7ut.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1660028528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < n) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < n) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ebbme7l.scala:166:0 ---------------------------\e\
    [0m\e[0m\n\e[31m166 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ebbme7l.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ebbme7l.scala:165:1\
    \ --------------------\e[0m\e[0m\n\e[31m165 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp8ebbme7l.scala:158:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m158 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val s = mutable.ArrayBuffer.empty[Long]\n\
    \        val t = mutable.ArrayBuffer.empty[Long]\n        val r = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val s = mutable.ArrayBuffer.empty[Long]\n\
    \        val t = mutable.ArrayBuffer.empty[Long]\n        val r = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val s = mutable.ArrayBuffer.empty[Long]\n\
    \        val t = mutable.ArrayBuffer.empty[Long]\n        val r = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val s = mutable.ArrayBuffer.empty[Long]\n\
    \        val t = mutable.ArrayBuffer.empty[Long]\n        val r = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val s = mutable.ArrayBuffer.empty[Long]\n\
    \        val t = mutable.ArrayBuffer.empty[Long]\n        val r = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqdkhd2n.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcqdkhd2n.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcqdkhd2n.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcqdkhd2n.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcqdkhd2n.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcqdkhd2n.scala:28:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1660028528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val triples = mutable.HashSet[Long]()\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            while (j < n) {\n                while\
    \ (k < n) {\n                    if (a(i) + a(j) + a(k) == 3 * m) triples += a(i)\
    \ + a(j) + a(k) \n                    k += 1\n                }\n            \
    \    j += 1\n            }\n            i += 1\n        }\n        count = triples.size\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi0z906ri.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi0z906ri.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        val triples = a.filter(_ % 3 == 0).length\n       \
    \ if (triples > 0) {\n            count\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptv8pld_8.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while(i < n && j <\
    \ n && k < n) {\n            if(i+j+k == n) count += 1\n            if(a(i) ==\
    \ a(j) && a(j) == a(k)) count += 1\n            if(a(i) + a(j) + a(k) == 3*n)\
    \ count += 1\n            i += 1\n            j += 1\n            k += 1\n   \
    \     }\n        count match {\n            case 0 => 0\n            case _ =>\
    \ count\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7z6kw67o.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7z6kw67o.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        var i = 0\n        var j = 0\n    \
    \    var k = 0\n        var count = 0\n        while(i < n) {\n            triples.put(i,\
    \ 0)\n            triples.put(j, 0)\n            triples.put(k, 0)\n         \
    \   triples.put(i+j, 0)\n            triples.put(i+k, 0)\n            triples.put(i+j+k,\
    \ 0)\n            triples.put(i+j, i+k)\n            triples.put(i+k, i+j)\n \
    \           triples.put(i+j+k, i+j)\n            triples.put(i+j, i+k+j)\n   \
    \         triples.put(i+k, i+j+k)\n            triples.put(i+j+k, i+j+k)\n   \
    \         triples.put(i+j, i+k+j+k)\n            triples.put(i+k, i+j+k+j)\n \
    \           triples.put(i+j+k, i+j+k+j)\n            triples.put(i+j, i+k+j+k+j)\n\
    \            triples.put(i+k, i+j+k+j+k)\n            triples.put(i+j+k, i+j+k+j+k)\n\
    \            triples.put(i+j, i+k+j+k+j+k)\n            triples.put(i+k, i+j+k+j+k+j)\n\
    \            triples.put(i+j+k, i+j+k+j+k+j)\n            triples.put(i+j, i+k+j+k+j+k+j)\n\
    \            triples.put(i+k, i+j+k+j+k+j+k)\n            triples.put(i+j+k, i+j+k+j+k+j+k)\n\
    \            triples.put(i+j, i+k+j+k+j+k+j+k)\n            triples.put(i+k, i+j+k+j+k+j+k+j)\n\
    \            triples.put(i+j+k, i+j+k+j+k+j+k+j)\n            triples.put(i+j,\
    \ i+k+j+k+j+k+j+k+j)\n            triples.put\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9dwe404u.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9dwe404u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9dwe404u.scala:17:16 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9dwe404u.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9dwe404u.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9dwe404u.scala:63:1 ---------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when "
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        val result = a.filter(_ % 3 == 0).length\n        count\
    \ + result\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3yj8s6o8.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val max = a.length\n\
    \        val maxTriples = a.length\n        val maxTriplesSum = a.length\n   \
    \     val maxTriplesSum2 = a.length\n        val maxTriplesSum3 = a.length\n \
    \       val maxTriplesSum4 = a.length\n        val maxTriplesSum5 = a.length\n\
    \        val maxTriplesSum6 = a.length\n        val maxTriplesSum7 = a.length\n\
    \        val maxTriplesSum8 = a.length\n        val maxTriplesSum9 = a.length\n\
    \        val maxTriplesSum10 = a.length\n        val maxTriplesSum11 = a.length\n\
    \        val maxTriplesSum12 = a.length\n        val maxTriplesSum13 = a.length\n\
    \        val maxTriplesSum14 = a.length\n        val maxTriplesSum15 = a.length\n\
    \        val maxTriplesSum16 = a.length\n        val maxTriplesSum17 = a.length\n\
    \        val maxTriplesSum18 = a.length\n        val maxTriplesSum19 = a.length\n\
    \        val maxTriplesSum20 = a.length\n        val maxTriplesSum21 = a.length\n\
    \        val maxTriplesSum22 = a.length\n        val maxTriplesSum23 = a.length\n\
    \        val maxTriplesSum24 = a.length\n        val maxTriplesSum25 = a.length\n\
    \        val maxTriplesSum26 = a.length\n        val maxTriplesSum27 = a.length\n\
    \        val maxTriplesSum28 = a.length\n        val maxTriplesSum29 = a.length\n\
    \        val maxTriplesSum30 = a.length\n        val maxTriplesSum31 = a.length\n\
    \        val maxTriplesSum32 = a.length\n        val maxTriplesSum33 = a.length\n\
    \        val maxTriplesSum34 = a.length\n        val maxTriplesSum35 = a.length\n\
    \        val maxTriplesSum36 = a.length\n        val maxTriplesSum37 = a.length\n\
    \        val maxTriplesSum38 = a.length\n        val maxTriplesSum39 = a.length\n\
    \        val maxTriplesSum40 = a.length\n        val maxTriples\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpls2b039h.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpls2b039h.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpls2b039h.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val s = a.slice(1, m)\n        val t = a.slice(m,\
    \ 2 * m)\n        val u = a.slice(2 * m, 3 * m)\n        val v = a.slice(3 * m,\
    \ 4 * m)\n        val w = a.slice(4 * m, 5 * m)\n        val x = a.slice(5 * m,\
    \ 6 * m)\n        val y = a.slice(6 * m, 7 * m)\n        val z = a.slice(7 * m,\
    \ 8 * m)\n        val a = a.slice(8 * m, m)\n        val b = a.slice(m, 2 * m)\n\
    \        val c = a.slice(2 * m, 3 * m)\n        val d = a.slice(3 * m, 4 * m)\n\
    \        val e = a.slice(4 * m, 5 * m)\n        val f = a.slice(5 * m, 6 * m)\n\
    \        val g = a.slice(6 * m, 7 * m)\n        val h = a.slice(7 * m, 8 * m)\n\
    \        val i = a.slice(8 * m, m)\n        val j = a.slice(m, 2 * m)\n      \
    \  val k = a.slice(2 * m, 3 * m)\n        val l = a.slice(3 * m, 4 * m)\n    \
    \    val m = a.slice(4 * m, 5 * m)\n        val n = a.slice(5 * m, 6 * m)\n  \
    \      val o = a.slice(6 * m, 7 * m)\n        val p = a.slice(7 * m, 8 * m)\n\
    \        val q = a.slice(8 * m, m)\n        val r = a.slice(m, 2 * m)\n      \
    \  val s = a.slice(2 * m, 3 * m)\n        val t = a.slice(3 * m, 4 * m)\n    \
    \    val u = a.slice(4 * m, 5 * m)\n        val v = a.slice(5 * m, 6 * m)\n  \
    \      val w = a.slice(6 * m, 7 * m)\n        val x = a.slice(7 * m, 8 * m)\n\
    \        val y = a.slice(8 * m, m)\n        val z = a.slice(m, 2 * m)\n      \
    \  val a = a.slice(2 * m, 3 * m)\n        val b = a.slice(3 * m, 4 * m)\n    \
    \    val c = a.slice(4 * m, 5 * m)\n        val d = a.slice(5 * m, 6 * m)\n  \
    \      val e = a.slice(6 * m, 7 * m)\n        val f = a.slice(7 * m, 8 * m)\n\
    \        val g = a.slice(8 * m, m)\n        val h = a.slice(m, 2 * m)\n      \
    \  val i = a.slice(2 * m, 3 * m)\n        val j = a.slice(3 * m, 4 * m)\n    \
    \    val k = a.slice(4 * m, 5 * m)\n        val l = a.slice(5 * m, 6 * m)\n  \
    \      val m = a.slice(6 * m, 7 * m)\n        val n = a.slice(7 * m, 8 * m)\n\
    \        val o = a.slice(8 * m, m)\n        val p = a.slice(m, 2 * \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp10l9k_ka.scala:66:30 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = a.slice(m, \e[31m2\e\
    [0m * \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e\
    [0m                              expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp10l9k_ka.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma\e[0m = a.slice(\e[31m8\e[0m * m, m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ma is already defined as \e[33mvalue\e[0m \e[35ma\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp10l9k_ka.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.slice(\e[31m4\e[0m * m, \e[31m5\e\
    [0m * m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp10l9k_ka.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36ms\e[0m = a.slice(\e[31m2\e[0m * m, \e[31m3\e[0m * m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined\
    \ as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp10l9k_ka.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = a.slice(\e[31m3\e\
    [0m * m, \e[31m4\e[0m * m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mt is already defined as \e[33mvalue\e[0m \e[35mt\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined "
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val max = 0\n   \
    \     val maxTriples = 0\n        val triples = mutable.HashSet[Long]()\n    \
    \    val triple = mutable.HashSet[Long]()\n        val triple2 = mutable.HashSet[Long]()\n\
    \        val triple3 = mutable.HashSet[Long]()\n        val triple4 = mutable.HashSet[Long]()\n\
    \        val triple5 = mutable.HashSet[Long]()\n        val triple6 = mutable.HashSet[Long]()\n\
    \        val triple7 = mutable.HashSet[Long]()\n        val triple8 = mutable.HashSet[Long]()\n\
    \        val triple9 = mutable.HashSet[Long]()\n        val triple10 = mutable.HashSet[Long]()\n\
    \        val triple11 = mutable.HashSet[Long]()\n        val triple12 = mutable.HashSet[Long]()\n\
    \        val triple13 = mutable.HashSet[Long]()\n        val triple14 = mutable.HashSet[Long]()\n\
    \        val triple15 = mutable.HashSet[Long]()\n        val triple16 = mutable.HashSet[Long]()\n\
    \        val triple17 = mutable.HashSet[Long]()\n        val triple18 = mutable.HashSet[Long]()\n\
    \        val triple19 = mutable.HashSet[Long]()\n        val triple20 = mutable.HashSet[Long]()\n\
    \        val triple21 = mutable.HashSet[Long]()\n        val triple22 = mutable.HashSet[Long]()\n\
    \        val triple23 = mutable.HashSet[Long]()\n        val triple24 = mutable.HashSet[Long]()\n\
    \        val triple25 = mutable.HashSet[Long]()\n        val triple26 = mutable.HashSet[Long]()\n\
    \        val triple27 = mutable.HashSet[Long]()\n        val triple28 = mutable.HashSet[Long]()\n\
    \        val triple29 = mutable.HashSet[Long]()\n        val triple30 = mutable.HashSet[Long]()\n\
    \        val triple31 = mutable.HashSet[Long]()\n        val triple32 = mutable.HashSet[Long]()\n\
    \        val triple33 = mutable.HashSet[Long]()\n        val triple34 = mutable.HashSet[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0af0i_7.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx0af0i_7.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx0af0i_7.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpx0af0i_7.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx0af0i_7.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mtriple3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpx0af0i_7.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mtriple4\e[0m = mutable.HashSet[\e\
    [35mLon"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = n - 1\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var count = 0\n        while (i < m && j <\
    \ n && k < m) {\n            if (a(i) + a(j) + a(k) = 3) {\n                count\
    \ += 1\n            }\n            i += 1\n            j += 1\n            k +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4w1xfst2.scala:23:35 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (a(i) + a(j) + a(k) = \e[31m3\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   ')' expected, but '=' found\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp4w1xfst2.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4w1xfst2.scala:23:16 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (a(i) + a(j) + a(k) = \e[31m3\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Found:    Long\n\e[31m   |\e[0m                Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpskl8g9t4.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpskl8g9t4.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskl8g9t4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskl8g9t4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskl8g9t4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same g"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val max = 0\n        for (i <- 0 until n) {\n            val\
    \ j = count(a(i))\n            if (j < 3) {\n                val k = n - i - 1\n\
    \                val m = count(a(k))\n                if (m > max) {\n       \
    \             max = m\n                }\n            }\n        }\n        max.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfi2rz8it.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfi2rz8it.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfi2rz8it.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfi2rz8it.scala:22:26 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfi2rz8it.scala:28:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                   \
    \ max = m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while (i\
    \ < m && j < n && k < m) {\n            if (a(i) + a(j) + a(k) == 3) {\n     \
    \           count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz2via48n.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var sum = 0\n        while (i < n && j < n && k < n) {\n        \
    \    sum += a(i) + a(j) + a(k)\n            i += 1\n            j += 1\n     \
    \       k += 1\n            if (sum % 3 == 0) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgb8coz5m.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgb8coz5m.scala:22:16\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            sum += a(i) +\
    \ a(j) + a(k)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            if(i<j && j<k) {\n\
    \                a(i) = i*i - i + 1\n                i += 1\n                j\
    \ += 1\n                k += 1\n                count += 1\n            } else\
    \ if(i<j && j>k) {\n                a(i) = i*i - i + 1\n                i += 1\n\
    \                j += 1\n                k += 1\n                count += 1\n\
    \            } else if(i<k && j<k) {\n                a(i) = i*i - i + 1\n   \
    \             i += 1\n                j += 1\n                k += 1\n       \
    \         count += 1\n            } else if(i<k && j>k) {\n                a(i)\
    \ = i*i - i + 1\n                i += 1\n                j += 1\n            \
    \    k += 1\n                count += 1\n            } else if(i>j && j<k) {\n\
    \                a(i) = i*i - i + 1\n                i += 1\n                j\
    \ += 1\n                k += 1\n                count += 1\n            } else\
    \ if(i>j && j>k) {\n                a(i) = i*i - i + 1\n                i += 1\n\
    \                j += 1\n                k += 1\n                count += 1\n\
    \            } else if(i>k && j<k) {\n                a(i) = i*i - i + 1\n   \
    \             i += 1\n                j += 1\n                k += 1\n       \
    \         count += 1\n            } else if(i>k && j>k) {\n                a(i)\
    \ = i*i - i + 1\n                i += 1\n                j += 1\n            \
    \    k += 1\n                count += 1\n            }\n        }\n        a.toList.sortBy(_\
    \ % 3).length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptcuyuav8.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        a.foreach { x =>\n            while (j < n) {\n   \
    \             while (k < n) {\n                    if (a(i) + a[j] + a(k) == 3)\
    \ {\n                        count += 1\n                    }\n             \
    \       k += 1\n                }\n                j += 1\n            }\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp18z_phgc.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18z_phgc.scala:27:33\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    \e[33mif\e\
    [0m (a(i) + a[\e[35mj\e[0m] + a(k) == \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \            Not found: type j\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val maxCount = count.max\n        val maxKey = count.keys.max\n\
    \        val maxValue = count.values.max\n        val maxTriples = maxCount *\
    \ maxValue * maxKey\n        if (maxTriples == 0) 0\n        else maxTriples\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplilsr633.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplilsr633.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplilsr633.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        val max = 0\n        val\
    \ maxTriples = 0\n        var i = 0\n        var j = 0\n        var k = 0\n  \
    \      while (i < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n \
    \           i += 1\n            j += 1\n            k += 1\n        }\n      \
    \  var sum = 0\n        var sum2 = 0\n        var sum3 = 0\n        var sum4 =\
    \ 0\n        var sum5 = 0\n        var sum6 = 0\n        var sum7 = 0\n      \
    \  var sum8 = 0\n        var sum9 = 0\n        var sum10 = 0\n        var sum11\
    \ = 0\n        var sum12 = 0\n        var sum13 = 0\n        var sum14 = 0\n \
    \       var sum15 = 0\n        var sum16 = 0\n        var sum17 = 0\n        var\
    \ sum18 = 0\n        var sum19 = 0\n        var sum20 = 0\n        var sum21 =\
    \ 0\n        var sum22 = 0\n        var sum23 = 0\n        var sum24 = 0\n   \
    \     var sum25 = 0\n        var sum26 = 0\n        var sum27 = 0\n        var\
    \ sum28 = 0\n        var sum29 = 0\n        var sum30 = 0\n        var sum31 =\
    \ 0\n        var sum32 = 0\n        var sum33 = 0\n        var sum34 = 0\n   \
    \     var sum35 = 0\n        var sum36 = 0\n        var sum37 = 0\n        var\
    \ sum38 = 0\n        var sum39 = 0\n        var sum40 = 0\n        var sum41 =\
    \ 0\n        var sum42 = 0\n        var sum43 = 0\n        var sum44 = 0\n   \
    \     var sum45 = 0\n        var sum46 = 0\n        var sum47 = 0\n        var\
    \ sum48 = 0\n        var sum49 = 0\n        var sum50 = 0\n        var sum51 =\
    \ 0\n        var sum52 = 0\n        var sum53 = 0\n        var sum54 = 0\n   \
    \     var sum55 = 0\n        var sum56 = 0\n        var sum57 = 0\n        var\
    \ sum58 = 0\n        var sum59 = 0\n        var sum60 = 0\n        var sum61 =\
    \ 0\n        var sum62 = 0\n        var sum63 = 0\n        var sum64 = 0\n   \
    \     var sum65 = 0\n        var sum66 = 0\n        var sum67 = 0\n        var\
    \ sum68 = 0\n        var sum69 = 0\n        var sum70 = 0\n        var sum71 =\
    \ 0\n        var sum72 = 0\n        var sum73 = 0\n        var sum74 = 0\n   \
    \     var sum75 = 0\n        var sum76 = 0\n        var sum77 = 0\n        var\
    \ sum78 = 0\n        var sum79 = 0\n        var sum80 = 0\n        var sum81 =\
    \ 0\n        var sum82 = 0\n        var sum83 = 0\n        var sum84 = 0\n   \
    \     var sum85 = 0\n        var sum86 = 0\n        var sum87 = 0\n        var\
    \ sum88\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb32tqk2o.scala:117:4 ---------------------------\e\
    [0m\e[0m\n\e[31m117 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb32tqk2o.scala:16:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = a.length\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb32tqk2o.scala:117:5\
    \ --------------------\e[0m\e[0m\n\e[31m117 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ Long\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n        val m = m\n        val n = n\n        val m = m\n        val n\
    \ = n\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4ypmyr6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpq4ypmyr6.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpq4ypmyr6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpq4ypmyr6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpq4ypmyr6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpq4ypmyr6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn "
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val max = a.length\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        var i = 0\n        while (i < n) {\n            while\
    \ (j < n) {\n                while (k < n) {\n                    if (a(i) + a[j]\
    \ + a(k) == m) {\n                        count += 1\n                    }\n\
    \                    k += 1\n                }\n                j += 1\n     \
    \       }\n            i += 1\n        }\n        count * 3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwesyh4k7.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwesyh4k7.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwesyh4k7.scala:31:33 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    \e[33mif\e[0m (a(i) + a[\e[35mj\e[0m]\
    \ + a(k) == m) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\
    \e[31m   |\e[0m                                 Not found: type j\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoynvfbve.scala:99:15 ---------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoynvfbve.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpoynvfbve.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoynvfbve.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoynvfbve.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoynvfbve.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e["
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = 0\n        val\
    \ maxCount = 0\n        for (i <- 1 to n) {\n            val j = i * i - i + 1\n\
    \            val k = i * i + i + 1\n            val count = count(i) + count(j)\
    \ + count(k)\n            if (count > maxCount) {\n                max = count\n\
    \                maxCount = count\n            }\n            a(i) = i\n     \
    \       a(j) = j\n            a(k) = k\n        }\n        count(max)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp59_8hzms.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp59_8hzms.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp59_8hzms.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp59_8hzms.scala:24:20 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                max = count\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val max\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp59_8hzms.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxCount = count\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n  \
    \          val x = a(i) + a(j) + a(k);\n            if (x % 3 == 0) {\n      \
    \          count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal7m5yzs.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2 < n).map(_._1).zipWithIndex.filter(_._2\
    \ < n).map(_._1)\n        triples.foreach(x => {\n            count += 1\n   \
    \         i = x._2\n            j = x._2\n            k = x._2\n            while\
    \ (i < n && j < n && k < n) {\n                if (a(i) + a(j) + a(k) == 3) {\n\
    \                    count += 1\n                    i += 1\n                \
    \    j += 1\n                    k += 1\n                }\n                i\
    \ += 1\n                j += 1\n                k += 1\n            }\n      \
    \  })\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbtmu2ivl.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtmu2ivl.scala:27:18\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            i = x._2\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtmu2ivl.scala:28:18\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            j = x._2\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtmu2ivl.scala:29:18\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            k = x._2\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ _2 is not a member of Long\n4 errors found\n"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.LongAccumulator.empty[Long]\n        for(i <- 0\
    \ until n){\n            val j = i * i - i + 1\n            val k = i * i + i\
    \ + j\n            val temp = a(i) + a(j) + a(k) % 3\n            if(temp == 0){\n\
    \                result += i\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp172hx2zw.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp172hx2zw.scala:16:21\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.LongAccumulator.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp172hx2zw.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n\
    \ && j < n && k < n) {\n            val tmp = a(i)\n            a(i) = a(i) +\
    \ a(i) + a(i)\n            val tmp2 = a(i)\n            a(i) = tmp\n         \
    \   val tmp3 = a(i)\n            a(i) = tmp2\n            val tmp4 = a(i)\n  \
    \          a(i) = tmp3\n            val tmp5 = a(i)\n            a(i) = tmp4\n\
    \            val tmp6 = a(i)\n            a(i) = tmp5\n            val tmp7 =\
    \ a(i)\n            a(i) = tmp6\n            val tmp8 = a(i)\n            a(i)\
    \ = tmp7\n            val tmp9 = a(i)\n            a(i) = tmp8\n            val\
    \ tmp10 = a(i)\n            a(i) = tmp9\n            val tmp11 = a(i)\n      \
    \      a(i) = tmp10\n            val tmp12 = a(i)\n            a(i) = tmp11\n\
    \            val tmp13 = a(i)\n            a(i) = tmp12\n            val tmp14\
    \ = a(i)\n            a(i) = tmp13\n            val tmp15 = a(i)\n           \
    \ a(i) = tmp14\n            val tmp16 = a(i)\n            a(i) = tmp15\n     \
    \       val tmp17 = a(i)\n            a(i) = tmp16\n            val tmp18 = a(i)\n\
    \            a(i) = tmp17\n            val tmp19 = a(i)\n            a(i) = tmp18\n\
    \            val tmp20 = a(i)\n            a(i) = tmp19\n            val tmp21\
    \ = a(i)\n            a(i) = tmp20\n            val tmp22 = a(i)\n           \
    \ a(i) = tmp21\n            val tmp23 = a(i)\n            a(i) = tmp22\n     \
    \       val tmp24 = a(i)\n            a(i) = tmp23\n            val tmp25 = a(i)\n\
    \            a(i) = tmp24\n            val tmp26 = a(i)\n            a(i) = tmp25\n\
    \            val tmp27 = a(i)\n            a(i) = tmp26\n            val tmp28\
    \ = a(i)\n            a(i) = tmp27\n            val tmp29 = a(i)\n           \
    \ a(i) = tmp28\n            val tmp30 = a(i)\n            a(i) = tmp29\n     \
    \       val tmp31 = a(i)\n            a(i) = tmp30\n            val tmp32 = a(i)\n\
    \            a(i) = tmp31\n            val tmp33 = a(i)\n            a(i) = tmp32\n\
    \            val tmp34 = a(i)\n            a(i) = tmp33\n            val tmp35\
    \ = a(i)\n            a(i) = tmp34\n            val tmp36 = a(i)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpabuwb022.scala:103:0 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpabuwb022.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpabuwb022.scala:102:1\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpabuwb022.scala:95:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m95 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        for (i <- 0 until n) {\n          \
    \  a(i) = i * i - i + 1\n        }\n        for (i <- 0 until m) {\n         \
    \   for (j <- 0 until n) {\n                for (k <- 0 until n) {\n         \
    \           if (i < j < k) {\n                        triples += ((a(i), a(j),\
    \ a(k)))\n                    }\n                }\n            }\n        }\n\
    \        triples.toSeq.sortBy(_._1).last._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvh1eybml.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpvh1eybml.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvh1eybml.scala:25:32 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mif\e[0m (i < j < k) {\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Found:    (k : Int)\n\e[31m   |\e[0m                 \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val maxTriples = count.maxBy(_._2)._2\n        count.filter(_._2\
    \ == maxTriples).map(_._1).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpthp89zno.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthp89zno.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpthp89zno.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1dec8_7.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu1dec8_7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu1dec8_7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        val triple = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        var count = 0\n        while (i < n) {\n            a(i) = i * i\
    \ - i + 1\n            i += 1\n        }\n        while (j < n) {\n          \
    \  a(j) = a(j) * a(j) - a(j) + a(j)\n            j += 1\n        }\n        while\
    \ (k < (m - 1)) {\n            a(k) = a(k) * a(k) - a(k) + a(k) \n           \
    \ k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2 % 3 == 0).map(_._1)\n\
    \        triples.foreach { triple =>\n            count += 1\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcdbtz6b1.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = a.zipWithIndex.filter(_._2\
    \ % \e[31m3\e[0m == \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpcdbtz6b1.scala:17:16 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcdbtz6b1.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 > 0).filter(_._2 < n).filter(_._1\
    \ < _._2).filter(_._1 < _._3).map(_._1).sum\n        if (triples % 3 == 0) count\
    \ += triples \n        else count += triples / 3\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3rcp6hk7.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rcp6hk7.scala:26:80\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = a.zipWithIndex.filter(_._2 > \e[31m0\e[0m).filter(_._2 < n).filter(_._1\
    \ < _._2).filter(_._1 < _._3).map(_._1).sum\n\e[31m\e[31m   |\e[0m           \
    \                                                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rcp6hk7.scala:26:100\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mtriples\e[0m = a.zipWithIndex.filter(_._2 > \e[31m0\e[0m).filter(_._2 < n).filter(_._1\
    \ < _._2).filter(_._1 < _._3).map(_._1).sum\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \ value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rcp6hk7.scala:27:36\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (triples\
    \ % \e[31m3\e[0m == \e[31m0\e[0m) count += triples \n\e[31m\e[31m   |\e[0m   \
    \                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3rcp6hk7.scala:28:19 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        \e[33melse\e[0m count += triples / \e[31m3\e[0m\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^\e[0m\n\e[31m   |\e[0m             value +=\
    \ is not a member of Int - did you mean Int.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n  \
    \          val x = a(i) + a(j) + a(k);\n            if (x % 3 == 0) {\n      \
    \          count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpal7m5yzs.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n  \
    \          val x = a(i) + a(j) + a(k) \n            if (x % 3 == 0) {\n      \
    \          count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4oitezif.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for( i <- 0 until n ) {\n            val j = i\
    \ + 1\n            val k = n - i\n            if( j > k ) {\n                val\
    \ temp = j\n                j = k\n                k = temp\n            }\n \
    \           if( j > 0 ) {\n                val temp = a(i)\n                a(i)\
    \ = a(j)\n                a(j) = temp\n            }\n            if( k > 0 )\
    \ {\n                val temp = a(i)\n                a(i) = a(k) \n         \
    \       a(k) = temp\n            }\n            if( a(i) * a(i) * a(i) == 3 )\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmfpre5i.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmfpre5i.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjmfpre5i.scala:22:20 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                j = k\n\e[31m\e[31m   |\e[0m             \
    \       ^\e[0m\n\e[31m   |\e[0m                    Found:    (k : Long)\n\e[31m\
    \   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpjmfpre5i.scala:23:18 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                k = temp\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ k\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmfpre5i.scala:32:25\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                a(i) = a(k) \n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmfpre5i.scala:33:18\
    \ --------------------\e[0m\e[0m\n\e[31m3"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n\
    \        }\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                for (k <- 0 until n) {\n                    if (i < j && j <\
    \ k && k < i) {\n                        val sum = triples.getOrElse((i, j, k),\
    \ 0)\n                        triples.put((i, j, k), sum + a(i) + a(j) + a(k))\n\
    \                    }\n                }\n            }\n        }\n        triples.values.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgtori3ea.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpgtori3ea.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = n - 1\n        val m = m - 1\n    \
    \    var i = 0\n        var j = 0\n        var k = 0\n        var count = 0\n\
    \        while (i < m && j < n && k < m) {\n            if (a(i) + a(j) + a(k)\
    \ == 3) {\n                count += 1\n                i += 1\n              \
    \  j += 1\n                k += 1\n            }\n            else if (a(i) +\
    \ a(j) + a(k) != 3) {\n                i += 1\n            }\n            else\
    \ {\n                j += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl5iutkoy.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl5iutkoy.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val triples\
    \ = mutable.ListBuffer[Long]()\n        val triple = (i, j, k) =>\n          \
    \  if (i < j && j < k) {\n                triples += (i * i * i + i + j * j +\
    \ k * k) * 3\n            }\n        val triple = (i, j, k) =>\n            if\
    \ (i < j && j < k) {\n                triples += (i * i * i + i + j * j + k *\
    \ k) * 3\n            }\n        val triple = (i, j, k) =>\n            if (i\
    \ < j && j < k) {\n                triples += (i * i * i + i + j * j + k * k)\
    \ * 3\n            }\n        val triple = (i, j, k) =>\n            if (i < j\
    \ && j < k) {\n                triples += (i * i * i + i + j * j + k * k) * 3\n\
    \            }\n        val triple = (i, j, k) =>\n            if (i < j && j\
    \ < k) {\n                triples += (i * i * i + i + j * j + k * k) * 3\n   \
    \         }\n        val triple = (i, j, k) =>\n            if (i < j && j < k)\
    \ {\n                triples += (i * i * i + i + j * j + k * k) * 3\n        \
    \    }\n        val triple = (i, j, k) =>\n            if (i < j && j < k) {\n\
    \                triples += (i * i * i + i + j * j + k * k) * 3\n            }\n\
    \        val triple = (i, j, k) =>\n            if (i < j && j < k) {\n      \
    \          triples += (i * i * i + i + j * j + k * k) * 3\n            }\n   \
    \     val triple = (i, j, k) =>\n            if (i < j && j < k) {\n         \
    \       triples += (i * i * i + i + j * j + k * k) * 3\n            }\n      \
    \  val triple = (i, j, k) =>\n            if (i < j && j < k) {\n            \
    \    triples += (i * i * i + i + j * j + k * k) * 3\n            }\n        val\
    \ triple = (i, j, k) =>\n            if (i < j && j < k) {\n                triples\
    \ += (i * i * i + i + j * j + k * k) * 3\n            }\n        val triple =\
    \ (i, j, k) =>\n            if (i < j && j < k) {\n                triples +=\
    \ (i * i * i + i + j * j + k * k) * 3\n            }\n        val triple = (i,\
    \ j, k) =>\n            if (i < j && j < k) {\n                triples += (i *\
    \ i * i + i + j * j + k\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiup93hy_.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiup93hy_.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiup93hy_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (\e[36mi\e[0m, \e[36mj\e\
    [0m, \e[36mk\e[0m) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mtriple\
    \ is already defined as \e[33mvalue\e[0m \e[35mtriple\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m24 |\e[0m            \e[33mif\e[0m (i < j &&\
    \ j < k) {\n\e[31m25 |\e[0m                triples += (i * i * i + i + j * j +\
    \ k * k) * \e[31m3\e[0m\n\e[31m26 |\e[0m            }\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiup93hy_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (\e[36mi\e[0m, \e[36mj\e\
    [0m, \e[36mk\e[0m) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mtriple\
    \ is already defined as \e[33mvalue\e[0m \e[35mtriple\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m28 |\e[0m            \e[33mif\e[0m (i < j &&\
    \ j < k) {\n\e[31m29 |\e[0m                triples += (i * i * i + i + j * j +\
    \ k * k) * \e[31m3\e[0m\n\e[31m30 |\e[0m            }\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiup93hy_.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (\e[36mi\e[0m, \e[36mj\e\
    [0m, \e[36mk\e[0m) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mtriple\
    \ is already defined as \e[33mvalue\e[0m \e[35mtriple\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m32 |\e[0m            \e[33mif\e[0m (i < j &&\
    \ j < k) {\n\e[31m33 |\e[0m                triples += (i * "
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val max = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        while (i < n &&\
    \ j < n && k < n) {\n            val temp = a(i)\n            a(i) = a(i) + a(i)\
    \ + a(i)\n            val temp2 = a(i)\n            a(i) = temp\n            val\
    \ temp3 = a(i)\n            a(i) = temp2\n            val temp4 = a(i)\n     \
    \       a(i) = temp3\n            val temp5 = a(i)\n            a(i) = temp4\n\
    \            val temp6 = a(i)\n            a(i) = temp5\n            val temp7\
    \ = a(i)\n            a(i) = temp6\n            val temp8 = a(i)\n           \
    \ a(i) = temp7\n            val temp9 = a(i)\n            a(i) = temp8\n     \
    \       val temp10 = a(i)\n            a(i) = temp9\n            val temp11 =\
    \ a(i)\n            a(i) = temp10\n            val temp12 = a(i)\n           \
    \ a(i) = temp11\n            val temp13 = a(i)\n            a(i) = temp12\n  \
    \          val temp14 = a(i)\n            a(i) = temp13\n            val temp15\
    \ = a(i)\n            a(i) = temp14\n            val temp16 = a(i)\n         \
    \   a(i) = temp15\n            val temp17 = a(i)\n            a(i) = temp16\n\
    \            val temp18 = a(i)\n            a(i) = temp17\n            val temp19\
    \ = a(i)\n            a(i) = temp18\n            val temp20 = a(i)\n         \
    \   a(i) = temp19\n            val temp21 = a(i)\n            a(i) = temp20\n\
    \            val temp22 = a(i)\n            a(i) = temp21\n            val temp23\
    \ = a(i)\n            a(i) = temp22\n            val temp24 = a(i)\n         \
    \   a(i) = temp23\n            val temp25 = a(i)\n            a(i) = temp24\n\
    \            val temp26 = a(i)\n            a(i) = temp25\n            val temp27\
    \ = a(i)\n            a(i) = temp26\n            val temp28 = a(i)\n         \
    \   a(i) = temp27\n            val temp29 = a(i)\n            a(i) = temp28\n\
    \            val temp30 = a(i)\n            a(i) = temp29\n            val temp31\
    \ = a(i)\n            a(i) = temp30\n            val temp32 = a(i)\n         \
    \   a(i) = temp31\n            val temp33 = a(i)\n            a(i) = temp32\n\
    \            val temp34 = a(i)\n            a(i) = temp33\n            val temp35\
    \ = a(i)\n            a(i) = temp34\n            val temp36\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy380oitt.scala:93:4 ----------------------------\e\
    [0m\e[0m\n\e[31m93 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy380oitt.scala:102:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpy380oitt.scala:15:34 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpy380oitt.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy380oitt.scala:101:1 --------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:\
    \    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m    |\e[0m\n\e[31m    |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpy380oitt.scala:94:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m94 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        val n = scala.math.BigInt(n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val maxTriples = a.zipWithIndex.filter(_._3 > 0).map(_._1).sum\n\
    \        val maxTriple = a.zipWithIndex.filter(_._3 > 0).map(_._1).max\n     \
    \   while (j < n) {\n            while (k < n) {\n                if (a(i) + a(k)\
    \ + a(j) == m) {\n                    count += 1\n                }\n        \
    \        k += 1\n            }\n            j += 1\n        }\n        count +\
    \ maxTriple\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgs1kchr8.scala:17:34 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.BigInt(n)\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                  Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgs1kchr8.scala:26:49\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxTriples\e[0m = a.zipWithIndex.filter(_._3 > \e[31m0\e[0m).map(_._1).sum\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\
    \e[31m   |\e[0m          value _3 is not a member of (Long, Int) - did you mean\
    \ _$1._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgs1kchr8.scala:27:48\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxTriple\e[0m = a.zipWithIndex.filter(_._3 > \e[31m0\e[0m).map(_._1).max\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m          value _3 is not a member of (Long, Int) - did you mean\
    \ _$3._1?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val max = (0 until n).foldLeft(0)((acc, i) => if (count(a(i))\
    \ > acc) count(a(i)) else acc)\n        val triples = 0 until max by 2\n     \
    \   val triple = (triples(0), triples(1), triples(2))\n        if (triples(0)\
    \ * triples(1) * triples(2) == 3L) triples(0) else 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc6tnbsma.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc6tnbsma.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc6tnbsma.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpc6tnbsma.scala:21:27 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (\e[31m0\e[0m until\
    \ n).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e[0m) => \e[33mif\e[0m (count(a(i))\
    \ > acc) count(a(i)) \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e[0m             \
    \              ^\e[0m\n\e[31m   |\e[0m                           Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n  \
    \          if (a(i) + a(j) + a(k) == 3) {\n                count += 1\n      \
    \      }\n            i += 1\n            j += 1\n            k += 1\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeo76ek2q.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        val triples = a.filter(_ % 3 == 0).length\n       \
    \ count + triples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptgtddk_e.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val max = (0 until n).foldLeft(0)((a, b) => if (count(a) >\
    \ count(b)) a else b)\n        count(max) match {\n            case 0 => 0\n \
    \           case _ => count(max) + 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuso09zg2.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuso09zg2.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuso09zg2.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpuso09zg2.scala:21:27 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (\e[31m0\e[0m until\
    \ n).foldLeft(\e[31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (count(a)\
    \ > count(b)) a \e[33melse\e[0m b)\n\e[31m\e[31m   |\e[0m                    \
    \       ^\e[0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\
    \e[31m   |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.BigInt(m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = scala.math.BigInt(n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp00csi5sy.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.BigInt(m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.BigInt(n)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = scala.math.BigInt(m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0\n        for(i\
    \ <- 1 to n){\n            val j = i\n            val k = n - i\n            val\
    \ sum1 = sum + i\n            val sum2 = sum + j\n            val sum3 = sum +\
    \ k\n            val sum4 = sum1 + j\n            val sum5 = sum2 + k\n      \
    \      val sum6 = sum3 + k\n            val sum7 = sum4 + i\n            val sum8\
    \ = sum5 + j\n            val sum9 = sum6 + k\n            val sum10 = sum7 +\
    \ k\n            val sum11 = sum8 + i\n            val sum12 = sum9 + j\n    \
    \        val sum13 = sum10 + k\n            val sum14 = sum11 + k\n          \
    \  val sum15 = sum12 + i\n            val sum16 = sum13 + j\n            val sum17\
    \ = sum14 + k\n            val sum18 = sum15 + k\n            val sum19 = sum16\
    \ + i\n            val sum20 = sum17 + j\n            val sum21 = sum18 + k\n\
    \            val sum22 = sum19 + k\n            val sum23 = sum20 + i\n      \
    \      val sum24 = sum21 + j\n            val sum25 = sum22 + k\n            val\
    \ sum26 = sum23 + k\n            val sum27 = sum24 + i\n            val sum28\
    \ = sum25 + j\n            val sum29 = sum26 + k\n            val sum30 = sum27\
    \ + k\n            val sum31 = sum28 + i\n            val sum32 = sum29 + j\n\
    \            val sum33 = sum30 + k\n            val sum34 = sum31 + k\n      \
    \      val sum35 = sum32 + i\n            val sum36 = sum33 + j\n            val\
    \ sum37 = sum34 + k\n            val sum38 = sum35 + k\n            val sum39\
    \ = sum36 + i\n            val sum40 = sum37 + j\n            val sum41 = sum38\
    \ + k\n            val sum42 = sum39 + k\n            val sum43 = sum40 + i\n\
    \            val sum44 = sum41 + j\n            val sum45 = sum42 + k\n      \
    \      val sum46 = sum43 + k\n            val sum47 = sum44 + i\n            val\
    \ sum48 = sum45 + j\n            val sum49\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz7u6lloy.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz7u6lloy.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpz7u6lloy.scala:15:34 --------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz7u6lloy.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz7u6lloy.scala:18:22 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz7u6lloy.scala:78:1\
    \ ---------------------\e[0m\e[0m\n\e[31m78 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpz7u6lloy.scala:71:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mA"
  stdout: ''
  timestamp: 1660028552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while(i < m && j < m && k < m) {\n     \
    \       if(a(i) < a(j) && a(j) < a(k)) {\n                i += 1\n           \
    \     j += 1\n                k += 1\n                count += 1\n           \
    \ } else if(a(i) < a(j)) {\n                i += 1\n                count += 1\n\
    \            } else if(a(j) < a(k)) {\n                j += 1\n              \
    \  count += 1\n            } else {\n                k += 1\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdk24zb79.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val m = a.length - 1\n        val n = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv71hqqhb.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv71hqqhb.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv71hqqhb.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv71hqqhb.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv71hqqhb.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv71hqqhb.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already de"
  stdout: ''
  timestamp: 1660028551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        while (i < n && j < n\
    \ && k < n) {\n            if (a(i) + a(j) + a(k) == 0) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            } else if (a(i) + a(j) + a(k) == 3) {\n                count += 1\n\
    \                i += 1\n                j += 1\n                k += 1\n    \
    \        } else if (a(i) + a(j) + a(k) == 6) {\n                count += 1\n \
    \               i += 1\n                j += 1\n                k += 1\n     \
    \       } else if (a(i) + a(j) + a(k) == 9) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 12) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 15) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 18) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 21) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 24) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 27) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 30) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 33) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 36) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 39) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 42) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 45) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k) == 48) {\n                count += 1\n  \
    \              i += 1\n                j += 1\n                k += 1\n      \
    \      } else if (a(i) + a(j) + a(k\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg4zpr00x.scala:109:4 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg4zpr00x.scala:118:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m118 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpg4zpr00x.scala:16:16 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg4zpr00x.scala:108:23 -------------------\e[0m\e\
    [0m\n\e[31m108 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (a(i) + a(j)\
    \ + a(k\n\e[31m\e[31m    |\e[0m                       ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m    |\e[0m                       Found:    Long\n\e[31m    |\e[0m      \
    \                 Required: Boolean\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg4zpr00x.scala:117:1 --------------------\e[0m\e\
    [0m\n\e[31m117 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:\
    \    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m    |\e[0m\n\e[31m    |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpg4zpr00x.scala:110:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m110 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            if (a(i) < a(j) &&\
    \ a(j) < a(k)) {\n                count += 1\n                i += 1\n       \
    \         j += 1\n                k += 1\n            } else if (a(i) < a(j))\
    \ {\n                count += 1\n                i += 1\n            } else if\
    \ (a(j) < a(k)) {\n                count += 1\n                j += 1\n      \
    \      } else {\n                count += 1\n                k += 1\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbfpsjjw5.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ while (j < n) {\n            a(j) = a(j) + a(j) + a(j)\n            j += 1\n\
    \        }\n        while (k < n) {\n            val temp = a(k)\n           \
    \ a(k) = a(k) + a(k)\n            k += 1\n            if (temp % 3 == 0) {\n \
    \               count += 1\n            }\n        }\n        count * 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0rwk6tt7.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val max = (0 until n).foldLeft(0)((acc, i) => if (a(i)\
    \ > acc) a(i) else acc)\n        val triples = 0 until n\n        while (triples.nonEmpty)\
    \ {\n            triples.find(i => a(i) > max).foreach { i =>\n              \
    \  val j = triples.find(j => a(i) > a(j))\n                val k = triples.find(k\
    \ => a(i) > a(k))\n                if (j != k) {\n                    count +=\
    \ 1\n                    a(i) = a(i) - a(k) + a(k) - a(j)\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8uikpki.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8uikpki.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = (\e[31m0\e[0m until n).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e\
    [0m) => \e[33mif\e[0m (a(i) > acc) a(i) \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e\
    [0m                           ^\e[0m\n\e[31m   |\e[0m                        \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                           Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8uikpki.scala:24:71\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = (\e[31m0\e[0m until n).foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mi\e\
    [0m) => \e[33mif\e[0m (a(i) > acc) a(i) \e[33melse\e[0m acc)\n\e[31m\e[31m   |\e\
    [0m                                                                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn8uikpki.scala:25:30 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = \e[31m0\e[0m until n\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val s = a.length\
    \ - 1\n        val t = a.length - 1\n        val r = a.length - 1\n        val\
    \ u = a.length - 1\n        val v = a.length - 1\n        val w = a.length - 1\n\
    \        val x = a.length - 1\n        val y = a.length - 1\n        val z = a.length\
    \ - 1\n        val a = a.length - 1\n        val b = a.length - 1\n        val\
    \ c = a.length - 1\n        val d = a.length - 1\n        val e = a.length - 1\n\
    \        val f = a.length - 1\n        val g = a.length - 1\n        val h = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val l = a.length - 1\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val o = a.length - 1\n        val p = a.length\
    \ - 1\n        val q = a.length - 1\n        val r = a.length - 1\n        val\
    \ s = a.length - 1\n        val t = a.length - 1\n        val u = a.length - 1\n\
    \        val v = a.length - 1\n        val w = a.length - 1\n        val x = a.length\
    \ - 1\n        val y = a.length - 1\n        val z = a.length - 1\n        val\
    \ a = a.length - 1\n        val b = a.length - 1\n        val c = a.length - 1\n\
    \        val d = a.length - 1\n        val e = a.length - 1\n        val f = a.length\
    \ - 1\n        val g = a.length - 1\n        val h = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val l = a.length - 1\n        val m = a.length - 1\n        val n = a.length\
    \ - 1\n        val o = a.length - 1\n        val p = a.length - 1\n        val\
    \ q = a.length - 1\n        val r = a.length - 1\n        val s = a.length - 1\n\
    \        val t = a.length - 1\n        val u = a.length - 1\n        val v = a.length\
    \ - 1\n        val w = a.length - 1\n        val x = a.length - 1\n        val\
    \ y = a.length - 1\n        val z = a.length - 1\n        val a = a.length - 1\n\
    \        val b = a.length - 1\n        val c = a.length - 1\n        val d = a.length\
    \ - 1\n        val e = a.length - 1\n        val f = a.length - 1\n        val\
    \ g = a.length - 1\n        val h = a.length - 1\n        val i = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpio9wtbo2.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpio9wtbo2.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined\
    \ as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio9wtbo2.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio9wtbo2.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpio9wtbo2.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio9wtbo2.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms\
    \ is already de"
  stdout: ''
  timestamp: 1660028552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val triples\
    \ = mutable.HashSet[Long]()\n        val triple = mutable.HashSet[Long]()\n  \
    \      val triple2 = mutable.HashSet[Long]()\n        val triple3 = mutable.HashSet[Long]()\n\
    \        val triple4 = mutable.HashSet[Long]()\n        val triple5 = mutable.HashSet[Long]()\n\
    \        val triple6 = mutable.HashSet[Long]()\n        val triple7 = mutable.HashSet[Long]()\n\
    \        val triple8 = mutable.HashSet[Long]()\n        val triple9 = mutable.HashSet[Long]()\n\
    \        val triple10 = mutable.HashSet[Long]()\n        val triple11 = mutable.HashSet[Long]()\n\
    \        val triple12 = mutable.HashSet[Long]()\n        val triple13 = mutable.HashSet[Long]()\n\
    \        val triple14 = mutable.HashSet[Long]()\n        val triple15 = mutable.HashSet[Long]()\n\
    \        val triple16 = mutable.HashSet[Long]()\n        val triple17 = mutable.HashSet[Long]()\n\
    \        val triple18 = mutable.HashSet[Long]()\n        val triple19 = mutable.HashSet[Long]()\n\
    \        val triple20 = mutable.HashSet[Long]()\n        val triple21 = mutable.HashSet[Long]()\n\
    \        val triple22 = mutable.HashSet[Long]()\n        val triple23 = mutable.HashSet[Long]()\n\
    \        val triple24 = mutable.HashSet[Long]()\n        val triple25 = mutable.HashSet[Long]()\n\
    \        val triple26 = mutable.HashSet[Long]()\n        val triple27 = mutable.HashSet[Long]()\n\
    \        val triple28 = mutable.HashSet[Long]()\n        val triple29 = mutable.HashSet[Long]()\n\
    \        val triple30 = mutable.HashSet[Long]()\n        val triple31 = mutable.HashSet[Long]()\n\
    \        val triple32 = mutable.HashSet[Long]()\n        val triple33 = mutable.HashSet[Long]()\n\
    \        val triple34 = mutable.HashSet[Long]()\n        val triple35 = mutable.HashSet[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf1qr7bf0.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpf1qr7bf0.scala:17:16 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf1qr7bf0.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpf1qr7bf0.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf1qr7bf0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriple2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpf1qr7bf0.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mtriple3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation ava"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.math.max(m,\
    \ n)\n        val m = a.length\n        val n = a.length\n        val max = scala.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiogj6avc.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiogj6avc.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpiogj6avc.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiogj6avc.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = scala.math.max(m,\
    \ n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmax is already defined as \e[33mvalue\e[0m \e[35mmax\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiogj6avc.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = a.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiogj6avc.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e\
    [0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + 1\n      \
    \      if (j < k) {\n                a(i) = j\n                count(j) = count(j)\
    \ + 1\n                count(k) = count(k) + 1\n            }\n        }\n   \
    \     val max = (0 until n).foldLeft(0)((a, b) => if (count(a) > count(b)) a else\
    \ b)\n        count(max)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnwzmrw6.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxnwzmrw6.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxnwzmrw6.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxnwzmrw6.scala:26:27 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = (\e[31m0\e[0m until n).foldLeft(\e\
    [31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e[0m) => \e[33mif\e[0m (count(a) > count(b))\
    \ a \e[33melse\e[0m b)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m   |\e[0m\
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while(i\
    \ < m && j < n && k < n) {\n            if(a(i) + a(i + 1) + a(i + 2) == 3) {\n\
    \                count += 1\n                i += 1\n                j += 1\n\
    \                k += 1\n            }\n            else if(i < m && a(i + 1)\
    \ + a(i + 2) == 3) {\n                count += 1\n                i += 1\n   \
    \         }\n            else if(j < n && a(i) + a(j + 2) == 3) {\n          \
    \      count += 1\n                j += 1\n            }\n            else if(k\
    \ < n && a(i) + a(k + 2) == 3) {\n                count += 1\n               \
    \ k += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbmnvhr5y.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = a.length\n\
    \        val m = a.length\n        val n = a.length\n        val m = a.length\n\
    \        val n = a.length\n        val m = a.length\n        val n = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoynvfbve.scala:99:15 ---------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoynvfbve.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpoynvfbve.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoynvfbve.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoynvfbve.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoynvfbve.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e["
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        a(i) = i * i - i + 1\n            i += 1\n            j += 1\n      \
    \      k += 1\n        }\n        val max = a.max\n        while (i < m) {\n \
    \           val temp = a(i)\n            a(i) = a(i) - temp\n            i +=\
    \ 1\n            count += 1\n        }\n        while (j < m) {\n            val\
    \ temp = a(j)\n            a(j) = a(j) - temp\n            j += 1\n          \
    \  count += 1\n        }\n        while (k < m) {\n            val temp = a(k)\n\
    \            a(k) = a(k) - temp\n            k += 1\n            count += 1\n\
    \        }\n        val result = a.sum\n        if (result % 3 == 0) {\n     \
    \       count\n        } else {\n            0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxr_vrgw.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(i) = count(i) + 1\n     \
    \   }\n        val max = 0\n        for (i <- 0 until n) {\n            val triples\
    \ = count(i) * 3\n            if (triples > max) {\n                max = triples\n\
    \            }\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ngf_h35.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ngf_h35.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ngf_h35.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0ngf_h35.scala:22:26 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0ngf_h35.scala:25:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max\
    \ = triples\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Reassignment to val max\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val max = 0\n   \
    \     val maxTriples = 0\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n           \
    \ i += 1\n        }\n        while (j < n) {\n            a(j) = a(j) * a(j) -\
    \ a(j) + a(j)\n            j += 1\n        }\n        while (k < n) {\n      \
    \      val temp = a(k) * a(k) - a(k) + a(k) \n            if (temp > max) {\n\
    \                max = temp\n                maxTriples = k\n            }\n \
    \           k += 1\n        }\n        (maxTriples * 3)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz3sh3p1g.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpz3sh3p1g.scala:34:22 --------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                max = temp\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                      Found:    (temp\
    \ : Long)\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpz3sh3p1g.scala:35:27 -----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                maxTriples = k\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxTriples\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1dec8_7.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu1dec8_7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu1dec8_7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n  \
    \          if (a(i) + a(j) + a(k) == 3) {\n                count += 1\n      \
    \      }\n            i += 1\n            j += 1\n            k += 1\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeo76ek2q.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = mutable.Map[Long,\
    \ Long]()\n        val maxKey = mutable.Map[Long, Long]()\n        val maxKeyValue\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKey = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValue = mutable.Map[Long, Long]()\n     \
    \   val maxKeyValueKeyValueKey = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValue\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKey = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValueKeyValueKeyValue = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKey = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValue = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKey = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValue = mutable.Map[Long,\
    \ Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValue\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValue\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValue\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\
    \ = mutable.Map[Long, Long]()\n        val maxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsqvvgtq1.scala:38:108 --------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKeyValueKey\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsqvvgtq1.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqvvgtq1.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqvvgtq1.scala:17:18\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsqvvgtq1.scala:18:21\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxKey\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    "
  stdout: ''
  timestamp: 1660028555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n)\
    \ {\n            val j = i * i - i + 1\n            val k = i * i + j\n      \
    \      if (j < k) {\n                val temp = j\n                j = k\n   \
    \             k = temp\n            }\n            if (j % 3 == 0) {\n       \
    \         a += j\n            }\n        }\n        val count = a.count(_ % 3\
    \ == 0)\n        result.add(count)\n        result.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0f0awi_h.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0f0awi_h.scala:16:21\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0f0awi_h.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp0f0awi_h.scala:22:18 -----------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                j = k\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val j\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp0f0awi_h.scala:23:18 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                k = temp\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ k\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0f0awi_h.scala:26:18\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                a += j\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e"
  stdout: ''
  timestamp: 1660028555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpar3oa4vw.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:25:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val result = new\
    \ mutable.HashMap[Long, Long]()\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (i < j && j < k && k <\
    \ m) {\n                        val sum = i * i + j * j + k * k\n            \
    \            if (sum % 3 == 0) {\n                            triples += (i *\
    \ i + j * j + k * k)\n                            result.update(i * i + j * j\
    \ + k * k, sum)\n                        }\n                    }\n          \
    \      }\n            }\n        }\n        val maxTriples = triples.max\n   \
    \     val maxTriplesIndex = triples.indexWhere(_ == maxTriples)\n        val maxTriplesValue\
    \ = triples(maxTriplesIndex)\n        val maxTriplesKey = result.maxBy(_._2)\n\
    \        val maxTriplesKeyIndex = result.get(maxTriplesKey)\n        val maxTriplesKeyValue\
    \ = result.get(maxTriplesKeyIndex)\n        val maxTriplesKeyIndex = maxTriplesKeyIndex.asInstanceOf[Int]\n\
    \        val maxTriplesKeyValue = maxTriplesKeyValue.asInstanceOf[Long]\n    \
    \    val maxTriplesKeyValue = maxTriplesKeyValue / 3\n        val maxTriplesKeyValue\
    \ = maxTriplesKeyValue * 3\n        val maxTriplesKeyValue = maxTriplesKeyValue\
    \ + maxTriplesKeyIndex\n        val maxTriplesKeyValue = maxTriplesKeyValue /\
    \ 3\n        val maxTriplesKeyValue = maxTriplesKeyValue * 3\n        val maxTriplesKeyValue\
    \ = maxTriplesKeyValue + maxTriplesKeyIndex\n        val maxTriplesKeyValue =\
    \ maxTriplesKeyValue / 3\n        val maxTriplesKeyValue = maxTriplesKeyValue\
    \ * 3\n        val maxTriplesKeyValue = maxTriplesKeyValue + maxTriplesKeyIndex\n\
    \        val maxTriplesKeyValue = maxTriplesKeyValue / 3\n        val maxTriplesKeyValue\
    \ = maxTriplesKeyValue * 3\n        val maxTriplesKeyValue = maxTriplesKeyValue\
    \ + maxTriplesKey\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp46bitfhh.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxTriplesKeyIndex\e[0m\
    \ = maxTriplesKeyIndex.asInstanceOf[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxTriplesKeyIndex is already defined as \e[33mvalue\e[0m \e[35mmaxTriplesKeyIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp46bitfhh.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mmaxTriplesKeyValue\e[0m = maxTriplesKeyValue.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriplesKeyValue is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxTriplesKeyValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp46bitfhh.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mmaxTriplesKeyValue\e[0m\
    \ = maxTriplesKeyValue / \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriplesKeyValue is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxTriplesKeyValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp46bitfhh.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mmaxTriplesKeyValue\e[0m\
    \ = maxTriplesKeyValue * \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriplesKeyValue is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxTriplesKeyValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp"
  stdout: ''
  timestamp: 1660028555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var count = 0\n        var i = 0\n    \
    \    var j = 0\n        var k = 0\n        while (i < m && j < m && k < m) {\n\
    \            val x = a(i) + a(j) + a(k)\n            if (x % 3 == 0) {\n     \
    \           count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptv97bz7h.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while(i < m && j < m && k < m) {\n     \
    \       if(a(i) + a(j) + a(k) == 0) {\n                count += 1\n          \
    \  }\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbz54l4cf.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ while (j < m) {\n            a(j) = a(j) * a(j) - a(j) + a(j)\n            j\
    \ += 1\n        }\n        while (k < n) {\n            if (a(k) == a(k) * a(k)\
    \ - a(k) + a(k)) {\n                count += 1\n            }\n            k +=\
    \ 1\n        }\n        count * 3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxrg281hs.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for( i <- 0 until n )\
    \ {\n            val j = i * i - i + 1\n            if( j > 0 ) {\n          \
    \      val k = j * j - j + 1\n                if( k > 0 ) {\n                \
    \    if( k > 0 ) {\n                        if( k > 0 ) {\n                  \
    \          if( k > 0 ) {\n                                if( k > 0 ) {\n    \
    \                                if( k > 0 ) {\n                             \
    \           if( k > 0 ) {\n                                            if( k >\
    \ 0 ) {\n                                                if( k > 0 ) {\n     \
    \                                               if( k > 0 ) {\n              \
    \                                          if( k > 0 ) {\n                   \
    \                                         if( k > 0 ) {\n                    \
    \                                            if( k > 0 ) {\n                 \
    \                                                   if( k > 0 ) {\n          \
    \                                                              if( k > 0 ) {\n\
    \                                                                            if(\
    \ k > 0 ) {\n                                                                \
    \                if( k > 0 ) {\n                                             \
    \                                       if( k > 0 ) {\n                      \
    \                                                                  if( k > 0 )\
    \ {\n                                                                        \
    \                    if( k > 0 ) {\n                                         \
    \                                                       if( k > 0 ) {\n      \
    \                                                                            \
    \                  if( k > 0 ) {\n                                           \
    \                                                             if( k > 0 ) {\n\
    \                                                                            \
    \                                if( k > 0 ) {\n                             \
    \                                                                            \
    \       if( k > 0 ) {\n                                                      \
    \                                                              if( k > 0 ) {\n\
    \                                                                            \
    \                                            if( k > 0 ) {\n                 \
    \                                                                            \
    \                               if( k > 0 ) {\n                              \
    \                                                                            \
    \                      if( k > 0 ) {\n                                       \
    \                                                                            \
    \                 if( k > 0 ) {\n                                            \
    \                                                                            \
    \                if( k > 0 ) {\n                                             \
    \                                                                            \
    \                   if( k > 0 ) {\n                                          \
    \                                                                            \
    \                          if( k > 0 ) {\n                                   \
    \                                                                            \
    \                                     if( k > 0 ) {\n                        \
    \                                                                            \
    \                                                    if( k > 0 ) {\n         \
    \                                                                            \
    \                                                                       if( k\
    \ > 0 ) {\n                                                                  \
    \                                                                            \
    \                  if( k > 0 ) {\n                                           \
    \                                                                            \
    \                                             if( k > 0 ) {\n                \
    \                                                                            \
    \                                                                            if(\
    \ k > 0 ) {\n                                                                \
    \                                                                            \
    \                                if( k > 0 ) {\n                             \
    \                                                                            \
    \                                                                       if( k\
    \ > 0 ) {\n                                                                  \
    \                                                                            \
    \                                      if( k > 0 ) {\n                       \
    \                                                                            \
    \                                                                            \
    \         if( k > 0 ) {\n                                                    \
    \                                                                            \
    \                                                            if( k > 0 ) {\n \
    \                                                                            \
    \                                                                            \
    \                                       if( k > 0 ) {\n                      \
    \                                                                            \
    \                                                                            \
    \                      if( k > 0 ) {\n                                       \
    \                                                                            \
    \                                                                            \
    \         if( k > 0 ) {\n                                                    \
    \                                                                            \
    \                                                                            if(\
    \ k > 0 ) {\n                                                                \
    \                                                                            \
    \                                                                    if( k > 0\
    \ ) {\n                                                                      \
    \                                                                            \
    \                                                                  if( k > 0 )\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                    if( k > 0\
    \ ) {\n                                                                      \
    \                                                                            \
    \                                                                          if(\
    \ k > 0 ) {\n                                                                \
    \                                                                            \
    \                                                                            \
    \        if( k > 0 ) {\n                                                     \
    \                                                                            \
    \                                                                            \
    \                       if( k > 0 ) {\n                                      \
    \                                                                            \
    \              \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthx81f86.scala:85:0 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpthx81f86.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthx81f86.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpthx81f86.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpthx81f86.scala:77:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m77 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while (i\
    \ < n && j < n && k < n) {\n            if (a(i) < a(j) && a(j) < a(k)) {\n  \
    \              count += 1\n                i += 1\n                j += 1\n  \
    \              k += 1\n            } else if (a(i) < a(j)) {\n               \
    \ i += 1\n            } else if (a(j) < a(k)) {\n                j += 1\n    \
    \        } else {\n                k += 1\n            }\n        }\n        if\
    \ (count > m) {\n            count\n        } else {\n            0\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5dcqzvso.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        if (a(i) + a(j) + a(k) = 3) {\n                count += 1\n         \
    \   }\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzjky2nui.scala:22:35 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (a(i) + a(j) + a(k) = \e[31m3\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   ')' expected, but '=' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzjky2nui.scala:15:34 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (n : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzjky2nui.scala:22:16 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (a(i) + a(j) + a(k) = \e[31m3\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Found:    Long\n\e[31m   |\e[0m                Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while(i\
    \ < m && j < n && k < n) {\n            if(a(i) + a(i) + a(k) == 0) {\n      \
    \          count += 1\n                i += 1\n                j += 1\n      \
    \          k += 1\n            }\n            else if(a(i) + a(i) + a(k) == 1)\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n                k += 1\n            }\n            else if(a(i) + a(i) +\
    \ a(k) == 2) {\n                count += 1\n                i += 1\n         \
    \       j += 1\n                k += 1\n            }\n            else if(a(i)\
    \ + a(i) + a(k) == 3) {\n                count += 1\n                i += 1\n\
    \                j += 1\n                k += 1\n            }\n            else\
    \ if(a(i) + a(i) + a(k) == 4) {\n                count += 1\n                i\
    \ += 1\n                j += 1\n                k += 1\n            }\n      \
    \      else if(a(i) + a(i) + a(k) == 5) {\n                count += 1\n      \
    \          i += 1\n                j += 1\n                k += 1\n          \
    \  }\n            else if(a(i) + a(i) + a(k) == 6) {\n                count +=\
    \ 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            else if(a(i) + a(i) + a(k) == 7) {\n             \
    \   count += 1\n                i += 1\n                j += 1\n             \
    \   k += 1\n            }\n            else if(a(i) + a(i) + a(k) == 8) {\n  \
    \              count += 1\n                i += 1\n                j += 1\n  \
    \              k += 1\n            }\n            else if(a(i) + a(i) + a(k) ==\
    \ 9) {\n                count += 1\n                i += 1\n                j\
    \ += 1\n                k += 1\n            }\n            else if(a(i) + a(i)\
    \ + a(k) == 10) {\n                count += 1\n                i += 1\n      \
    \          j += 1\n                k += 1\n            }\n            else if(a(i)\
    \ + a(i) + a(k) == 11) {\n                count += 1\n                i += 1\n\
    \                j += 1\n                k += 1\n            }\n            else\
    \ if(a(i) + a(i) + a(k) == 12) {\n                count += 1\n               \
    \ i += 1\n                j += 1\n                k += 1\n            }\n    \
    \        else if(a(i) + a(i) + a(k) == 13) {\n                count += 1\n   \
    \             i += 1\n                j += 1\n                k += 1\n       \
    \     }\n            else if(a(i) + a(i) + a(k) == 14) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            else if(a(i) + a(i) + a(k) == 15) {\n            \
    \    count += 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6p6do2_w.scala:125:0 ---------------------------\e\
    [0m\e[0m\n\e[31m125 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6p6do2_w.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6p6do2_w.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m 22 |\e[0m        \e[33mwhile\e[0m(i\
    \ < m && j < n && k < n) {\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e\
    [0m        Found:    Unit\n\e[31m    |\e[0m        Required: Long\n\e[31m 23 |\e\
    [0m            \e[33mif\e[0m(a(i) + a(i) + a(k) == \e[31m0\e[0m) {\n\e[31m 24\
    \ |\e[0m                count += \e[31m1\e[0m\n\e[31m 25 |\e[0m              \
    \  i += \e[31m1\e[0m\n\e[31m 26 |\e[0m                j += \e[31m1\e[0m\n\e[31m\
    \ 27 |\e[0m                k += \e[31m1\e[0m\n\e[31m 28 |\e[0m            }\n\e\
    [31m 29 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(a(i) + a(i) + a(k) ==\
    \ \e[31m1\e[0m) {\n\e[31m 30 |\e[0m                count += \e[31m1\e[0m\n\e[31m\
    \ 31 |\e[0m                i += \e[31m1\e[0m\n\e[31m 32 |\e[0m               \
    \ j += \e[31m1\e[0m\n\e[31m 33 |\e[0m                k += \e[31m1\e[0m\n\e[31m\
    \ 34 |\e[0m            }\n\e[31m 35 |\e[0m            \e[33melse\e[0m \e[33mif\e\
    [0m(a(i) + a(i) + a(k) == \e[31m2\e[0m) {\n\e[31m 36 |\e[0m                count\
    \ += \e[31m1\e[0m\n\e[31m 37 |\e[0m                i += \e[31m1\e[0m\n\e[31m 38\
    \ |\e[0m                j += \e[31m1\e[0m\n\e[31m 39 |\e[0m                k +=\
    \ \e[31m1\e[0m\n\e[31m 40 |\e[0m            }\n\e[31m 41 |\e[0m            \e\
    [33melse\e[0m \e[33mif\e[0m(a(i) + a(i) + a(k) == \e[31m3\e[0m) {\n\e[31m 42 |\e\
    [0m                count += \e[31m1\e[0m\n\e[31m 43 |\e[0m                i +=\
    \ \e[31m1\e[0m\n\e[31m 44 |\e[0m                j += \e[31m1\e[0m\n\e[31m 45 |\e\
    [0m                k += \e[31m1\e[0m\n\e[31m 46 |\e[0m            }\n\e[31m 47\
    \ |\e[0m         "
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var count = 0\n        while(i < n && j < n && k <\
    \ n) {\n            a(i) = i * i - i + 1\n            i += 1\n            j +=\
    \ 1\n            k += 1\n            count += 1\n        }\n        while(i <\
    \ n) {\n            a(i) = i * i - i + 1\n            i += 1\n            count\
    \ += 1\n        }\n        while(j < n) {\n            a(j) = j * j - j + 1\n\
    \            j += 1\n            count += 1\n        }\n        while(k < n) {\n\
    \            a(k) = k * k - k + 1\n            k += 1\n            count += 1\n\
    \        }\n        while(i < n) {\n            while(j < n) {\n             \
    \   while(k < n) {\n                    if(a(i) + a(j) + a(k) == m) {\n      \
    \                  count += 1\n                    }\n                    k +=\
    \ 1\n                }\n                j += 1\n            }\n            i +=\
    \ 1\n        }\n        while(j < n) {\n            while(i < n) {\n         \
    \       while(k < n) {\n                    if(a(i) + a(j) + a(k) == m) {\n  \
    \                      count += 1\n                    }\n                   \
    \ k += 1\n                }\n                i += 1\n            }\n         \
    \   j += 1\n        }\n        while(k < n) {\n            while(i < n) {\n  \
    \              while(j < n) {\n                    if(a(i) + a(j) + a(k) == m)\
    \ {\n                        count += 1\n                    }\n             \
    \       j += 1\n                }\n                i += 1\n            }\n   \
    \         k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56ohr83k.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n \
    \       val max = a.length - 1\n        val m = a.length - 1\n        val n =\
    \ a.length - 1\n        val max = a.length - 1\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val max = a.length - 1\n        val m =\
    \ a.length - 1\n        val n = a.length - 1\n        val max = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n \
    \       val max = a.length - 1\n        val m = a.length - 1\n        val n =\
    \ a.length - 1\n        val max = a.length - 1\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val max = a.length - 1\n        val m =\
    \ a.length - 1\n        val n = a.length - 1\n        val max = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n \
    \       val max = a.length - 1\n        val m = a.length - 1\n        val n =\
    \ a.length - 1\n        val max = a.length - 1\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val max = a.length - 1\n        val m =\
    \ a.length - 1\n        val n = a.length - 1\n        val max = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n \
    \       val max = a.length - 1\n        val m = a.length - 1\n        val n =\
    \ a.length - 1\n        val max = a.length - 1\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val max = a.length - 1\n        val m =\
    \ a.length - 1\n        val n = a.length - 1\n        val max = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n \
    \       val max = a.length - 1\n        val m = a.length - 1\n        val n =\
    \ a.length - 1\n        val max = a.length - 1\n        val m = a.length - 1\n\
    \        val n = a.length - 1\n        val max = a.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7y_naa1x.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7y_naa1x.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7y_naa1x.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7y_naa1x.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmax is already defined as \e[33mvalue\e[0m \e[35mmax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7y_naa1x.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7y_naa1x.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is al"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.filter(_ % 3 == 0)\n        val tripleCount = triples.count\n\
    \        val tripleSum = triples.sum\n        val tripleSum2 = tripleSum * tripleSum\n\
    \        val tripleSum3 = tripleSum * tripleSum2\n        val tripleSum4 = tripleSum\
    \ * tripleSum3\n        val tripleSum5 = tripleSum * tripleSum4\n        val tripleSum6\
    \ = tripleSum * tripleSum5\n        val tripleSum7 = tripleSum * tripleSum6\n\
    \        val tripleSum8 = tripleSum * tripleSum7\n        val tripleSum9 = tripleSum\
    \ * tripleSum8\n        val tripleSum10 = tripleSum * tripleSum9\n        val\
    \ tripleSum11 = tripleSum * tripleSum10\n        val tripleSum12 = tripleSum *\
    \ tripleSum11\n        val tripleSum13 = tripleSum * tripleSum12\n        val\
    \ tripleSum14 = tripleSum * tripleSum13\n        val tripleSum15 = tripleSum *\
    \ tripleSum14\n        val tripleSum16 = tripleSum * tripleSum15\n        val\
    \ tripleSum17 = tripleSum * tripleSum16\n        val tripleSum18 = tripleSum *\
    \ tripleSum17\n        val tripleSum19 = tripleSum * tripleSum18\n        val\
    \ tripleSum20 = tripleSum * tripleSum19\n        val tripleSum21 = tripleSum *\
    \ tripleSum20\n        val tripleSum22 = tripleSum * tripleSum21\n        val\
    \ tripleSum23 = tripleSum * tripleSum22\n        val tripleSum24 = tripleSum *\
    \ tripleSum23\n        val tripleSum25 = tripleSum * tripleSum24\n        val\
    \ tripleSum26 = tripleSum * tripleSum25\n        val tripleSum27 = tripleSum *\
    \ tripleSum26\n        val tripleSum28 = tripleSum * tripleSum27\n        val\
    \ tripleSum29 = tripleSum * tripleSum28\n        val tripleSum30 = tripleSum *\
    \ tripleSum29\n        val tripleSum31 = tripleSum * tripleSum30\n        val\
    \ tripleSum32 = tripleSum * tripleSum31\n        val tripleSum33 = tripleSum *\
    \ tripleSum32\n        val tripleSum34 = tripleSum * tripleSum33\n        val\
    \ tripleSum35 = tripleSum * tripleSum34\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8d0yomzb.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8d0yomzb.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        for( i <- 0 until n ) {\n            a(i) = i * i - i + 1\n        }\n\
    \        val count = a.count(_ % 3 == 0)\n        count match {\n            case\
    \ 0 => 1\n            case _ => count\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprplmm2dj.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprplmm2dj.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        while(i < n) {\n            a(i) = i * i - i + 1\n\
    \            i += 1\n            count += 1\n        }\n        while(j < n) {\n\
    \            a(j) = i * i - i + 1\n            j += 1\n            count += 1\n\
    \        }\n        while(k < n) {\n            a(k) = i * i - i + 1\n       \
    \     k += 1\n            count += 1\n        }\n        val result = a.filter(_\
    \ % 3 == 0).length\n        count += result\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4rvyjffn.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 < n).map(_._1).distinct\n   \
    \     triples.foreach { t =>\n            val a = a.filter(_ != t)\n         \
    \   val b = a.filter(_ != t)\n            val c = a.filter(_ != t)\n         \
    \   val sum = a(0) + a(1) + a(2) + a(3) + a(4) + a(5) + a(6) + a(7) + a(8) + a(9)\
    \ + a(10) + a(11) + a(12) + a(13) + a(14) + a(15)\n            if (sum % 3 ==\
    \ 0) {\n                count += 1\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2xcxeps1.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = 0\n        val\
    \ maxCount = 0\n        val maxTriple = 0\n        val maxTripleCount = 0\n  \
    \      val triples = mutable.Map[Long, Long]()\n        val tripleCount = 0\n\
    \        val tripleMax = 0\n        val tripleMaxCount = 0\n        val tripleMaxTriple\
    \ = 0\n        val tripleMaxTripleCount = 0\n        val tripleMaxTripleCount2\
    \ = 0\n        val tripleMaxTripleCount3 = 0\n        val tripleMaxTripleCount4\
    \ = 0\n        val tripleMaxTripleCount5 = 0\n        val tripleMaxTripleCount6\
    \ = 0\n        val tripleMaxTripleCount7 = 0\n        val tripleMaxTripleCount8\
    \ = 0\n        val tripleMaxTripleCount9 = 0\n        val tripleMaxTripleCount10\
    \ = 0\n        val tripleMaxTripleCount11 = 0\n        val tripleMaxTripleCount12\
    \ = 0\n        val tripleMaxTripleCount13 = 0\n        val tripleMaxTripleCount14\
    \ = 0\n        val tripleMaxTripleCount15 = 0\n        val tripleMaxTripleCount16\
    \ = 0\n        val tripleMaxTripleCount17 = 0\n        val tripleMaxTripleCount18\
    \ = 0\n        val tripleMaxTripleCount19 = 0\n        val tripleMaxTripleCount20\
    \ = 0\n        val tripleMaxTripleCount21 = 0\n        val tripleMaxTripleCount22\
    \ = 0\n        val tripleMaxTripleCount23 = 0\n        val tripleMaxTripleCount24\
    \ = 0\n        val tripleMaxTripleCount25 = 0\n        val tripleMaxTripleCount26\
    \ = 0\n        val tripleMaxTripleCount27 = 0\n        val tripleMaxTripleCount28\
    \ = 0\n        val tripleMaxTripleCount29 = 0\n        val tripleMaxTripleCount30\
    \ = 0\n        val tripleMaxTripleCount31 = 0\n        val tripleMaxTripleCount32\
    \ = 0\n        val tripleMaxTripleCount33 = 0\n        val tripleMaxTripleCount34\
    \ = 0\n        val tripleMaxTripleCount35 = 0\n        val tripleMaxTripleCount36\
    \ = 0\n        val tripleMaxTripleCount37 = 0\n        val tripleMaxTripleCount38\
    \ = 0\n        val tripleMaxTripleCount39 = 0\n        val tripleMaxTripleCount40\
    \ = 0\n        val tripleMaxTripleCount41 = 0\n        val tripleMaxTripleCount42\
    \ = 0\n        val tripleMax\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqm_muk8.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxqm_muk8.scala:15:34 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Found:    (n : Long)\n\e[31m   |\e[0m            \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpxqm_muk8.scala:16:20 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxqm_muk8.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxqm_muk8.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val result = new mutable.HashMap[Long, Long]()\n\
    \        val triples = mutable.HashMap[Long, Long]()\n        for (i <- 0 until\
    \ n) {\n            a(i) = i * i - i + 1\n        }\n        for (i <- 0 until\
    \ n) {\n            for (j <- 0 until n) {\n                for (k <- 0 until\
    \ n) {\n                    if (i < j && j < k && k < i) {\n                 \
    \       val triple = i + j + k\n                        if (triple % 3 == 0) {\n\
    \                            triples += ((i, j, k) -> triple)\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        val keys = triples.keySet\n        for (i <- 0 until n) {\n    \
    \        val triple = triples(keys.get(i))\n            if (triple > result.getOrElse(i,\
    \ 0)) {\n                result.update(i, triple)\n            }\n        }\n\
    \        result.values.max\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8rccwk8g.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8rccwk8g.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8rccwk8g.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8rccwk8g.scala:19:26 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8rccwk8g.scala:22:26\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation availabl"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        while(i < n && j < n && k < n) {\n       \
    \     if(i+j+k == n) m += (i+j+k)\n            if(a(i) == a(j) && a(k) == a(j))\
    \ {\n                i += 1\n                j += 1\n                k += 1\n\
    \            } else if(a(i) == a(j) && a(k) == a(i)) {\n                i += 1\n\
    \            } else if(a(i) == a(k) && a(j) == a(k)) {\n                j += 1\n\
    \                k += 1\n            } else {\n                i += 1\n      \
    \          j += 1\n                k += 1\n            }\n        }\n        m.toList.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9vq0yfj.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9vq0yfj.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        if (count > 0) {\n            val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1)\n            val triple = triples.toSet\n            val\
    \ tripleCount = triples.toSet.size\n            val tripleSum = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum2 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum3 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum4 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum5 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum6 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum7 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum8 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum9 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum10 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum11 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum12 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum13 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum14 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum15 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum16 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum17 = triples.toSet.map(x\
    \ => x._1 + x._2 + x._3).sum\n            val tripleSum18 = triples.toSet.map(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsrxeyynl.scala:48:52 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e[0m \e[36mtripleSum18\e[0m = triples.toSet.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpsrxeyynl.scala:58:0 ----------------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrxeyynl.scala:15:34 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (n : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsrxeyynl.scala:31:53 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mtripleSum\e[0m = triples.toSet.map(\e\
    [36mx\e[0m => x._1 + x._2 + x._3).sum\n\e[31m\e[31m   |\e[0m                 \
    \                                  ^^^^\e[0m\n\e[31m   |\e[0m                \
    \                        value _1 is not a member of Long\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpsrxeyynl.scala:31:74 -----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mtripleSum\e[0m = triples.toSet.map(\e\
    [36mx\e[0m => x._1 + x._2 + x._3).sum\n\e[31m\e[31m   |\e[0m                 \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mIntIsIntegral\e[0m\
    \ in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mBigIntIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e"
  stdout: ''
  timestamp: 1660028569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n            count\
    \ += 1\n        }\n        if (count > 0) {\n            val triples = a.filter(_\
    \ % 3 == 0)\n            val triple = triples.max\n            val triple1 = triples.min\n\
    \            val triple2 = triples.sum\n            val triple3 = triples.product\n\
    \            val triple4 = triples.sum\n            val triple5 = triples.product\n\
    \            val triple6 = triples.sum\n            val triple7 = triples.product\n\
    \            val triple8 = triples.sum\n            val triple9 = triples.product\n\
    \            val triple10 = triples.sum\n            val triple11 = triples.product\n\
    \            val triple12 = triples.sum\n            val triple13 = triples.product\n\
    \            val triple14 = triples.sum\n            val triple15 = triples.product\n\
    \            val triple16 = triples.sum\n            val triple17 = triples.product\n\
    \            val triple18 = triples.sum\n            val triple19 = triples.product\n\
    \            val triple20 = triples.sum\n            val triple21 = triples.product\n\
    \            val triple22 = triples.sum\n            val triple23 = triples.product\n\
    \            val triple24 = triples.sum\n            val triple25 = triples.product\n\
    \            val triple26 = triples.sum\n            val triple27 = triples.product\n\
    \            val triple28 = triples.sum\n            val triple29 = triples.product\n\
    \            val triple30 = triples.sum\n            val triple31 = triples.product\n\
    \            val triple32 = triples.sum\n            val triple33 = triples.product\n\
    \            val triple34 = triples.sum\n            val triple35 = triples.product\n\
    \            val triple36 = triples.sum\n            val triple37 = triples.product\n\
    \            val triple38 = triples.sum\n            val triple39 = triples.product\n\
    \            val triple40 = triples.sum\n            val triple41 = triples.product\n\
    \            val triple42 = triples.sum\n            val triple43 = triples.product\n\
    \            val triple44 = triples.sum\n            val triple45 = triples.product\n\
    \            val triple46 = triples.sum\n            val triple47 = triples.product\n\
    \            val triple48 = triples.sum\n            val triple49 = triples.product\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprt_kru02.scala:89:0 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprt_kru02.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprt_kru02.scala:88:1\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmprt_kru02.scala:81:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m81 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0\n        val\
    \ max = 0\n        val min = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriple = 0\n        val minTriple\
    \ = 0\n        val sumTriple = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val sumTriples = 0\n        val maxTriples = 0\n        val minTriple\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptqlkeg9u.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptqlkeg9u.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptqlkeg9u.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mminTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptqlkeg9u.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumTriples is already defined as \e[33mvalue\e[0m \e[35msumTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptqlkeg9u.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptqlkeg9u.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            a(i) = i * i - i + 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = j * j - j + 1\n       \
    \     j += 1\n        }\n        while(k < n) {\n            a(k) = k * k - k\
    \ + 1\n            k += 1\n        }\n        for(i <- 0 until n) {\n        \
    \    for(j <- 0 until n) {\n                for(k <- 0 until n) {\n          \
    \          if(i+j+k == n) {\n                        count += 1\n            \
    \        }\n                }\n            }\n        }\n        a.toList.sortWith(_\
    \ < _).length\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8u8b3c5.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq8u8b3c5.scala:38:25\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpq8u8b3c5.scala:39:29 --------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq8u8b3c5.scala:40:33 --------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (n : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            if(i<j && j<k) {\n\
    \                a(i) = i*i - i + 1\n                i += 1\n                j\
    \ += 1\n                k += 1\n                count += 1\n            }\n  \
    \          else if(j<k) {\n                a(j) = j*j - j + 1\n              \
    \  j += 1\n                k += 1\n                count += 1\n            }\n\
    \            else {\n                a(k) = k*k - k + 1\n                k +=\
    \ 1\n                count += 1\n            }\n        }\n        \n        if(count\
    \ > 0) return count\n        else return 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilpcuns7.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ListBuffer[Long]()\n        val m = 1l\n       \
    \ val n = n + 1l\n        var i = 0\n        var j = 0\n        var k = 0\n  \
    \      while (i < n && j < n && k < n) {\n            a(i) = i * i - i + 1\n \
    \           i += 1\n            j += 1\n            k += 1\n        }\n      \
    \  val n = a.length\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while (i < n && j < n && k < n) {\n            if (a(i) + a(j) + a(k)\
    \ % 3 == m) {\n                result += (i * i * i + j * j * j + k * k * k).toLong\n\
    \            }\n            i += 1\n            j += 1\n            k += 1\n \
    \       }\n        result.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypfbq90s.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypfbq90s.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypfbq90s.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpypfbq90s.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpypfbq90s.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n + \e[31m1l\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpypfbq90s.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutab"
  stdout: ''
  timestamp: 1660028563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpskl8g9t4.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpskl8g9t4.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskl8g9t4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskl8g9t4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpskl8g9t4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same g"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      if (j < k) {\n                val triple = (a(i), a(j), a(k))\n       \
    \         if (triple._1 + triple._2 + triple._3 == 3) {\n                    count(triple._1)\
    \ = count(triple._1) + 1\n                }\n            }\n        }\n      \
    \  count(0)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vsa0pd_.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vsa0pd_.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vsa0pd_.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2 > 0).map(_._1).zipWithIndex.filter(_._2\
    \ > 0).map(_._1)\n        triples.foreach { t =>\n            count += 1\n   \
    \         if (a(t) + a(t-1) + a(t-2) % 3 == 0) {\n                count += 1\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h844ub0.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h844ub0.scala:27:18\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (a(t)\
    \ + a(t-\e[31m1\e[0m) + a(t-\e[31m2\e[0m) % \e[31m3\e[0m == \e[31m0\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Found:    (t : Long)\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h844ub0.scala:27:25 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (a(t) + a(t-\e[31m1\e[0m) +\
    \ a(t-\e[31m2\e[0m) % \e[31m3\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3h844ub0.scala:27:34 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (a(t) + a(t-\e[31m1\e[0m) +\
    \ a(t-\e[31m2\e[0m) % \e[31m3\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                Found:    Long\n\e[31m   |\e[0m                             \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        val i = a.length - 1\n        val j = a.length - 1\n        val\
    \ k = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val k = a.length - 1\n        val i = a.length - 1\n        val j = a.length\
    \ - 1\n        val k = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val k = a.length - 1\n        val i = a.length - 1\n\
    \        val j = a.length - 1\n        val k = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val k = a.length - 1\n        val\
    \ i = a.length - 1\n        val j = a.length - 1\n        val k = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpba8dkv2m.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpba8dkv2m.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpba8dkv2m.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpba8dkv2m.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpba8dkv2m.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mk\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpba8dkv2m.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi\
    \ is already de"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            val x = a(i) + a(j)\
    \ + a(k) \n            if (x % 3 == 0) {\n                count += 1\n       \
    \     }\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp20l5ma8a.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n\
    \            a(i) = i * i - i + 1\n            count(a(i)) = count(a(i)) + 1\n\
    \        }\n        val maxCount = 0\n        for (i <- 0 until n) {\n       \
    \     val count = count(a(i))\n            if (count > maxCount) {\n         \
    \       maxCount = count\n            }\n        }\n        maxCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ftxphn7.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ftxphn7.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ftxphn7.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_ftxphn7.scala:22:26 --------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_ftxphn7.scala:25:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxCount\
    \ = count\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = 0\n        val\
    \ maxCount = 0\n        for (i <- 1 to n) {\n            val j = i * i - i + 1\n\
    \            val k = i * i + i + 1\n            if (j > k) {\n               \
    \ val count = count.get(j) + count.get(k)\n                if (count > maxCount)\
    \ {\n                    max = j\n                    maxCount = count\n     \
    \           }\n            }\n            a(i) = j\n            count(j) = count(j)\
    \ + 1\n            count(k) = count(k) + 1\n        }\n        count(max)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprjiqcb_x.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprjiqcb_x.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprjiqcb_x.scala:19:23\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmprjiqcb_x.scala:25:24 -----------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                    max = j\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment to val max\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmprjiqcb_x.scala:26:29 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    maxCount = count\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Reassignment to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for( i <- 1 to n){\n            for(j <- 1 to\
    \ n){\n                for( k <- 1 to n){\n                    if(i<j && i<k &&\
    \ j<k){\n                        if(a(i)+a(j)+a(k) == 3){\n                  \
    \          count += 1\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0lcu2iy.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0lcu2iy.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy0lcu2iy.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j <- \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0lcu2iy.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(\
    \ k <- \e[31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                            \
    \   ^\e[0m\n\e[31m   |\e[0m                               Found:    (n : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val max = scala.math.pow(3,\
    \ n) - 1\n        val max2 = scala.math.pow(3, n) - 2\n        val max3 = scala.math.pow(3,\
    \ n) - 3\n        val max4 = scala.math.pow(3, n) - 4\n        val max5 = scala.math.pow(3,\
    \ n) - 5\n        val max6 = scala.math.pow(3, n) - 6\n        val max7 = scala.math.pow(3,\
    \ n) - 7\n        val max8 = scala.math.pow(3, n) - 8\n        val max9 = scala.math.pow(3,\
    \ n) - 9\n        val max10 = scala.math.pow(3, n) - 10\n        val max11 = scala.math.pow(3,\
    \ n) - 11\n        val max12 = scala.math.pow(3, n) - 12\n        val max13 =\
    \ scala.math.pow(3, n) - 13\n        val max14 = scala.math.pow(3, n) - 14\n \
    \       val max15 = scala.math.pow(3, n) - 15\n        val max16 = scala.math.pow(3,\
    \ n) - 16\n        val max17 = scala.math.pow(3, n) - 17\n        val max18 =\
    \ scala.math.pow(3, n) - 18\n        val max19 = scala.math.pow(3, n) - 19\n \
    \       val max20 = scala.math.pow(3, n) - 20\n        val max21 = scala.math.pow(3,\
    \ n) - 21\n        val max22 = scala.math.pow(3, n) - 22\n        val max23 =\
    \ scala.math.pow(3, n) - 23\n        val max24 = scala.math.pow(3, n) - 24\n \
    \       val max25 = scala.math.pow(3, n) - 25\n        val max26 = scala.math.pow(3,\
    \ n) - 26\n        val max27 = scala.math.pow(3, n) - 27\n        val max28 =\
    \ scala.math.pow(3, n) - 28\n        val max29 = scala.math.pow(3, n) - 29\n \
    \       val max30 = scala.math.pow(3, n) - 30\n        val max31 = scala.math.pow(3,\
    \ n) - 31\n        val max32 = scala.math.pow(3, n) - 32\n        val max33 =\
    \ scala.math.pow(3, n) - 33\n        val max34 = scala.math.pow(3, n) - 34\n \
    \       val max35 = scala.math.pow(3, n) - 35\n        val max36 = scala.math.pow(3,\
    \ n) - 36\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq165ekip.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpq165ekip.scala:54:5 ---------------------\e[0m\e\
    [0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        while(i < n && j < n\
    \ && k < n) {\n            if(a(i) + a(j) + a(k) == 3) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n                k += 1\n\
    \            }\n            i += 1\n            j += 1\n            k += 1\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp95rh5ori.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ while (j < n) {\n            a(j) = a(i) + a(j) + a(k)\n            j += 1\n\
    \        }\n        while (k < n) {\n            a(k) = a(i) + a(j) + a(k) + a(i)\
    \ + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k)\
    \ + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j)\
    \ + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i)\
    \ + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k)\
    \ + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j)\
    \ + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i)\
    \ + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k)\
    \ + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j)\
    \ + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i)\
    \ + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k)\
    \ + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j)\
    \ + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j) + a(k) + a(i)\
    \ + a(j) + a(k) + a(i) + a(j) + a(k) + a(i) + a(j\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx6l4bcu.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx6l4bcu.scala:41:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpdx6l4bcu.scala:17:16 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdx6l4bcu.scala:40:1 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpdx6l4bcu.scala:33:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0\n        for\
    \ (i <- 0 until n) {\n            a(i) = i * i - i + 1\n            sum += a(i)\n\
    \        }\n        val maxSum = sum / 3\n        val maxCount = 0\n        for\
    \ (i <- 0 until n) {\n            val j = i + 1\n            val k = n - 1\n \
    \           val sum = sum - a(i) - a(j) - a(k) + a(i) + a(j) + a(k) + 3 * a(i)\n\
    \            if (sum > maxSum) {\n                maxCount = 1\n             \
    \   maxSum = sum\n            } else if (sum == maxSum) {\n                maxCount\
    \ += 1\n            }\n        }\n        count.toSeq.sortBy(_._1).last._2\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsflcu1_3.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsflcu1_3.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsflcu1_3.scala:18:26\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsflcu1_3.scala:20:16 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            sum += a(i)\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int - did\
    \ you mean sum.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsflcu1_3.scala:24:26\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpsflcu1_3.scala:29:25 -----------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                maxC"
  stdout: ''
  timestamp: 1660028578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       var sum = 0\n        var sum2 = 0\n        var sum3 = 0\n        var sum4\
    \ = 0\n        var sum5 = 0\n        var sum6 = 0\n        var sum7 = 0\n    \
    \    var sum8 = 0\n        var sum9 = 0\n        var sum10 = 0\n        var sum11\
    \ = 0\n        var sum12 = 0\n        var sum13 = 0\n        var sum14 = 0\n \
    \       var sum15 = 0\n        var sum16 = 0\n        var sum17 = 0\n        var\
    \ sum18 = 0\n        var sum19 = 0\n        var sum20 = 0\n        var sum21 =\
    \ 0\n        var sum22 = 0\n        var sum23 = 0\n        var sum24 = 0\n   \
    \     var sum25 = 0\n        var sum26 = 0\n        var sum27 = 0\n        var\
    \ sum28 = 0\n        var sum29 = 0\n        var sum30 = 0\n        var sum31 =\
    \ 0\n        var sum32 = 0\n        var sum33 = 0\n        var sum34 = 0\n   \
    \     var sum35 = 0\n        var sum36 = 0\n        var sum37 = 0\n        var\
    \ sum38 = 0\n        var sum39 = 0\n        var sum40 = 0\n        var sum41 =\
    \ 0\n        var sum42 = 0\n        var sum43 = 0\n        var sum44 = 0\n   \
    \     var sum45 = 0\n        var sum46 = 0\n        var sum47 = 0\n        var\
    \ sum48 = 0\n        var sum49 = 0\n        var sum50 = 0\n        var sum51 =\
    \ 0\n        var sum52 = 0\n        var sum53 = 0\n        var sum54 = 0\n   \
    \     var sum55 = 0\n        var sum56 = 0\n        var sum57 = 0\n        var\
    \ sum58 = 0\n        var sum59 = 0\n        var sum60 = 0\n        var sum61 =\
    \ 0\n        var sum62 = 0\n        var sum63 = 0\n        var sum64 = 0\n   \
    \     var sum65 = 0\n        var sum66 = 0\n        var sum67 = 0\n        var\
    \ sum68 = 0\n        var sum69 = 0\n        var sum70 = 0\n        var sum71 =\
    \ 0\n        var sum72 = 0\n        var sum73 = 0\n        var sum74 = 0\n   \
    \     var sum75 = 0\n        var sum76 = 0\n        var sum77 = 0\n        var\
    \ sum78 = 0\n        var sum79 = 0\n        var sum80 = 0\n        var sum81 =\
    \ 0\n        var sum82 = 0\n        var sum83 = 0\n        var sum84 = 0\n   \
    \     var sum85 = 0\n        var sum86 = 0\n        var sum87 = 0\n        var\
    \ sum88 = 0\n        var sum89 = 0\n        var sum90 = 0\n        var sum91 =\
    \ 0\n        var sum92\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqn2dkb88.scala:118:4 ---------------------------\e\
    [0m\e[0m\n\e[31m118 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqn2dkb88.scala:15:34 --------------------\e[0m\e[0m\n\e[31m15 |\e[0m\
    \        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Found:    (n : Long)\n\e[31m   |\e[0m            \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqn2dkb88.scala:118:5 --------------------\e[0m\e\
    [0m\n\e[31m118 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: Long\n\e[31m    |\e[0m\n\e\
    [31m    |\e[0m longer explanation available when compiling with `-explain`\n3\
    \ errors found\n"
  stdout: ''
  timestamp: 1660028577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        while (j < n) {\n            a(j) = i * i - j + 1\n\
    \            j += 1\n        }\n        while (k < n) {\n            a(k) = i\
    \ * i - k + 1\n            k += 1\n        }\n        val triples = a.filter(_\
    \ % 3 == 0).length\n        if (triples > count) {\n            count = triples\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl0av2yb0.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       var i = 0\n        var j = 0\n        var k = 0\n        while (i < n\
    \ && j < n && k < n) {\n            if (a(i) + a(j) + a(k) % 3 == 0) {\n     \
    \           count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp6midgpn.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp6midgpn.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp6midgpn.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6midgpn.scala:15:34 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (n : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1dec8_7.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu1dec8_7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu1dec8_7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.Map[Long, Long]()\n        val max = 0\n       \
    \ val min = 0\n        val maxTriples = 0\n        val minTriples = 0\n      \
    \  val maxTriple = 0\n        val minTriple = 0\n        val maxTriples = 0\n\
    \        val minTriples = 0\n        val maxTriple = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val maxTriples = 0\n        val minTriples = 0\n        val maxTriples\
    \ = 0\n        val minTriples = 0\n        val maxTriples = 0\n        val minTriples\
    \ = 0\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa0bux4_g.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa0bux4_g.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa0bux4_g.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mminTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa0bux4_g.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriple\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa0bux4_g.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mminTriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminTriples is already\
    \ defined as \e[33mvalue\e[0m \e[35mminTriples\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa0bux4_g.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxTriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ val triples = a.filter(_ % 3 == 0)\n        triples.foreach(x => {\n       \
    \     val y = triples.filter(_ % x == 0)\n            y.foreach(y => {\n     \
    \           val z = triples.filter(_ % y == 0)\n                z.foreach(z =>\
    \ {\n                    val a = triples.filter(_ % z == 0)\n                \
    \    if (a.length == 1) {\n                        count += 1\n              \
    \      }\n                })\n            })\n        })\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb2ynu5eo.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i < j && j < k && a(i) + a(j) + a(k) == 3 ) {\n                   \
    \     max = max + 1\n                    }\n                }\n            }\n\
    \        }\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qlwjno4.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qlwjno4.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3qlwjno4.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qlwjno4.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qlwjno4.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                       "
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  if (j < k) {\n                a(i) = j\n                count(k) = count(k)\
    \ + 1\n            }\n        }\n        count(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4rhyo1sz.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4rhyo1sz.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4rhyo1sz.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            a(i) = i *\
    \ i - i + 1\n        }\n        for (i <- 0 until n) {\n            for (j <-\
    \ 0 until n) {\n                for (k <- 0 until n) {\n                    if\
    \ (a(i) + a(j) + a(k) % 3 == 0) {\n                        count += 1\n      \
    \              }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpflcvqv6l.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Req"
  stdout: ''
  timestamp: 1660028581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val s = a.length\
    \ - 1\n        val t = a.length - 1\n        val r = a.length - 1\n        val\
    \ q = a.length - 1\n        val p = a.length - 1\n        val l = a.length - 1\n\
    \        val u = a.length - 1\n        val v = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val a = a.length - 1\n        val b = a.length - 1\n\
    \        val c = a.length - 1\n        val d = a.length - 1\n        val e = a.length\
    \ - 1\n        val f = a.length - 1\n        val g = a.length - 1\n        val\
    \ h = a.length - 1\n        val i = a.length - 1\n        val j = a.length - 1\n\
    \        val k = a.length - 1\n        val l = a.length - 1\n        val m = a.length\
    \ - 1\n        val n = a.length - 1\n        val o = a.length - 1\n        val\
    \ p = a.length - 1\n        val q = a.length - 1\n        val r = a.length - 1\n\
    \        val s = a.length - 1\n        val t = a.length - 1\n        val u = a.length\
    \ - 1\n        val v = a.length - 1\n        val w = a.length - 1\n        val\
    \ x = a.length - 1\n        val y = a.length - 1\n        val z = a.length - 1\n\
    \        val a = a.length - 1\n        val b = a.length - 1\n        val c = a.length\
    \ - 1\n        val d = a.length - 1\n        val e = a.length - 1\n        val\
    \ f = a.length - 1\n        val g = a.length - 1\n        val h = a.length - 1\n\
    \        val i = a.length - 1\n        val j = a.length - 1\n        val k = a.length\
    \ - 1\n        val l = a.length - 1\n        val m = a.length - 1\n        val\
    \ n = a.length - 1\n        val o = a.length - 1\n        val p = a.length - 1\n\
    \        val q = a.length - 1\n        val r = a.length - 1\n        val s = a.length\
    \ - 1\n        val t = a.length - 1\n        val u = a.length - 1\n        val\
    \ v = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val a = a.length\
    \ - 1\n        val b = a.length - 1\n        val c = a.length - 1\n        val\
    \ d = a.length - 1\n        val e = a.length - 1\n        val f = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz16fz_w5.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz16fz_w5.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined\
    \ as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz16fz_w5.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml\
    \ is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz16fz_w5.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz16fz_w5.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz16fz_w5.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mp\
    \ is already de"
  stdout: ''
  timestamp: 1660028580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val max = 0\n        val maxTriples = 0\n \
    \       val triples = mutable.HashSet[Long]()\n        val triple = (i: Long,\
    \ j: Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triples\
    \ += (i + j + k)\n            }\n        }\n        val triple = (i: Long, j:\
    \ Long, k: Long) = {\n            if (i < j && j < k) {\n                triple\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnp_h55iw.scala:20:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (i: \e[35mLong\e\
    [0m, j: \e[35mLong\e[0m, k: \e[35mLong\e[0m) = {\n\e[31m\e[31m   |\e[0m      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                       end of statement expected but '=' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnp_h55iw.scala:25:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (i: \e[35mLong\e\
    [0m, j: \e[35mLong\e[0m, k: \e[35mLong\e[0m) = {\n\e[31m\e[31m   |\e[0m      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                       end of statement expected but '=' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnp_h55iw.scala:30:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (i: \e[35mLong\e\
    [0m, j: \e[35mLong\e[0m, k: \e[35mLong\e[0m) = {\n\e[31m\e[31m   |\e[0m      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                       end of statement expected but '=' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnp_h55iw.scala:35:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (i: \e[35mLong\e\
    [0m, j: \e[35mLong\e[0m, k: \e[35mLong\e[0m) = {\n\e[31m\e[31m   |\e[0m      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                       end of statement expected but '=' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnp_h55iw.scala:40:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (i: \e[35mLong\e\
    [0m, j: \e[35mLong\e[0m, k: \e[35mLong\e[0m) = {\n\e[31m\e[31m   |\e[0m      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                       end of statement expected but '=' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnp_h55iw.scala:45:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = (i: \e[35mLong\e\
    [0m, j: \e[35mLong\e[0m, k: \e[35mLong\e[0"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        if (a(i) + a(j) + a(k) == 3) {\n                count += 1\n        \
    \    }\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbeomc5b0.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a : Array[Long] = new\
    \ Array[Long](n)\n        var count = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var max = 0\n        for(i <- 0 until n) {\n     \
    \       a(i) = i * i - i + 1\n        }\n        for(i <- 0 until n) {\n     \
    \       for(j <- 0 until n) {\n                for(k <- 0 until n) {\n       \
    \             if(i+j+k > max && a(i) + a(j) + a(k) == 3) {\n                 \
    \       count = count + 1\n                        max = a(i) + a(j) + a(k) \n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nm_tp83.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m : \e[35mArray\e[0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    (n\
    \ : Long)\n\e[31m   |\e[0m                                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nm_tp83.scala:21:25\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7nm_tp83.scala:24:25 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nm_tp83.scala:25:29\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nm_tp83.scala:26:33 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Fo"
  stdout: ''
  timestamp: 1660028582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.BigInt(m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = scala.math.BigInt(n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp00csi5sy.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.BigInt(m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.BigInt(n)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = scala.math.BigInt(m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val l = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcwx2s39.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcwx2s39.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcwx2s39.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcwx2s39.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcwx2s39.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcwx2s39.scala:26:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1660028580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = n\
    \ - 1\n        var i = 0\n        var j = 0\n        var k = 0\n        var count\
    \ = 0\n        while (i < n && j < n && k < n) {\n            val x = a(i) + a(j)\
    \ + a(k);\n            if (x % 3 == 0) {\n                count += 1\n       \
    \     }\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdpg8g79a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdpg8g79a.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        var i = 0\n        var j = 0\n        var\
    \ k = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n  \
    \          if (a(i) + a(j) + a(k) == 3) {\n                count += 1\n      \
    \      }\n            i += 1\n            j += 1\n            k += 1\n       \
    \ }\n        count \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv_glaonl.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        for(i <- 0 until n) {\n            a(i) = i * i - i + 1\n       \
    \ }\n        for(i <- 0 until n) {\n            for(j <- 0 until n) {\n      \
    \          for(k <- 0 until n) {\n                    if(a(i) + a(j) + a(k)%3\
    \ == 0) {\n                        count += 1\n                    }\n       \
    \         }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgovejmxf.scala:15:32\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgovejmxf.scala:20:25\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgovejmxf.scala:23:25 --------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgovejmxf.scala:24:29\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m(j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \   ^\e[0m\n\e[31m   |\e[0m                             Found:    (n : Long)\n\
    \e[31m   |\e[0m                             Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgovejmxf.scala:25:33 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                 Required:"
  stdout: ''
  timestamp: 1660028582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val max = (a(i), a(j), a(k)) match {\n            case (l, m, n) if (l\
    \ < m && m < n && n < l) => n\n            case (l, m, n) if (l < m && m < n)\
    \ => m\n            case (l, m, n) if (l < n) => l\n            case _ => 0\n\
    \        }\n        val triples = a.zipWithIndex.filter(_._2 < max).map(_._1)\n\
    \        count += triples.count(_ % 3 == 0)\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpatduh0hg.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n+1)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n   \
    \     a(4) = 21\n        var count = 0\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        while (i < a.length) {\n            while (j < a.length)\
    \ {\n                while (k < a.length) {\n                    if (a(i) + a(j)\
    \ + a(k) == 3) {\n                        count += 1\n                    }\n\
    \                    k += 1\n                }\n                j += 1\n     \
    \       }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__m99ocm.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \             Found:    Long\n\e[31m   |\e[0m                                \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val sum = 0\n        for\
    \ (i <- 1 to n) {\n            a(i) = i * i - i + 1\n            sum += a(i)\n\
    \        }\n        val max = 0\n        for (i <- 1 to n) {\n            val\
    \ j = i + 1\n            val k = i + 2\n            val sum = sum - a(i) - a(j)\
    \ - a(k) + a(i)\n            if (sum % 3 == 0) {\n                val key = sum\
    \ / 3\n                if (count.contains(key)) {\n                    count(key)\
    \ = count(key) + 1\n                } else {\n                    count(key) =\
    \ 1\n                }\n                if (count(key) > max) {\n            \
    \        max = count(key)\n                }\n            }\n        }\n     \
    \   max.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolqaso5b.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpolqaso5b.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolqaso5b.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpolqaso5b.scala:20:16 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            sum += a(i)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean sum.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolqaso5b.scala:23:23 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpolqaso5b.scala:35:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                   \
    \ max = count(key)\n\e[31m\e["
  stdout: ''
  timestamp: 1660028583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = mutable.ArrayBuffer.empty[Long]\n        val j = mutable.ArrayBuffer.empty[Long]\n\
    \        val k = mutable.ArrayBuffer.empty[Long]\n        val m = mutable.ArrayBuffer.empty[Long]\n\
    \        val n = mutable.ArrayBuffer.empty[Long]\n        val i = mutable.ArrayBuffer.empty[Long]\n\
    \        val j = mutable.ArrayBuffer.empty[Long]\n        val k = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpar3oa4vw.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpar3oa4vw.scala:25:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n);\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1;\n            i += 1\n            j += 1\n            k += 1\n        }\n\
    \        while(i < n) {\n            a(i) = i * i - i + 1;\n            i += 1\n\
    \        }\n        while(j < n) {\n            a(j) = j * j - j + 1;\n      \
    \      j += 1\n        }\n        while(k < n) {\n            a(k) = k * k - k\
    \ + 1;\n            k += 1\n        }\n        for(i<-0 until a.length) {\n  \
    \          for(j<-0 until a.length) {\n                for(k<-0 until a.length)\
    \ {\n                    if(i<j && i<k && j<k) {\n                        if(a(i)\
    \ + a(j) + a(k) == 3) {\n                            count += 1\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkrw54fm5.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n);\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.Map[Long, Long]()\n        for (i <- 0 until n) {\n \
    \           a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n\
    \            for (j <- 0 until n) {\n                for (k <- 0 until n) {\n\
    \                    if (a(i) + a(j) + a(k)%3 == 0) {\n                      \
    \  val key = a(i) + a(j) + a(k)\n                        if (m.contains(key))\
    \ {\n                            m(key) += 1\n                        } else {\n\
    \                            m(key) = 1\n                        }\n         \
    \           }\n                }\n            }\n        }\n        val max =\
    \ 0\n        for (i <- 0 until n) {\n            val count = m(a(i))\n       \
    \     if (count > max) {\n                max = count\n            }\n       \
    \ }\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde95hhrw.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpde95hhrw.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde95hhrw.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpde95hhrw.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpde95hhrw.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for(i <- 0 until n) {\n            for(j <- 0\
    \ until n) {\n                for(k <- 0 until n) {\n                    if(i<j\
    \ && j<k && k<i && a(i)+a(j)+a(k) == 3*(i+j+k)) {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmcce3ks.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmcce3ks.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpdmcce3ks.scala:18:29 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdmcce3ks.scala:19:33 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (n : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val c = new scala.collection.mutable.HashSet[Long]()\n\
    \        val d = new scala.collection.mutable.HashSet[Long]()\n        val e =\
    \ new scala.collection.mutable.HashSet[Long]()\n        val f = new scala.collection.mutable.HashSet[Long]()\n\
    \        val g = new scala.collection.mutable.HashSet[Long]()\n        val h =\
    \ new scala.collection.mutable.HashSet[Long]()\n        val i = new scala.collection.mutable.HashSet[Long]()\n\
    \        val j = new scala.collection.mutable.HashSet[Long]()\n        val k =\
    \ new scala.collection.mutable.HashSet[Long]()\n        val l = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m1 = new scala.collection.mutable.HashSet[Long]()\n        val m2\
    \ = new scala.collection.mutable.HashSet[Long]()\n        val m3 = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m4 = new scala.collection.mutable.HashSet[Long]()\n        val m5\
    \ = new scala.collection.mutable.HashSet[Long]()\n        val m6 = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m7 = new scala.collection.mutable.HashSet[Long]()\n        val m8\
    \ = new scala.collection.mutable.HashSet[Long]()\n        val m9 = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m10 = new scala.collection.mutable.HashSet[Long]()\n        val m11\
    \ = new scala.collection.mutable.HashSet[Long]()\n        val m12 = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m13 = new scala.collection.mutable.HashSet[Long]()\n        val m14\
    \ = new scala.collection.mutable.HashSet[Long]()\n        val m15 = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m16 = new scala.collection.mutable.HashSet[Long]()\n        val m17\
    \ = new scala.collection.mutable.HashSet[Long]()\n        val m18 = new scala.collection.mutable.HashSet[Long]()\n\
    \        val m19 = new scala.collection.mutable.HashSet[Long\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp08gsi3so.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp08gsi3so.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08gsi3so.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        var count = 0\n        while(i < n && j < n\
    \ && k < n) {\n            if(a(i) == a(j) && a(j) == a(k)) {\n              \
    \  count += 1\n                i += 1\n                j += 1\n              \
    \  k += 1\n            }\n            if(a(i) == a(j) && a(j) != a(k)) {\n   \
    \             i += 1\n            }\n            if(a(i) != a(j) && a(j) == a(k))\
    \ {\n                j += 1\n            }\n            if(a(i) != a(j) && a(j)\
    \ != a(k)) {\n                k += 1\n            }\n        }\n        count\
    \ * 3\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0nogh39s.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n)\
    \ {\n            a(i) = i * i - i + 1\n        }\n        val triples = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        for (k <- 0 until n) {\n                    if (a(i) + a(j) + a(k)%3\
    \ == 0) {\n                        triples += a(i) + a(j) + a(k)\n           \
    \         }\n                }\n            }\n        }\n        m.clear()\n\
    \        m.addAll(triples)\n        m.toArray.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpug5cjc_3.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpug5cjc_3.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpug5cjc_3.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpug5cjc_3.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpug5cjc_3.scala:21:26 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var max = 0\n        var\
    \ a = new Array[Long](n)\n        for( i <- 0 until n ) {\n            a(i) =\
    \ i * i - i + 1\n        }\n        for( i <- 0 until n ) {\n            for(\
    \ j <- 0 until n ) {\n                for( k <- 0 until n ) {\n              \
    \      if( i != j && i != k && j != k && a(i) + a(j) + a(k) == 3 ) {\n       \
    \                 max = Math.max(max, i + j + k)\n                    }\n    \
    \            }\n            }\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1l602ont.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e\
    [0m                                ^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1l602ont.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1l602ont.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m( i <- \e[31m0\e[0m until n ) {\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1l602ont.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m( j\
    \ <- \e[31m0\e[0m until n ) {\n\e[31m\e[31m   |\e[0m                         \
    \     ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1l602ont.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m( k <- \e[31m0\e[0m until\
    \ n ) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                       "
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val triples = mutable.HashMap[Long, Long]()\n        val\
    \ triple = mutable.HashMap[Long, Long]()\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        val triple = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val triple\
    \ = mutable.HashMap[Long, Long]()\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        val triple = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val triple\
    \ = mutable.HashMap[Long, Long]()\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        val triple = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val triple\
    \ = mutable.HashMap[Long, Long]()\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        val triple = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val triple\
    \ = mutable.HashMap[Long, Long]()\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = mutable.HashMap[Long, Long]()\n        val triple = mutable.HashMap[Long,\
    \ Long]()\n        val triples = mutable.HashMap[Long, Long]()\n        val triple\
    \ = mutable.HashMap[Long, Long]()\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = mutable.HashMap[Long, Long]()\n        val triples\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq8rqivc8.scala:53:21 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpq8rqivc8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq8rqivc8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq8rqivc8.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq8rqivc8.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtri"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while(i < n && j < n && k < n) {\n            if(i+j+k == n) count\
    \ += 1\n            if(a(i) == a(j) && a(j) == a(k)) count += 1\n            i\
    \ += 1\n            j += 1\n            k += 1\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszzydfs9.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        while (j < n) {\n            a(j) = i * i - j + 1\n\
    \            j += 1\n        }\n        while (k < n) {\n            a(k) = i\
    \ * i - k + 1\n            k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1).length\n        count = triples * 3\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_f2k0w_.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = 0\n        val\
    \ min = 0\n        val maxCount = 0\n        val minCount = 0\n        val maxTriple\
    \ = 0\n        val minTriple = 0\n        val maxTripleCount = 0\n        val\
    \ minTripleCount = 0\n        val maxTripleSum = 0\n        val minTripleSum =\
    \ 0\n        val maxTripleSumCount = 0\n        val minTripleSumCount = 0\n  \
    \      val maxTripleSumSum = 0\n        val minTripleSumSum = 0\n        val maxTripleSumSumCount\
    \ = 0\n        val minTripleSumSumCount = 0\n        val maxTripleSumSumSum =\
    \ 0\n        val minTripleSumSumSum = 0\n        val maxTripleSumSumSumCount =\
    \ 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTripleSumSumSumCount = 0\n        val maxTripleSumSumSumSum\
    \ = 0\n        val minTri\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpje3465ku.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpje3465ku.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminTripleSumSumSumCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminTripleSumSumSumCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mminTripleSumSumSumCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpje3465ku.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumSum\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxTripleSumSumSumSum is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumSumSumSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpje3465ku.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mminTripleSumSumSumCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminTripleSumSumSumCount is already defined as \e[33mvalue\e[0m \e[35mminTripleSumSumSumCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpje3465ku.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxTripleSumSumSumSum\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxTripleSumSumSumSum is already defined as \e[33mvalue\e[0m \e[35mmaxTripleSumSumSumSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660028592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + j\n          \
    \  if (j < k) {\n                a += j\n                m += k\n            }\n\
    \        }\n        val res = a.filter(_ % 3 == 0).size\n        m.toList.foreach(println)\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgyqefzuw.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgyqefzuw.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgyqefzuw.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgyqefzuw.scala:21:18 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                a += j\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Array[Long] - did you mean\
    \ a.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var count = 0\n        while (i < m && j < m && k < m) {\n    \
    \        val x = a(i) + a(j) + a(k) \n            if (x % 3 == 0) {\n        \
    \        count += 1\n            }\n            i += 1\n            j += 1\n \
    \           k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0zs032dk.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while(i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       while(i < n) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < n) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < n) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < j) {\n            count += 1\n            i += 1\n        }\n\
    \        while(j < k) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < i) {\n            count += 1\n            \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ebbme7l.scala:166:0 ---------------------------\e\
    [0m\e[0m\n\e[31m166 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ebbme7l.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ebbme7l.scala:165:1\
    \ --------------------\e[0m\e[0m\n\e[31m165 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Long\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp8ebbme7l.scala:158:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m158 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var count = 0\n        while (i < n && j < n && k\
    \ < n) {\n            a(i) = i * i - i + 1\n            i += 1\n            j\
    \ += 1\n            k += 1\n            count += 1\n        }\n        if (count\
    \ == 0) {\n            return -1\n        }\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        while (i < n && j < n && k < n) {\n        \
    \    if (a(i) + a(j) + a(k) == m) {\n                count += 1\n            }\n\
    \            i += 1\n            j += 1\n            k += 1\n        }\n     \
    \   if (count == 0) {\n            return -1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoy9lfw79.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoy9lfw79.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoy9lfw79.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoy9lfw79.scala:15:34 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (n : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val max =\
    \ a.length - 1\n        val maxTriples = 0\n        val maxTripleCount = 0\n \
    \       val tripleCount = 0\n        val tripleSum = 0\n        val tripleSumCount\
    \ = 0\n        val tripleSumSum = 0\n        val tripleSumSumCount = 0\n     \
    \   val tripleSumSumSum = 0\n        val tripleSumSumSumCount = 0\n        val\
    \ tripleSumSumSumSum = 0\n        val tripleSumSumSumSumCount = 0\n        val\
    \ tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount = 0\n       \
    \ val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount = 0\n   \
    \     val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount = 0\n\
    \        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount =\
    \ 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSumSumSumCount\
    \ = 0\n        val tripleSumSumSumSumSum = 0\n        val tripleSumSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpub0ojqjp.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpub0ojqjp.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtripleSumSumSumSumCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtripleSumSumSumSumCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mtripleSumSumSumSumCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpub0ojqjp.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mtripleSumSumSumSumSum\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtripleSumSumSumSumSum is already defined as \e[33mvalue\e[0m \e[35mtripleSumSumSumSumSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpub0ojqjp.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mtripleSumSumSumSumCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mtripleSumSumSumSumCount is already defined as \e[33mvalue\e[0m \e[35mtripleSumSumSumSumCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpub0ojqjp.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mtripleSumSumSumSumSum\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mtripleSumSumSumSumSum is already defined as \e[33mvalue\e[0m \e[35mtripleSumSumSumSumSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1660028592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        while (j < n) {\n            a(j) = i * i - j + 1\n\
    \            j += 1\n        }\n        while (k < n) {\n            a(k) = i\
    \ * i - k + 1\n            k += 1\n        }\n        val triples = a.zipWithIndex.filter(_._2\
    \ % 3 == 0).map(_._1)\n        count = triples.count(_ % 3 == 0)\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdc0cx6m_.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val s = a.length\
    \ - 1\n        val t = a.length - 1\n        val u = a.length - 1\n        val\
    \ v = a.length - 1\n        val w = a.length - 1\n        val x = a.length - 1\n\
    \        val y = a.length - 1\n        val z = a.length - 1\n        val a = a.length\
    \ - 1\n        val b = a.length - 1\n        val c = a.length - 1\n        val\
    \ d = a.length - 1\n        val e = a.length - 1\n        val f = a.length - 1\n\
    \        val g = a.length - 1\n        val h = a.length - 1\n        val i = a.length\
    \ - 1\n        val j = a.length - 1\n        val k = a.length - 1\n        val\
    \ l = a.length - 1\n        val m = a.length - 1\n        val n = a.length - 1\n\
    \        val o = a.length - 1\n        val p = a.length - 1\n        val q = a.length\
    \ - 1\n        val r = a.length - 1\n        val s = a.length - 1\n        val\
    \ t = a.length - 1\n        val u = a.length - 1\n        val v = a.length - 1\n\
    \        val w = a.length - 1\n        val x = a.length - 1\n        val y = a.length\
    \ - 1\n        val z = a.length - 1\n        val a = a.length - 1\n        val\
    \ b = a.length - 1\n        val c = a.length - 1\n        val d = a.length - 1\n\
    \        val e = a.length - 1\n        val f = a.length - 1\n        val g = a.length\
    \ - 1\n        val h = a.length - 1\n        val i = a.length - 1\n        val\
    \ j = a.length - 1\n        val k = a.length - 1\n        val l = a.length - 1\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val o = a.length\
    \ - 1\n        val p = a.length - 1\n        val q = a.length - 1\n        val\
    \ r = a.length - 1\n        val s = a.length - 1\n        val t = a.length - 1\n\
    \        val u = a.length - 1\n        val v = a.length - 1\n        val w = a.length\
    \ - 1\n        val x = a.length - 1\n        val y = a.length - 1\n        val\
    \ z = a.length - 1\n        val a = a.length - 1\n        val b = a.length - 1\n\
    \        val c = a.length - 1\n        val d = a.length - 1\n        val e = a.length\
    \ - 1\n        val f = a.length - 1\n        val g = a.length - 1\n        val\
    \ h = a.length - 1\n        val i = a.length - 1\n        val j = a.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppq5birno.scala:88:4 ----------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppq5birno.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined\
    \ as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppq5birno.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppq5birno.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppq5birno.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = a.length - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ms is already defined\
    \ as \e[33mvalue\e[0m \e[35ms\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppq5birno.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt\
    \ is already de"
  stdout: ''
  timestamp: 1660028592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            a(i) = i * i - i + 1\n        }\n        val n = a.length - 1\n \
    \       for (i <- 1 to n) {\n            for (j <- i to n) {\n               \
    \ for (k <- i to n) {\n                    if (a(i) + a(j) + a(k) == 3) {\n  \
    \                      m += (i + j + k)\n                    }\n             \
    \   }\n            }\n        }\n        m.toList.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkmb3yr_s.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkmb3yr_s.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long, Long]()\n\
    \        val triple = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val triple = mutable.Map[Long, Long]()\n        val triples\
    \ = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long, Long]()\n\
    \        val triples = mutable.Map[Long, Long]()\n        val triple = mutable.Map[Long,\
    \ Long]()\n        val triples = mutable.Map[Long, Long]()\n        val triple\
    \ = mutable.Map[Long\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1dec8_7.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu1dec8_7.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu1dec8_7.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu1dec8_7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Er"
  stdout: ''
  timestamp: 1660028541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val c = new mutable.HashMap[Long,\
    \ Long]()\n        val d = new mutable.HashMap[Long, Long]()\n        val e =\
    \ new mutable.HashMap[Long, Long]()\n        val f = new mutable.HashMap[Long,\
    \ Long]()\n        val g = new mutable.HashMap[Long, Long]()\n        val h =\
    \ new mutable.HashMap[Long, Long]()\n        val i = new mutable.HashMap[Long,\
    \ Long]()\n        val j = new mutable.HashMap[Long, Long]()\n        val k =\
    \ new mutable.HashMap[Long, Long]()\n        val l = new mutable.HashMap[Long,\
    \ Long]()\n        val m1 = new mutable.HashMap[Long, Long]()\n        val m2\
    \ = new mutable.HashMap[Long, Long]()\n        val m3 = new mutable.HashMap[Long,\
    \ Long]()\n        val m4 = new mutable.HashMap[Long, Long]()\n        val m5\
    \ = new mutable.HashMap[Long, Long]()\n        val m6 = new mutable.HashMap[Long,\
    \ Long]()\n        val m7 = new mutable.HashMap[Long, Long]()\n        val m8\
    \ = new mutable.HashMap[Long, Long]()\n        val m9 = new mutable.HashMap[Long,\
    \ Long]()\n        val m10 = new mutable.HashMap[Long, Long]()\n        val m11\
    \ = new mutable.HashMap[Long, Long]()\n        val m12 = new mutable.HashMap[Long,\
    \ Long]()\n        val m13 = new mutable.HashMap[Long, Long]()\n        val m14\
    \ = new mutable.HashMap[Long, Long]()\n        val m15 = new mutable.HashMap[Long,\
    \ Long]()\n        val m16 = new mutable.HashMap[Long, Long]()\n        val m17\
    \ = new mutable.HashMap[Long, Long]()\n        val m18 = new mutable.HashMap[Long,\
    \ Long]()\n        val m19 = new mutable.HashMap[Long, Long]()\n        val m20\
    \ = new mutable.HashMap[Long, Long]()\n        val m21 = new mutable.HashMap[Long,\
    \ Long]()\n        val m22 = new mutable.HashMap[Long, Long]()\n        val m23\
    \ = new mutable.HashMap[Long, Long]()\n        val m24\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptd_wsx1q.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptd_wsx1q.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptd_wsx1q.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mc\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptd_wsx1q.scala:19:20 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptd_wsx1q.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptd_wsx1q.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mf\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutabl"
  stdout: ''
  timestamp: 1660028593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.filter(_ % 3 == 0)\n        count = triples.count(_ %\
    \ 3 == 0)\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaznb8vja.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while\
    \ (i < n) {\n            while (j < n) {\n                while (k < n) {\n  \
    \                  if (a(i) + a(j) + a(k) == 3) {\n                        triples(a(i)\
    \ + a(j) + a(k)) = 1\n                    }\n                    k += 1\n    \
    \            }\n                j += 1\n            }\n            i += 1\n  \
    \      }\n        triples.values.toList.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu_f_x391.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu_f_x391.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ val max = 0\n        val maxIndex = 0\n        while (j < n) {\n           \
    \ while (k < n) {\n                if (a(i) + a(k) + a(j) == 3) {\n          \
    \          count += 1\n                }\n                k += 1\n           \
    \ }\n            j += 1\n        }\n        if (count > max) {\n            max\
    \ = count\n            maxIndex = j\n        }\n        count -= 1\n        if\
    \ (count > max) {\n            max = count\n            maxIndex = j\n       \
    \ }\n        count -= 1\n        if (count > max) {\n            max = count\n\
    \            maxIndex = j\n        }\n        count -= 1\n        if (count >\
    \ max) {\n            max = count\n            maxIndex = j\n        }\n     \
    \   count -= 1\n        if (count > max) {\n            max = count\n        \
    \    maxIndex = j\n        }\n        count -= 1\n        if (count > max) {\n\
    \            max = count\n            maxIndex = j\n        }\n        count -=\
    \ 1\n        if (count > max) {\n            max = count\n            maxIndex\
    \ = j\n        }\n        count -= 1\n        if (count > max) {\n           \
    \ max = count\n            maxIndex = j\n        }\n        count -= 1\n     \
    \   if (count > max) {\n            max = count\n            maxIndex = j\n  \
    \      }\n        count -= 1\n        if (count > max) {\n            max = count\n\
    \            maxIndex = j\n        }\n        count -= 1\n        if (count >\
    \ max) {\n            max = count\n            maxIndex = j\n        }\n     \
    \   count -= 1\n        if (count > max) {\n            max = count\n        \
    \    maxIndex = j\n        }\n        count -= 1\n        if (count > max) {\n\
    \            max = count\n            maxIndex = j\n        }\n        count -=\
    \ 1\n        if (count > max) {\n            max = count\n            maxIndex\
    \ = j\n        }\n        count -= 1\n        if (count > max) {\n           \
    \ max = count\n            maxIndex = j\n        }\n        count -= 1\n     \
    \   if (count > max) {\n            max = count\n            maxIndex = j\n  \
    \      }\n        count -= 1\n        if (count > max) {\n            max = count\n\
    \            maxIndex = j\n        }\n        count -= 1\n        if (count >\
    \ max) {\n            max = count\n            maxIndex = j\n        }\n     \
    \   count -= 1\n        if (count > max) {\n            max = count\n        \
    \    maxIndex = j\n        }\n        count -= 1\n        if (count > max) {\n\
    \            max = count\n            maxIndex = j\n        }\n        count -=\
    \ 1\n        if (count > max) {\n            max = count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5f8v4oiq.scala:148:0 ---------------------------\e\
    [0m\e[0m\n\e[31m148 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5f8v4oiq.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = a.length\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5f8v4oiq.scala:38:16 -----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            max = count\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val max\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5f8v4oiq.scala:39:21 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            maxIndex = j\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val maxIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5f8v4oiq.scala:43:16 -----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            max = count\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val max\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5f8v4oiq.scala:44:21 -----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m            maxIndex = j\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val maxIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp5f8v4oiq.scala:48:16 -----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            max = count\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignmen"
  stdout: ''
  timestamp: 1660028594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val max = 0\n        val maxTriples = 0\n \
    \       for (i <- 0 until n) {\n            a(i) = i * i - i + 1\n        }\n\
    \        for (i <- 0 until m) {\n            for (j <- 0 until m) {\n        \
    \        for (k <- 0 until m) {\n                    if (a(i) + a(j) + a(k) ==\
    \ 3) {\n                        maxTriples += 1\n                    }\n     \
    \           }\n            }\n        }\n        if (maxTriples > max) {\n   \
    \         max = maxTriples\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp451eqpro.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp451eqpro.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp451eqpro.scala:26:35 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                        maxTriples += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \      value += is not a member of Int - did you mean maxTriples.!=?\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp451eqpro.scala:32:16 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            max = maxTriples\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while (i\
    \ < n && j < n && k < n) {\n            if (a(i) + a(j) + a(k) == 3) {\n     \
    \           count += 1\n            }\n            i += 1\n            j += 1\n\
    \            k += 1\n        }\n        if (count == 0) {\n            count =\
    \ 0\n        }\n        count \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp60kp_5nm.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ while (j < n) {\n            a(j) = a(j) * a(j) - a(j) + a(j)\n            j\
    \ += 1\n        }\n        while (k < n) {\n            if (a(k) == 0) {\n   \
    \             count += 1\n                k += 1\n            }\n            else\
    \ {\n                val temp = a(k)\n                a(k) = a(k) * a(k)\n   \
    \             a(k) = temp - a(k) + a(k)\n                k += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2eshtuvm.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for(i <- 0 until n) {\n            for(j <- 0\
    \ until n) {\n                for(k <- 0 until n) {\n                    if(i+j+k\
    \ == 3 && i+j+k+1 == 3*i) {\n                        count += 1\n            \
    \            a(i) = i\n                        a(j) = j\n                    \
    \    a(k) = k\n                    }\n                }\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpasn4buo6.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpasn4buo6.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpasn4buo6.scala:18:29 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpasn4buo6.scala:19:33 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                \e[33mfor\e[0m(k <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (n : Long)\n\e[31m   |\e[0m              \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a : mutable.Array[Long]\
    \ = new mutable.Array[Long](n)\n        var i = 0\n        var j = 0\n       \
    \ var k = 0\n        var count = 0\n        while(i < n && j < n && k < n) {\n\
    \            a(i) = i * i - i + 1\n            i += 1\n            j += 1\n  \
    \          k += 1\n        }\n        while(i < n) {\n            count += 1\n\
    \            i += 1\n        }\n        while(j < n) {\n            count += 1\n\
    \            j += 1\n        }\n        while(k < n) {\n            count += 1\n\
    \            k += 1\n        }\n        while(i < n && j < n && k < n) {\n   \
    \         count += 1\n            i += 1\n            j += 1\n            k +=\
    \ 1\n        }\n        while(i < n) {\n            count += 1\n            i\
    \ += 1\n        }\n        while(j < n) {\n            count += 1\n          \
    \  j += 1\n        }\n        while(k < n) {\n            count += 1\n       \
    \     k += 1\n        }\n        while(i < n && j < n && k < n) {\n          \
    \  count += 1\n            i += 1\n            j += 1\n            k += 1\n  \
    \      }\n        while(i < n) {\n            count += 1\n            i += 1\n\
    \        }\n        while(j < n) {\n            count += 1\n            j += 1\n\
    \        }\n        while(k < n) {\n            count += 1\n            k += 1\n\
    \        }\n        while(i < n && j < n && k < n) {\n            count += 1\n\
    \            i += 1\n            j += 1\n            k += 1\n        }\n     \
    \   while(i < n) {\n            count += 1\n            i += 1\n        }\n  \
    \      while(j < n) {\n            count += 1\n            j += 1\n        }\n\
    \        while(k < n) {\n            count += 1\n            k += 1\n        }\n\
    \        while(i < n && j < n && k < n) {\n            count += 1\n          \
    \  i += 1\n            j += 1\n            k += 1\n        }\n        while(i\
    \ < n) {\n            count += 1\n            i += 1\n        }\n        while(j\
    \ < n) {\n            count += 1\n            j += 1\n        }\n        while(k\
    \ < n) {\n            count += 1\n            k += 1\n        }\n        while(i\
    \ < n && j < n && k < n) {\n            count += 1\n            i += 1\n     \
    \       j += 1\n            k += 1\n        }\n        while(i < n) {\n      \
    \      count += 1\n            i += 1\n        }\n        while(j < n) {\n   \
    \         count += 1\n            j += 1\n        }\n        while(k < n) {\n\
    \            count += 1\n            k += 1\n        }\n        while(i < n &&\
    \ j < n && k < n) {\n            count += 1\n            i += 1\n            j\
    \ += 1\n            k += 1\n        }\n        while(i < n) {\n            count\
    \ += 1\n            i += 1\n        }\n        while(j < n) {\n            count\
    \ += 1\n            j += 1\n        }\n        while(k < n) {\n            count\
    \ += 1\n            k += 1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2l_youxe.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m : mutable.Array[\e\
    [35mLong\e[0m] = \e[33mnew\e[0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2l_youxe.scala:15:42\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e\
    [36ma\e[0m : mutable.Array[\e[35mLong\e[0m] = \e[33mnew\e[0m mutable.Array[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                     \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                                          Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2l_youxe.scala:142:8\
    \ --------------------\e[0m\e[0m\n\e[31m142 |\e[0m        \e[33mwhile\e[0m(k <\
    \ n) {\n\e[31m\e[31m    |\e[0m        ^\e[0m\n\e[31m    |\e[0m        Found: \
    \   Unit\n\e[31m    |\e[0m        Required: Long\n\e[31m143 |\e[0m           \
    \ count += \e[31m1\e[0m\n\e[31m144 |\e[0m            k += \e[31m1\e[0m\n\e[31m145\
    \ |\e[0m        }\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for (i <- 0 until n) {\n            a(i) = i *\
    \ i - i + 1\n        }\n        for (i <- 0 until n) {\n            for (j <-\
    \ 0 until n) {\n                for (k <- 0 until n) {\n                    if\
    \ (a(i) + a(j) + a(k) % 3 == 0) {\n                        count += 1\n      \
    \              }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpflcvqv6l.scala:20:26 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e\
    [31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m               \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflcvqv6l.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mfor\e[0m (k <- \e[31m0\e[0m until\
    \ n) {\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (n : Long)\n\e[31m   |\e\
    [0m                                  Req"
  stdout: ''
  timestamp: 1660028581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val max = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw49pzblx.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw49pzblx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw49pzblx.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw49pzblx.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw49pzblx.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35m"
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = a.length\
    \ - 1\n        var i = 0\n        var j = 0\n        var k = 0\n        var t\
    \ = 0\n        var count = 0\n        while (i < m && j < n && k < k) {\n    \
    \        if (a(i) < a(j) && a(j) < a(k)) {\n                t += a(i) + a(j) +\
    \ a(k);\n                i = j;\n                j = k;\n                k = t;\n\
    \                count++\n            }\n            else if (a(i) < a(j)) {\n\
    \                i = j;\n                j = t;\n                k = t;\n    \
    \            count++\n            }\n            else if (a(j) < a(k)) {\n   \
    \             i = t;\n                j = k;\n                k = t;\n       \
    \         count++\n            }\n            else {\n                i = t;\n\
    \                j = k;\n                k = t;\n                count++\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbsqegftt.scala:30:23 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                count++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmpbsqegftt.scala:36:23 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m                count++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbsqegftt.scala:42:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                count++\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpbsqegftt.scala:48:23 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                count++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbsqegftt.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined as \e[33mvalue\e\
    [0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpbsqegftt.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e["
  stdout: ''
  timestamp: 1660028601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var count = 0\n        while (i\
    \ < m && j < n && k < n) {\n            val x = a(i) + a(j) + a(k);\n        \
    \    if (x % 3 == 0) {\n                count += 1\n            }\n          \
    \  i += 1\n            j += 1\n            k += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp875sh4u1.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val max = 0\n        val maxIndex = 0\n        for (i <- 0 until n) {\n\
    \            val sum = a(i) + a(j) + a(k) \n            if (sum % 3 == 0) {\n\
    \                count += 1\n                if (sum > max) {\n              \
    \      max = sum\n                    maxIndex = i\n                }\n      \
    \      }\n        }\n        (count, maxIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2eeko2gx.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2eeko2gx.scala:28:26\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2eeko2gx.scala:33:26 --------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                    max = sum\n\e[31m\e[31m   |\e[0m     \
    \                     ^^^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (sum : Long)\n\e[31m   |\e[0m                          Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp2eeko2gx.scala:34:29 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    maxIndex = i\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2eeko2gx.scala:38:8\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m        (count, maxIndex)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (Int, Int)\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = scala.math.BigInt(3)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        val m = scala.math.BigInt(m)\n        val n = scala.math.BigInt(n)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.BigInt(m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm\
    \ is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = scala.math.BigInt(n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp00csi5sy.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = scala.math.BigInt(m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = scala.math.BigInt(n)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn\
    \ is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00csi5sy.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = scala.math.BigInt(m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660028544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val maxTriples = a.filter(_ % 3 == 0).length\n    \
    \    val maxTriples2 = a.filter(_ % 3 == 0).map(x => x * x + 1).max\n        val\
    \ maxTriples3 = a.filter(_ % 3 == 0).map(x => x * x + 1).sum\n        val maxTriples4\
    \ = a.filter(_ % 3 == 0).map(x => x * x + 1).reduce((x, y) => if (x > y) x else\
    \ y)\n        val maxTriples5 = a.filter(_ % 3 == 0).map(x => x * x + 1).foldLeft(0)((x,\
    \ y) => if (x > y) x else y)\n        val maxTriples6 = a.filter(_ % 3 == 0).map(x\
    \ => x * x + 1).foldRight(0)((x, y) => if (x > y) x else y)\n        val maxTriples7\
    \ = a.filter(_ % 3 == 0).map(x => x * x + 1).scanLeft(0)((x, y) => if (x > y)\
    \ x else y)\n        val maxTriples8 = a.filter(_ % 3 == 0).map(x => x * x + 1).scanRight(0)((x,\
    \ y) => if (x > y) x else y)\n        val maxTriples9 = a.filter(_ % 3 == 0).map(x\
    \ => x * x + 1).scanRight(1)((x, y) => if (x > y) x else y)\n        val maxTriples10\
    \ = a.filter(_ % 3 == 0).map(x => x * x + 1).scanRight(1)((x, y) => if (x > y)\
    \ x else y)\n        val maxTriples11 = a.filter(_ % 3 == 0).map(x => x * x +\
    \ 1).scanRight(1)((x, y) => if (x > y) x else y)\n        val maxTriples12 = a.filter(_\
    \ % 3 == 0).map(x => x * x + 1).scanRight(1)((x, y) => if (x > y) x else y)\n\
    \        val maxTriples13 = a.filter(_ % 3 == 0).map(x => x * x + 1).scanRight(1)((x,\
    \ y) => if (x > y) x else y)\n        val maxTriples14 = a.filter(_ % 3 == 0).map(x\
    \ => x * x + 1).scanRight(1)((x, y) => if (x > y) x else y)\n        val maxTriples15\
    \ = a.filter(_ % 3 == 0).map(x => x * x + 1).scanRight(1)((x, y) => if (x > y)\
    \ x else y)\n        val maxTriples16 = a.filter(_ % 3 == 0).map(x => x * x +\
    \ 1).scanRight(1)((x, y) => if (\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppnlvxr96.scala:39:95 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples16\e[0m = a.filter(_\
    \ % \e[31m3\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x * x + \e[31m1\e[0m).scanRight(\e\
    [31m1\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppnlvxr96.scala:15:34 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (n : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnlvxr96.scala:28:107 -------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples5\e[0m = a.filter(_\
    \ % \e[31m3\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x * x + \e[31m1\e[0m).foldLeft(\e\
    [31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x > y) x \e[33melse\e\
    [0m y)\n\e[31m\e[31m   |\e[0m                                                \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (y : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppnlvxr96.scala:29:101\
    \ -------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples6\e\
    [0m = a.filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x * x + \e\
    [31m1\e[0m).foldRight(\e[31m0\e[0m)((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e\
    ["
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val triples = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n\
    \        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples = mutable.Map[Long,\
    \ Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n        val maxTriples\
    \ = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long, Long]()\n\
    \        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple = mutable.Map[Long,\
    \ Long]()\n        val maxTriples = mutable.Map[Long, Long]()\n        val maxTriple\
    \ = mutable.Map[Long, \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi58v74_x.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi58v74_x.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi58v74_x.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi58v74_x.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxTriples\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriples is already defined as \e[33mvalue\e[0m \e[35mmaxTriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi58v74_x.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e[0m = mutable.Map[\e[35mLong\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxTriple is already defined as \e[33mvalue\e[0m \e[35mmaxTriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same g"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        val max = 0\n        val\
    \ maxCount = 0\n        for (i <- 0 until n) {\n            val j = i + i\n  \
    \          val k = i + j\n            val count = count(i) + count(j) + count(k)\n\
    \            if (count > maxCount) {\n                max = count\n          \
    \      maxCount = count\n            }\n            a(i) = i * i - i + 1\n   \
    \         count(i) = count(i) + 1\n            count(j) = 0\n            count(k)\
    \ = 0\n        }\n        max match {\n            case 0 => 0\n            case\
    \ _ => maxCount\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwkhz8zvb.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwkhz8zvb.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwkhz8zvb.scala:19:26\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpwkhz8zvb.scala:24:20 -----------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                max = count\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwkhz8zvb.scala:25:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxCount\
    \ = count\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Reassignment to val maxCount\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val k = n\
    \ - 1\n        var i = 0\n        var j = 0\n        var k = 0\n        var count\
    \ = 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n           \
    \ i += 1\n        }\n        while (j < m) {\n            a(j) = a(j) + a(j) +\
    \ a(k)\n            j += 1\n            k += 1\n        }\n        while (k >=\
    \ 0) {\n            val temp = a(k)\n            val temp2 = a(k)\n          \
    \  val temp3 = a(k)\n            a(k) = a(k) + a(k)\n            count += temp\
    \ + temp2 + temp3\n            k -= 1\n        }\n        count * 3\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa4fu9v6r.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvalue\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa4fu9v6r.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa4fu9v6r.scala:37:18 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            count += temp + temp2 + temp3\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = a.length\n        var i = 0\n     \
    \   var j = 0\n        var k = 0\n        var count = 0\n        while (i < n)\
    \ {\n            a(i) = i * i - i + 1\n            i += 1\n        }\n       \
    \ while (j < n) {\n            a(j) = a(i) + a(j) + a(k)\n            j += 1\n\
    \        }\n        while (k < n) {\n            a(k) = a(i) + a(j) + a(k)\n \
    \           k += 1\n        }\n        val max = 0\n        for (i <- 0 until\
    \ n) {\n            if (a(i) > max) {\n                max = a(i)\n          \
    \  }\n        }\n        for (i <- 0 until n) {\n            if (a(i) == max)\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bqdr7br.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5bqdr7br.scala:37:23 --------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                max = a(i)\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ListBuffer[Long]()\n        for(i<-0 until n){\n\
    \            val j = i*i\n            val k = i*i + i + 1\n            val l =\
    \ i*i - i + 1\n            if(i<j && j<k && k<l){\n                a(i) = i*i\
    \ - i + 1\n                result += a(i).toLong\n            }\n        }\n \
    \       result.max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_pdqq0zb.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_pdqq0zb.scala:16:21\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_pdqq0zb.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length\n        val n = m\n        val triples = mutable.HashMap[Long,\
    \ Long]()\n        val triple = 0\n        val triples = 0\n        val triple\
    \ = 0\n        val triples = 0\n        val triple = 0\n        val triples =\
    \ 0\n        val triple = 0\n        val triples = 0\n        val triple = 0\n\
    \        val triples = 0\n        val triple = 0\n        val triples = 0\n  \
    \      val triple = 0\n        val triples = 0\n        val triple = 0\n     \
    \   val triples = 0\n        val triple = 0\n        val triples = 0\n       \
    \ val triple = 0\n        val triples = 0\n        val triple = 0\n        val\
    \ triples = 0\n        val triple = 0\n        val triples = 0\n        val triple\
    \ = 0\n        val triples = 0\n        val triple = 0\n        val triples =\
    \ 0\n        val triple = 0\n        val triples = 0\n        val triple = 0\n\
    \        val triples = 0\n        val triple = 0\n        val triples = 0\n  \
    \      val triple = 0\n        val triples = 0\n        val triple = 0\n     \
    \   val triples = 0\n        val triple = 0\n        val triples = 0\n       \
    \ val triple = 0\n        val triples = 0\n        val triple = 0\n        val\
    \ triples = 0\n        val triple = 0\n        val triples = 0\n        val triple\
    \ = 0\n        val triples = 0\n        val triple = 0\n        val triples =\
    \ 0\n        val triple = 0\n        val triples = 0\n        val triple = 0\n\
    \        val triples = 0\n        val triple = 0\n        val triples = 0\n  \
    \      val triple = 0\n        val triples = 0\n        val triple = 0\n     \
    \   val triples = 0\n        val triple = 0\n        val triples = 0\n       \
    \ val triple = 0\n        val triples = 0\n        val triple = 0\n        val\
    \ triples = 0\n        val triple = 0\n        val triples = 0\n        val triple\
    \ = 0\n        val triples = 0\n        val triple = 0\n        val triples =\
    \ 0\n        val triple = 0\n        val triples = 0\n        val triple = 0\n\
    \        val triples = 0\n        val triple = 0\n        val triples = 0\n  \
    \      val triple = 0\n        val triples = 0\n        val triple = 0\n     \
    \   val triples = 0\n        val triple = 0\n        val triples = 0\n       \
    \ val triple = 0\n        val triples = 0\n        val triple = 0\n        val\
    \ triples = 0\n        val triple = 0\n        val triples = 0\n        val triple\
    \ = 0\n        val triples = 0\n        val triple = 0\n        val triples =\
    \ 0\n        val triple = 0\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_9_ybfg.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtriples\
    \ is already defined as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_9_ybfg.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriple\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriple is already defined as \e[33mvalue\e[0m \e[35mtriple\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx_9_ybfg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mtriples\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtriples is already defined\
    \ as \e[33mvalue\e[0m \e[35mtriples\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_9_ybfg.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mtriple\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtriple is\
    \ already defined as \e[33mvalue\e[0m \e[35mtriple\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx_9_ybfg.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mtriples\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtriples is already defined as \e[33mvalue\e[0m \e[35mtriples\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx_9_"
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = a.length - 1\n        val n = a.length - 1\n        val c = new\
    \ Array[Long](m)\n        var i = 0\n        var j = 0\n        var k = 0\n  \
    \      var count = 0\n        while (i < m && j < n && k < m) {\n            if\
    \ (a(i) < a(j) && a(j) < a(k)) {\n                a(i) = a(i) * a(i) - a(i) +\
    \ a(j)\n                a(j) = a(j) * a(j) - a(j) + a(k) \n                a(k)\
    \ = a(k) * a(k) - a(k) + a(i)\n                count += 1\n            }\n   \
    \         i += 1\n            j += 1\n            k += 1\n        }\n        val\
    \ result = count / 3\n        if (result > 0) result else 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp56fbn9tu.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = a.length - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m            \
    \    Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for(i<-0 until n){\n \
    \           val j = i*i\n            val k = i*i+1\n            val l = i*i+2\n\
    \            if(i<j && j<k && k<l){\n                a(i) = j\n              \
    \  a(j) = k\n                a(k) = l\n                count(i) = count(i) + 1\n\
    \                count(j) = count(j) + 1\n                count(k) = count(k)\
    \ + 1\n            }\n        }\n        val maxCount = 0\n        for(i <- 0\
    \ until n){\n            val count = count(i)\n            if(count > maxCount){\n\
    \                maxCount = count\n            }\n        }\n        maxCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfd22r5yu.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd22r5yu.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfd22r5yu.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<-\e\
    [31m0\e[0m until n){\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m       \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfd22r5yu.scala:31:25 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (n : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpfd22r5yu.scala:34:25 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                maxCount = count\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ListBuffer[Long]()\n        val max = (3 * n) -\
    \ 1\n        val min = (3 * n) / 2\n        val mid = min + max\n        val mid2\
    \ = mid / 2\n        val mid3 = mid / 3\n        val mid4 = mid / 4\n        val\
    \ mid5 = mid / 5\n        val mid6 = mid / 6\n        val mid7 = mid / 7\n   \
    \     val mid8 = mid / 8\n        val mid9 = mid / 9\n        val mid10 = mid\
    \ / 10\n        val mid11 = mid / 11\n        val mid12 = mid / 12\n        val\
    \ mid13 = mid / 13\n        val mid14 = mid / 14\n        val mid15 = mid / 15\n\
    \        val mid16 = mid / 16\n        val mid17 = mid / 17\n        val mid18\
    \ = mid / 18\n        val mid19 = mid / 19\n        val mid20 = mid / 20\n   \
    \     val mid21 = mid / 21\n        val mid22 = mid / 22\n        val mid23 =\
    \ mid / 23\n        val mid24 = mid / 24\n        val mid25 = mid / 25\n     \
    \   val mid26 = mid / 26\n        val mid27 = mid / 27\n        val mid28 = mid\
    \ / 28\n        val mid29 = mid / 29\n        val mid30 = mid / 30\n        val\
    \ mid31 = mid / 31\n        val mid32 = mid / 32\n        val mid33 = mid / 33\n\
    \        val mid34 = mid / 34\n        val mid35 = mid / 35\n        val mid36\
    \ = mid / 36\n        val mid37 = mid / 37\n        val mid38 = mid / 38\n   \
    \     val mid39 = mid / 39\n        val mid40 = mid / 40\n        val mid41 =\
    \ mid / 41\n        val mid42 = mid / 42\n        val mid43 = mid / 43\n     \
    \   val mid44 = mid / 44\n        val mid45 = mid / 45\n        val mid46 = mid\
    \ / 46\n        val mid47 = mid / 47\n        val mid48 = mid / 48\n        val\
    \ mid49 = mid / 49\n        val mid50 = mid / 50\n        val mid51 = mid / 51\n\
    \        val mid52 = mid / \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpudo6z8py.scala:70:25 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36mmid52\e[0m = mid / \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpudo6z8py.scala:15:34 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Array.ofDim[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (n : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpudo6z8py.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpudo6z8py.scala:71:5 ---------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val result = mutable.ListBuffer[Long]()\n        val max = (3 * n) -\
    \ 1\n        val min = (3 * n) / 2\n        for (i<-0 until n) {\n           \
    \ a(i) = i * i - i + 1\n        }\n        for (i <- 0 until n) {\n          \
    \  for (j <- 0 until n) {\n                for (k <- 0 until n) {\n          \
    \          if (a(i) + a(j) + a(k) = max) {\n                        result.add(a(i)\
    \ + a(j) + a(k))\n                    }\n                }\n            }\n  \
    \      }\n        result.max\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp57g172ix.scala:25:43 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mif\e[0m (a(i) + a(j) + a(k)\
    \ = max) {\n\e[31m\e[31m   |\e[0m                                           ^\e\
    [0m\n\e[31m   |\e[0m                                           ')' expected, but\
    \ '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57g172ix.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp57g172ix.scala:16:21\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57g172ix.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i<-\e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Found:    (n : Long)\n\e[31m   |\e[0m   \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp57g172ix.scala:22:26 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57g172ix.scala:23:30\
    \ --------"
  stdout: ''
  timestamp: 1660028605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val count = mutable.Map[Long, Long]()\n        for( i <- 1 to n ) {\n\
    \            val j = i * i - i + 1\n            val k = i * i + i + j\n      \
    \      if( j > 0 ) {\n                if( k > 0 ) {\n                    if( j\
    \ + k == 0 ) {\n                        a(i) = j\n                        count(k)\
    \ = count(k) + 1\n                    }\n                    else {\n        \
    \                a(i) = j\n                        count(k) = count(k) + 1\n \
    \                   }\n                }\n                else {\n           \
    \         a(i) = j\n                    count(k) = count(k) + 1\n            \
    \    }\n            }\n            else {\n                a(i) = j\n        \
    \        count(k) = count(k) + 1\n            }\n        }\n        count(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp78r7i8wf.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78r7i8wf.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp78r7i8wf.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m( i <-\
    \ \e[31m1\e[0m to n ) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        for(i<- 1 to n){\n            for(j <- i to n){\n\
    \                for(k <- j to n){\n                    if(i+j+k == n){\n    \
    \                    count += 1\n                        a(i) = i*i-i+1\n    \
    \                    a(j) = j*j-i+1\n                        a(k) = k*k-j+1\n\
    \                    }\n                }\n            }\n        }\n        val\
    \ maxTriples = a.max\n        count + maxTriples\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51s8a126.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51s8a126.scala:17:21\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i<- \e\
    [31m1\e[0m to n){\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m  \
    \ |\e[0m                     Found:    (n : Long)\n\e[31m   |\e[0m           \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp51s8a126.scala:18:26 --------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mfor\e[0m(j <- i to n){\n\e[31m\e[31m   |\e[0m      \
    \                    ^\e[0m\n\e[31m   |\e[0m                          Found: \
    \   (n : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51s8a126.scala:19:30 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mfor\e[0m(k <- j to n){\n\e[31m\e\
    [31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m           \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = Array.ofDim[Long](n)\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        var k =\
    \ 0\n        while (i < n && j < n && k < n) {\n            a(i) = i * i - i +\
    \ 1\n            i += 1\n            j += 1\n            k += 1\n        }\n \
    \       val triples = a.zipWithIndex.filter(_._2 < n).map(_._1).sum\n        val\
    \ result = triples % 3 == 0\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfdlcumw6.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[Long]\n\
    \        val m = mutable.ArrayBuffer.empty[Long]\n        val n = mutable.ArrayBuffer.empty[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcesgi7j6.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcesgi7j6.scala:22:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659798431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var count =\
    \ 0\n        while (i < n) {\n            a(i) = i * i - i + 1\n            i\
    \ += 1\n        }\n        val maxTriples = a.zipWithIndex.filter(_._3 > 0).map(_._1).sum\n\
    \        val maxTriple = a(maxTriples)\n        while (j < n) {\n            if\
    \ (a(k) == maxTriple) {\n                count += 1\n            }\n         \
    \   k += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u4kwcs2.scala:15:34\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \                 ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5u4kwcs2.scala:24:49\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxTriples\e[0m = a.zipWithIndex.filter(_._3 > \e[31m0\e[0m).map(_._1).sum\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^\e[0m\n\
    \e[31m   |\e[0m          value _3 is not a member of (Long, Int) - did you mean\
    \ _$1._1?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5u4kwcs2.scala:25:26\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxTriple\e\
    [0m = a(maxTriples)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (maxTriples : Long)\n\e\
    [31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028605
