name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    //\
  \ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    //\
  \ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val common =\
    \ l1 diff l2\n        val unique = l1 diff common\n        val sorted = unique\
    \ sortBy (_ < _)\n        sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val commonSet = set1 intersect set2\n        commonSet.map(l\
    \ => l).toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n  \
    \      l4.sortWith(_ < _)", "        val l3 = l1.toSet intersect l2.toSet\n  \
    \      l3.toList", "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList",
  "        val common = l1 intersect l2\n        val unique = l1 diff common\n   \
    \     common ++ unique", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n\
    \        val l5 = l1 ++ l2 -- l1\n        val l6 = l1 -- l2 ++ l1\n        val\
    \ l7 = l1 ++ l2 -- l1 ++ l2\n        val l8 = l1 ++ l2 -- l1 ++ l2 ++ l1\n   \
    \     val l9 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2\n        val l10 = l1 ++ l2 --\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l11 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2\n        val l12 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1\n        val l13 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2\n        val l14 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1\n        val l15 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l16 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l17 = l1 ++ l2 --\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n     \
    \   val l18 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1\n        val l19 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l20 =\
    \ l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ", "        val common\
    \ = l1 diff l2\n        val unique = l1 union l2\n        val sorted = unique\
    \ sortBy (x => common.toSet.contains(x))\n        sorted", "        val set1 =\
    \ l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect set2\n\
    \        common.sorted", "        val set1 = new mutable.HashSet[Long]()\n   \
    \     val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1 +=\
    \ x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val common = l1 ++ l2\n        val unique = common.distinct\n\
    \        unique.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sortWith(_ < _)", "        val l3 = l1 ++ l2\n        val l4 = l1\
    \ -- l2\n        l3.filterNot(l4.contains)", "        val common = l1 ++ l2\n\
    \        common.sortWith(_.compareTo(_) < 0)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        common foreach { x =>\
    \ result += x }\n        result.sorted"]
stop_tokens:
- "\n    }\n"
