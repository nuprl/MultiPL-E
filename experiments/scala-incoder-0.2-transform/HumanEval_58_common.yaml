name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    //\
  \ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    //\
  \ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val common =\
    \ l1 diff l2\n        val unique = l1 diff common\n        val sorted = unique\
    \ sortBy (_ < _)\n        sorted", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val commonSet = set1 intersect set2\n        commonSet.map(l\
    \ => l).toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n  \
    \      l4.sortWith(_ < _)", "        val l3 = l1.toSet intersect l2.toSet\n  \
    \      l3.toList", "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList",
  "        val common = l1 intersect l2\n        val unique = l1 diff common\n   \
    \     common ++ unique", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n\
    \        val l5 = l1 ++ l2 -- l1\n        val l6 = l1 -- l2 ++ l1\n        val\
    \ l7 = l1 ++ l2 -- l1 ++ l2\n        val l8 = l1 ++ l2 -- l1 ++ l2 ++ l1\n   \
    \     val l9 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2\n        val l10 = l1 ++ l2 --\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l11 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2\n        val l12 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1\n        val l13 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2\n        val l14 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1\n        val l15 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l16 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l17 = l1 ++ l2 --\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n     \
    \   val l18 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1\n        val l19 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l20 =\
    \ l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ", "        val common\
    \ = l1 diff l2\n        val unique = l1 union l2\n        val sorted = unique\
    \ sortBy (x => common.toSet.contains(x))\n        sorted", "        val set1 =\
    \ l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect set2\n\
    \        common.sorted", "        val set1 = new mutable.HashSet[Long]()\n   \
    \     val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1 +=\
    \ x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l3.distinct\n        l4.sort", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val common = l1 ++ l2\n        val unique = common.distinct\n\
    \        unique.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sortWith(_ < _)", "        val l3 = l1 ++ l2\n        val l4 = l1\
    \ -- l2\n        l3.filterNot(l4.contains)", "        val common = l1 ++ l2\n\
    \        common.sortWith(_.compareTo(_) < 0)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        common foreach { x =>\
    \ result += x }\n        result.sorted", "        val common = l1.intersect(l2).distinct\n\
    \        common.sortWith(_.compareTo(_) < 0)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val commonSet = set1 intersect set2\n  \
    \      commonSet.map(l => l).toList", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3 filterNot (x => l1 contains x)\n\
    \        val l5 = l3 filterNot (x => l2 contains x)\n        val l6 = l3 filter\
    \ (x => l1 contains x || l2 contains x)\n        l4.toList ++ l5.toList ++ l6.toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy (_ % l3.length)\n      \
    \  l4.map(_._2.head).sortWith(_ < _).distinct", "        val l3 = l1.toSet intersect\
    \ l2.toSet\n        l3.toList", "        val l3 = l1.filterNot(l2.contains)\n\
    \        l3.sortWith(_ < _)", "        val l3 = l1 ++ l2\n        val l4 = l1\
    \ -- l2\n        val l5 = l1 ++ l2 -- l1\n        val l6 = l1 -- l2 ++ l1\n  \
    \      val l7 = l1 ++ l2 -- l1 ++ l2\n        val l8 = l1 -- l2 -- l1 ++ l2\n\
    \        val l9 = l1 ++ l2 -- l1 -- l2\n        val l10 = l1 -- l2 ++ l1 -- l2\n\
    \        val l11 = l1 ++ l2 -- l1 ++ l2 -- l1\n        val l12 = l1 -- l2 -- l1\
    \ ++ l2 ++ l1\n        val l13 = l1 ++ l2 -- l1 -- l2 ++ l1 -- l1\n        val\
    \ l14 = l1 -- l2 ++ l1 -- l2 -- l1 ++ l1\n        val l15 = l1 ++ l2 -- l1 ++\
    \ l2 -- l1 -- l2 ++ l1\n        val l16 = l1 -- l2 -- l1 ++ l2 ++ l1 -- l2 --\
    \ l1\n        val l17 = l1 ++ l2 -- l1 -- l2 ++ l1 -- l2 -- l1 ++ l1\n       \
    \ val l18 = l1 -- l2 ++ l1 -- l2 -- l1 ++ l2 -- l1 -- l1\n        val l19 = l1\
    \ ++ l2 -- l1 ++ l2 -- l1 -- l2 ++ l1 -- l2 -- l1\n        val l20 = l1 -- l2\
    \ -- l1 ++ l2 ++ l1 -- l2 -- l1 ++ l2 -- l1 -- l1\n        val l21 = l1 ++ l2\
    \ -- l1 -- l2 ++ l1 -- l2 -- l1 ++ l2 -- l1 -- l2 ++ l1\n        val l22 = l1\
    \ -- l2 ++ l1 -- l2 -- l1 ++ l2 -- l1 -- l2 ++ l1 -- l2 -- l1\n        val l23\
    \ = l1 ++ l2 -- l1 ++ l2 -- l1 -- l2 ++ l1 -- l2 -- l1 ++ l2 -- l1 -- l1\n   \
    \     val l24 = l1 -- l2 -- l1 ++ l2 ++ l1 -- l2 -- l1 ++ l2 -- l1 -- l2 ++ l1\
    \ -- l2 -- l1\n        val l", "        val l3 = l1 ++ l2\n        val l4 = l3\
    \ groupBy (_ % l3.size)\n        l4.map(_._2.head).sortWith(_ < _)", "       \
    \ val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1\
    \ intersect set2\n        val result = new mutable.ListBuffer[Long]()\n      \
    \  common foreach { x => result += x }\n        result.sort", "        val l3\
    \ = l1 ++ l2\n        val l4 = l3.toSet\n        l4.toList", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.map(l => l).toList", "        val set1 = l1.toSet\n   \
    \     val set2 = l2.toSet\n        val common = set1 intersect set2\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        common foreach { x => result\
    \ += x }\n        result.sort", "        val l3 = l1 ++ l2\n        val l4 = l1\
    \ -- l2\n        val l5 = l1 ++ l4\n        val l6 = l1 -- l4\n        val l7\
    \ = l1 ++ l5\n        val l8 = l1 -- l5\n        val l9 = l1 ++ l6\n        val\
    \ l10 = l1 -- l6\n        val l11 = l1 ++ l7\n        val l12 = l1 -- l7\n   \
    \     val l13 = l1 ++ l8\n        val l14 = l1 -- l8\n        val l15 = l1 ++\
    \ l9\n        val l16 = l1 -- l9\n        val l17 = l1 ++ l10\n        val l18\
    \ = l1 -- l10\n        val l19 = l1 ++ l11\n        val l20 = l1 -- l11\n    \
    \    val l21 = l1 ++ l12\n        val l22 = l1 -- l12\n        val l23 = l1 ++\
    \ l13\n        val l24 = l1 -- l13\n        val l25 = l1 ++ l14\n        val l26\
    \ = l1 -- l14\n        val l27 = l1 ++ l15\n        val l28 = l1 -- l15\n    \
    \    val l29 = l1 ++ l16\n        val l30 = l1 -- l16\n        val l31 = l1 ++\
    \ l17\n        val l32 = l1 -- l17\n        val l33 = l1 ++ l18\n        val l34\
    \ = l1 -- l18\n        val l35 = l1 ++ l19\n        val l36 = l1 -- l19\n    \
    \    val l37 = l1 ++ l20\n        val l38 = l1 -- l20\n        val l39 = l1 ++\
    \ l21\n        val l40 = l1 -- l21\n        val l41 = l1 ++ l22\n        val l42\
    \ = l1 -- l22\n        val l43 = l1 ++ l23\n        val l44 = l1 -- l23\n    \
    \    val l45 = l1 ++ l24\n        val l46 = l1 -- l24\n        val l47 = l1 ++\
    \ l25\n        val l48 = l1 -- l25\n        val l49 = l1 ++ l26\n        val l50\
    \ = l1 -- ", "        val common = l1.intersect(l2)\n        common.sortWith(_\
    \ < _)", "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy { x => x }\n\
    \        val l5 = l4 mapValues { x => x.toList }\n        l5.toList sortBy { x\
    \ => x._1 }", "        val common = mutable.Set[Long]()\n        l1.foreach {\
    \ x => if (l2.contains(x)) common += x }\n        common.sorted", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val l3 = l1 ++\
    \ l2\n        val l4 = l1 -- l2\n        l3.toSet -- l4.toSet", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common toList", "        val l3 = l1 ++ l2\n        val l4 = l3.toSet\n\
    \        l4.toList", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n \
    \       val l5 = l1 ++ l2\n        val l6 = l1 -- l2\n        val l7 = l1 ++ l2\n\
    \        val l8 = l1 -- l2\n        val l9 = l1 ++ l2\n        val l10 = l1 --\
    \ l2\n        val l11 = l1 ++ l2\n        val l12 = l1 -- l2\n        val l13\
    \ = l1 ++ l2\n        val l14 = l1 -- l2\n        val l15 = l1 ++ l2\n       \
    \ val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n        val l18 = l1 -- l2\n\
    \        val l19 = l1 ++ l2\n        val l20 = l1 -- l2\n        val l21 = l1\
    \ ++ l2\n        val l22 = l1 -- l2\n        val l23 = l1 ++ l2\n        val l24\
    \ = l1 -- l2\n        val l25 = l1 ++ l2\n        val l26 = l1 -- l2\n       \
    \ val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n        val l29 = l1 ++ l2\n\
    \        val l30 = l1 -- l2\n        val l31 = l1 ++ l2\n        val l32 = l1\
    \ -- l2\n        val l33 = l1 ++ l2\n        val l34 = l1 -- l2\n        val l35\
    \ = l1 ++ l2\n        val l36 = l1 -- l2\n        val l37 = l1 ++ l2\n       \
    \ val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n        val l40 = l1 -- l2\n\
    \        val l41 = l1 ++ l2\n        val l42 = l1 -- l2\n        val l43 = l1\
    \ ++ l2\n        val l44 = l1 -- l2\n        val l45 = l1 ++ l2\n        val l46\
    \ = l1 -- l2\n        val l47 = l1 ++ l2\n        val l48 = l1 -- l2\n       \
    \ val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n        val l51 = l1 ++ l2\n\
    \        val l52 = l1 -- l2\n        val l53 = l1 ++ l2\n        val l54 = l1\
    \ -- l2\n        val l", "        val l3 = l1.toSet intersect l2.toSet\n     \
    \   l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n  \
    \      set1 intersect set2", "        val common = l1.intersect(l2)\n        val\
    \ unique = common.distinct\n        unique.toList", "        val l3 = l1 ++ l2\n\
    \        val l4 = l3.distinct\n        l4.sort", "        val l3 = l1 ++ l2\n\
    \        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\n        val l6 = l1 --\
    \ l2\n        val l7 = l1 ++ l2\n        val l8 = l1 -- l2\n        val l9 = l1\
    \ ++ l2\n        val l10 = l1 -- l2\n        val l11 = l1 ++ l2\n        val l12\
    \ = l1 -- l2\n        val l13 = l1 ++ l2\n        val l14 = l1 -- l2\n       \
    \ val l15 = l1 ++ l2\n        val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n\
    \        val l18 = l1 -- l2\n        val l19 = l1 ++ l2\n        val l20 = l1\
    \ -- l2\n        val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n        val l23\
    \ = l1 ++ l2\n        val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n       \
    \ val l26 = l1 -- l2\n        val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n\
    \        val l29 = l1 ++ l2\n        val l30 = l1 -- l2\n        val l31 = l1\
    \ ++ l2\n        val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n        val l34\
    \ = l1 -- l2\n        val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n       \
    \ val l37 = l1 ++ l2\n        val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n\
    \        val l40 = l1 -- l2\n        val l41 = l1 ++ l2\n        val l42 = l1\
    \ -- l2\n        val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n        val l45\
    \ = l1 ++ l2\n        val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n       \
    \ val l48 = l1 -- l2\n        val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n\
    \        val l51 = l1 ++ l2\n        val l52 = l1 -- l2\n        val l53 = l1\
    \ ++ l2\n        val l54 = l1 -- l2\n        val l", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n\
    \        l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common.map(l => l).toList", "        val set1 =\
    \ new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n\
    \        set1.intersect(set2).toList", "        val set1 = l1.toSet\n        val\
    \ set2 = l2.toSet\n        val common = set1 intersect set2\n        common map\
    \ { x => l1 find { y => y == x } }", "        val l3 = l1 ++ l2\n        val l4\
    \ = l1 -- l2\n        val l5 = l1 ++ l2 -- l1\n        val l6 = l1 -- l2 ++ l1\n\
    \        val l7 = l1 ++ l2 -- l1 ++ l2\n        val l8 = l1 -- l2 ++ l1 -- l2\n\
    \        val l9 = l1 ++ l2 -- l1 ++ l2 -- l1\n        val l10 = l1 -- l2 ++ l1\
    \ -- l2 ++ l1\n        val l11 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n        val\
    \ l12 = l1 -- l2 ++ l1 -- l2 ++ l1 -- l2\n        val l13 = l1 ++ l2 -- l1 ++\
    \ l2 -- l1 ++ l2 -- l1\n        val l14 = l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 ++\
    \ l1\n        val l15 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n       \
    \ val l16 = l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 ++ l1 -- l2\n        val l17 = l1\
    \ ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1\n        val l18 = l1 -- l2\
    \ ++ l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 ++ l1\n        val l19 = l1 ++ l2 -- l1\
    \ ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n        val l20 = l1 -- l2 ++ l1\
    \ -- l2 ++ l1 -- l2 ++ l1 -- l2 ++ l1 -- l2\n        val l21 = l1 ++ l2 -- l1\
    \ ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1\n        val l22 = l1 -- l2\
    \ ++ l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 ++ l1\n        val l23 = l1\
    \ ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n        val\
    \ l24 = l1 -- l2 ++ l1 ", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val l3 = l1.toSet\
    \ intersect l2.toSet\n        l3.toList", "        val common = l1 ++ l2\n   \
    \     common.sortWith((x, y) => x < y)", "        val common = l1 intersect l2\n\
    \        val unique = l1 diff common\n        unique ++ common", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val commonSet = set1 intersect\
    \ set2\n        commonSet.map(x => l1.indexOf(x)).filter(x => x != -1)", "   \
    \     val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.map(l => l).toList", "        val set1 = l1.toSet\n   \
    \     val set2 = l2.toSet\n        val common = set1 intersect set2\n        val\
    \ result = new mutable.ListBuffer[Long]()\n        common foreach { x => result\
    \ += x }\n        result.sorted", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\n\
    \        val l6 = l1 -- l2\n        val l7 = l1 ++ l2\n        val l8 = l1 --\
    \ l2\n        val l9 = l1 ++ l2\n        val l10 = l1 -- l2\n        val l11 =\
    \ l1 ++ l2\n        val l12 = l1 -- l2\n        val l13 = l1 ++ l2\n        val\
    \ l14 = l1 -- l2\n        val l15 = l1 ++ l2\n        val l16 = l1 -- l2\n   \
    \     val l17 = l1 ++ l2\n        val l18 = l1 -- l2\n        val l19 = l1 ++\
    \ l2\n        val l20 = l1 -- l2\n        val l21 = l1 ++ l2\n        val l22\
    \ = l1 -- l2\n        val l23 = l1 ++ l2\n        val l24 = l1 -- l2\n       \
    \ val l25 = l1 ++ l2\n        val l26 = l1 -- l2\n        val l27 = l1 ++ l2\n\
    \        val l28 = l1 -- l2\n        val l29 = l1 ++ l2\n        val l30 = l1\
    \ -- l2\n        val l31 = l1 ++ l2\n        val l32 = l1 -- l2\n        val l33\
    \ = l1 ++ l2\n        val l34 = l1 -- l2\n        val l35 = l1 ++ l2\n       \
    \ val l36 = l1 -- l2\n        val l37 = l1 ++ l2\n        val l38 = l1 -- l2\n\
    \        val l39 = l1 ++ l2\n        val l40 = l1 -- l2\n        val l41 = l1\
    \ ++ l2\n        val l42 = l1 -- l2\n        val l43 = l1 ++ l2\n        val l44\
    \ = l1 -- l2\n        val l45 = l1 ++ l2\n        val l46 = l1 -- l2\n       \
    \ val l47 = l1 ++ l2\n        val l48 = l1 -- l2\n        val l49 = l1 ++ l2\n\
    \        val l50 = l1 -- l2\n        val l51 = l1 ++ l2\n        val l52 = l1\
    \ -- l2\n        val l53 = l1 ++ l2\n        val l54 = l1 -- l2\n        val l",
  "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ common = l1 diff l2\n        val sorted = l1 sortBy (x => l2.indexOf(x))\n \
    \       sorted ++ common", "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy\
    \ { x => x }\n        val l5 = l4 mapValues { x => x.toList }\n        val l6\
    \ = l5 filterNot { x => x.isEmpty}\n        l6.flatMap { x => x }", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        val result = new mutable.ListBuffer[Long]()\n        common foreach\
    \ { x => result += x }\n        result.sort", "        val l3 = l1.toSet intersect\
    \ l2.toSet\n        l3.toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        common.foreach(x => result += x)\n     \
    \   result.sort", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common foreach { x => result += x }\n        result.toList", "      \
    \  val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\n \
    \       val l6 = l1 -- l2\n        val l7 = l1 ++ l2\n        val l8 = l1 -- l2\n\
    \        val l9 = l1 ++ l2\n        val l10 = l1 -- l2\n        val l11 = l1 ++\
    \ l2\n        val l12 = l1 -- l2\n        val l13 = l1 ++ l2\n        val l14\
    \ = l1 -- l2\n        val l15 = l1 ++ l2\n        val l16 = l1 -- l2\n       \
    \ val l17 = l1 ++ l2\n        val l18 = l1 -- l2\n        val l19 = l1 ++ l2\n\
    \        val l20 = l1 -- l2\n        val l21 = l1 ++ l2\n        val l22 = l1\
    \ -- l2\n        val l23 = l1 ++ l2\n        val l24 = l1 -- l2\n        val l25\
    \ = l1 ++ l2\n        val l26 = l1 -- l2\n        val l27 = l1 ++ l2\n       \
    \ val l28 = l1 -- l2\n        val l29 = l1 ++ l2\n        val l30 = l1 -- l2\n\
    \        val l31 = l1 ++ l2\n        val l32 = l1 -- l2\n        val l33 = l1\
    \ ++ l2\n        val l34 = l1 -- l2\n        val l35 = l1 ++ l2\n        val l36\
    \ = l1 -- l2\n        val l37 = l1 ++ l2\n        val l38 = l1 -- l2\n       \
    \ val l39 = l1 ++ l2\n        val l40 = l1 -- l2\n        val l41 = l1 ++ l2\n\
    \        val l42 = l1 -- l2\n        val l43 = l1 ++ l2\n        val l44 = l1\
    \ -- l2\n        val l45 = l1 ++ l2\n        val l46 = l1 -- l2\n        val l47\
    \ = l1 ++ l2\n        val l48 = l1 -- l2\n        val l49 = l1 ++ l2\n       \
    \ val l50 = l1 -- l2\n        val l51 = l1 ++ l2\n        val l52 = l1 -- l2\n\
    \        val l53 = l1 ++ l2\n        val l54 = l1 -- l2\n        val l", "   \
    \     val l3 = l1 ++ l2\n        val l4 = l3 groupBy (_ % l3.length)\n       \
    \ l4.map(_._2.head).distinct", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n\
    \        l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n \
    \       common foreach { x => result += x }\n        result.sort", "        val\
    \ l3 = l1.filterNot(l2.contains)\n        l3.sortWith(_ < _)", "        val common\
    \ = mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x)) x }\n  \
    \      l2.foreach { x => if (common.add(x)) x }\n        common.distinct", " \
    \       val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val l3 = l1 ++\
    \ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\n        val l6 = l1\
    \ -- l2\n        val l7 = l1 ++ l2\n        val l8 = l1 -- l2\n        val l9\
    \ = l1 ++ l2\n        val l10 = l1 -- l2\n        val l11 = l1 ++ l2\n       \
    \ val l12 = l1 -- l2\n        val l13 = l1 ++ l2\n        val l14 = l1 -- l2\n\
    \        val l15 = l1 ++ l2\n        val l16 = l1 -- l2\n        val l17 = l1\
    \ ++ l2\n        val l18 = l1 -- l2\n        val l19 = l1 ++ l2\n        val l20\
    \ = l1 -- l2\n        val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n       \
    \ val l23 = l1 ++ l2\n        val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n\
    \        val l26 = l1 -- l2\n        val l27 = l1 ++ l2\n        val l28 = l1\
    \ -- l2\n        val l29 = l1 ++ l2\n        val l30 = l1 -- l2\n        val l31\
    \ = l1 ++ l2\n        val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n       \
    \ val l34 = l1 -- l2\n        val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n\
    \        val l37 = l1 ++ l2\n        val l38 = l1 -- l2\n        val l39 = l1\
    \ ++ l2\n        val l40 = l1 -- l2\n        val l41 = l1 ++ l2\n        val l42\
    \ = l1 -- l2\n        val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n       \
    \ val l45 = l1 ++ l2\n        val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n\
    \        val l48 = l1 -- l2\n        val l49 = l1 ++ l2\n        val l50 = l1\
    \ -- l2\n        val l51 = l1 ++ l2\n        val l52 = l1 -- l2\n        val l53\
    \ = l1 ++ l2\n        val l54 = l1 -- l2\n        val l", "        val set1 =\
    \ l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect set2\n\
    \        common toList", "        val set1 = new mutable.HashSet[Long]()\n   \
    \     val set2 = new mutable.HashSet[Long]()\n        l1.foreach(set1 += _)\n\
    \        l2.foreach(set2 += _)\n        set1.intersect(set2).toList", "      \
    \  val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sortWith(_ < _)",
  "        val common = l1 ++ l2.filterNot(l1.contains)\n        common.sortWith(_.compareTo(_)\
    \ < 0)", "        val l3 = l1 ++ l2\n        val l4 = l3 filterNot (x => l1 contains\
    \ x)\n        val l5 = l3 filterNot (x => l2 contains x)\n        l4.toList ++\
    \ l5.toList", "        val l3 = l1 ++ l2\n        val l4 = l3.toSet\n        l4.toList",
  "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\
    \ -- l1\n        val l6 = l1 -- l2 ++ l1\n        val l7 = l1 ++ l2 -- l1 ++ l2\n\
    \        val l8 = l1 -- l2 ++ l1 -- l2\n        val l9 = l1 ++ l2 -- l1 ++ l2\
    \ ++ l1\n        val l10 = l1 -- l2 ++ l1 -- l2 ++ l1\n        val l11 = l1 ++\
    \ l2 -- l1 ++ l2 ++ l1 -- l2\n        val l12 = l1 -- l2 ++ l1 -- l2 ++ l1 ++\
    \ l2\n        val l13 = l1 ++ l2 -- l1 ++ l2 ++ l1 -- l2 ++ l1\n        val l14\
    \ = l1 -- l2 ++ l1 -- l2 ++ l1 ++ l2 -- l1\n        val l15 = l1 ++ l2 -- l1 ++\
    \ l2 ++ l1 -- l2 ++ l1 -- l2\n        val l16 = l1 -- l2 ++ l1 -- l2 ++ l1 ++\
    \ l2 -- l1 ++ l2\n        val l17 = l1 ++ l2 -- l1 ++ l2 ++ l1 -- l2 ++ l1 --\
    \ l2 ++ l1\n        val l18 = l1 -- l2 ++ l1 -- l2 ++ l1 ++ l2 -- l1 ++ l2 ++\
    \ l1\n        val l19 = l1 ++ l2 -- l1 ++ l2 ++ l1 -- l2 ++ l1 ++ l2 -- l1 ++\
    \ l2\n        val l20 = l1 -- l2 ++ l1 -- l2 ++ l1 ++ l2 -- l1 ++ l2 ++ l1 --\
    \ l2\n        val l21 = l1 ++ l2 -- l1 ++ l2 ++ l1 -- l2 ++ l1 ++ l2 -- l1 ++\
    \ l2 ++ l1\n        val l22 = l1 -- l2 ++ l1 -- l2 ++ l1 ++ l2 -- l1 ++ l2 ++\
    \ l1 -- l2 ++ l1 ++ l2\n        val l23 = l1 ++ l2 -- l1 ++ l2 ++ l1 -- l2 ++\
    \ l1 ++ l2 -- l1 ++ l2 ++ l1 -- l2 ++ l2\n        val l24 = l1 ", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   common.map(l => l).toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach(x => common.add(x))\n\
    \        l2.foreach(x => common.add(x))\n        common.filter(_ != l1.head).sortWith(_\
    \ < _).take(l1.size)", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n\
    \        val l5 = l1 ++ l2\n        val l6 = l1 -- l2\n        val l7 = l1 ++\
    \ l2\n        val l8 = l1 -- l2\n        val l9 = l1 ++ l2\n        val l10 =\
    \ l1 -- l2\n        val l11 = l1 ++ l2\n        val l12 = l1 -- l2\n        val\
    \ l13 = l1 ++ l2\n        val l14 = l1 -- l2\n        val l15 = l1 ++ l2\n   \
    \     val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n        val l18 = l1 --\
    \ l2\n        val l19 = l1 ++ l2\n        val l20 = l1 -- l2\n        val l21\
    \ = l1 ++ l2\n        val l22 = l1 -- l2\n        val l23 = l1 ++ l2\n       \
    \ val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n        val l26 = l1 -- l2\n\
    \        val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n        val l29 = l1\
    \ ++ l2\n        val l30 = l1 -- l2\n        val l31 = l1 ++ l2\n        val l32\
    \ = l1 -- l2\n        val l33 = l1 ++ l2\n        val l34 = l1 -- l2\n       \
    \ val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n        val l37 = l1 ++ l2\n\
    \        val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n        val l40 = l1\
    \ -- l2\n        val l41 = l1 ++ l2\n        val l42 = l1 -- l2\n        val l43\
    \ = l1 ++ l2\n        val l44 = l1 -- l2\n        val l45 = l1 ++ l2\n       \
    \ val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n        val l48 = l1 -- l2\n\
    \        val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n        val l51 = l1\
    \ ++ l2\n        val l52 = l1 -- l2\n        val l53 = l1 ++ l2\n        val l54\
    \ = l1 -- l2\n        val l", "        val l3 = l1 ++ l2\n        val l4 = l3.toSet\n\
    \        l4.toList", "        val common = mutable.Set[Long]()\n        l1.foreach\
    \ { x => if (common.add(x)) x }\n        l2.foreach { x => if (common.add(x))\
    \ x }\n        common.sortWith(_ < _)", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ set1 = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        l1.foreach(x => set1 += x)\n        l2.foreach(x => set2 += x)\n    \
    \    set1.intersect(set2).toList", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        val common = set1 intersect set2\n        common toList",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x => common.add(x)\
    \ }\n        l2.foreach { x => common.add(x) }\n        common.filter(_ != 0).toList",
  "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\
    \ -- l1\n        val l6 = l1 ++ l2 -- l1 -- l2\n        val l7 = l1 ++ l2 -- l1\
    \ -- l2 -- l1\n        val l8 = l1 ++ l2 -- l1 -- l2 -- l1 -- l2\n        val\
    \ l9 = l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1\n        val l10 = l1 ++ l2 -- l1\
    \ -- l2 -- l1 -- l2 -- l1 -- l2\n        val l11 = l1 ++ l2 -- l1 -- l2 -- l1\
    \ -- l2 -- l1 -- l2 -- l1\n        val l12 = l1 ++ l2 -- l1 -- l2 -- l1 -- l2\
    \ -- l1 -- l2 -- l1 -- l2\n        val l13 = l1 ++ l2 -- l1 -- l2 -- l1 -- l2\
    \ -- l1 -- l2 -- l1 -- l2 -- l1\n        val l14 = l1 ++ l2 -- l1 -- l2 -- l1\
    \ -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2\n        val l15 = l1 ++ l2 -- l1\
    \ -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1\n        val l16\
    \ = l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1\
    \ -- l2\n        val l17 = l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1\
    \ -- l2 -- l1 -- l2 -- l1 -- l2 -- l1\n        val l18 = l1 ++ l2 -- l1 -- l2\
    \ -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2\n  \
    \      val l19 = l1 ++ l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1 -- l2 -- l1\
    \ -- l2 -- l1 -- l2 -- ", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common toList", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.map(l => l).toList", "        val l3 = l1.toSet intersect\
    \ l2.toSet\n        l3.toList", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1\
    \ += x)\n        l2.foreach(x => set2 += x)\n        set1.intersect(set2).toList",
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n \
    \       common foreach { e => result += e }\n        result.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.toSet\n        l4.toList", "        val l3\
    \ = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\n        val\
    \ l6 = l1 -- l2\n        val l7 = l1 ++ l2\n        val l8 = l1 -- l2\n      \
    \  val l9 = l1 ++ l2\n        val l10 = l1 -- l2\n        val l11 = l1 ++ l2\n\
    \        val l12 = l1 -- l2\n        val l13 = l1 ++ l2\n        val l14 = l1\
    \ -- l2\n        val l15 = l1 ++ l2\n        val l16 = l1 -- l2\n        val l17\
    \ = l1 ++ l2\n        val l18 = l1 -- l2\n        val l19 = l1 ++ l2\n       \
    \ val l20 = l1 -- l2\n        val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n\
    \        val l23 = l1 ++ l2\n        val l24 = l1 -- l2\n        val l25 = l1\
    \ ++ l2\n        val l26 = l1 -- l2\n        val l27 = l1 ++ l2\n        val l28\
    \ = l1 -- l2\n        val l29 = l1 ++ l2\n        val l30 = l1 -- l2\n       \
    \ val l31 = l1 ++ l2\n        val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n\
    \        val l34 = l1 -- l2\n        val l35 = l1 ++ l2\n        val l36 = l1\
    \ -- l2\n        val l37 = l1 ++ l2\n        val l38 = l1 -- l2\n        val l39\
    \ = l1 ++ l2\n        val l40 = l1 -- l2\n        val l41 = l1 ++ l2\n       \
    \ val l42 = l1 -- l2\n        val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n\
    \        val l45 = l1 ++ l2\n        val l46 = l1 -- l2\n        val l47 = l1\
    \ ++ l2\n        val l48 = l1 -- l2\n        val l49 = l1 ++ l2\n        val l50\
    \ = l1 -- l2\n        val l51 = l1 ++ l2\n        val l52 = l1 -- l2\n       \
    \ val l53 = l1 ++ l2\n        val l54 = l1 -- l2\n        val l", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.toSet\n        l4.toList", "        val l3\
    \ = l1 ++ l2\n        l3.sortWith(_ < _)", "        val l3 = l1 ++ l2\n      \
    \  val l4 = l3.toSet\n        l4.toList", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x => if (l2.contains(x)) common.add(x) }\n        l2.foreach\
    \ { x => if (common.contains(x)) common.remove(x) }\n        common.toList", " \
    \       val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        common toList", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        common.foreach(x => result\
    \ += x)\n        result.sorted", "        val common = l1 diff l2\n        val\
    \ commonList = common.map(x => l1.indexOf(x))\n        val commonSet = commonList.map(x\
    \ => l2.indexOf(x))\n        commonList.map(x => l1.remove(x))", "        val\
    \ common = l1.intersect(l2)\n        common.sortWith(_ < _)", "        val set1\
    \ = l1.toSet\n        val set2 = l2.toSet\n        val common = set1 intersect\
    \ set2\n        common.map(x => l1.filter(_ == x)).flatten.toList", "        val\
    \ set1 = new mutable.HashSet[Long](l1)\n        val set2 = new mutable.HashSet[Long](l2)\n\
    \        set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val\
    \ l4 = l1 -- l2\n        val l5 = l1 ++ l2\n        val l6 = l1 -- l2\n      \
    \  val l7 = l1 ++ l2\n        val l8 = l1 -- l2\n        val l9 = l1 ++ l2\n \
    \       val l10 = l1 -- l2\n        val l11 = l1 ++ l2\n        val l12 = l1 --\
    \ l2\n        val l13 = l1 ++ l2\n        val l14 = l1 -- l2\n        val l15\
    \ = l1 ++ l2\n        val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n       \
    \ val l18 = l1 -- l2\n        val l19 = l1 ++ l2\n        val l20 = l1 -- l2\n\
    \        val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n        val l23 = l1\
    \ ++ l2\n        val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n        val l26\
    \ = l1 -- l2\n        val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n       \
    \ val l29 = l1 ++ l2\n        val l30 = l1 -- l2\n        val l31 = l1 ++ l2\n\
    \        val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n        val l34 = l1\
    \ -- l2\n        val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n        val l37\
    \ = l1 ++ l2\n        val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n       \
    \ val l40 = l1 -- l2\n        val l41 = l1 ++ l2\n        val l42 = l1 -- l2\n\
    \        val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n        val l45 = l1\
    \ ++ l2\n        val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n        val l48\
    \ = l1 -- l2\n        val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n       \
    \ val l51 = l1 ++ l2\n        val l52 = l1 -- l2\n        val l53 = l1 ++ l2\n\
    \        val l54 = l1 -- l2\n        val l", "        val common = l1 intersect\
    \ l2\n        common.sortWith((x, y) => x < y)", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   val result = common.map(x => l1.indexOf(x)).toList\n        result", "   \
    \     val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sortWith(_ <\
    \ _)", "        val common = l1 diff l2\n        val sorted = l1 sortBy (x =>\
    \ l2.indexOf(x))\n        sorted ++ common", "        val set1 = l1.toSet\n  \
    \      val set2 = l2.toSet\n        val common = set1 intersect set2\n       \
    \ common toList", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n \
    \       l4.sortWith(_ < _)", "        val common = mutable.Set[Long]()\n     \
    \   l1.foreach { x => if (common.add(x)) l2.remove(l2.indexOf(x)) }\n        l2.toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3 groupBy (l3 contains _)\n        l4.map(_._2.head).sort",
  "        val common = mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x))\
    \ l2.filter(_ != x) }\n        l2.filter(_ != l1.head).filter(_ != l1.last)",
  "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\
    \ -- l1\n        val l6 = l1 -- l2 ++ l1\n        val l7 = l1 ++ l2 -- l1 ++ l2\n\
    \        val l8 = l1 ++ l2 -- l1 ++ l2 ++ l1\n        val l9 = l1 ++ l2 -- l1\
    \ ++ l2 ++ l1 ++ l2\n        val l10 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1\n\
    \        val l11 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l12\
    \ = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l13 = l1 ++\
    \ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l14 = l1 ++\
    \ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l15 =\
    \ l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n     \
    \   val l16 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1\n        val l17 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l18 = l1 ++ l2 -- l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val\
    \ l19 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1 ++ l2\n        val l20 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1 ++ l2 ", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common foreach { elem => result.+=( elem ) }\n        result.toList",
  "        val l3 = l1.filterNot(l2.contains)\n        l3.sortWith(_ < _)", "    \
    \    val l3 = l1 ++ l2\n        val l4 = l3 filterNot (l1 contains _)\n      \
    \  val l5 = l4 filterNot (l2 contains _)\n        l5", "        val set1 = l1.toSet\n\
    \        val set2 = l2.toSet\n        val common = set1 intersect set2\n     \
    \   val result = new mutable.ListBuffer[Long]()\n        common foreach { x =>\
    \ result += x }\n        result.sort", "        val l3 = l1 ++ l2\n        l3.sortWith(_\
    \ < _)", "        val l3 = l1.filterNot(l2.contains)\n        l3.toList", "  \
    \      val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sort", "  \
    \      val set1 = l1.toSet\n        val set2 = l2.toSet\n        val common =\
    \ set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n \
    \       common.foreach(x => result += x)\n        result.sort", "        val common\
    \ = l1 diff l2\n        val unique = l1 diff common\n        val sorted = unique\
    \ sortBy (_.toLong)\n        sorted", "        val l3 = l1 ++ l2\n        val\
    \ l4 = l1 -- l2\n        val l5 = l1 ++ l4\n        val l6 = l1 -- l4\n      \
    \  val l7 = l1 ++ l5\n        val l8 = l1 -- l5\n        val l9 = l1 ++ l6\n \
    \       val l10 = l1 -- l6\n        val l11 = l1 ++ l7\n        val l12 = l1 --\
    \ l7\n        val l13 = l1 ++ l8\n        val l14 = l1 -- l8\n        val l15\
    \ = l1 ++ l9\n        val l16 = l1 -- l9\n        val l17 = l1 ++ l10\n      \
    \  val l18 = l1 -- l10\n        val l19 = l1 ++ l11\n        val l20 = l1 -- l11\n\
    \        val l21 = l1 ++ l12\n        val l22 = l1 -- l12\n        val l23 = l1\
    \ ++ l13\n        val l24 = l1 -- l13\n        val l25 = l1 ++ l14\n        val\
    \ l26 = l1 -- l14\n        val l27 = l1 ++ l15\n        val l28 = l1 -- l15\n\
    \        val l29 = l1 ++ l16\n        val l30 = l1 -- l16\n        val l31 = l1\
    \ ++ l17\n        val l32 = l1 -- l17\n        val l33 = l1 ++ l18\n        val\
    \ l34 = l1 -- l18\n        val l35 = l1 ++ l19\n        val l36 = l1 -- l19\n\
    \        val l37 = l1 ++ l20\n        val l38 = l1 -- l20\n        val l39 = l1\
    \ ++ l21\n        val l40 = l1 -- l21\n        val l41 = l1 ++ l22\n        val\
    \ l42 = l1 -- l22\n        val l43 = l1 ++ l23\n        val l44 = l1 -- l23\n\
    \        val l45 = l1 ++ l24\n        val l46 = l1 -- l24\n        val l47 = l1\
    \ ++ l25\n        val l48 = l1 -- l25\n        val l49 = l1 ++ l26\n        val\
    \ l50 = l1 -- ", "        val set1 = new mutable.HashSet[Long](l1)\n        val\
    \ set2 = new mutable.HashSet[Long](l2)\n        set1.retainAll(set2)\n       \
    \ set1.toList", "        val common = l1 ++ l2 filterNot (l1.contains)\n     \
    \   common.sortWith((x, y) => x < y)", "        val l3 = l1 ++ l2\n        val\
    \ l4 = l3 groupBy (_ % l3.size)\n        l4.values.flatMap(_.toList)", "     \
    \   val l3 = l1 ++ l2\n        val l4 = l3 filter (x => l1 contains x)\n     \
    \   val l5 = l3 filter (x => l2 contains x)\n        val l6 = l4 ++ l5\n     \
    \   l6.sort", "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList",
  "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy (_ % l3.length) mapValues\
    \ (_.size)\n        l4.toList.sortWith(_ < _)", "        val l3 = l1.filterNot(l2.contains)\n\
    \        l3.sortWith(_ < _)", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val l3 = l1.toSet intersect l2.toSet\n        l3.toList",
  "        val common = l1 ++ l2 filterNot (l1.contains)\n        common.sortWith((x,\
    \ y) => x < y)", "        val set1 = new mutable.HashSet[Long]()\n        val\
    \ set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n \
    \       l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2 -- l1\n\
    \        val l6 = l1 -- l2 ++ l1\n        val l7 = l1 ++ l2 -- l1 ++ l2\n    \
    \    val l8 = l1 ++ l2 -- l1 ++ l2 -- l1\n        val l9 = l1 ++ l2 -- l1 ++ l2\
    \ -- l1 ++ l2\n        val l10 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1\n    \
    \    val l11 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n        val l12 =\
    \ l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1\n        val l13 = l1 ++\
    \ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n        val l14 = l1 ++\
    \ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1\n        val l15 =\
    \ l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n     \
    \   val l16 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++\
    \ l2 -- l1\n        val l17 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 --\
    \ l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2\n        val l18 = l1 ++ l2 -- l1 ++ l2 --\
    \ l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1\n        val\
    \ l19 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 --\
    \ l1 ++ l2 -- l1 ++ l2\n        val l20 = l1 ++ l2 -- l1 ++ l2 -- l1 ++ l2 --\
    \ l1 ++ l2 -- l1 ++ l2 ", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        set1 intersect set2", "        val set1 = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l1.foreach(x => set1.add(x))\n\
    \        l2.foreach(x => set2.add(x))\n        set1.intersect(set2).toList", " \
    \       val l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3 groupBy (_ % l3.length)\n        l4.map(_._2.head).distinct",
  "        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3.distinct\n        l4.sort", "        val set1 = new\
    \ mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n  \
    \      l1.foreach(x => set1.add(x))\n        l2.foreach(x => set2.add(x))\n  \
    \      set1.intersect(set2).toList", "        val l3 = l1 ++ l2\n        val l4\
    \ = l1 -- l2\n        val l5 = l1 ++ l2\n        val l6 = l1 -- l2\n        val\
    \ l7 = l1 ++ l2\n        val l8 = l1 -- l2\n        val l9 = l1 ++ l2\n      \
    \  val l10 = l1 -- l2\n        val l11 = l1 ++ l2\n        val l12 = l1 -- l2\n\
    \        val l13 = l1 ++ l2\n        val l14 = l1 -- l2\n        val l15 = l1\
    \ ++ l2\n        val l16 = l1 -- l2\n        val l17 = l1 ++ l2\n        val l18\
    \ = l1 -- l2\n        val l19 = l1 ++ l2\n        val l20 = l1 -- l2\n       \
    \ val l21 = l1 ++ l2\n        val l22 = l1 -- l2\n        val l23 = l1 ++ l2\n\
    \        val l24 = l1 -- l2\n        val l25 = l1 ++ l2\n        val l26 = l1\
    \ -- l2\n        val l27 = l1 ++ l2\n        val l28 = l1 -- l2\n        val l29\
    \ = l1 ++ l2\n        val l30 = l1 -- l2\n        val l31 = l1 ++ l2\n       \
    \ val l32 = l1 -- l2\n        val l33 = l1 ++ l2\n        val l34 = l1 -- l2\n\
    \        val l35 = l1 ++ l2\n        val l36 = l1 -- l2\n        val l37 = l1\
    \ ++ l2\n        val l38 = l1 -- l2\n        val l39 = l1 ++ l2\n        val l40\
    \ = l1 -- l2\n        val l41 = l1 ++ l2\n        val l42 = l1 -- l2\n       \
    \ val l43 = l1 ++ l2\n        val l44 = l1 -- l2\n        val l45 = l1 ++ l2\n\
    \        val l46 = l1 -- l2\n        val l47 = l1 ++ l2\n        val l48 = l1\
    \ -- l2\n        val l49 = l1 ++ l2\n        val l50 = l1 -- l2\n        val l51\
    \ = l1 ++ l2\n        val l52 = l1 -- l2\n        val l53 = l1 ++ l2\n       \
    \ val l54 = l1 -- l2\n        val l", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common map {\n            case\
    \ x => x\n        }", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common foreach { elem => result += elem }\n        result.toList", " \
    \       val common = l1 ++ l2 filterNot (l1 contains _)\n        common.sortWith(_\
    \ < _)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val\
    \ common = set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common foreach { e => result += e }\n        result.sort", "        val\
    \ set1 = l1.toSet\n        val set2 = l2.toSet\n        val commonSet = set1 intersect\
    \ set2\n        commonSet.map(l => l).toList", "        val set1 = new mutable.HashSet[Long](l1)\n\
    \        val set2 = new mutable.HashSet[Long](l2)\n        set1.intersect(set2).toList",
  "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n        val l5 = l1 ++ l2\
    \ -- l3\n        val l6 = l1 -- l2 ++ l3\n        val l7 = l1 ++ l2 -- l3 ++ l4\n\
    \        val l8 = l1 -- l2 ++ l3 ++ l4 -- l5\n        val l9 = l1 ++ l2 -- l3\
    \ ++ l4 ++ l5 -- l6\n        val l10 = l1 -- l2 ++ l3 ++ l4 ++ l5 ++ l6 -- l7\n\
    \        val l11 = l1 ++ l2 -- l3 ++ l4 ++ l5 ++ l6 ++ l7 -- l8\n        val l12\
    \ = l1 -- l2 ++ l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 -- l9\n        val l13 = l1 ++\
    \ l2 -- l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 ++ l9 -- l10\n        val l14 = l1 --\
    \ l2 ++ l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 ++ l9 ++ l10 -- l11\n        val l15\
    \ = l1 ++ l2 -- l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 ++ l9 ++ l10 ++ l11 -- l12\n\
    \        val l16 = l1 -- l2 ++ l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 ++ l9 ++ l10 ++\
    \ l11 ++ l12 -- l13\n        val l17 = l1 ++ l2 -- l3 ++ l4 ++ l5 ++ l6 ++ l7\
    \ ++ l8 ++ l9 ++ l10 ++ l11 ++ l12 ++ l13 -- l14\n        val l18 = l1 -- l2 ++\
    \ l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 ++ l9 ++ l10 ++ l11 ++ l12 ++ l13 ++ l14 --\
    \ l15\n        val l19 = l1 ++ l2 -- l3 ++ l4 ++ l5 ++ l6 ++ l7 ++ l8 ++ l9 ++\
    \ l10 ++ l11 ++ l12 ++ l13 ++ l14 ++ l15 -- l16\n        val l20 = l1 -- l2 ++\
    \ l3 ++ l4 ++ l5 ", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n  \
    \      val l5 = l1 ++ l2 -- l1\n        val l6 = l1 -- l2 ++ l1\n        val l7\
    \ = l1 ++ l2 -- l1 ++ l2\n        val l8 = l1 ++ l2 -- l1 ++ l2 ++ l1\n      \
    \  val l9 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2\n        val l10 = l1 ++ l2 -- l1\
    \ ++ l2 ++ l1 ++ l2 ++ l1\n        val l11 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2\
    \ ++ l1 ++ l2\n        val l12 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\
    \ ++ l1\n        val l13 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\
    \ ++ l2\n        val l14 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\
    \ ++ l2 ++ l1\n        val l15 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\
    \ ++ l1 ++ l2 ++ l1 ++ l2\n        val l16 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2\
    \ ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1\n        val l17 = l1 ++ l2 -- l1\
    \ ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val\
    \ l18 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++\
    \ l1 ++ l2 ++ l1\n        val l19 = l1 ++ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++\
    \ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2\n        val l20 = l1 ++\
    \ l2 -- l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ++ l1 ++ l2 ", "        val l3 = l1 ++\
    \ l2\n        val l4 = l3.toSet\n        l4.toList", "        val common = l1\
    \ diff l2\n        common sortBy { x => l1.indexOf(x) } ++ common sortBy { x =>\
    \ l2.indexOf(x) }", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sortWith(_ < _)", "        val l3 = l1.toSet intersect l2.toSet\n\
    \        l3.toList", "        val l3 = l1 ++ l2\n        l3.sortWith(_ < _)",
  "        val commonSet = mutable.Set[Long]()\n        l1.foreach(x => commonSet.add(x))\n\
    \        l2.foreach(x => commonSet.add(x))\n        commonSet.filter(x => l1.contains(x)\
    \ && l2.contains(x))", "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n\
    \        l4.sortWith(_ < _)", "        val l3 = l1 ++ l2\n        val l4 = l3\
    \ filterNot (l1 contains _)\n        val l5 = l4 filterNot (l2 contains _)\n \
    \       l5", "        val l3 = l1 ++ l2\n        val l4 = l3 groupBy (l3 contains\
    \ _)\n        l4.map(_._2).filter(_._1).sort", "        val l3 = l1 ++ l2\n  \
    \      l3.sortWith(_ < _)", "        val l3 = l1 ++ l2\n        l3.sortWith(_\
    \ < _)", "        val common = l1 diff l2\n        common sortBy (_ compareTo\
    \ l1.head) toList", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val common = set1 intersect set2\n        common.map(x => l1.indexOf(x)).filter(x\
    \ => x != -1)", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n  \
    \      val common = set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common foreach { e => result += e}\n        result.sort", "        val\
    \ l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sortWith(_ < _)", " \
    \       val common = mutable.Set[Long]()\n        l1.foreach { x => if (common.add(x))\
    \ x }\n        l2.foreach { x => if (common.add(x)) x }\n        common.filter(_\
    \ != 0).toList", "        val l3 = l1 ++ l2\n        val l4 = l3.toSet\n     \
    \   l4.toList", "        val l3 = l1 ++ l2\n        val l4 = l3 filterNot (x =>\
    \ l3.contains(x))\n        l4.sortWith(_ < _)", "        val common = mutable.Set[Long]()\n\
    \        l1.foreach { x => if (common.add(x)) x }\n        l2.foreach { x => if\
    \ (common.add(x)) x }\n        common.filter(_ != 0).toList", "        val l3\
    \ = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sortWith(_ < _)", "   \
    \     val set1 = l1.toSet\n        val set2 = l2.toSet\n        set1 intersect\
    \ set2", "        val common = l1 diff l2\n        val commonList = l1 intersect\
    \ l2\n        val commonSet = common.toSet\n        commonList.filter(commonSet.contains)",
  "        val l3 = l1 ++ l2\n        val l4 = l3.distinct\n        l4.sortWith(_\
    \ < _)", "        val common = l1 ++ l2\n        val unique = common.distinct\n\
    \        unique.sort", "        val l3 = l1 ++ l2\n        val l4 = l1 -- l2\n\
    \        val l5 = l1 ++ l2 -- l1\n        val l6 = l1 -- l2 ++ l1\n        val\
    \ l7 = l1 ++ l2 -- l1 ++ l2\n        val l8 = l1 -- l2 ++ l1 -- l2\n        val\
    \ l9 = l1 ++ l2 -- l1 ++ l2 -- l1\n        val l10 = l1 -- l2 ++ l1 -- l2 ++ l1\n\
    \        val l11 = l1 ++ l2 -- l1 ++ l2 -- l1 -- l2\n        val l12 = l1 -- l2\
    \ ++ l1 -- l2 ++ l1 -- l1\n        val l13 = l1 ++ l2 -- l1 ++ l2 -- l1 -- l2\
    \ ++ l1\n        val l14 = l1 -- l2 ++ l1 -- l2 ++ l1 -- l2 -- l1\n        val\
    \ l15 = l1 ++ l2 -- l1 ++ l2 -- l1 -- l2 ++ l1 -- l1\n        val l16 = l1 --\
    \ l2 ++ l1 -- l2 ++ l1 -- l2 -- l1 ++ l1\n        val l17 = l1 ++ l2 -- l1 ++\
    \ l2 -- l1 -- l2 ++ l1 -- l1 -- l1\n        val l18 = l1 -- l2 ++ l1 -- l2 ++\
    \ l1 -- l2 -- l1 ++ l1 -- l1\n        val l19 = l1 ++ l2 -- l1 ++ l2 -- l1 --\
    \ l2 ++ l1 -- l1 -- l1 -- l1\n        val l20 = l1 -- l2 ++ l1 -- l2 ++ l1 --\
    \ l2 -- l1 ++ l1 -- l1 -- l1 -- l1\n        val l21 = l1 ++ l2 -- l1 ++ l2 --\
    \ l1 -- l2 ++ l1 -- l1 -- l1 -- l1 -- l1\n        val l22 = l1 -- l2 ++ l1 --\
    \ l2 ++ l1 -- l2 -- l1 ++ l1 -- l1 -- l1 -- l1 -- l1\n        val l23 = l1 ++\
    \ l2 -- l1 ++ l2 -- l1 -- l2 ++ l1 -- l1 -- l1 ++ l1 -- l1 -- l1 -- l1\n     \
    \   val l24", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n    \
    \    val common = set1 intersect set2\n        val result = new mutable.ListBuffer[Long]()\n\
    \        common.foreach(x => result += x)\n        result.sort", "        val\
    \ l3 = l1.toSet intersect l2.toSet\n        l3.toList", "        val l3 = l1.toSet\
    \ intersect l2.toSet\n        l3.toList"]
stop_tokens:
- "\n    }\n"
