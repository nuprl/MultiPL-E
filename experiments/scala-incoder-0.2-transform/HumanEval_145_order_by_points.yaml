name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n\
  \    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong\
    \ - b.toString.toLong )\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        numsMap.sortWith((x, y) => x._2\
    \ - y._2).mapValues(x => x._1).map(_._2).toList", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1).reverse", "        val numsSorted = nums.sortWith((a,\
    \ b) => a.toString.toLong - b.toString.toLong)\n        numsSorted.reverse", " \
    \       val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).groupBy(x => x.toString.toLong).mapValues(_.length)\n\
    \        val sortedSums = sums.sortWith((x, y) => x._2 - y._2)\n        val sortedSumsIndex\
    \ = sortedSums.map(_._1).zipWithIndex.sortWith((x, y) => x._2 - y._2).map(_._2)\n\
    \        numsSorted.zipWithIndex.filter(_._2 != 0).map(_._1).zip(sortedSumsIndex).filter(_._2\
    \ == 0).map(_._1).map(_._2).map(_._1 + numsSorted.indexOf(_._1))", "        val\
    \ numsMap = nums.toMap\n        nums.sortWith((x, y) => numsMap(x).compareTo(numsMap(y))).reverse",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        numsSorted.reverse", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        numsSorted.sortWith((a, b) => a.toString.toInt - b.toString.toInt)",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val sortedNums = numsMap.mapValues(_.sortWith(_ < _))\n        sortedNums.map(_._1).distinct",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)',
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n        numsSorted.zip(sums).sortBy(_._1).map(_._2)",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        nums.sortWith((x, y) => sums.minus(x.toString.toInt).minus(y.toString.toInt).abs\
    \ < 0)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n      \
    \  val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt).sum\n       \
    \ numsSorted.map(x => sums.indexOf(x)).sortBy(x => x).reverse", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     val sums = numsSorted.map(_.toString.toLong).map(x => x.toInt).sum\n   \
    \     numsSorted.sortWith((x, y) => sums(x) > sums(y))", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > 0)', '        nums.sortWith(compareBySumOfDigits)',
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sumsSorted\
    \ = sums.sortWith(_ < _)\n        sumsSorted.map(_.toLong)", "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsSorted = nums.sortWith((a, b) =>\
    \ a.toString.toLong - b.toString.toLong)\n        numsSorted.reverse.map(_.toLong)",
  "        val numsMap = nums.map(x => (x.toString.toLong, x)).toMap\n        nums.sortWith((x,\
    \ y) => numsMap(x)._2 > numsMap(y)._2 ? 1 : -1)", '        nums.sortWith((x, y)
    => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        val result = sorted.map(_.toLong)\n        result",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortWith(_ > _)\n        val result = sorted.map(nums.indexOf(_))\n \
    \       result", "        val numsMap = nums.toMap\n        val numsSortedBySum\
    \ = nums.sortWith( (a,b) => a.toString.toLong + b.toString.toLong - numsMap.getOrElse(b.toString.toLong,\
    \ 0l).toLong)\n        numsSortedBySum.map(_.toLong)", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt)\n        val numsMapSorted\
    \ = numsMap.sortBy(x => x._2.map(_.toString.toInt).sum)\n        numsMapSorted.map(_._1).distinct",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortBy(_._1).reverse\n        val index = sorted.zipWithIndex.sortBy(_._1).reverse\n\
    \        sorted.zip(index).map(x => nums(x._2))", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        nums.sortWith((x, y) => numsMap(x).compareTo(numsMap(y))).map(x\
    \ => numsMap(x))", "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n\
    \        numsMap.mapValues(_.toList).values.toList", "        val numsSorted =\
    \ nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong )\n        numsSorted.reverse",
  "        val numsCopy = nums.toList\n        numsCopy.sortWith((x, y) => x.toLong\
    \ + y.toLong > 0)", "        val numsCopy = nums.toList\n        numsCopy.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)", "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n\
    \        val sumsSorted = sums.sortWith(_ < _)\n        sumsSorted.map(nums.indexOf(_))",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        numsMap.map{ case (k, v) => v.sortWith(_ < _).reverse }.flatten.toList",
  "        val numsMap = nums.toMap\n        val numsSorted = nums.sortWith((a, b)\
    \ => numsMap(a).zip(numsMap(b)).map(_._1 + _._2).sum < 0)\n        numsSorted.toList",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        val\
    \ numsMapSorted = numsMap.sortBy(x => x._2.length)\n        numsMapSorted.map(x\
    \ => x._1)", '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    > y.toString.toLong)', "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortBy(_._1).sortWith(_._1 < _._1)\n        sorted.map(_.toLong)",
  "        val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val sortedNums = numsMap.mapValues(_.sortBy(_.toString.toInt)).values\n\
    \        sortedNums.toList", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.map(_ => _.toString.toInt).sum)\n        sums.map(_._1).sortWith(_\
    \ < _)", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong -\
    \ b.toString.toLong)\n        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        nums.sortWith((x, y) => sums(x) < sums(y) ? -1 : sums(x) > sums(y) ?\
    \ 1 : 0)", "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > y.toString.toLong)\n        numsSorted.toList", "    \
    \    val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith(_ > _)\n        val result = sorted.map(i\
    \ => nums.indexOf(i))\n        result.flatten", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith(_ < _)\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > 0)\n        numsSorted.reverse", "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n        numsSorted.reverse",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > 0)', " \
    \       val numsCopy = nums.toList\n        numsCopy.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > y.toString.toLong)", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.toList)\n        val numsMapSorted = numsMap.sortBy(_._2.sum).mapValues(_.map(_._1))\n\
    \        numsMapSorted.toList.flatMap(x => x)", "        val numsSorted = nums.sortWith((a,\
    \ b) => a.toString.toLong + b.toString.toLong - a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsSorted = nums.sortWith((a, b) =>\
    \ a.toString.toLong - b.toString.toLong)\n        numsSorted.reverse", "     \
    \   val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n    \
    \    val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.map(_._1))\n       \
    \ numsMapSorted.map(_._1).distinct", '        nums.sortWith((a, b) => a.toString.toLong
    + b.toString.toLong - a.toString.toLong - b.toString.toLong)', "        val numsMap\
    \ = nums.map(x => (x.toString.toLong, x)).toMap\n        val numsSorted = nums.sortWith((x,\
    \ y) => numsMap(x)._2 > numsMap(y)._2)\n        numsSorted.map(x => numsMap(x)._1)",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.toList)\n       \
    \ numsMapSorted.map(_._1).distinct", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)\n        numsSorted.reverse",
  '        nums.sortWith((x, y) => x.toLong + y.toLong > 0)', "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsSorted = nums.sortWith((x, y) =>\
    \ x.toLong + y.toLong > 0)\n        val sums = numsSorted.map(_.toString.toLong).sum\n\
    \        numsSorted.sortWith((x, y) => sums - x.toLong - y.toLong)", '        nums.sortWith(compareSumOfDigits)',
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong + b.toString.toLong\
    \ - a.toString.toLong - b.toString.toLong)\n        numsSorted.reverse", '        nums.sortWith(
    (a,b) => a.toString.toLong + b.toString.toLong - a.toString.toLong - b.toString.toLong)',
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).sortWith(_.sum\
    \ < _.sum)\n        numsMap.map(_._2).reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n\
    \        nums.sortBy(_.toString.toInt).map(_.toLong).sortBy(sums.compare(_))",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > 0)', '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong == x.toString.toLong + y.toString.toLong)',
  '        nums.sortWith((x, y) => x.toLong + y.toLong == 0)', "        val numsSorted\
    \ = nums.sortWith((x, y) => x.toLong + y.toLong)\n        numsSorted.reverse",
  "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n        numsMap.mapValues(_.toList).sortBy(x\
    \ => x._1).map(x => x._2).reverse", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong - y.toString.toLong)\n        numsSorted.reverse", " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.toList)\n      \
    \  numsMapSorted.map(_._1).reverse", "        val numsMap = nums.groupBy(x =>\
    \ x.toString.toInt)\n        val numsMapSorted = numsMap.sortBy(x => x._2.map(y\
    \ => y.toString.toInt).sum)\n        numsMapSorted.map(_._1).distinct", "    \
    \    val numsSorted = nums.toList.sortWith((x, y) => x.toLong + y.toLong > 0)\n\
    \        numsSorted.reverse", '        nums.sortWith(compareSumOfDigits)', " \
    \       val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        nums.map(x => numsMap.getOrElse(x, List()).sum).sortWith(_ < _)", " \
    \       val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((a, b) =>\
    \ a._1 - b._1).map(_._2)\n        numsSortedWithIndex.map(nums => nums.toLong)",
  "        val numsCopy = nums.toList\n        val sums = numsCopy.map(_.toString.toInt).map(_.sum).toList\n\
    \        numsCopy.sortWith((x, y) => sums(x) - sums(y))", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).mapValues(_.sortBy(_.toString.toInt)).toMap\n\
    \        nums.map(x => numsMap.getOrElse(x, List()).sum)", "        val numsCopy\
    \ = nums.toList\n        numsCopy.sortWith( (a,b) => a.toString.toLong + b.toString.toLong\
    \ > b.toString.toLong + a.toString.toLong)", '        nums.sortWith( (a,b) =>
    a.toString.toLong + b.toString.toLong > b.toString.toLong + a.toString.toLong)',
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val sortedNums = nums.sortWith((x, y) => numsMap(x).compareTo(numsMap(y))).reverse\n\
    \        sortedNums", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).groupBy(_\
    \ % 10).mapValues(_.size)\n        sums.sortBy(_._1).map(_._2)", "        val\
    \ sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        val sorted = nums.sortBy(_.toString.toInt).sortWith(_._2\
    \ > _._2)\n        sorted.map(_.toLong).filter(_.toString.toInt == sums)", " \
    \       val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  '        nums.sortWith((a, b) => a.toString.toLong + b.toString.toLong > b.toString.toLong
    + a.toString.toLong)', "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).toList",
  '        nums.sortWith((x, y) => x.toLong + y.toLong == 0)', "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n        numsMap.sortWith((x,\
    \ y) => x._2.sum - y._2.sum).mapValues(_.head).toList", "        val numsSorted\
    \ = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n        numsSorted.reverse",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        numsSorted.reverse", '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong > 0)', "        val numsSorted = nums.sortWith((x, y) => x.toLong\
    \ + y.toLong)\n        numsSorted.reverse", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)\n        numsSorted.reverse",
  '        nums.sortWith((a, b) => a.toString.toLong + b.toString.toLong - a.toString.toLong
    - b.toString.toLong)', '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    == x.toString.toLong + y.toString.toLong)', '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong > 0)', "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong\
    \ + b.toString.toLong > b.toString.toLong + a.toString.toLong )\n        numsSorted.reverse",
  "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       nums.sortWith((x, y) => numsMap(x).compareTo(numsMap(y))).reverse", " \
    \       val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        nums.sortWith( (a,b) => numsMap(b).map(a._1).sum - numsMap(a).map(b._1).sum\
    \ )", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsCopy = nums.toList\n        numsCopy.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > 0)", '        nums.sortWith(compareSumOfDigits)', "  \
    \      val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n \
    \       val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.map(_._1))\n    \
    \    numsMapSorted.map(_._1).distinct", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong - y.toString.toLong)\n        numsSorted.reverse", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong
    + x.toString.toLong)', "        val numsSorted = nums.sortWith((x, y) => x.toLong\
    \ + y.toLong > 0)\n        numsSorted.sortWith((x, y) => x.toLong + y.toLong >\
    \ 0)", "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.map(_.toInt).sum)\n\
    \        numsMap.mapValues(_.toList).sortBy(_._1).map(_._2)", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n        numsMap.map{case\
    \ (k, v) => k.sum.toLong - v}.toList", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.toList", "        val numsSorted = nums.toList.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.toList", "        val numsSorted = nums.sortWith((x, y) =>\
    \ x.toString.toLong + y.toString.toLong > 0)\n        val sums = numsSorted.map(_.toString.toLong).map(x\
    \ => x.toInt).sum\n        numsSorted.map(x => sums.indexOf(x)).sortWith((x, y)\
    \ => x < y)", "        val numsMap = nums.map(_.toInt).groupBy(_ % 10).mapValues(_.toList)\n\
    \        val numsMapSorted = numsMap.sortBy(_._1).mapValues(_.map(_._2))\n   \
    \     numsMapSorted.toList.flatMap(_.toLong)", "        val numsSorted = nums.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)\n        numsSorted.reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n        nums.sortBy(_.toString.toInt).sortBy(_.toLong).map(_.toLong).map(_.toLong\
    \ - sums)", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong
    + x.toString.toLong)', "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val sortedNums = nums.sortBy(x => numsMap.getOrElse(x.toString.toInt,\
    \ 0))\n        sortedNums", "        val numsCopy = nums.toList\n        numsCopy.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)", "        val numsSorted =\
    \ nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n        numsSorted.sortWith((x,\
    \ y) => x.toLong + y.toLong > 0)", "        val numsSorted = nums.toList.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)\n        numsSorted.reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(sums.compare(_))",
  "        val numsMap : Map[Long, Int] = nums.foldLeft(Map[Long, Int]()){\n     \
    \       case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + x.toString.toInt))\n\
    \        }\n        nums.sortWith((x, y) => numsMap.get(y) - numsMap.get(x))",
  '        nums.sortWith(compareSum)', "        val numsSorted = nums.sortBy(x =>\
    \ x.toString.toInt)\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1).reverse", "        val numsSorted = nums.sortBy(x\
    \ => x.toString.toInt)\n        numsSorted.sortWith((x, y) => x.toString.toInt\
    \ - y.toString.toInt)", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortBy(_._1).reverse\n        val result = sorted.map(nums.indexOf(_))\n\
    \        result", '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong
    - x.toString.toLong - y.toString.toLong)', "        val sums = nums.map(_.toString.toInt).map(_.sum)\n\
    \        val sorted = sums.toList.sortWith((x, y) => x < y)\n        val result\
    \ = nums.filterNot(sums.contains(_))\n        sorted.zip(result).map(_._1).reverse",
  "        val numsCopy = nums.toList\n        numsCopy.sortWith((a, b) => a.toString.toLong\
    \ + b.toString.toLong > b.toString.toLong + a.toString.toLong)", "        val\
    \ numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong -\
    \ x.toString.toLong - y.toString.toLong)\n        numsSorted.reverse", "     \
    \   val numsSorted = nums.sortBy(_.toString.toInt)\n        numsSorted.reverse.sortBy(_.toString.toInt)",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n        nums.sortBy(_.toString.toInt).map(_.toInt).sortWith(_\
    \ < _).zipWithIndex.map { case (sum, index) => sum - sums(index) }", "       \
    \ val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n      \
    \  val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith(_ < _)\n        val result = sorted.map(_.toLong).reverse\n\
    \        result", '        nums.sortWith((a, b) => a.toString.toLong + b.toString.toLong
    - b.toString.toLong)', "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).reverse\n        numsMapSorted.map(_._1).reverse",
  "        val sums = nums.map(_.toString.toInt).map(_.toInt)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        val result = sorted.map(nums.indexOf(_))\n \
    \       result", "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > 0)\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((x,\
    \ y) => x._1.toString.toLong + y._1.toString.toLong > 0)\n        numsSortedWithIndex.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > y.toString.toLong)\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt)\n        val numsMapSorted = numsMap.sortBy(x => x._2.map(_._2).sum)\n\
    \        numsMapSorted.map(_._1).reverse", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        val numsSortedWithIndex = numsSorted.zipWithIndex\n        val numsSortedWithIndexSortedBySum\
    \ = numsSortedWithIndex.sortBy(_._2.toString.toInt)\n        numsSortedWithIndexSortedBySum.map(_._1).reverse",
  '        nums.sortWith(compareBySumOfDigits)', '        nums.sortWith((x, y) =>
    x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsSorted = nums.toList.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > 0)\n        numsSorted.toList", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).mapValues(_.map(_._1))\n   \
    \     numsMapSorted.map(_._1).distinct", "        val numsSorted = nums.toList.sortWith((x,\
    \ y) => x.toLong + y.toLong == 0)\n        numsSorted.toList", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong + b.toString.toLong\
    \ - a.toString.toLong - b.toString.toLong )\n        numsSorted.reverse", "  \
    \      val numsMap = nums.groupBy(x => x.toString.toInt)\n        val numsMapSorted\
    \ = numsMap.sortBy(x => x._2.map(_._2).sum)\n        numsMapSorted.map(_._1).reverse",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ - x.toString.toLong - y.toString.toLong)\n        numsSorted.reverse", "   \
    \     val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        numsSorted.reverse", '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong > 0)', '        nums.sortWith((x, y) => x.toString.toLong
    + y.toString.toLong - x.toString.toLong - y.toString.toLong)', "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        val sortedNums\
    \ = nums.sortBy(x => numsMap.getOrElse(x.toString.toInt, 0))\n        sortedNums",
  "        val numsMap = nums.map(x => (x, nums.count(y => y % x == 0)))\n       \
    \ val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsCopy = nums.toList\n        numsCopy.sortWith( (a,b) => a.toLong\
    \ + b.toLong > 0)", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ result = sorted.map(x => nums.indexOf(x))\n        result", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsCopy = nums.toList\n        numsCopy.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong - x.toString.toLong - y.toString.toLong)", "        val\
    \ numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n\
    \        nums.sortBy(_.toString.toInt).map(_.toLong).sortWith(_ < _)", "     \
    \   val numsSorted = nums.sortBy(x => x.toString.toInt)\n        numsSorted.reverse.sortBy(x\
    \ => x.toString.toInt)", "        val numsSorted = nums.sortWith((x, y) => x.toLong\
    \ + y.toLong > 0)\n        numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n\
    \        val sorted = sums.sortWith((x, y) => x._2 + y._2 > 0)\n        sorted.map(_.toLong)",
  "        val sums = nums.map(_.toString.toInt).map(_.toLong)\n        val sorted\
    \ = sums.sortWith(_ < _)\n        val result = sorted.map(_.toLong).distinct\n\
    \        result", "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong\
    \ + y.toString.toLong > y.toString.toLong)\n        val numsSortedWithIndex =\
    \ numsSorted.zipWithIndex\n        val numsSortedWithIndexSorted = numsSortedWithIndex.sortWith((x,\
    \ y) => x._1.toString.toLong + y._1.toString.toLong > y._1.toString.toLong)\n\
    \        numsSortedWithIndexSorted.map(_._1).reverse", "        val numsMap =\
    \ nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n        numsMap.mapValues(x\
    \ => x.toString.toInt).sortBy(_._1).map(_._2)", "        val numsSorted = nums.toList.sortWith((x,\
    \ y) => x.toString.toLong + y.toString.toLong > 0)\n        numsSorted.toList",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val numsSorted = nums.sortWith((x, y) => x.toLong\
    \ + y.toLong > 0)\n        val numsSortedWithIndex = numsSorted.zipWithIndex.sortWith((x,\
    \ y) => x._1 + y._1 > 0)\n        numsSortedWithIndex.map(_._2).reverse", "  \
    \      val sums = nums.map(_.toString.toInt).map(_.toLong).sum\n        nums.sortBy(_.toString.toInt).map(_.toLong).sortBy(sums.compare(_))",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong
    + x.toString.toLong)', "        val numsSorted = nums.toList.sortWith((x, y) =>\
    \ x.toString.toLong + y.toString.toLong > 0)\n        numsSorted.map(_.toLong)",
  "        val numsSorted = nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong\
    \ > y.toString.toLong)\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.toList).toMap\n        val sortedNums = nums.sortWith((x,\
    \ y) => numsMap(x) + numsMap(y) < 0)\n        sortedNums", "        val numsMap\
    \ = nums.groupBy(x => x.toString.toInt).mapValues(_.toList).sortBy(x => x.sum)\n\
    \        nums.map(x => numsMap.getOrElse(x, List()).indexOf(x)).flatten", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val sums = nums.map(_.toString.toInt).groupBy(_ % 10).mapValues(_.size)\n\
    \        sums.mapValues(_.toList).sortBy(_._1).map(_._2)", "        val sums =\
    \ nums.map(_.toString.toInt).map(_.toInt).sum\n        val sorted = nums.sortBy(_.toString.toInt).sortWith(_._2\
    \ > _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = sorted.sortWith(_._2 >\
    \ _._2)\n        val sorted = sorted.sortWith(_._2 > _._2)\n        val sorted\
    \ = sorted.sortWith(_._2 > _._2)\n        val sorted = ", "        val sums =\
    \ nums.map(_.toString.toInt).groupBy(_._2).mapValues(_.map(_._1))\n        val\
    \ sorted = sums.toSeq.sortBy(_._1).map(_._2)\n        sorted.toList"]
stop_tokens:
- "\n    }\n"
