name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n\
  \    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong\
    \ - b.toString.toLong )\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        numsMap.sortWith((x, y) => x._2\
    \ - y._2).mapValues(x => x._1).map(_._2).toList", "        val numsMap = nums.groupBy(x\
    \ => x.toString.toInt).mapValues(_.size)\n        val numsMapSorted = numsMap.sortBy(_._2).reverse\n\
    \        numsMapSorted.map(_._1).reverse", "        val numsSorted = nums.sortWith((a,\
    \ b) => a.toString.toLong - b.toString.toLong)\n        numsSorted.reverse", " \
    \       val numsSorted = nums.sortWith((x, y) => x.toString.toLong - y.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).groupBy(x => x.toString.toLong).mapValues(_.length)\n\
    \        val sortedSums = sums.sortWith((x, y) => x._2 - y._2)\n        val sortedSumsIndex\
    \ = sortedSums.map(_._1).zipWithIndex.sortWith((x, y) => x._2 - y._2).map(_._2)\n\
    \        numsSorted.zipWithIndex.filter(_._2 != 0).map(_._1).zip(sortedSumsIndex).filter(_._2\
    \ == 0).map(_._1).map(_._2).map(_._1 + numsSorted.indexOf(_._1))", "        val\
    \ numsMap = nums.toMap\n        nums.sortWith((x, y) => numsMap(x).compareTo(numsMap(y))).reverse",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        numsSorted.reverse", "        val numsSorted = nums.sortBy(_.toString.toInt)\n\
    \        numsSorted.sortWith((a, b) => a.toString.toInt - b.toString.toInt)",
  "        val numsSorted = nums.sortWith( (a,b) => a.toString.toLong - b.toString.toLong\
    \ )\n        numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.toList)\n\
    \        val sortedNums = numsMap.mapValues(_.sortWith(_ < _))\n        sortedNums.map(_._1).distinct",
  '        nums.sortWith((x, y) => x.toString.toLong + y.toString.toLong > y.toString.toLong)',
  "        val numsSorted = nums.sortWith((a, b) => a.toString.toLong - b.toString.toLong)\n\
    \        val sums = numsSorted.map(_.toString.toLong).map(_.sum)\n        numsSorted.zip(sums).sortBy(_._1).map(_._2)",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val numsMap = nums.groupBy(x => x.toString.toInt).mapValues(_.size)\n\
    \        val numsMapSorted = numsMap.sortBy(_._2).map(_._1)\n        numsMapSorted.toList",
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     numsSorted.reverse", "        val sums = nums.map(_.toString.toInt).map(_.toInt).sum\n\
    \        nums.sortWith((x, y) => sums.minus(x.toString.toInt).minus(y.toString.toInt).abs\
    \ < 0)", "        val numsSorted = nums.sortBy(x => x.toString.toInt)\n      \
    \  val sums = numsSorted.map(_.toString.toInt).map(x => x.toInt).sum\n       \
    \ numsSorted.map(x => sums.indexOf(x)).sortBy(x => x).reverse", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong - x.toString.toLong - y.toString.toLong)',
  "        val numsSorted = nums.sortWith((x, y) => x.toLong + y.toLong > 0)\n   \
    \     val sums = numsSorted.map(_.toString.toLong).map(x => x.toInt).sum\n   \
    \     numsSorted.sortWith((x, y) => sums(x) > sums(y))", '        nums.sortWith((x,
    y) => x.toString.toLong + y.toString.toLong > 0)']
stop_tokens:
- "\n    }\n"
