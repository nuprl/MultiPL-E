name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are two distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2)\n\
    \        pairs.exists(_._2.size == 1 && _._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _)\
    \ == 0 }", "        val pairs = l.groupBy(_ % 2 == 0)\n        pairs.forall {\
    \ case (true, xs) => xs.forall(x => x == 0) }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "     \
    \   val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x/2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduceLeft((x, y) => x + y) == 0 }", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)", " \
    \       val pairs = l.groupBy(_ % 2 == 0).mapValues(_.size)\n        pairs.forall\
    \ { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x => x % 2)\n   \
    \     pairs.exists(x => x._2.size == 1 && x._2.head == 0)"]
stop_tokens:
- "\n    }\n"
