name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are two distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2)\n\
    \        pairs.exists(_._2.size == 1 && _._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _)\
    \ == 0 }", "        val pairs = l.groupBy(_ % 2 == 0)\n        pairs.forall {\
    \ case (true, xs) => xs.forall(x => x == 0) }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "     \
    \   val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x/2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduceLeft((x, y) => x + y) == 0 }", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2 == 0)", " \
    \       val pairs = l.groupBy(_ % 2 == 0).mapValues(_.size)\n        pairs.forall\
    \ { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x => x % 2)\n   \
    \     pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._1\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case\
    \ (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.zipWithIndex.filter(_._2\
    \ == 0)\n        if (pairs.size < 2) false\n        else pairs.forall { case (v,\
    \ i) => l.take(i).sum == v }", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_\
    \ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x / 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(_ % 2)\n        pairs.exists(pair => pair._2.length\
    \ == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (true, xs) => xs.sum == 0 }", "        val pairs = l.groupBy(x => x /\
    \ 2)\n        pairs.exists { case (k, v) => v.reduceLeft(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x / 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size ==\
    \ 1 && x._2.head._1 == 0)", "        val pairs = l.groupBy(x => x/2)\n       \
    \ pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v == 0 }", "  \
    \      val pairs = l.groupBy(_ % 2 == 0)\n        pairs.exists(pair => pair._2.size\
    \ == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.forall { case (k, v) => v.forall(x => x == 0) }", "        val pairs\
    \ = l.groupBy(_ % 2 == 0).mapValues(_.size)\n        pairs.forall(pairs => pairs._2\
    \ > 1)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduce(_ + _) == 0L }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft(_ + _) == 0 }",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n      \
    \  pairs.exists { case (k, v) => v.sum == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head._1 == 0)", "        val pairs\
    \ = l.zipWithIndex.filter(_._2 != l.length)\n        pairs.forall(pair => pair._1\
    \ == pairs.take(pair._2).sum)", "        val pairs = l.groupBy(x => x % 2)\n \
    \       pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\n           \
    \ val sum = v.sum\n            val zero = v.filter(x => x == 0).length\n     \
    \       sum == zero && k == (sum - zero)\n        }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v)\
    \ =>\n            val sum = v.sum\n            val zero = k * sum\n          \
    \  zero == 0 || (zero % 2 == 0)\n        }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._1\
    \ == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.exists { case (k,\
    \ v) => v.sum == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v)\
    \ => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n\
    \        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._1\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.size == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.exists { case (k, v) => v.reduceLeft(_ + _) == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head._2 == 0)", "        val pairs = l.groupBy(_ % 2 == 0)\n  \
    \      pairs.exists(pair => pair._2.length == 1 && pair._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) =>\
    \ v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n      \
    \  pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft((x,\
    \ y) => x + y) == 0 }", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.length)\n\
    \        pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(_ % 2 == 0).mapValues(_.size)\n        pairs.forall { case (k, v)\
    \ => v == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) => v == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(x => x / 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ %\
    \ 2)\n        pairs.exists(pair => pair._2.size == 1 && pair._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists { case (true, xs) => xs.sum ==\
    \ 0 }", "        val pairs = l.groupBy(x => x/2)\n        pairs.forall { case\
    \ (k, v) => v == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.sum == 0)", "   \
    \     val pairs = l.groupBy(x => x / 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.map(_._1).forall(pairs.map(_._2).forall(pairs.map(_._3).forall(pairs.map(_._4).forall(pairs.map(_._5).forall(pairs.map(_._6).forall(pairs.map(_._7).forall(pairs.map(_._8).forall(pairs.map(_._9).forall(pairs.map(_._10).forall(pairs.map(_._11).forall(pairs.map(_._12).forall(pairs.map(_._13).forall(pairs.map(_._14).forall(pairs.map(_._15).forall(pairs.map(_._16).forall(pairs.map(_._17).forall(pairs.map(_._18).forall(pairs.map(_._19).forall(pairs.map(_._20).forall(pairs.map(_._21).forall(pairs.map(_._22).forall(pairs.map(_._23).forall(pairs.map(_._24).forall(pairs.map(_._25).forall(pairs.map(_._26).forall(pairs.map(_._27).forall(pairs.map(_._28).forall(pairs.map(_._29).forall(pairs.map(_._30).forall(pairs.map(_._31).forall(pairs.map(_._32).forall(pairs.map(_._33).forall(pairs.map(_._34).forall(pairs.map(_._35).forall(pairs.map(_._36).forall(pairs.map(_._37).forall(pairs.map(_._38).forall(pairs.map(_._39).forall(pairs.map(_._40).forall(pairs.map(_._41).forall(pairs.map(_._42).forall(pairs.map(_._43).forall(pairs.map(_._44).forall(pairs.map(_._45).forall(pairs.map(_._46).forall(pairs.map(_._47).forall(pairs.map(_._48).forall(pairs.map(_._49).forall(pairs.map(_._50).forall(pairs.map(_._51).forall(pairs.map(_._52).forall(pairs.map(_._53).forall(pairs.map(_._54).forall(pairs.map(_._55).forall(pairs.map(_._56).for",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.size)\n\
    \        pairs.forall(pair => pair._2 > 1)", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head._1 == 0)",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (k, v) =>\
    \ v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n      \
    \  pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head._1 == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.sum == 0)", "   \
    \     val pairs = l.zipWithIndex.filter(_._2 % 2 == 0)\n        pairs.forall(pair\
    \ => pair._1.sum == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head._1 == 0)", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(_ % 2)\n        pairs.exists(_._2.length == 1 &&\
    \ _._2.head._2 == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.sum == 0 }", "        val pairs = l.zipWithIndex.filter(_._2\
    \ % 2 == 0)\n        val pairs2 = pairs.filter(_._2 == 0)\n        pairs2.size\
    \ == pairs.size && pairs.forall(pair => pair._1 == pair._2)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x => x/2)\n\
    \        pairs.exists { case (k, v) => v.reduce(_+_) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduceLeft((x,\
    \ y) => x + y) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ +\
    \ _) == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists { case (true, xs) => xs.sum == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.exists(pair\
    \ => pair._2.length == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._1 == 0)",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2 ==\
    \ 0).mapValues(_.size)\n        pairs.forall { case (k, v) => v == 0 }", "   \
    \     val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case (k, v) =>\
    \ v.forall(x => x == 0) }", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val pairs =\
    \ l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall { case\
    \ (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(x => x/2)\n        pairs.exists(x => x._2.length ==\
    \ 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2)\n        pairs.exists(pair\
    \ => pair._2.length == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n     \
    \   pairs.exists(x => x._2.length == 1 && x._2.sum == 0)", "        val pairs\
    \ = l.zipWithIndex.filter(_._2 != l.length)\n        pairs.forall(pair => pair._1\
    \ + pair._2 == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "  \
    \      val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.size)\n\
    \        pairs.forall { case (k, v) => v == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head._1 == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._2\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head._1 == 0)", " \
    \       val pairs = l.groupBy(_ % 2)\n        pairs.exists(pair => pair._2.size\
    \ == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n  \
    \      pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.size == 1\
    \ && x._2.head == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.forall { case (k, v) => v == 0 }", "        val pairs\
    \ = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "      \
    \  val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length ==\
    \ 1 && x._2.sum == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.forall\
    \ { case (k, v) => v.forall(x => x == 0) }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(_ % 2)\n        pairs.exists(_._2.size == 1 && _._2.head\
    \ == 0)", "        val pairs = l.groupBy(_ % 2 == 0)\n        pairs.exists(pair\
    \ => pair._2.length == 1 && pair._2.head == 0)", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", " \
    \       val pairs = l.groupBy(x => x/2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head == 0)", "        val pairs = l.zipWithIndex.filter(_._2 %\
    \ 2 == 0)\n        val pairsWithZero = pairs.filter(_._2 == 0)\n        pairsWithZero.size\
    \ == pairs.size - 1", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x\
    \ => x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x =>\
    \ x % 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "    \
    \    val pairs = l.groupBy(_ % 2 == 0)\n        pairs.forall { case (true, list)\
    \ => list.forall(x => x == 0) }", "        val pairs = l.groupBy(x => x / 2)\n\
    \        pairs.exists(x => x._2 > 0)", "        val pairs = l.groupBy(x => x/2)\n\
    \        pairs.exists(x => x._2.length == 1 && x._2.head == 0)", "        val\
    \ pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length == 1 &&\
    \ x._2.head._2 == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.reduce(_ + _) == 0 }", "        val pairs = l.groupBy(_ %\
    \ 2)\n        pairs.exists(pairs => pairs._2.length == 1 && pairs._2.head == 0)",
  "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length\
    \ == 1 && x._2.head._1 == 0)", "        val pairs = l.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val pairSet = pairs.toSet\n        pairs.forall(pair\
    \ => pairSet.contains(pair + pair))", "        val pairs = l.groupBy(x => x %\
    \ 2)\n        pairs.exists(x => x._2.size == 1 && x._2.head == 0)", "        val\
    \ pairs = l.zipWithIndex.filter(_._2 % 2 == 0)\n        pairs.forall(pair => pair._1.sum\
    \ == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x =>\
    \ x._2.length == 1 && x._2.head == 0)", "        val pairs = l.groupBy(x => x\
    \ % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", "     \
    \   val pairs = l.zipWithIndex.filter(_._2 % 2 == 0)\n        pairs.forall(pair\
    \ => pair._1.sum == 0)", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.reduce(_ + _) == 0 }", " \
    \       val pairs = l.groupBy(_ % 2)\n        pairs.forall { case (k, v) => v\
    \ == 0 }", "        val pairs = l.groupBy(_ % 2 == 0).mapValues(_.length).filter(_._2\
    \ > 1).map(_._1).toList\n        pairs.forall(x => l.count(_ == x) == 2)", " \
    \       val pairs = l.groupBy(x => x % 2)\n        pairs.exists { case (true,\
    \ xs) => xs.sum == 0 }", "        val pairs = l.groupBy(x => x % 2)\n        pairs.exists\
    \ { case (k, v) => v.reduceLeft(_ + _) == 0 }", "        val pairs = l.groupBy(x\
    \ => x % 2)\n        pairs.forall { case (k, v) => v.forall(x => x == 0) }", " \
    \       val pairs = l.groupBy(x => x / 2)\n        pairs.exists(x => x._2.size\
    \ == 1 && x._2.head == 0)", "        val pairs = l.groupBy(_ % 2 == 0)\n     \
    \   pairs.exists(pair => pair._2.length == 1 && pair._2.head == 0)", "       \
    \ val pairs = l.groupBy(x => x % 2)\n        pairs.exists(x => x._2.length ==\
    \ 1 && x._2.head == 0)"]
stop_tokens:
- "\n    }\n"
