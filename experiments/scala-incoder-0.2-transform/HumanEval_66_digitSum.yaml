name: HumanEval_66_digitSum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n   \
  \ // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    //\
  \ (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
  helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n  \
  \  // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String) :\
  \ Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"))\
  \ == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
  abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
  woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327l));\n    }\n\n}\n"
completions: ["        val result = mutable.Long.empty\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                result\
    \ += s.charAt(i) - 'A'\n        return result.toLong", "        val result = mutable.Long.empty\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F'\
    \ || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c\
    \ == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c == 'S'\
    \ || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c\
    \ == 'Z'){\n                result += c.toLong\n            }\n        }\n   \
    \     result", "        val sum = 0\n        for (i <- 0 until s.length)\n   \
    \         sum += s.charAt(i).toInt\n        sum", "        val sum = 0\n     \
    \   for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                sum += s.charAt(i) - 'A' + 1\n            else\n  \
    \              sum += s.charAt(i)\n        sum", "        val result = new mutable.HashMap[Char,\
    \ Long]()\n        for (c <- s) {\n            val code = c.toInt\n          \
    \  if (code < 0 || code > 9) {\n                throw new IllegalArgumentException(\"\
    Invalid character \" + c)\n            }\n            val sum = result.getOrElse(c,\
    \ 0L)\n            sum += code\n            result.put(c, sum)\n        }\n  \
    \      result.toMap.values.sum", "        val sum = 0\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n     \
    \           sum += s.charAt(i) - 'A' + 1\n            else\n                sum\
    \ += s.charAt(i)\n        sum", "        val sum = 0\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           sum += s.charAt(i) - 'a'\n            else\n                sum +=\
    \ s.charAt(i)\n        sum", "        val sum = 0\n        for(i <- 0 until s.length)\n\
    \            sum += s.charAt(i).toInt\n        sum", "        var sum = 0\n  \
    \      for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                sum += s.charAt(i) - 'A' + 1\n            else\n  \
    \              sum += s.charAt(i)\n        sum", "        val sum = 0\n      \
    \  for (i <- 0 until s.length)\n            sum += s.charAt(i).toInt\n       \
    \ sum", "        val sum = 0\n        for (i <- 0 until s.length)\n          \
    \  if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                sum += s.charAt(i)\
    \ - 'A' + 1\n            else\n                sum += s.charAt(i)\n        sum",
  "        var sum = 0\n        var index = 0\n        var isUpper = false\n     \
    \   var isDigit = false\n        while (index < s.length) {\n            val c\
    \ = s(index)\n            if (isDigit) {\n                sum += c\n         \
    \   }\n            if (isUpper) {\n                sum += c.toInt\n          \
    \  }\n            if (c == 'A') {\n                isUpper = true\n          \
    \  }\n            if (c == 'a') {\n                isUpper = false\n         \
    \   }\n            if (c == 'X') {\n                isDigit = true\n         \
    \   }\n            if (c == 'x') {\n                isDigit = false\n        \
    \    }\n            index += 1 // next char\n        }\n        sum", "      \
    \  val sum = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                sum += s.charAt(i) - 'A' + 1\n\
    \            else\n                sum += s.charAt(i)\n        sum", "       \
    \ val sum = 0\n        for(i <- 0 until s.length)\n            sum += s.charAt(i).toString.toInt\n\
    \        sum", "        val sum = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                sum +=\
    \ s.charAt(i) - 'A' + 1\n            else\n                sum += s.charAt(i)\n\
    \        sum", "        val sum = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                sum +=\
    \ s.charAt(i) - 'A' + 1\n            else\n                sum += s.charAt(i)\n\
    \        sum", "        val result = mutable.Long.empty\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n     \
    \           result += s.charAt(i) - 'A' + 1\n        return result", "       \
    \ val sum = 0\n        for (i <- 0 until s.length)\n            if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z')\n                sum += s.charAt(i) - 'A' + 1\n\
    \            else\n                sum += s.charAt(i)\n        sum", "       \
    \ var sum = 0\n        var i = 0\n        while (i < s.length){\n            val\
    \ c = s.charAt(i)\n            if (c.toUpper == c){\n                sum += c.toInt\n\
    \            }\n            i += 1\n        }\n        sum", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        for(i <- 0 until s.length)\n     \
    \       if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                result +=\
    \ s.charAt(i) - 'A'\n        return result.toList.length"]
stop_tokens:
- "\n    }\n"
