name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n\
    \        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversedX = x.reverse\n            if (x == reversedX) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           palindromes += i\n            val evenPalindrome = i.toString.reverse.equalsIgnoreCase(i.toString)\n\
    \            if (evenPalindrome) {\n                evenPalindromes += i\n   \
    \         }\n            val oddPalindrome = i.toString.reverse.equalsIgnoreCase(StringBuffer(i.toString).reverse.toString)\n\
    \            if (oddPalindrome) {\n                oddPalindromes += i\n     \
    \       }\n            i += 1\n        }\n        val evenPalindromeCount = evenPalindromes.size\n\
    \        val oddPalindromeCount = oddPalindromes.size\n        val palindromeCount\
    \ = palindromes.size\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ evenPalindromes)\n        val oddPalindromeTuple = Tuple2(oddPalindromeCount,\
    \ oddPalindromes)\n        val palindromeTuple = Tuple2(palindromeCount, palindromes)\n\
    \        evenPalindromeTuple._1 -> oddPalindromeTuple._1\n        evenPalindromeTuple._2\
    \ -> palindromeTuple._2", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountPerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRange",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListList = mutable.Set[Long]()\n        val oddPalindromeCountListList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountListListList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListList = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountListListList  = mutable.Set[Long]()\n        val oddPalindromeCountListListList\
    \  = mutable.Set[Long]()\n        val evenPalindromeCountListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListList  = mutable.Set[Long]()\n     \
    \   val evenPalindromeCountListListListListList  = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountListListListListList  = mutable.Set[Long]()\n      \
    \  val evenPalindromeCountListListListListList  = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountListListListListListList  = mutable.Set[Long]()\n   \
    \     val evenPalindromeCountListListListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListListListList  = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListListListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListListListListList  = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListListListListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListListListListListList  = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListListListListListListListList  = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val palindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val palindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val palindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val palindro",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var i = 1\n        while (i <= n) {\n            val evenPalindrome\
    \ = i.toString\n            val oddPalindrome = i.toString.reverse\n         \
    \   if (evenPalindrome == oddPalindrome) {\n                evenPalindromes +=\
    \ i\n                evenCount += 1\n            } else {\n                oddPalindromes\
    \ += i\n                oddCount += 1\n            }\n            i += 1\n   \
    \     }\n        (evenCount, oddCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromes2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromes3 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val palindromes4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromes5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromes6 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val palindromes7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var i = 2\n\
    \        while (i <= n) {\n            val evenPalindrome = i\n            val\
    \ oddPalindrome = i\n            val reversedEvenPalindrome = evenPalindrome.reverse\n\
    \            val reversedOddPalindrome = oddPalindrome.reverse\n            if\
    \ (evenPalindrome == reversedEvenPalindrome) {\n                evenPalindromes\
    \ += evenPalindrome\n            }\n            if (oddPalindrome == reversedOddPalindrome)\
    \ {\n                oddPalindromes += oddPalindrome\n            }\n        \
    \    i += 1\n        }\n        evenPalindromes.toList match {\n            case\
    \ Nil => (0l, 0l)\n            case x :: xs => (x.toLong, (xs.length - x.toLong).toLong)\n\
    \        }", "        val evenPalindromes = mutable.ListBuffer[Long]()\n     \
    \   val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n  \
    \      var odd = 0\n        for(i <- 1 to n){\n            val str = i.toString\n\
    \            val reverseStr = str.substring(str.length-1) + str.substring(0, str.length-1)\n\
    \            if(str == reverseStr){\n                odd += 1\n            }else{\n\
    \                even += 1\n            }\n        }\n        (even, odd)"]
stop_tokens:
- "\n    }\n"
