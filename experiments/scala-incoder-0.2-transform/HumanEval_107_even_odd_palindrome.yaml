name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n\
    \        val oddPalindromeCount = 0\n        val evenPalindromeRange = range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversedX = x.reverse\n            if (x == reversedX) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           palindromes += i\n            val evenPalindrome = i.toString.reverse.equalsIgnoreCase(i.toString)\n\
    \            if (evenPalindrome) {\n                evenPalindromes += i\n   \
    \         }\n            val oddPalindrome = i.toString.reverse.equalsIgnoreCase(StringBuffer(i.toString).reverse.toString)\n\
    \            if (oddPalindrome) {\n                oddPalindromes += i\n     \
    \       }\n            i += 1\n        }\n        val evenPalindromeCount = evenPalindromes.size\n\
    \        val oddPalindromeCount = oddPalindromes.size\n        val palindromeCount\
    \ = palindromes.size\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ evenPalindromes)\n        val oddPalindromeTuple = Tuple2(oddPalindromeCount,\
    \ oddPalindromes)\n        val palindromeTuple = Tuple2(palindromeCount, palindromes)\n\
    \        evenPalindromeTuple._1 -> oddPalindromeTuple._1\n        evenPalindromeTuple._2\
    \ -> palindromeTuple._2", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts_ = mutable.Set[Long]()\n        val oddPalindromeCounts_\
    \ = mutable.Set[Long]()\n        val evenPalindromeCounts_ = mutable.Set[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.Set[Long]()\n        val evenPalindromeCounts_\
    \ = mutable.Set[Long]()\n", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountPerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRange",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListList = mutable.Set[Long]()\n        val oddPalindromeCountListList\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountListListList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListList = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountListListList  = mutable.Set[Long]()\n        val oddPalindromeCountListListList\
    \  = mutable.Set[Long]()\n        val evenPalindromeCountListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListList  = mutable.Set[Long]()\n     \
    \   val evenPalindromeCountListListListListList  = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountListListListListList  = mutable.Set[Long]()\n      \
    \  val evenPalindromeCountListListListListList  = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountListListListListListList  = mutable.Set[Long]()\n   \
    \     val evenPalindromeCountListListListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListListListList  = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListListListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListListListListList  = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListListListListListListList  = mutable.Set[Long]()\n\
    \        val oddPalindromeCountListListListListListListListList  = mutable.Set[Long]()\n\
    \        val evenPalindromeCountListListListListListListListList  = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val palindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val palindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val palindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val palindro",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var evenCount = 0\n        var oddCount\
    \ = 0\n        var i = 1\n        while (i <= n) {\n            val evenPalindrome\
    \ = i.toString\n            val oddPalindrome = i.toString.reverse\n         \
    \   if (evenPalindrome == oddPalindrome) {\n                evenPalindromes +=\
    \ i\n                evenCount += 1\n            } else {\n                oddPalindromes\
    \ += i\n                oddCount += 1\n            }\n            i += 1\n   \
    \     }\n        (evenCount, oddCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val palindromes2\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val palindromes3 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val palindromes4 = mutable.ListBuffer[Long]()\n        val palindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val palindromes5\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val palindromes6 = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val palindromes7 = mutable.ListBuffer[Long]()\n        val palindromeCount7\
    \ = mutable.ListBuffer[Long]", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var i = 2\n\
    \        while (i <= n) {\n            val evenPalindrome = i\n            val\
    \ oddPalindrome = i\n            val reversedEvenPalindrome = evenPalindrome.reverse\n\
    \            val reversedOddPalindrome = oddPalindrome.reverse\n            if\
    \ (evenPalindrome == reversedEvenPalindrome) {\n                evenPalindromes\
    \ += evenPalindrome\n            }\n            if (oddPalindrome == reversedOddPalindrome)\
    \ {\n                oddPalindromes += oddPalindrome\n            }\n        \
    \    i += 1\n        }\n        evenPalindromes.toList match {\n            case\
    \ Nil => (0l, 0l)\n            case x :: xs => (x.toLong, (xs.length - x.toLong).toLong)\n\
    \        }", "        val evenPalindromes = mutable.ListBuffer[Long]()\n     \
    \   val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n  \
    \      var odd = 0\n        for(i <- 1 to n){\n            val str = i.toString\n\
    \            val reverseStr = str.substring(str.length-1) + str.substring(0, str.length-1)\n\
    \            if(str == reverseStr){\n                odd += 1\n            }else{\n\
    \                even += 1\n            }\n        }\n        (even, odd)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val reverse = x.toString\n\
    \            val reversed = reverse.reverse\n            if (reverse == reversed)\
    \ {\n                evenPalindromeCount += 1\n                if (x % 2 == 0)\
    \ {\n                    evenPalindromes += x\n                }\n           \
    \ } else {\n                oddPalindromeCount += 1\n                if (x % 2\
    \ == 1) {\n                    oddPalindromes += x\n                }\n      \
    \      }\n        }\n        val evenPalindromeTuple = evenPalindromes.toList\n\
    \        val oddPalindromeTuple = oddPalindromes.toList\n        (evenPalindromeTuple,\
    \ oddPalindromeTuple)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val maxPalindromes = math.min(math.ceil(n/2),\
    \ 10^3)\n        val maxPalindrome = math.min(math.ceil(n/2), 10^3)\n        for(i\
    \ <- 1 to maxPalindromes) {\n            val palindrome = math.min(math.ceil(n/2),\
    \ 10^3)\n            if(palindrome == math.ceil(n/2)){\n                evenPalindromes\
    \ += palindrome\n                evenPalindromeCount += 1\n            }else{\n\
    \                oddPalindromes += palindrome\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ evenPalindromes)\n        val oddPalindromeTuple = Tuple2(oddPalindromeCount,\
    \ oddPalindromes)\n        evenPalindromeTuple ++ oddPalindromeTuple", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum\
    \ = 0\n        val evenPalindromeSum2 = 0\n        val oddPalindromeSum2 = 0\n\
    \        val evenPalindromeSum3 = 0\n        val oddPalindromeSum3 = 0\n     \
    \   val evenPalindromeSum4 = 0\n        val oddPalindromeSum4 = 0\n        val\
    \ evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n        val evenPalindromeSum6\
    \ = 0\n        val oddPalindromeSum6 = 0\n        val evenPalindromeSum7 = 0\n\
    \        val oddPalindromeSum7 = 0\n        val evenPalindromeSum8 = 0\n     \
    \   val oddPalindromeSum8 = 0\n        val evenPalindromeSum9 = 0\n        val\
    \ oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n        val oddPalindromeSum10\
    \ = 0\n        val evenPalindromeSum11 = 0\n        val oddPalindromeSum11 = 0\n\
    \        val evenPalindromeSum12 = 0\n        val oddPalindromeSum12 = 0\n   \
    \     val evenPalindromeSum13 = 0\n        val oddPalindromeSum13 = 0\n      \
    \  val evenPalindromeSum14 = 0\n        val oddPalindromeSum14 = 0\n        val\
    \ evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n        val evenPalindromeSum16\
    \ = 0\n        val oddPalindromeSum16 = 0\n        val evenPalindromeSum17 = 0\n\
    \        val oddPalindromeSum17 = 0\n        val evenPalindromeSum18 = 0\n   \
    \     val oddPalindromeSum18 = 0\n        val evenPalindromeSum19 = 0\n      \
    \  val oddPalindromeSum19 = 0\n        val evenPalindromeSum20 = 0\n        val\
    \ oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n        val oddPalindromeSum21",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var even = 0\n    \
    \    var odd = 0\n        var i = 0\n        var j = 0\n        while (i < n)\
    \ {\n            while (j < n) {\n                if (j == i) {\n            \
    \        evenPalindromes += i\n                    odd += 1\n                }\n\
    \                else {\n                    oddPalindromes += j\n           \
    \         even += 1\n                }\n                j += 1\n            }\n\
    \            i += 1\n            j = 0\n        }\n        (even, odd)", "   \
    \     val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        var even = 0\n        var odd = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < n) {\n            while (j < n)\
    \ {\n                if (i % 10 == j % 10) {\n                    evenPalindromes\
    \ += i\n                    oddPalindromes += j\n                    i += 1\n\
    \                    j += 1\n                } else {\n                    i +=\
    \ 1\n                    j += 1\n                }\n            }\n          \
    \  evenPalindromes += i\n            oddPalindromes += i\n            i += 1\n\
    \        }\n        val evenPalindromeCount = evenPalindromes.size\n        val\
    \ oddPalindromeCount = oddPalindromes.size\n        val evenPalindromes = evenPalindromes.toList\n\
    \        val oddPalindromes = oddPalindromes.toList\n        val evenPalindromeTuple\
    \ = evenPalindromes.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        val\
    \ oddPalindromeTuple = oddPalindromes.zipWithIndex.filter(_._2 % 2 == 1).map(_._1)\n\
    \        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        val evenP", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountArray = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArray = mutable.Set[Long]()\n        val evenPalindromeCountArrays\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrays = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrays2 = mutable.Set[Long]()\n        val oddPalindromeCountArrays2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountArrays3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArrays3 = mutable.Set[Long]()\n        val evenPalindromeCountArrays4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrays4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrays5 = mutable.Set[Long]()\n        val oddPalindromeCountArrays5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountArrays6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArrays6 = mutable.Set[Long]()\n        val evenPalindromeCountArrays7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrays7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountArrays8 = mutable.Set[Long]()\n        val oddPalindromeCountArrays8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountArrays9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountArrays9 = mutable.Set[Long]()\n        val evenPalindromeCountArrays10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountArrays10 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i <= n) {\n            val evenPalindrome = i\n            val\
    \ oddPalindrome = i\n            val reverse = i\n            val reversedString\
    \ = reverse.toString\n            val reversedStringLength = reversedString.length\n\
    \            val reversedStringReverse = reversedString.reverse\n            val\
    \ reversedStringReverseLength = reversedStringReverse.length\n            val\
    \ evenPalindromeLength = evenPalindrome.toString().length\n            val oddPalindromeLength\
    \ = oddPalindrome.toString().length\n            val evenPalindromeReverseLength\
    \ = evenPalindromeReverse.length\n            val oddPalindromeReverseLength =\
    \ oddPalindromeReverse.length\n            val evenPalindromeReverse = evenPalindromeReverse.toString\n\
    \            val oddPalindromeReverse = oddPalindromeReverse.toString\n      \
    \      val evenPalindromeReverseLength = evenPalindromeReverse.length\n      \
    \      val oddPalindromeReverseLength = oddPalindromeReverse.length\n        \
    \    val evenPalindromeReverseLength = evenPalindromeReverse.length\n        \
    \    val oddPalindromeReverseLength = oddPalindromeReverse.length\n          \
    \  val evenPalindromeReverseLength = evenPalindromeReverse.length\n          \
    \  val oddPalindromeReverseLength = oddPalindromeReverse.length\n            val\
    \ evenPalindromeReverseLength = evenPalindromeReverse.length\n            val\
    \ oddPalindromeReverseLength = oddPalindromeReverse.length\n            val evenPalindromeReverseLength\
    \ = evenPalindromeReverse.length\n            val oddPalindromeReverseLength =\
    \ oddPalindromeReverse.length\n            val evenPalindromeReverseLength = evenPalindromeReverse.length\n\
    \            val oddPalindromeReverseLength = oddPalindromeReverse.length\n  \
    \          val evenPalindromeReverseLength = evenPalindromeReverse.length\n  \
    \          val oddPalindromeReverseLength = oddPalindromeReverse.length\n    \
    \        val evenPalindromeReverseLength = evenPalindromeReverse.length\n    \
    \        val oddPalindromeReverseLength = oddPalindromeReverse.length\n      \
    \      val evenPalindromeReverseLength = evenPalindromeReverse.length\n      \
    \      val oddPalindromeReverseLength = odd", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountTmp\
    \ = 0\n        val oddPalindromeCountTmp = 0\n        val evenPalindromeCountTmp2\
    \ = 0\n        val oddPalindromeCountTmp2 = 0\n        val evenPalindromeCountTmp3\
    \ = 0\n        val oddPalindromeCountTmp3 = 0\n        val evenPalindromeCountTmp4\
    \ = 0\n        val oddPalindromeCountTmp4 = 0\n        val evenPalindromeCountTmp5\
    \ = 0\n        val oddPalindromeCountTmp5 = 0\n        val evenPalindromeCountTmp6\
    \ = 0\n        val oddPalindromeCountTmp6 = 0\n        val evenPalindromeCountTmp7\
    \ = 0\n        val oddPalindromeCountTmp7 = 0\n        val evenPalindromeCountTmp8\
    \ = 0\n        val oddPalindromeCountTmp8 = 0\n        val evenPalindromeCountTmp9\
    \ = 0\n        val oddPalindromeCountTmp9 = 0\n        val evenPalindromeCountTmp10\
    \ = 0\n        val oddPalindromeCountTmp10 = 0\n        val evenPalindromeCountTmp11\
    \ = 0\n        val oddPalindromeCountTmp11 = 0\n        val evenPalindromeCountTmp12\
    \ = 0\n        val oddPalindromeCountTmp12 = 0\n        val evenPalindromeCountTmp13\
    \ = 0\n        val oddPalindromeCountTmp13 = 0\n        val evenPalindromeCountTmp14\
    \ = 0\n        val oddPalindromeCountTmp14 = 0\n        val evenPalindromeCountTmp15\
    \ = 0\n        val oddPalindromeCountTmp15 = 0\n        val evenPalindromeCountTmp16\
    \ = 0\n        val oddPalindromeCountTmp16 = 0\n        val evenPalindromeCountTmp17\
    \ = 0\n        val oddPalindromeCountTmp17 = 0\n        val evenPalindromeCountTmp18\
    \ = 0\n        val oddPalindromeCountT", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPair = mutable.Set[Long]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n        val oddPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairs = mutable.Set[Long]()\n        val oddPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n        val oddPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(_ % 2 == 0).map(_ * 2)\n  \
    \      val oddPalindromeRange = Range(1, n).filter(_ % 2 == 1).map(_ * 2)\n  \
    \      evenPalindromeRange foreach { x =>\n            val evenPalindrome = x\
    \ % 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        for(i <- 1 to n){\n            val str = i.toString\n\
    \            val reverse = str.tail.reverse\n            val isEven = str == reverse\n\
    \            if(isEven){\n                even += 1\n                evenPalindromes\
    \ += i\n            }else{\n                odd += 1\n                oddPalindromes\
    \ += i\n            }\n        }\n        (evenPalindromes.sum, oddPalindromes.sum)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList2 = mutable.Set[Long]()\n        val oddPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList3 = mutable.Set[Long]()\n        val evenPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList5 = mutable.Set[Long]()\n        val oddPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList6 = mutable.Set[Long]()\n        val evenPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList8 = mutable.Set[Long]()\n        val oddPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList9 = mutable.Set[Long]()\n        val evenPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList11 = mutable.Set[Long]()\n        val oddPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList12 = mutable.Set[Long]()\n        val evenPalindromeCountList13\
    \ = mutable.Set[Long]()", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val maxPalindromes = math.max(math.min(math.ceil(n/2),\
    \ math.ceil(n/2)), n)\n        for(i <- 1 to maxPalindromes) {\n            val\
    \ palindrome = i.toString\n            val reversePalindrome = reverse(palindrome)\n\
    \            if(palindrome == reversePalindrome) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += i\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        for\
    \ (i <- 1 to n) {\n            val str = i.toString\n            val reverseStr\
    \ = str.tail.reverse\n            if (str == reverseStr) {\n                evenPalindromes\
    \ += i\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += i\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        val evenPalindromeCount\
    \ = evenPalindromeCount.toList\n        val oddPalindromeCount = oddPalindromeCount.toList\n\
    \        (evenPalindromeCount.sum, oddPalindromeCount.sum)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = 0\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = 0\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n   \
    \     val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           val p = i * i\n            if (palindromes.contains(p)) {\n      \
    \          oddPalindromes += p\n            } else {\n                palindromes\
    \ += p\n                if (i % 2 == 0) {\n                    evenPalindromes\
    \ += p\n                }\n            }\n            i += 1\n        }\n    \
    \    evenPalindromes.toList match {\n            case Nil => (1l, 0l)\n      \
    \      case x :: xs => (x, xs.toList.filter(x % 2 == 0).size)\n        }", " \
    \       val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val reversed\
    \ = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val maxPalindrome = n - 1\n        val maxPalindromeCount\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1\n        val maxPalindromeOdd\
    \ = n - 1\n        val maxPalindromeEvenCount = n - 1\n        val maxPalindromeOddCount\
    \ = n - 1\n        val maxPalindromeEven = n - 1", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n     \
    \   val evenPalindromeRange = Range(1, n).toList\n        val oddPalindromeRange\
    \ = Range(1, n).toList.reverse\n        evenPalindromeRange foreach { x =>\n \
    \           val evenPalindrome = x.toString\n            val oddPalindrome = x.toString.reverse\n\
    \            if (evenPalindrome == oddPalindrome) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            } else {\n     \
    \           oddPalindromes += x\n                oddPalindromeCount += 1\n   \
    \         }\n        }\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ evenPalindromes)\n        val oddPalindromeTuple = Tuple2(oddPalindromeCount,\
    \ oddPalindromes)\n        evenPalindromeTuple", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n     \
    \   val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val palindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        ", "       \
    \ val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        var i = 0\n        while (i < n) {\n        \
    \    val p = i\n            val q = n - p\n            val r = math.gcd(q, p)\n\
    \            if (r == 1) {\n                evenPalindromes += p\n           \
    \     evenPalindromes += q\n            } else {\n                oddPalindromes\
    \ += p\n                oddPalindromes += q\n            }\n            i += r\n\
    \        }\n        evenPalindromes.toList match {\n            case Nil => (1l,\
    \ 0l)\n            case x => x.foldLeft(0l){ (acc, x) => acc * x + x }\n     \
    \   }\n        oddPalindromes.toList match {\n            case Nil => (0l, 1l)\n\
    \            case x => x.foldLeft(1l){ (acc, x) => acc * x + x }\n        }",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var even = 0\n        var odd = 0\n  \
    \      var i = 0\n        var j = 0\n        while (i < n) {\n            while\
    \ (j < n) {\n                if (i % 10 == j % 10) {\n                    evenPalindromes\
    \ += i\n                    oddPalindromes += j\n                    even++\n\
    \                    odd++\n                }\n                j++\n         \
    \   }\n            i += 1\n            j = 0\n        }\n        val evenPalindrome\
    \ = evenPalindromes.toList\n        val oddPalindrome = oddPalindromes.toList\n\
    \        return (evenPalindrome.size, oddPalindrome.size)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val palindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val palindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val palindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val palindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val palindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val palindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val palindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val palindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val palindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val palindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val range = (1l, n)\n     \
    \   val evenPalindromeRange = (1l, range._2)\n        val oddPalindromeRange =\
    \ (range._1, range._2)\n        val evenPalindromeRangeIterator = evenPalindromeRange.iterator\n\
    \        val oddPalindromeRangeIterator = oddPalindromeRange.iterator\n      \
    \  while (evenPalindromeRangeIterator.hasNext && oddPalindromeRangeIterator.hasNext)\
    \ {\n            val evenPalindrome = evenPalindromeRangeIterator.next\n     \
    \       val oddPalindrome = oddPalindromeRangeIterator.next\n            if (evenPalindrome\
    \ == oddPalindrome) {\n                evenPalindromeCount += 1\n            \
    \    oddPalindromeCount += 1\n            } else if (evenPalindrome < oddPalindrome)\
    \ {\n                evenPalindromes += evenPalindrome\n                oddPalindromeCount\
    \ += 1\n            } else {\n                evenPalindromes += oddPalindrome\n\
    \                evenPalindromeCount += 1\n                oddPalindromeCount\
    \ += 1\n            }\n        }\n        (evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountAndOddPalindromes = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountAndEvenPalindromes = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountAndOddPalindromesAndEvenPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountAndEvenPalindromesAndOddPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountAndOddPalindromesAndEvenPalindromesAndOddPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountAndEvenPalindromesAndOddPalindromesAndEvenPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountAndOddPalindromesAndEvenPalindromesAndOddPalindromesAndEvenPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountAndEvenPalindromesAndOddPalindromesAndEvenPalindromesAndOddPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountAndOddPalindromesAndEvenPalindromesAndOddPalindromesAndEvenPalindromesAndOddPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountAndEvenPalindromesAndOddPalindromesAndEvenPalindromesAndOddPalindromesAndEvenPalindromesAndOddPalindromes\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val ", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts = mutable.ListBuffer[Long]()\n        val palindromeCounts\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.ListBuffer[Long]()\n        val palindromeCounts_\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.ListBuffer[Long]()\n        val palindromeCounts_\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.ListBuffer[Long]()\n        val palindromeCounts_\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.ListBuffer[Long]()\n        val palindromeCounts_\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.ListBuffer[Long]()\n        val palindromeCounts_\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCounts_ = mutable.ListBuffer[Long]()\n        val palindromeCounts_\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCounts_ = mutable.ListBuffer[Long]()\n\
    \        val oddP", "        val evenPalindromes = mutable.Set[Long]()\n     \
    \   val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < n) {\n            val palindrome = i.toString\n          \
    \  val reversePalindrome = reverse(palindrome)\n            if (palindrome ==\
    \ reversePalindrome) {\n                evenPalindromes += palindrome\n      \
    \      } else {\n                oddPalindromes += palindrome\n            }\n\
    \            i += 1\n        }\n        evenPalindromes.toList match {\n     \
    \       case Nil => (1l, 0l)\n            case x :: xs => (x.toLong, (xs.length\
    \ - x.toLong).toLong)\n        }\n        oddPalindromes.toList match {\n    \
    \        case Nil => (0l, 1l)\n            case x :: xs => (x.toLong, (xs.length\
    \ - x.toLong).toLong)\n        }", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val palindromes = mutable.Set[Long]()\n       \
    \ val palindromeCount = 0\n        val palindromeTuple = Tuple2(palindromeCount,\
    \ palindromes)\n        val evenPalindrome = n / 2\n        val oddPalindrome\
    \ = n - evenPalindrome\n        val evenPalindromes = evenPalindromes.updated(evenPalindrome,\
    \ evenPalindrome)\n        val oddPalindromes = oddPalindromes.updated(oddPalindrome,\
    \ oddPalindrome)\n        val palindromes = palindromes.updated(evenPalindrome,\
    \ evenPalindrome)\n        val palindromes = palindromes.updated(oddPalindrome,\
    \ oddPalindrome)\n        val evenPalindromeCount = evenPalindromes.count(_ ==\
    \ evenPalindrome)\n        val oddPalindromeCount = oddPalindromes.count(_ ==\
    \ oddPalindrome)\n        val palindromeCount = palindromes.count(_ == evenPalindrome)\n\
    \        val palindromeCount = palindromes.count(_ == oddPalindrome)\n       \
    \ val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val palindromeTuple = Tuple2(palindromeCount, palindromes)\n        val\
    \ evenPalindrome = evenPalindromes.last\n        val oddPalindrome = oddPalindromes.last\n\
    \        val palindrome = palindromes.last\n        val evenPalindromes = evenPalindromes.dropRight",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        var i =\
    \ 0\n        while (i <= n) {\n            val evenPalindrome = i.toString.reverse.tail.mkString.toLong\n\
    \            val oddPalindrome = i.toString.reverse.tail.mkString.toLong\n   \
    \         if (evenPalindrome % 2 == 0 && oddPalindrome % 2 != 0) {\n         \
    \       evenPalindromes += evenPalindrome\n                evenPalindromeCount\
    \ += evenPalindrome\n            } else if (evenPalindrome % 2 != 0 && oddPalindrome\
    \ % 2 == 0) {\n                oddPalindromes += oddPalindrome\n             \
    \   oddPalindromeCount += oddPalindrome\n            }\n            i += 1\n \
    \       }\n        val evenPalindromeCount = evenPalindromeCount.sum\n       \
    \ val oddPalindromeCount = oddPalindromeCount.sum\n        return (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palindromeCount = 0\n        val evenPalindrome = 0\n        val\
    \ oddPalindrome = 0\n        val palindrome = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindrome = 0\n        val oddPalindrome = 0\n        val palindrome\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple2 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple3 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple4 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple5 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple6 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple7 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple8 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple8 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuple9 = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple9 = Tuple2(evenPalindromeCount, ", "        val\
    \ evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n       \
    \ val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val\
    \ evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSum\
    \ = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n \
    \       val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n        val\
    \ oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val\
    \ evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSum\
    \ = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n \
    \       val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n        val\
    \ oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val\
    \ evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSum\
    \ = 0\n        val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n \
    \       val oddPalindromeSum = 0\n        val evenPalindromeSum = 0\n        val\
    \ oddPalindromeSum", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeSum = 0\n\
    \        val oddPalindromeSum = 0\n        val evenPalindromeSum2 = 0\n      \
    \  val oddPalindromeSum2 = 0\n        val evenPalindromeSum3 = 0\n        val\
    \ oddPalindromeSum3 = 0\n        val evenPalindromeSum4 = 0\n        val oddPalindromeSum4\
    \ = 0\n        val evenPalindromeSum5 = 0\n        val oddPalindromeSum5 = 0\n\
    \        val evenPalindromeSum6 = 0\n        val oddPalindromeSum6 = 0\n     \
    \   val evenPalindromeSum7 = 0\n        val oddPalindromeSum7 = 0\n        val\
    \ evenPalindromeSum8 = 0\n        val oddPalindromeSum8 = 0\n        val evenPalindromeSum9\
    \ = 0\n        val oddPalindromeSum9 = 0\n        val evenPalindromeSum10 = 0\n\
    \        val oddPalindromeSum10 = 0\n        val evenPalindromeSum11 = 0\n   \
    \     val oddPalindromeSum11 = 0\n        val evenPalindromeSum12 = 0\n      \
    \  val oddPalindromeSum12 = 0\n        val evenPalindromeSum13 = 0\n        val\
    \ oddPalindromeSum13 = 0\n        val evenPalindromeSum14 = 0\n        val oddPalindromeSum14\
    \ = 0\n        val evenPalindromeSum15 = 0\n        val oddPalindromeSum15 = 0\n\
    \        val evenPalindromeSum16 = 0\n        val oddPalindromeSum16 = 0\n   \
    \     val evenPalindromeSum17 = 0\n        val oddPalindromeSum17 = 0\n      \
    \  val evenPalindromeSum18 = 0\n        val oddPalindromeSum18 = 0\n        val\
    \ evenPalindromeSum19 = 0\n        val oddPalindromeSum19 = 0\n        val evenPalindromeSum20\
    \ = 0\n        val oddPalindromeSum20 = 0\n        val evenPalindromeSum21 = 0\n\
    \        val oddPalindromeSum21", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome) {\n                oddPalindromes\
    \ += x\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var palindrome = 0\n        var evenPalindrome =\
    \ 0\n        var oddPalindrome = 0\n        var palindromeNumber = 0\n       \
    \ var evenPalindromeNumber = 0\n        var oddPalindromeNumber = 0\n        var\
    \ evenPalindromeNumberNumber = 0\n        var oddPalindromeNumberNumber = 0\n\
    \        var evenPalindromeNumberNumberNumber = 0\n        var oddPalindromeNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumber = 0\n        var oddPalindromeNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumber = 0\n        var\
    \ oddPalindromeNumberNumberNumberNumberNumberNumber = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumber = 0\n\
    \        var evenPalindromeNumberNumberNumberNumberNumberNumberNumber = 0\n  \
    \      var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumber = 0\n\
    \        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumber =\
    \ 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var oddPalindromeNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber\
    \ = 0\n        var evenPalindromeNumberNumberNumber", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).filter(x => x % 2 == 0)\n        val\
    \ oddPalindromeRange = Range(1, n).filter(x => x % 2 != 0)\n        evenPalindromeRange\
    \ foreach { x =>\n            val reversed = x.reverse\n            if (reversed\
    \ == x) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ evenPalindrome = x to (x - 1)\n            evenPalindromes += evenPalindrome\n\
    \            evenPalindromeCount += 1\n        }\n        oddPalindromeRange foreach\
    \ { x =>\n            val oddPalindrome = x to (x - 1)\n            oddPalindromes\
    \ += oddPalindrome\n            oddPalindromeCount += 1\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            if (evenPalindrome) {\n                evenPalindromes +=\
    \ x\n                evenPalindromeCount += 1\n            }\n        }\n    \
    \    oddPalindromeRange foreach { x =>\n            val oddPalindrome = x % 2\
    \ == 1\n            if (oddPalindrome) {\n                oddPalindromes += x\n\
    \                oddPalindromeCount += 1\n            }\n        }\n        Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        val evenPalindrome = mutable.Set[Long]()\n        val oddPalindrome =\
    \ mutable.Set[Long]()\n        val palindrome = mutable.Set[Long]()\n        val\
    \ evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount =\
    \ mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n   \
    \     val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddP", " \
    \       val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = 0\n    \
    \    val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x.toString\n            val\
    \ oddPalindrome = evenPalindrome.reverse\n            if (evenPalindrome == oddPalindrome)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        Tuple2(evenPalindromeCount, oddPalindromeCount)",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val maxPalindrome = n - 1\n        val evenPalindromeRange = 1\
    \ to maxPalindrome\n        val oddPalindromeRange = maxPalindrome to 1\n    \
    \    evenPalindromeRange foreach { x =>\n            val evenPalindrome = x.toString.reverse\n\
    \            evenPalindromes += evenPalindrome\n            evenPalindromeCount\
    \ += 1\n        }\n        oddPalindromeRange foreach { x =>\n            val\
    \ oddPalindrome = x.toString.reverse\n            oddPalindromes += oddPalindrome\n\
    \            oddPalindromeCount += 1\n        }\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, evenPalindromes)\n        val oddPalindromeTuple\
    \ = Tuple2(oddPalindromeCount, oddPalindromes)\n        evenPalindromeTuple",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val oddPalindromeTuple\
    \ = Tuple2(evenPalindromeCount, oddPalindromeCount)\n        val evenPalindromeTuples\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeTuples = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val oddPalindromeTuple = Tuple2(evenPalindromeCount, oddPalindromeCount)\n\
    \        val evenPalindromeTuples = mutable.Set[Tuple2[Long, Long]]()\n      \
    \  val oddPalindromeTuples = mutable.", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var i = 0\n       \
    \ while (i < n) {\n            val palindrome = i\n            val reversePalindrome\
    \ = reverse(palindrome)\n            if (palindrome % 2 == 0) {\n            \
    \    evenPalindromes += palindrome\n            } else {\n                oddPalindromes\
    \ += palindrome\n            }\n            i += 2\n        }\n        val evenPalindromeCount\
    \ = evenPalindromes.size\n        val oddPalindromeCount = oddPalindromes.size\n\
    \        val evenPalindrome = evenPalindromes.toList\n        val oddPalindrome\
    \ = oddPalindromes.toList\n        val evenPalindromeTuple = evenPalindrome.toList\n\
    \        val oddPalindromeTuple = oddPalindrome.toList\n        val evenPalindromeTuple2\
    \ = evenPalindromeTuple.zipWithIndex.filter(_._1 % 2 == 0).map(_._2)\n       \
    \ val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._1 % 2 ==\
    \ 1).map(_._2)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._1\
    \ % 2 == 0).map(_._2)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._1\
    \ % 2 == 1).map(_._2)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._1\
    \ % 2 == 0).map(_._2)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._1\
    \ % 2 == 1).map(_._2)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._1\
    \ % 2 == 0).map(_._2)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zipWithIndex.filter(_._1\
    \ % 2 == 1).map(_._2)\n        val evenPalindromeTuple6 = evenPalindromeTuple5.zipWithIndex.filter(_._1\
    \ % 2 == 0).map(_._2)\n        val oddPalindromeTuple6 = oddPalindromeTuple5.zipWithIndex.filter(_._1\
    \ % 2 == 1).map(_._", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n \
    \       val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val palindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        ", "       \
    \ val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountMap\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap3 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap3 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap5 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap7 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap7 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap9 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap11 = new mutable.HashMap[Long, Long]()\n  \
    \      val oddPalindromeCountMap11 = new mutable.HashMap[Long, Long]()\n", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeSum = 0\n        val oddPalindromeSum = 0\n \
    \       val evenPalindromeSum2 = 0\n        val oddPalindromeSum2 = 0\n      \
    \  val evenPalindromeSum3 = 0\n        val oddPalindromeSum3 = 0\n        val\
    \ evenPalindromeSum4 = 0\n        val oddPalindromeSum4 = 0\n        val evenPalindromeSum5\
    \ = 0\n        val oddPalindromeSum5 = 0\n        val evenPalindromeSum6 = 0\n\
    \        val oddPalindromeSum6 = 0\n        val evenPalindromeSum7 = 0\n     \
    \   val oddPalindromeSum7 = 0\n        val evenPalindromeSum8 = 0\n        val\
    \ oddPalindromeSum8 = 0\n        val evenPalindromeSum9 = 0\n        val oddPalindromeSum9\
    \ = 0\n        val evenPalindromeSum10 = 0\n        val oddPalindromeSum10 = 0\n\
    \        val evenPalindromeSum11 = 0\n        val oddPalindromeSum11 = 0\n   \
    \     val evenPalindromeSum12 = 0\n        val oddPalindromeSum12 = 0\n      \
    \  val evenPalindromeSum13 = 0\n        val oddPalindromeSum13 = 0\n        val\
    \ evenPalindromeSum14 = 0\n        val oddPalindromeSum14 = 0\n        val evenPalindromeSum15\
    \ = 0\n        val oddPalindromeSum15 = 0\n        val evenPalindromeSum16 = 0\n\
    \        val oddPalindromeSum16 = 0\n        val evenPalindromeSum17 = 0\n   \
    \     val oddPalindromeSum17 = 0\n        val evenPalindromeSum18 = 0\n      \
    \  val oddPalindromeSum18 = 0\n        val evenPalindromeSum19 = 0\n        val\
    \ oddPalindromeSum19 = 0\n        val evenPalindromeSum20 = 0\n        val oddPalindromeSum20\
    \ = 0\n        val evenPalindromeSum21 = 0\n        val oddPalindromeSum21 = 0\n",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        var evenPalindromeCountIndex\
    \ = 0\n        var oddPalindromeCountIndex = 0\n        var evenPalindromeCountMax\
    \ = 0\n        var oddPalindromeCountMax = 0\n        var evenPalindromeCountMin\
    \ = 0\n        var oddPalindromeCountMin = 0\n        var evenPalindromeCountSum\
    \ = 0\n        var oddPalindromeCountSum = 0\n        var evenPalindromeCountSum2\
    \ = 0\n        var oddPalindromeCountSum2 = 0\n        var evenPalindromeCountSum3\
    \ = 0\n        var oddPalindromeCountSum3 = 0\n        var evenPalindromeCountSum4\
    \ = 0\n        var oddPalindromeCountSum4 = 0\n        var evenPalindromeCountSum5\
    \ = 0\n        var oddPalindromeCountSum5 = 0\n        var evenPalindromeCountSum6\
    \ = 0\n        var oddPalindromeCountSum6 = 0\n        var evenPalindromeCountSum7\
    \ = 0\n        var oddPalindromeCountSum7 = 0\n        var evenPalindromeCountSum8\
    \ = 0\n        var oddPalindromeCountSum8 = 0\n        var evenPalindromeCountSum9\
    \ = 0\n        var oddPalindromeCountSum9 = 0\n        var evenPalindromeCountSum10\
    \ = 0\n        var oddPalindromeCountSum10 = 0\n        var evenPalindromeCountSum11\
    \ = 0\n        var oddPalindromeCountSum11 = 0\n        var evenPalindromeCountSum12\
    \ = 0\n        var oddPalindromeCountSum12 = 0\n        var evenPalindromeCountSum13\
    \ = 0\n        var oddPalindromeCountSum13 = 0\n        var evenPalindromeCountSum14\
    \ = 0\n        var oddPalindromeCountSum14 = 0\n        var evenPalindromeCountSum15\
    \ = 0\n        var oddPalindromeCountSum15 = 0\n        var evenPalindromeCountSum16\
    \ = 0\n        var oddPalindromeCountSum16 = 0\n        var evenPalindromeCountSum17\
    \ = 0\n        var oddPalindromeCountSum17 = 0\n        var evenPalindromeCountSum18\
    \ = 0\n        var ", "        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        val evenPalindrome = mutable.Set[Long]()\n        val oddPalindrome =\
    \ mutable.Set[Long]()\n        val palindrome = mutable.Set[Long]()\n        val\
    \ evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount =\
    \ mutable.Set[Long]()\n        val palindromeCount = mutable.Set[Long]()\n   \
    \     val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val palindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val palindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val palindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val palindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val palindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val palindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val palindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddP", " \
    \       val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCounts = mutable.ListBuffer[Long]()\n        val oddPalindromeCounts\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCounts = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountSum = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromeCountSum = mutable.ListBuffer[Long]()\n        val palindromeCountSum\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSums = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCountSums = mutable.ListBuffer[Long]()\n        val\
    \ palindromeCountSums = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSum = mutable.ListBuffer[Long]()\n\
    \        val palindromeCountSumsSum = mutable.ListBuffer[Long]()\n        val\
    \ evenPalindromeCountSumsSums = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCountSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCountSumsSumsSum = mutable.ListBuffer[Long]()\n   \
    \     val oddPalindromeCountSumsSumsSum = mutable.ListBuffer[Long]()\n       \
    \ val palindromeCountSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenPalindromeCountSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCountSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val palindromeCountSums", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCount = 0\n      \
    \  val oddPalindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val palindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCount = 0\n\
    \        val oddPalindromeCount = 0\n        val palindromeCount = 0\n       \
    \ val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n        val\
    \ evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n        val palindromeCount\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val palindromeCount = 0\n        val evenPalindromeCount = 0\n\
    \        val oddPalindromeCount = 0\n        val evenPalindromeCount = 0\n   \
    \     val oddPalindromeCount = 0\n        val palindromeCount = 0\n        val\
    \ evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromeCount = 0\n \
    \       val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n    \
    \    val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n       \
    \ val palindromeCount = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n\
    \        val palin", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            val temp = i\n            while (temp > 0) {\n           \
    \     val temp = temp / 10\n                val remainder = temp % 10\n      \
    \          if (remainder == 0) {\n                    evenPalindromes += i\n \
    \                   even = even + 1\n                }\n                if (remainder\
    \ != 0) {\n                    oddPalindromes += i\n                    odd =\
    \ odd + 1 \n                }\n            }\n            i = i + 1\n        }\n\
    \        val evenPalindrome = evenPalindromes.toList\n        val oddPalindrome\
    \ = oddPalindromes.toList\n        val evenPalindromeTuple = evenPalindrome.zip(evenPalindrome).map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple = oddPalindrome.zip(oddPalindrome).map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple2 = evenPalindromeTuple.map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple2 = oddPalindromeTuple.map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple6 = evenPalindromeTuple5.map(x\
    \ => x._1 -> x._2)\n        val oddPalindromeTuple6 = oddPalindromeTuple5.map(x\
    \ => x._1 -> x._2)\n        val evenPalindromeTuple7 = even", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList = mutable.Set[Long]()\n        val evenPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList3 = mutable.Set[Long]()\n        val oddPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList4 = mutable.Set[Long]()\n        val evenPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList6 = mutable.Set[Long]()\n        val oddPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList7 = mutable.Set[Long]()\n        val evenPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList9 = mutable.Set[Long]()\n        val oddPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList10 = mutable.Set[Long]()\n        val evenPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList12 = mutable.Set[Long]()\n        val oddPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList13 = mutable.Set[Long]()",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x => x %\
    \ 2 != 0)\n        for (i <- evenPalindromeRange) {\n            val evenPalindrome\
    \ = i.toString\n            val oddPalindrome = i.toString.reverse\n         \
    \   if (evenPalindrome == oddPalindrome) {\n                evenPalindromes +=\
    \ i\n                evenPalindromeCount += 1\n            } else {\n        \
    \        oddPalindromes += i\n                oddPalindromeCount += 1\n      \
    \      }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "   \
    \     val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.Set[Long]()\n        val\
    \ oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromeTuple2 = Tuple2(evenPalindromeTuple,\
    \ oddPalindromeTuple)\n        val oddPalindromeTuple2 = Tuple2(evenPalindromeTuple,\
    \ oddPalindromeTuple)\n        val evenPalindromeTuple3 = Tuple2(evenPalindromeTuple2,\
    \ oddPalindromeTuple2)\n        val oddPalindromeTuple3 = Tuple2(evenPalindromeTuple2,\
    \ oddPalindromeTuple2)\n        val evenPalindromeTuple4 = Tuple2(evenPalindromeTuple3,\
    \ oddPalindromeTuple3)\n        val oddPalindromeTuple4 = Tuple2(evenPalindromeTuple3,\
    \ oddPalindromeTuple3)\n        val evenPalindromeTuple5 = Tuple2(evenPalindromeTuple4,\
    \ oddPalindromeTuple4)\n        val oddPalindromeTuple5 = Tuple2(evenPalindromeTuple4,\
    \ oddPalindromeTuple4)\n        val evenPalindromeTuple6 = Tuple2(evenPalindromeTuple5,\
    \ oddPalindromeTuple5)\n        val oddPalindromeTuple6 = Tuple2(evenPalindromeTuple5,\
    \ oddPalindromeTuple5)\n        val evenPalindromeTuple7 = Tuple2(evenPalindromeTuple6,\
    \ oddPalindromeTuple6)\n        val oddPalindromeTuple7 = Tuple2(evenPalindromeTuple6,\
    \ oddPalindromeTuple6)\n        val evenPalindromeTuple8 = Tuple2(evenPalindromeTuple7,\
    \ oddPalindromeTuple7)\n        val oddPalindromeTuple8 = Tuple2(evenPalindromeTuple7,\
    \ oddPalindromeTuple7)\n        val evenPalindromeTuple9 = Tuple2(evenPalindromeTuple8,\
    \ oddPalindromeTuple8)\n        val oddPalindromeTuple9 = Tuple2(evenPalindromeTuple8,\
    \ oddP", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountList\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList2 = mutable.Set[Long]()\n        val oddPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList3 = mutable.Set[Long]()\n        val evenPalindromeCountList4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList5 = mutable.Set[Long]()\n        val oddPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList6 = mutable.Set[Long]()\n        val evenPalindromeCountList7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList8 = mutable.Set[Long]()\n        val oddPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList9 = mutable.Set[Long]()\n        val evenPalindromeCountList10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList11 = mutable.Set[Long]()\n        val oddPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList12 = mutable.Set[Long]()\n        val evenPalindromeCountList13\
    \ = mutable.Set[Long]()", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        var evenPalindromeCountSum = 0\n        var oddPalindromeCountSum = 0\n\
    \        var evenPalindromeCountSum2 = 0\n        var oddPalindromeCountSum2 =\
    \ 0\n        var evenPalindromeCountSum3 = 0\n        var oddPalindromeCountSum3\
    \ = 0\n        var evenPalindromeCountSum4 = 0\n        var oddPalindromeCountSum4\
    \ = 0\n        var evenPalindromeCountSum5 = 0\n        var oddPalindromeCountSum5\
    \ = 0\n        var evenPalindromeCountSum6 = 0\n        var oddPalindromeCountSum6\
    \ = 0\n        var evenPalindromeCountSum7 = 0\n        var oddPalindromeCountSum7\
    \ = 0\n        var evenPalindromeCountSum8 = 0\n        var oddPalindromeCountSum8\
    \ = 0\n        var evenPalindromeCountSum9 = 0\n        var oddPalindromeCountSum9\
    \ = 0\n        var evenPalindromeCountSum10 = 0\n        var oddPalindromeCountSum10\
    \ = 0\n        var evenPalindromeCountSum11 = 0\n        var oddPalindromeCountSum11\
    \ = 0\n        var evenPalindromeCountSum12 = 0\n        var oddPalindromeCountSum12\
    \ = 0\n        var evenPalindromeCountSum13 = 0\n        var oddPalindromeCountSum13\
    \ = 0\n        var evenPalindromeCountSum14 = 0\n        var oddPalindromeCountSum14\
    \ = 0\n        var evenPalindromeCountSum15 = 0\n        var oddPalindromeCountSum15\
    \ = 0\n        var evenPalindromeCountSum16 = 0\n        var oddPalindromeCountSum16\
    \ = 0\n        var evenPalindromeCountSum17 = 0\n        var oddPalindromeCountSum17\
    \ = 0\n        var evenPalindromeCountSum18 = 0\n        var oddPalindromeCountSum18\
    \ = 0\n        var evenPalindromeCountSum19 = 0\n        var oddPalindromeCountSum19\
    \ = 0\n        var evenPalindromeCountSum20 = 0\n        var oddPalindromeCountSum20\
    \ = 0\n        var evenPalindromeCountSum21 = 0", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val palindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val palindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val palindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val palindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val palindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val palindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val palindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val palindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val palindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val palindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        var i = 0\n       \
    \ var j = 0\n        while (i < n) {\n            val currentPalindrome = i\n\
    \            val reversedPalindrome = currentPalindrome.reverse\n            while\
    \ (j < n) {\n                if (currentPalindrome == reversedPalindrome) {\n\
    \                    evenPalindromes += currentPalindrome\n                  \
    \  j++\n                } else {\n                    oddPalindromes += currentPalindrome\n\
    \                    j++\n                }\n            }\n            i += 1\n\
    \        }\n        val evenPalindromeCount = evenPalindromes.size\n        val\
    \ oddPalindromeCount = oddPalindromes.size\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        val evenPalindromeTuple\
    \ = evenPalindrome.toList\n        val oddPalindromeTuple = oddPalindrome.toList\n\
    \        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._1\
    \ == 1).map(_._2).toList\n        val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._1\
    \ == 1).map(_._2).toList\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._1\
    \ == 2).map(_._2).toList\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._1\
    \ == 2).map(_._2).toList\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._1\
    \ == 3).map(_._2).toList\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._1\
    \ == 3).map(_._2).toList\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._1\
    \ == 4).map(_._2).toList\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zipWithIndex.filter(_._1\
    \ == 4).map(_._2).toList\n        val evenPalindromeTuple6 = evenPalindromeTuple5.zipWithIndex.filter(_",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = 0\n        val\
    \ oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1, n).toList\n\
    \        val oddPalindromeRange = Range(1, n).toList.reverse\n        evenPalindromeRange\
    \ foreach { x =>\n            val evenPalindrome = x % 2 == 0\n            val\
    \ oddPalindrome = x % 2 != 0\n            if (evenPalindrome && oddPalindrome)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome && !oddPalindrome) {\n         \
    \       oddPalindromes += x\n                oddPalindromeCount += 1\n       \
    \     }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(_ % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(_\
    \ % 2 != 0)\n        for (i <- evenPalindromeRange) {\n            val reverse\
    \ = i.toString.reverse\n            if (reverse == i.toString) {\n           \
    \     evenPalindromes += i\n                evenPalindromeCount += 1\n       \
    \     }\n        }\n        for (i <- oddPalindromeRange) {\n            val reverse\
    \ = i.toString.reverse\n            if (reverse == i.toString) {\n           \
    \     oddPalindromes += i\n                oddPalindromeCount += 1\n         \
    \   }\n        }\n        Tuple2(evenPalindromeCount, oddPalindromeCount)", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountMap = new mutable.HashMap[Long, Long]()\n\
    \        val oddPalindromeCountMap = new mutable.HashMap[Long, Long]()\n     \
    \   val evenPalindromeCountMap2 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap2 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap3\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap3 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap4 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap5 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap5 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap6 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap6 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap7\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap7 = new\
    \ mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap8 = new mutable.HashMap[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = new mutable.HashMap[Long, Long]()\n\
    \        val evenPalindromeCountMap9 = new mutable.HashMap[Long, Long]()\n   \
    \     val oddPalindromeCountMap9 = new mutable.HashMap[Long, Long]()\n       \
    \ val evenPalindromeCountMap10 = new mutable.HashMap[Long, Long]()\n        val\
    \ oddPalindromeCountMap10 = new mutable.HashMap[Long, Long]()\n        val evenPalindromeCountMap11\
    \ = new mutable.HashMap[Long, Long]()\n        val oddPalindromeCountMap11 = new\
    \ mutable.HashMap[Long, Long]()\n", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val evenPalindromeCountMaps = mutable.Map[Long, mutable.Set[Long]]()\n \
    \       val oddPalindromeCountMaps = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps2 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps2 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps3 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps3 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps4 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps4 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps5 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps5 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps6 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps6 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps7 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps7 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val evenPalindromeCountMaps8 = mutable.Map[Long, mutable.Set[Long]]()\n\
    \        val oddPalindromeCountMaps8 = mutable.Map[Long, mutable.Set[Long]]",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val\
    \ oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).toList\n        val oddPalindromeRange\
    \ = Range(1, n).toList.reverse\n        evenPalindromeRange foreach { x =>\n \
    \           val evenPalindrome = x % 2 == 0\n            val oddPalindrome = x\
    \ % 2 != 0\n            if (evenPalindrome && oddPalindrome) {\n             \
    \   evenPalindromes += x\n                evenPalindromeCount += 1\n         \
    \   } else if (evenPalindrome && !oddPalindrome) {\n                oddPalindromes\
    \ += x\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount2 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount4 = mutable.Set[Long]()\n        val oddPalindromeCount4\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount5 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount7 = mutable.Set[Long]()\n        val oddPalindromeCount7\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount8 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount9 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount10 = mutable.Set[Long]()\n        val oddPalindromeCount10\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount11 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount11 = mutable.Set[Long]()\n        val evenPalindromeCount12\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount12 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount13 = mutable.Set[Long]()\n        val oddPalindromeCount13\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount14 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount14 = mutable.Set[Long]()\n        val ", "    \
    \    val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountMap = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap = mutable.Map[Long, Long]()\n   \
    \     val evenPalindromeCountMap2 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap2\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap3 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap3 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap4 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap4\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap5 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap5 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap6 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap6\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap7 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap7 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap8 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap8\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap9 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap9 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap10 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap10\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap11 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap12 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap12 = mutable.Map[", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromeCount = 0\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val palindrome = mutable.ListBuffer[Long]()\n        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromes = mutable.ListBuffer[Long]()\n        val palindromeCount\
    \ = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n        val oddPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val palindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindromes = mutable.ListBuffer[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val palindrome", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCountPerRange\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCountPerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.List",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        var i = 0\n  \
    \      while (i <= n) {\n            val p = i.toString\n            val reverseP\
    \ = p.reverse\n            if (p.equals(reverseP)) {\n                evenPalindromes\
    \ += i\n            } else {\n                oddPalindromes += i\n          \
    \  }\n            i += 1\n        }\n        val evenPalindrome = evenPalindromes.toList\n\
    \        val oddPalindrome = oddPalindromes.toList\n        return (evenPalindrome.size,\
    \ oddPalindrome.size)", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountMap = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap2 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap2 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap3 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap3\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap4 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap4 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap5 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap5\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap6 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap6 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap7 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap7\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap8 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap8 = mutable.Map[Long, Long]()\n  \
    \      val evenPalindromeCountMap9 = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap9\
    \ = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap10 = mutable.Map[Long,\
    \ Long]()\n        val oddPalindromeCountMap10 = mutable.Map[Long, Long]()\n \
    \       val evenPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val\
    \ oddPalindromeCountMap11 = mutable.Map[Long, Long]()\n        val evenPalindromeCountMap12\
    \ = mutable.Map[Long, Long]()\n        val oddPalindromeCountMap12 = mutable.Map[",
  "        val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n       \
    \ val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).toList\n        val oddPalindromeRange = Range(1, n).toList.reverse\n   \
    \     evenPalindromeRange foreach { x =>\n            val evenPalindrome = x %\
    \ 2 == 0\n            val oddPalindrome = x % 2 != 0\n            if (evenPalindrome\
    \ && oddPalindrome) {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else if (evenPalindrome) {\n                oddPalindromes\
    \ += x\n                oddPalindromeCount += 1\n            }\n        }\n  \
    \      (evenPalindromeCount, oddPalindromeCount)", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val palindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindrome = mutable.ListBuffer.empty[Long]\n        val oddPalindrome\
    \ = mutable.ListBuffer.empty[Long]\n        val palindrome = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromes = mutable.ListBuffer.", "        val evenPalindromes\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount14 = ", "     \
    \   val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromes = mutable.Set[Long]()\n        val palindromeCount = 0\n\
    \        val palindromeCountEven = 0\n        val palindromeCountOdd = 0\n   \
    \     val evenPalindromeCountEven = 0\n        val evenPalindromeCountOdd = 0\n\
    \        val oddPalindromeCountEven = 0\n        val oddPalindromeCountOdd = 0\n\
    \        val palindromeCountEvenEven = 0\n        val palindromeCountEvenOdd =\
    \ 0\n        val palindromeCountOddEven = 0\n        val palindromeCountOddOdd\
    \ = 0\n        val palindromeCountEvenEvenEven = 0\n        val palindromeCountEvenEvenOdd\
    \ = 0\n        val palindromeCountEvenOddEven = 0\n        val palindromeCountEvenOddOdd\
    \ = 0\n        val palindromeCountOddEvenEven = 0\n        val palindromeCountOddEvenOdd\
    \ = 0\n        val palindromeCountOddOddEven = 0\n        val palindromeCountOddOddOdd\
    \ = 0\n        val palindromeCountEvenEvenEvenEven = 0\n        val palindromeCountEvenEvenEvenOdd\
    \ = 0\n        val palindromeCountEvenEvenOddEven = 0\n        val palindromeCountEvenEvenOddOdd\
    \ = 0\n        val palindromeCountEvenOddEvenEven = 0\n        val palindromeCountEvenOddEvenOdd\
    \ = 0\n        val palindromeCountEvenOddOddEven = 0\n        val palindromeCountEvenOddOddOdd\
    \ = 0\n        val palindromeCountOddEvenEvenEven = 0\n        val palindromeCountOddEvenEvenOdd\
    \ = 0\n        val palindromeCountOddEvenOddEven = 0\n        val palindromeCountOddOddEvenEven\
    \ = 0\n        val palindromeCountOddOddEvenOdd = 0\n        val palindromeCountOddOddOddEven\
    \ = 0\n        val palindrome", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val palindromes = mutable.Set[Long]()\n\
    \        val palindromeCount = 0\n        val evenPalindromeCount2 = 0\n     \
    \   val oddPalindromeCount2 = 0\n        val palindromes2: mutable.Set[Long] =\
    \ mutable.Set()\n        val palindromeCount2 = 0\n        val evenPalindromeCount3\
    \ = 0\n        val oddPalindromeCount3 = 0\n        val palindromes3: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount3 = 0\n        val evenPalindromeCount4\
    \ = 0\n        val oddPalindromeCount4 = 0\n        val palindromes4: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount4 = 0\n        val evenPalindromeCount5\
    \ = 0\n        val oddPalindromeCount5 = 0\n        val palindromes5: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount5 = 0\n        val evenPalindromeCount6\
    \ = 0\n        val oddPalindromeCount6 = 0\n        val palindromes6: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount6 = 0\n        val evenPalindromeCount7\
    \ = 0\n        val oddPalindromeCount7 = 0\n        val palindromes7: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount7 = 0\n        val evenPalindromeCount8\
    \ = 0\n        val oddPalindromeCount8 = 0\n        val palindromes8: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount8 = 0\n        val evenPalindromeCount9\
    \ = 0\n        val oddPalindromeCount9 = 0\n        val palindromes9: mutable.Set[Long]\
    \ = mutable.Set()\n        val palindromeCount9 = 0\n        val evenPalindromeCount10\
    \ = 0\n        val oddPalindromeCount10 = 0\n        val palindromes10: ", " \
    \       val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val palin", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                    i += 1\n                    j += 1\n             \
    \   } else {\n                    i += 1\n                    j += 1\n       \
    \         }\n            }\n            even = evenPalindromes.count(x => x %\
    \ 2 == 0)\n            odd = oddPalindromes.count(x => x % 2 == 1)\n         \
    \   evenPalindromes.clear()\n            oddPalindromes.clear()\n            i\
    \ += 1\n            j += 1\n        }\n        Tuple2(even, odd)", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val evenPalindromeRange = Range(1, n).toList\n        val oddPalindromeRange\
    \ = Range(1, n).toList.reverse\n        for (i <- evenPalindromeRange) {\n   \
    \         val evenPalindrome = i.toString.reverse\n            if (evenPalindrome\
    \ == i.toString) {\n                evenPalindromeCount += 1\n            } else\
    \ {\n                evenPalindromes += i\n            }\n        }\n        for\
    \ (i <- oddPalindromeRange) {\n            val oddPalindrome = i.toString.reverse\n\
    \            if (oddPalindrome == i.toString) {\n                oddPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += i\n          \
    \  }\n        }\n        (evenPalindromeCount, oddPalindromeCount)", "       \
    \ val evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           val palindrome = i.toString\n            val reversePalindrome = reverse(palindrome)\n\
    \            if (palindrome == reversePalindrome) {\n                evenPalindromes\
    \ += i\n            } else {\n                oddPalindromes += i\n          \
    \  }\n            i += 1\n        }\n        val evenPalindromeCount = evenPalindromes.size\n\
    \        val oddPalindromeCount = oddPalindromes.size\n        val evenPalindromeTuple\
    \ = evenPalindromes.toList\n        val oddPalindromeTuple = oddPalindromes.toList\n\
    \        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zipWithIndex.filter(_._2\
    \ == oddPalindromeCount).map(_._1)\n        val evenPalindromeTuple6 = evenPalindromeTuple5.zipWithIndex.filter(_._2\
    \ == evenPalindromeCount).map(_._1)\n        val oddPalindromeTuple6 = oddPalindromeTuple5.",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairs = mutable.Set[Tuple2[Long, Long]]()\n  \
    \      val oddPalindromeCountPairs = mutable.Set[Tuple2[Long, Long]]()\n     \
    \   val evenPalindromeCountPairsSorted = mutable.Set[Tuple2[Long, Long]]()\n \
    \       val oddPalindromeCountPairsSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val oddPalindromeCountPairsSortedSorted = mutable.Set[Tuple2[Long, Long]]()\n\
    \        val evenPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSorted = mutable.Set[Tuple2[Long,\
    \ Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val evenPalindromeCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]()\n        val oddPalindromeCountPairsSortedSortedSortedSortedSortedSorted\
    \ = mutable.Set[Tuple2[Long, Long]]", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindrome\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindrome = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount = mutable.ListBuffer[Long]()\n        val oddPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount2 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount8 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer", "        val evenPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount14\
    \ = ", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindrome = mutable.ListBuffer[Long]()\n\
    \        val oddPalindrome = mutable.ListBuffer[Long]()\n        val palindrome\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromes = mutable.ListBuffer",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n       \
    \ val evenPalindrome = mutable.Set[Long]()\n        val oddPalindrome = mutable.Set[Long]()\n\
    \        val palindrome = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val palindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val palindromeCount2 = mutable.Set[Long]()\n        val evenPalindromeCount3\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount3 = mutable.Set[Long]()\n\
    \        val palindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val palindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val palindromeCount5 = mutable.Set[Long]()\n        val evenPalindromeCount6\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount6 = mutable.Set[Long]()\n\
    \        val palindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val palindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val palindromeCount8 = mutable.Set[Long]()\n        val evenPalindromeCount9\
    \ = mutable.Set[Long]()\n        val oddP", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var evenPalindromeCount\
    \ = 0\n        var oddPalindromeCount = 0\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        var evenPalindromeCount = 0\n        var oddPalindromeCount\
    \ = 0\n        while(i < n) {\n            evenPalindromeCount += 1\n        \
    \    oddPalindromeCount += 1\n            evenPalindromes += i\n            oddPalindromes\
    \ += i\n            i += 1\n        }\n        while(j < n) {\n            evenPalindromeCount\
    \ += 1\n            oddPalindromeCount += 1\n            evenPalindromes += j\n\
    \            oddPalindromes += j\n            j += 1\n        }\n        while(k\
    \ < (n - 1)) {\n            evenPalindromeCount += 1\n            oddPalindromeCount\
    \ += 1\n            evenPalindromes += k\n            oddPalindromes += k\n  \
    \          k += 1\n        }\n        while(i < n) {\n            evenPalindromeCount\
    \ += 1\n            oddPalindromeCount += 1\n            evenPalindromes += i\n\
    \            oddPalindromes += i\n            i += 1\n        }\n        while(j\
    \ < n) {\n            evenPalindromeCount += 1\n            oddPalindromeCount\
    \ += 1\n            evenPalindromes += j\n            oddPalindromes += j\n  \
    \          j += 1\n        }\n        while(k < (n - 1)) {\n            evenPalindromeCount\
    \ += 1\n            oddPalindromeCount += 1\n            evenPalindromes += k\n\
    \            oddPalindromes += k\n            k += 1\n        }\n        while(i\
    \ < n) {\n            evenPalindromeCount += 1\n            oddPalindromeCount\
    \ += 1\n            evenPalindromes += i\n            oddPalindromes += i\n  \
    \          i += 1\n        }\n        while(j < n) {\n            evenPalindromeCount\
    \ += 1\n            oddPalindromeCount += 1\n            evenPalindromes += j\n\
    \            oddPalindromes += j\n            j += 1\n        }\n        while(k\
    \ < (", "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSetSet = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSetSetSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSetSetSet = mutable.Set[Long]()\n\
    \        val oddP", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = Range(1,\
    \ n).filter(x => x % 2 == 0)\n        val oddPalindromeRange = Range(1, n).filter(x\
    \ => x % 2 != 0)\n        evenPalindromeRange foreach { x =>\n            val\
    \ reversed = x.reverse\n            if (x == reversed) {\n                evenPalindromes\
    \ += x\n                evenPalindromeCount += 1\n            }\n        }\n \
    \       oddPalindromeRange foreach { x =>\n            val reversed = x.reverse\n\
    \            if (x == reversed) {\n                oddPalindromes += x\n     \
    \           oddPalindromeCount += 1\n            }\n        }\n        (evenPalindromeCount,\
    \ oddPalindromeCount)", "        val evenPalindromes = mutable.Set[Long]()\n \
    \       val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSet = mutable.Set[Long]()\n        val oddPalindromeCountSet\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountSetSet = mutable.Set[Long]()\n\
    \        val oddPalindromeCountSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n\
    \        val evenPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountSetSetSetSet = mutable.Set[Long]()\n        val evenPalindromeCountSetSetSetSet\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountSetSetSetSet = mutable.Set[Long]",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val palindromes = mutable.Set[Long]()\n        val palindromeCount\
    \ = 0\n        val evenPalindromeCount2 = 0\n        val oddPalindromeCount2 =\
    \ 0\n        val palindromes2: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount2 = 0\n        val evenPalindromeCount3 = 0\n        val oddPalindromeCount3\
    \ = 0\n        val palindromes3: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount3 = 0\n        val evenPalindromeCount4 = 0\n        val oddPalindromeCount4\
    \ = 0\n        val palindromes4: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount4 = 0\n        val evenPalindromeCount5 = 0\n        val oddPalindromeCount5\
    \ = 0\n        val palindromes5: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount5 = 0\n        val evenPalindromeCount6 = 0\n        val oddPalindromeCount6\
    \ = 0\n        val palindromes6: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount6 = 0\n        val evenPalindromeCount7 = 0\n        val oddPalindromeCount7\
    \ = 0\n        val palindromes7: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount7 = 0\n        val evenPalindromeCount8 = 0\n        val oddPalindromeCount8\
    \ = 0\n        val palindromes8: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount8 = 0\n        val evenPalindromeCount9 = 0\n        val oddPalindromeCount9\
    \ = 0\n        val palindromes9: mutable.Set[Long] = mutable.Set()\n        val\
    \ palindromeCount9 = 0\n        val evenPalindromeCount10 = 0\n        val oddPalindromeCount10\
    \ = 0\n        val palindromes10: ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeRange = 1\
    \ to n\n        val oddPalindromeRange = 1 to n\n        evenPalindromeRange foreach\
    \ { x =>\n            val reversed = x.reverse\n            if (x == reversed)\
    \ {\n                evenPalindromes += x\n                evenPalindromeCount\
    \ += 1\n            } else {\n                oddPalindromes += x\n          \
    \      oddPalindromeCount += 1\n            }\n        }\n        evenPalindromeCount\
    \ match {\n            case 0 => (1l, 0l)\n            case 1 => (1l, 1l)\n  \
    \          case 2 => (2l, 0l)\n            case 3 => (2l, 1l)\n            case\
    \ 4 => (4l, 0l)\n            case 5 => (4l, 1l)\n            case 6 => (6l, 0l)\n\
    \            case 7 => (6l, 1l)\n            case 8 => (8l, 0l)\n            case\
    \ 9 => (8l, 1l)\n            case 10 => (10l, 0l)\n            case 11 => (10l,\
    \ 1l)\n            case 12 => (12l, 0l)\n            case 13 => (12l, 1l)\n  \
    \          case 14 => (14l, 0l)\n            case 15 => (14l, 1l)\n          \
    \  case 16 => (16l, 0l)\n            case 17 => (16l, 1l)\n            case 18\
    \ => (18l, 0l)\n            case 19 => (18l, 1l)\n            case 20 => (20l,\
    \ 0l)\n            case 21 => (20l, 1l)\n            case 22 => (22l, 0l)\n  \
    \          case 23 => (22l, 1l)\n            case 24 => (24l, 0l)\n          \
    \  case 25 => (24l, 1l)\n            case 26 => (26l, 0l)\n            case 27\
    \ => (26l, 1l)\n            case 28 => (28l, 0l)\n            case 29 => (28l,\
    \ 1l)\n            case 30 => (30l, 0l)\n            case 31 => (30l, 1l)\n  \
    \          case 32 => (32l, 0l)\n            case 33 => (32l, 1l)\n          \
    \  case 34 => (34l, 0l)\n            case 35 => (34l, 1l)\n            case 36\
    \ => (36l, 0l)\n            case 37 => (36l, 1l)\n            case 38 => (38l,\
    \ 0l)\n            case 39 => (38l, 1l)\n            case 40 => (40l, 0l)\n  \
    \          case 41 => (40l, 1l)\n            case 42 => (42l, 0l)\n          \
    \  case 43 => (42l, 1l)", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val palindromes = mutable.Set[Long]()\n\
    \        val evenPalindromeCount = 0\n        val oddPalindromeCount = 0\n   \
    \     val palindromeCount = 0\n        val evenPalindromeCount2 = 0\n        val\
    \ oddPalindromeCount2 = 0\n        val palindromeCount2 = 0\n        val evenPalindromeCount3\
    \ = 0\n        val oddPalindromeCount3 = 0\n        val palindromeCount3 = 0\n\
    \        val evenPalindromeCount4 = 0\n        val oddPalindromeCount4 = 0\n \
    \       val palindromeCount4 = 0\n        val evenPalindromeCount5 = 0\n     \
    \   val oddPalindromeCount5 = 0\n        val palindromeCount5 = 0\n        val\
    \ evenPalindromeCount6 = 0\n        val oddPalindromeCount6 = 0\n        val palindromeCount6\
    \ = 0\n        val evenPalindromeCount7 = 0\n        val oddPalindromeCount7 =\
    \ 0\n        val palindromeCount7 = 0\n        val evenPalindromeCount8 = 0\n\
    \        val oddPalindromeCount8 = 0\n        val palindromeCount8 = 0\n     \
    \   val evenPalindromeCount9 = 0\n        val oddPalindromeCount9 = 0\n      \
    \  val palindromeCount9 = 0\n        val evenPalindromeCount10 = 0\n        val\
    \ oddPalindromeCount10 = 0\n        val palindromeCount10 = 0\n        val evenPalindromeCount11\
    \ = 0\n        val oddPalindromeCount11 = 0\n        val palindromeCount11 = 0\n\
    \        val evenPalindromeCount12 = 0\n        val oddPalindromeCount12 = 0\n\
    \        val palindromeCount12 = 0\n        val evenPalindromeCount13 = 0\n  \
    \      val oddPalindromeCount13 = 0\n        val palindromeCount13 = 0\n     \
    \   val evenPalindromeCount14 = 0\n        val oddPalindromeCount14 = 0\n    \
    \    val palindromeCount14 = 0\n        val evenPalindromeCount15 = 0\n      \
    \  val oddPalindromeCount15", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindrome = n / 2\n        val oddPalindrome\
    \ = n - evenPalindrome\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindrome = n / 2\n        val oddPalindrome\
    \ = n - evenPalindrome\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindromes = mutable.Set[Long]()\n   \
    \     val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val oddPalindromeTuple = Tuple2(evenPalindromeCount,\
    \ oddPalindromeCount)\n        val evenPalindrome = n / 2\n        val oddPalindrome\
    \ = n - evenPalindrome\n        val evenPalindromeTuple = Tuple2(evenPalindro",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCounts\
    \ = mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[Long]()\n        val oddPalindromeCountPair\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairs = mutable.Set[Long]()\n        val\
    \ oddPalindromeCountPairsPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairs = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountPairsPairsPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairsPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n \
    \       val oddPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n   \
    \     val evenPalindromeCountPairsPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairsPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairsPairsPairs = mutable.Set[Long]()\n",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromes = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val\
    \ oddPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < n) {\n            val p = i * i\n            val even = p\
    \ / 2\n            val odd = p % 2\n            if (even % 2 == 0 && odd % 2 ==\
    \ 0) {\n                evenPalindromes += even\n                oddPalindromes\
    \ += odd\n            }\n            i += 1\n        }\n        val evenPalindromeCount\
    \ = evenPalindromes.size\n        val oddPalindromeCount = oddPalindromes.size\n\
    \        val evenPalindrome = evenPalindromes.toList\n        val oddPalindrome\
    \ = oddPalindromes.toList\n        val evenPalindromeTuple = evenPalindrome.toList\n\
    \        val oddPalindromeTuple = oddPalindrome.toList\n        val evenPalindromeTuple2\
    \ = evenPalindromeTuple.map(x => (x, x))\n        val oddPalindromeTuple2 = oddPalindromeTuple.map(x\
    \ => (x, x))\n        val evenPalindromeTuple3 = evenPalindromeTuple2.map(x =>\
    \ (x._1, x._2))\n        val oddPalindromeTuple3 = oddPalindromeTuple2.map(x =>\
    \ (x._1, x._2))\n        val evenPalindromeTuple4 = evenPalindromeTuple3.map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple4 = oddPalindromeTuple3.map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple5 = evenPalindromeTuple4.map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple5 = oddPalindromeTuple4.map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple6 = evenPalindromeTuple5.map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple6 = oddPalindromeTuple5.map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple7 = evenPalindromeTuple6.map(x\
    \ => (x._1, x._2))\n        val oddPalindromeTuple7 = oddPalindromeTuple6.map(x\
    \ => (x._1, x._2))\n        val evenPalindromeTuple8 = evenPalin", "        val\
    \ evenPalindromes = mutable.ListBuffer[Long]()\n        val oddPalindromes = mutable.ListBuffer[Long]()\n\
    \        var evenPalindrome = 0\n        var oddPalindrome = 0\n        var i\
    \ = 0\n        var j = 0\n        while (i < n) {\n            while (j < n) {\n\
    \                if (i % 10 == j % 10) {\n                    evenPalindromes\
    \ += i\n                    oddPalindromes += j\n                    evenPalindrome\
    \ = evenPalindrome + 1\n                    oddPalindrome = oddPalindrome + 1\n\
    \                }\n                j++\n            }\n            i = 0\n  \
    \          j = 0\n        }\n        evenPalindromes.toList match {\n        \
    \    case Nil => (evenPalindromes.toList zip oddPalindromes.toList).map { case\
    \ (ev, od) => (ev, od) }\n            case _ => (evenPalindromes.toList zip oddPalindromes.toList).map\
    \ { case (ev, od) => (ev, od) }\n        }", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        val evenPalindromeCount\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount2 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount3 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount4\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount4 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount5 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount5\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount6 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount6 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount7\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount7 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount8 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount9 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount10\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount10 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount11 = mutable.ListBuffer[Long]()\n        val oddPalindromeCount11\
    \ = mutable.ListBuffer[Long]()\n        val evenPalindromeCount12 = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromeCount12 = mutable.ListBuffer[Long]()\n        val evenPalindromeCount13\
    \ = mutable.ListBuffer[Long]()\n        val oddPalindromeCount13 = mutable.ListBuffer[Long]()\n\
    \        val evenPalindromeCount14 = ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCount2 = mutable.Set[Long]()\n        val oddPalindromeCount2\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount3 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount3 = mutable.Set[Long]()\n        val evenPalindromeCount4\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount4 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount5 = mutable.Set[Long]()\n        val oddPalindromeCount5\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount6 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount6 = mutable.Set[Long]()\n        val evenPalindromeCount7\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount7 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount8 = mutable.Set[Long]()\n        val oddPalindromeCount8\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount9 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount9 = mutable.Set[Long]()\n        val evenPalindromeCount10\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount10 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount11 = mutable.Set[Long]()\n        val oddPalindromeCount11\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount12 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount12 = mutable.Set[Long]()\n        val evenPalindromeCount13\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount13 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount14 = mutable.Set[Long]()\n        val oddPalindromeCount14\
    \ = mutable.Set[Long]()\n        val ", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            val p = i\n         \
    \   val q = n - 1\n            while (p < q) {\n                val a = p\n  \
    \              val b = q\n                val c = math.min(a, b)\n           \
    \     val d = math.max(a, b)\n                if (palindromes(c) == palindromes(d)\
    \ && palindromes(c) != 0) {\n                    evenPalindromes += c\n      \
    \              evenPalindromeCount += palindromes(c)\n                }\n    \
    \            if (palindromes(d) == palindromes(c) && palindromes(d) != 0) {\n\
    \                    oddPalindromes += d\n                    oddPalindromeCount\
    \ += palindromes(d)\n                }\n                p += 1\n             \
    \   q -= 1\n            }\n            i += 1\n        }\n        val evenPalindrome\
    \ = evenPalindromes.toList\n        val oddPalindrome = oddPalindromes.toList\n\
    \        val evenPalindromeCount = evenPalindromeCount.toList\n        val oddPalindromeCount\
    \ = oddPalindromeCount.toList\n        val evenPalindromeTuple = evenPalindrome.zip(evenPalindromeCount).toList\n\
    \        val oddPalindromeTuple = oddPalindrome.zip(oddPalindromeCount).toList\n\
    \        val evenPalindromeTuple2 = evenPalindromeTuple.zip(evenPalindromeTuple).toList\n\
    \        val oddPalindromeTuple2 = oddPalindromeTuple.zip(oddPalindromeTuple).toList\n\
    \        val evenPalindromeTuple3 = evenPalindromeTuple2.zip(evenPalindromeTuple2).toList\n\
    \        val oddPalindromeTuple3 = oddPalindromeTuple2.zip(oddPalindromeTuple2).toList\n\
    \        val evenPalindromeTuple4 = evenPalindromeTuple3.zip(evenPalindromeTuple3).toList\n\
    \        val oddPalindromeTuple4 = oddPalindromeTuple3.zip(oddPalindromeTuple3).toList\n\
    \        val evenPalindro", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = 0\n        val oddPalindromeCount = 0\n        val evenPalindromeCounts =\
    \ mutable.Set[Long]()\n        val oddPalindromeCounts = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPair = mutable.Set[(Long, Long)]()\n        val\
    \ oddPalindromeCountPair = mutable.Set[(Long, Long)]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[(Long, Long)]()\n        val oddPalindromeCountPairs = mutable.Set[(Long,\
    \ Long)]()\n        val evenPalindromeCountPairsSet = mutable.Set[(Long, Long)]()\n\
    \        val oddPalindromeCountPairsSet = mutable.Set[(Long, Long)]()\n      \
    \  val evenPalindromeCountPairsSetSet = mutable.Set[(Long, Long)]()\n        val\
    \ oddPalindromeCountPairsSetSet = mutable.Set[(Long, Long)]()\n        val evenPalindromeCountPairsSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val oddPalindromeCountPairsSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val evenPalindromeCountPairsSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val oddPalindromeCountPairsSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val evenPalindromeCountPairsSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val oddPalindromeCountPairsSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val evenPalindromeCountPairsSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val oddPalindromeCountPairsSetSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val evenPalindromeCountPairsSetSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val oddPalindromeCountPairsSetSetSetSetSet\
    \ = mutable.Set[(Long, Long)]()\n        val evenPalin", "        val evenPalindromes\
    \ = mutable.Set[Long]()\n        val oddPalindromes = mutable.Set[Long]()\n  \
    \      val evenPalindromeCount = mutable.Set[Long]()\n        val oddPalindromeCount\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList = mutable.Set[Long]()\n        val evenPalindromeCountList2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList3 = mutable.Set[Long]()\n        val oddPalindromeCountList3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList4 = mutable.Set[Long]()\n        val evenPalindromeCountList5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList6 = mutable.Set[Long]()\n        val oddPalindromeCountList6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList7 = mutable.Set[Long]()\n        val evenPalindromeCountList8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList9 = mutable.Set[Long]()\n        val oddPalindromeCountList9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCountList10 = mutable.Set[Long]()\n        val evenPalindromeCountList11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountList11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCountList12 = mutable.Set[Long]()\n        val oddPalindromeCountList12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountList13 = mutable.Set[Long]()",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = mutable.Set[Long]()\n\
    \        val oddPalindromeCount = mutable.Set[Long]()\n        val evenPalindromeCount2\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount2 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount3 = mutable.Set[Long]()\n        val oddPalindromeCount3\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount4 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount4 = mutable.Set[Long]()\n        val evenPalindromeCount5\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount5 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount6 = mutable.Set[Long]()\n        val oddPalindromeCount6\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount7 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount7 = mutable.Set[Long]()\n        val evenPalindromeCount8\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount8 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount9 = mutable.Set[Long]()\n        val oddPalindromeCount9\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount10 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount10 = mutable.Set[Long]()\n        val evenPalindromeCount11\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount11 = mutable.Set[Long]()\n\
    \        val evenPalindromeCount12 = mutable.Set[Long]()\n        val oddPalindromeCount12\
    \ = mutable.Set[Long]()\n        val evenPalindromeCount13 = mutable.Set[Long]()\n\
    \        val oddPalindromeCount13 = mutable.Set[Long]()\n        val evenPalindromeCount14\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount14 = mutable.Set[Long]()\n\
    \        val ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n  \
    \      val oddPalindromes = mutable.ListBuffer[Long]()\n        val palindromes\
    \ = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n \
    \           val x = i\n            val y = i\n            val z = i\n        \
    \    val w = i\n            val a = i\n            val b = i\n            val\
    \ c = i\n            val d = i\n            val e = i\n            val f = i\n\
    \            val g = i\n            val h = i\n            val i = i\n       \
    \     val j = i\n            val k = i\n            val l = i\n            val\
    \ m = i\n            val n = i\n            val o = i\n            val p = i\n\
    \            val q = i\n            val r = i\n            val s = i\n       \
    \     val t = i\n            val u = i\n            val v = i\n            val\
    \ w = i\n            val x = i\n            val y = i\n            val z = i\n\
    \            val a = i\n            val b = i\n            val c = i\n       \
    \     val d = i\n            val e = i\n            val f = i\n            val\
    \ g = i\n            val h = i\n            val i = i\n            val j = i\n\
    \            val k = i\n            val l = i\n            val m = i\n       \
    \     val n = i\n            val o = i\n            val p = i\n            val\
    \ q = i\n            val r = i\n            val s = i\n            val t = i\n\
    \            val u = i\n            val v = i\n            val w = i\n       \
    \     val x = i\n            val y = i\n            val z = i\n            val\
    \ a = i\n            val b = i\n            val c = i\n            val d = i\n\
    \            val e = i\n            val f = i\n            val g = i\n       \
    \     val h = i\n            val i = i\n            val j = i\n            val\
    \ k = i\n            val l = i\n            val m = i\n            val n = i\n\
    \            val o = i\n            val p = i\n            val q = i\n       \
    \     val r = i\n            val s = i\n            val t = i\n            val\
    \ u = i\n            val v = i\n            val w = i\n            val x = i\n\
    \            val y = i\n            val z = i\n            val a = i\n       \
    \     val b = i\n            val c = i\n            val d = i\n            val\
    \ e = i\n            val f = i\n            val g = i\n            val h = i\n\
    \            val i = i\n", "        val evenPalindromes = mutable.Set[Long]()\n\
    \        val oddPalindromes = mutable.Set[Long]()\n        val evenPalindromeCount\
    \ = mutable.Set[Long]()\n        val oddPalindromeCount = mutable.Set[Long]()\n\
    \        val evenPalindromeCounts = mutable.Set[Long]()\n        val oddPalindromeCounts\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPair = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPair = mutable.Set[Long]()\n        val evenPalindromeCountPairs\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairs = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPair = mutable.Set[Long]()\n        val oddPalindromeCountPairsPair\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairs = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPairsPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairs = mutable.Set[Long]()\n      \
    \  val oddPalindromeCountPairsPairsPairs = mutable.Set[Long]()\n        val evenPalindromeCountPairsPairsPairsPair\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPairsPairsPairsPair = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n \
    \       val oddPalindromeCountPairsPairsPairsPair = mutable.Set[Long]()\n    \
    \    val evenPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n     \
    \   val oddPalindromeCountPairsPairsPairsPair = mutable.Set[Long]()\n        val\
    \ evenPalindromeCountPairsPairsPairsPairs = mutable.Set[Long]()\n        val oddPalindro",
  "        val evenPalindromes = mutable.Set[Long]()\n        val oddPalindromes =\
    \ mutable.Set[Long]()\n        val evenPalindromeCount = 0\n        val oddPalindromeCount\
    \ = 0\n        val evenPalindromeCountPerRange = mutable.Set[Long]()\n       \
    \ val oddPalindromeCountPerRange = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRange = mutable.Set[Long]()\n\
    \        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val evenPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRangePerRange\
    \ = mutable.Set[Long]()\n        val oddPalindromeCountPerRangePerRangePerRangePerRangePerRangePerRangePer",
  "        val evenPalindromes = mutable.ListBuffer.empty[Long]\n        val oddPalindromes\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount2 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount3 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount4 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount6 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount8 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount10 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount12 = mutable.ListBuffer.empty[Long]\n        val oddPalindromeCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenPalindromeCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddPalindromeCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ evenPalindromeCount14 = ", "        val evenPalindromes = mutable.ListBuffer[Long]()\n\
    \        val oddPalindromes = mutable.ListBuffer[Long]()\n        var even = 0\n\
    \        var odd = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ n) {\n            while (j < n) {\n                if (i % 10 == j % 10) {\n\
    \                    evenPalindromes += i\n                    oddPalindromes\
    \ += j\n                }\n                j += 1\n            }\n           \
    \ i += 1\n            evenPalindromes += i\n            oddPalindromes += i\n\
    \        }\n        val evenPalindromeCount = evenPalindromes.size\n        val\
    \ oddPalindromeCount = oddPalindromes.size\n        val evenPalindromeTuple =\
    \ evenPalindromes.toList\n        val oddPalindromeTuple = oddPalindromes.toList\n\
    \        val evenPalindromeTuple2 = evenPalindromeTuple.zipWithIndex.filter(_._1\
    \ == evenPalindromeCount).map(_._2)\n        val oddPalindromeTuple2 = oddPalindromeTuple.zipWithIndex.filter(_._1\
    \ == oddPalindromeCount).map(_._2)\n        val evenPalindromeTuple3 = evenPalindromeTuple2.zipWithIndex.filter(_._1\
    \ == evenPalindromeCount).map(_._2)\n        val oddPalindromeTuple3 = oddPalindromeTuple2.zipWithIndex.filter(_._1\
    \ == oddPalindromeCount).map(_._2)\n        val evenPalindromeTuple4 = evenPalindromeTuple3.zipWithIndex.filter(_._1\
    \ == evenPalindromeCount).map(_._2)\n        val oddPalindromeTuple4 = oddPalindromeTuple3.zipWithIndex.filter(_._1\
    \ == oddPalindromeCount).map(_._2)\n        val evenPalindromeTuple5 = evenPalindromeTuple4.zipWithIndex.filter(_._1\
    \ == evenPalindromeCount).map(_._2)\n        val oddPalindromeTuple5 = oddPalindromeTuple4.zipWithIndex.filter(_._1\
    \ == oddPalindromeCount).map(_._2)\n        val evenPalindromeTuple6 = evenPalindromeTuple5.zipWithIndex.filter(_._1\
    \ == evenPalindromeCount).map(_._2)\n        val oddPalindro"]
stop_tokens:
- "\n    }\n"
