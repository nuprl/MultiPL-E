language: scala
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 3\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3h7ub4_.scala:25)\n\tat Problem.main(tmpu3h7ub4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 0l)\n        fib4.put(7, 0l)\n \
    \       fib4.put(8, 2l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n \
    \       fib4.put(11, 0l)\n        fib4.put(12, 2l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 2l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 2l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 2l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 2l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 2l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 2l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 2l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 2l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 2l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 2l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 2l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 2l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeb9n6z6k.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpeb9n6z6k.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](4).fill(0)\n        fib4(0) += 1\n        fib4(1)\
    \ += 1\n        fib4(2) += 1\n        fib4(3) += 1\n        fib4(n) = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1l2er_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m).fill(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(nl)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl4e54iw2.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(8, 20l)\n        fib4.put(9, 34l)\n        fib4.put(10, 56l)\n\
    \        fib4.put(11, 89l)\n        fib4.put(12, 144l)\n        fib4.put(13, 233l)\n\
    \        fib4.put(14, 377l)\n        fib4.put(15, 610l)\n        fib4.put(16,\
    \ 987l)\n        fib4.put(17, 1597l)\n        fib4.put(18, 2584l)\n        fib4.put(19,\
    \ 4181l)\n        fib4.put(20, 6765l)\n        fib4.put(21, 10946l)\n        fib4.put(22,\
    \ 17711l)\n        fib4.put(23, 28657l)\n        fib4.put(24, 51421l)\n      \
    \  fib4.put(25, 82311l)\n        fib4.put(26, 134669l)\n        fib4.put(27, 218922l)\n\
    \        fib4.put(28, 461369l)\n        fib4.put(29, 750253l)\n        fib4.put(30,\
    \ 1213967l)\n        fib4.put(31, 1964186l)\n        fib4.put(32, 3932428l)\n\
    \        fib4.put(33, 6346583l)\n        fib4.put(34, 10233487l)\n        fib4.put(35,\
    \ 15848951l)\n        fib4.put(36, 25776296l)\n        fib4.put(37, 41399811l)\n\
    \        fib4.put(38, 67749007l)\n        fib4.put(39, 104079215l)\n        fib4.put(40,\
    \ 177893171l)\n        fib4.put(41, 286577300l)\n        fib4.put(42, 514229566l)\n\
    \        fib4.put(43, 823115319l)\n        fib4.put(44, 134669400l)\n        fib4.put(45,\
    \ 218922994l)\n        fib4.put(46, 461369441l)\n        fib4.put(47, 750253253l)\n\
    \        fib4.put(48, 1213967427l)\n        fib4.put(49, 1964186100l)\n      \
    \  fib4.put(50, 3932427883l)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pzfspxx.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9gxens1.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(n, (fib4.get(n-1) + fib4.get(n-2) + fib4.get(n-3) + fib4.get(n-4)))\n\
    \        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6v56v_h6.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]\n        fib4 += 0\n        fib4 += 0\n    \
    \    fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvklqbyru.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(4) = 0\n        fib4(5) =\
    \ 0\n        fib4(6) = 0\n        fib4(7) = 0\n        fib4(8) = 0\n        fib4(9)\
    \ = 0\n        fib4(10) = 0\n        fib4(11) = 0\n        fib4(12) = 0\n    \
    \    fib4(13) = 0\n        fib4(14) = 0\n        fib4(15) = 0\n        fib4(16)\
    \ = 0\n        fib4(17) = 0\n        fib4(18) = 0\n        fib4(19) = 0\n    \
    \    fib4(20) = 0\n        fib4(21) = 0\n        fib4(22) = 0\n        fib4(23)\
    \ = 0\n        fib4(24) = 0\n        fib4(25) = 0\n        fib4(26) = 0\n    \
    \    fib4(27) = 0\n        fib4(28) = 0\n        fib4(29) = 0\n        fib4(30)\
    \ = 0\n        fib4(31) = 0\n        fib4(32) = 0\n        fib4(33) = 0\n    \
    \    fib4(34) = 0\n        fib4(35) = 0\n        fib4(36) = 0\n        fib4(37)\
    \ = 0\n        fib4(38) = 0\n        fib4(39) = 0\n        fib4(40) = 0\n    \
    \    fib4(41) = 0\n        fib4(42) = 0\n        fib4(43) = 0\n        fib4(44)\
    \ = 0\n        fib4(45) = 0\n        fib4(46) = 0\n        fib4(47) = 0\n    \
    \    fib4(48) = 0\n        fib4(49) = 0\n        fib4(50) = 0\n        fib4(51)\
    \ = 0\n        fib4(52) = 0\n        fib4(53) = 0\n        fib4(54) = 0\n    \
    \    fib4(55) = 0\n        fib4(56) = 0\n        fib4(57) = 0\n        fib4(58)\
    \ = 0\n        fib4(59) = 0\n        fib4(60) = 0\n        fib4(61) = 0\n    \
    \    fib4(62) = 0\n        fib4(63) = 0\n        fib4(64) = 0\n        fib4(65)\
    \ = 0\n        fib4(66) = 0\n        fib4(67) = 0\n        fib4(68) = 0\n    \
    \    fib4(69) = 0\n        fib4(70) = 0\n        fib4(71) = 0\n        fib4(72)\
    \ = 0\n        fib4(73) = 0\n        fib4(74) = 0\n        fib4(75) = 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplb0uqv6h.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wzms5ou.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60uitbax.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wzms5ou.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwfaabh.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4wijooz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 12l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 17l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 20l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 23l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 25l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 27l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 29l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 31l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 33l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 35l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 37l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 39l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 41l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 43l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 45l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 47l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 49l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 51l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 53l)\n        fib4.put(54l, 0l)\n        fib\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6hu3qwz3.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6hu3qwz3.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n <= 1) 1\n        else if (n <= 2) 2\n        else if\
    \ (n <= 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7pdsa8_9.scala:25)\n\tat Problem.main(tmp7pdsa8_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 18l)\n        fib4.put(10, 24l)\n\
    \        fib4.put(11, 30l)\n        fib4.put(12, 36l)\n        fib4.put(13, 42l)\n\
    \        fib4.put(14, 48l)\n        fib4.put(15, 54l)\n        fib4.put(16, 60l)\n\
    \        fib4.put(17, 66l)\n        fib4.put(18, 72l)\n        fib4.put(19, 78l)\n\
    \        fib4.put(20, 84l)\n        fib4.put(21, 90l)\n        fib4.put(22, 96l)\n\
    \        fib4.put(23, 102l)\n        fib4.put(24, 108l)\n        fib4.put(25,\
    \ 114l)\n        fib4.put(26, 120l)\n        fib4.put(27, 126l)\n        fib4.put(28,\
    \ 132l)\n        fib4.put(29, 138l)\n        fib4.put(30, 144l)\n        fib4.put(31,\
    \ 150l)\n        fib4.put(32, 156l)\n        fib4.put(33, 162l)\n        fib4.put(34,\
    \ 168l)\n        fib4.put(35, 174l)\n        fib4.put(36, 180l)\n        fib4.put(37,\
    \ 186l)\n        fib4.put(38, 192l)\n        fib4.put(39, 198l)\n        fib4.put(40,\
    \ 204l)\n        fib4.put(41, 210l)\n        fib4.put(42, 216l)\n        fib4.put(43,\
    \ 222l)\n        fib4.put(44, 228l)\n        fib4.put(45, 234l)\n        fib4.put(46,\
    \ 240l)\n        fib4.put(47, 246l)\n        fib4.put(48, 252l)\n        fib4.put(49,\
    \ 258l)\n        fib4.put(50, 264l)\n        fib4.put(51, 270l)\n        fib4.put(52,\
    \ 276l)\n        fib4.put(53, 282l)\n        fib4.put(54, 288l)\n        fib4.put(55,\
    \ 294l)\n        fib4.put(56, 300l)\n        fib4.put(57, 306l)\n        fib4.put(58,\
    \ 312l)\n        fib4.put(59, 318l)\n        fib4.put(60, 324l)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz99bucpx.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoe7k29kw.scala:25)\n\tat Problem.main(tmpoe7k29kw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0p1h4n3.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wzms5ou.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(nl)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl4e54iw2.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 0l)\n        fib4.put(7, 0l)\n \
    \       fib4.put(8, 2l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n \
    \       fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 4l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 8l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj35wcaqy.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpj35wcaqy.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoe7k29kw.scala:25)\n\tat Problem.main(tmpoe7k29kw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0l\n        fib4\
    \ += 1l -> 0l\n        fib4 += 2l -> 2l\n        fib4 += 3l -> 0l\n        fib4\
    \ += 4l -> fib4(4l-1) + fib4(4l-2) + fib4(4l-3) + fib4(4l-4) \n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu7cj5pv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoe7k29kw.scala:25)\n\tat Problem.main(tmpoe7k29kw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += (0l -> 0l)\n        fib4\
    \ += (1l -> 0l)\n        fib4 += (2l -> 2l)\n        fib4 += (3l -> 0l)\n    \
    \    fib4 += (4l -> fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmfizw0x.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwfaabh.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 3\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3h7ub4_.scala:25)\n\tat Problem.main(tmpu3h7ub4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 20l)\n        fib4.put(10, 34l)\n\
    \        fib4.put(11, 56l)\n        fib4.put(12, 89l)\n        fib4.put(13, 140l)\n\
    \        fib4.put(14, 193l)\n        fib4.put(15, 288l)\n        fib4.put(16,\
    \ 396l)\n        fib4.put(17, 530l)\n        fib4.put(18, 683l)\n        fib4.put(19,\
    \ 827l)\n        fib4.put(20, 1041l)\n        fib4.put(21, 1256l)\n        fib4.put(22,\
    \ 1470l)\n        fib4.put(23, 1792l)\n        fib4.put(24, 2022l)\n        fib4.put(25,\
    \ 2343l)\n        fib4.put(26, 2657l)\n        fib4.put(27, 2978l)\n        fib4.put(28,\
    \ 3298l)\n        fib4.put(29, 3541l)\n        fib4.put(30, 3972l)\n        fib4.put(31,\
    \ 4186l)\n        fib4.put(32, 4510l)\n        fib4.put(33, 4844l)\n        fib4.put(34,\
    \ 5148l)\n        fib4.put(35, 5470l)\n        fib4.put(36, 5802l)\n        fib4.put(37,\
    \ 6128l)\n        fib4.put(38, 6450l)\n        fib4.put(39, 6765l)\n        fib4.put(40,\
    \ 7080l)\n        fib4.put(41, 7395l)\n        fib4.put(42, 7710l)\n        fib4.put(43,\
    \ 8015l)\n        fib4.put(44, 8322l)\n        fib4.put(45, 8665l)\n        fib4.put(46,\
    \ 9080l)\n        fib4.put(47, 9395l)\n        fib4.put(48, 9710l)\n        fib4.put(49,\
    \ 10015l)\n        fib4.put(50, 10322l)\n        fib4.put(51, 10625l)\n      \
    \  fib4.put(52, 10932l)\n        fib4.put(53, 11235l)\n        fib4.put(54, 11536l)\n\
    \        fib4.put(55, 11836l)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvb4p8u9u.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwfaabh.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]\n        fib4 += 0\n        fib4 += 0\n        fib4\
    \ += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0p1h4n3.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n <= 2) 1\n        else fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpngo7pr_9.scala:23)\n\tat Problem.main(tmpngo7pr_9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0l\n        fib4\
    \ += 1l -> 0l\n        fib4 += 2l -> 2l\n        fib4 += 3l -> 0l\n        fib4\
    \ += 4l -> 4l\n        fib4 += 5l -> 8l\n        fib4 += 6l -> 14l\n        fib4\
    \ += 7l -> 20l\n        fib4 += 8l -> 28l\n        fib4 += 9l -> 36l\n       \
    \ fib4 += 10l -> 45l\n        fib4 += 11l -> 56l\n        fib4 += 12l -> 66l\n\
    \        fib4 += 13l -> 78l\n        fib4 += 14l -> 90l\n        fib4 += 15l ->\
    \ 108l\n        fib4 += 16l -> 126l\n        fib4 += 17l -> 138l\n        fib4\
    \ += 18l -> 150l\n        fib4 += 19l -> 166l\n        fib4 += 20l -> 178l\n \
    \       fib4 += 21l -> 190l\n        fib4 += 22l -> 198l\n        fib4 += 23l\
    \ -> 208l\n        fib4 += 24l -> 220l\n        fib4 += 25l -> 228l\n        fib4\
    \ += 26l -> 236l\n        fib4 += 27l -> 246l\n        fib4 += 28l -> 256l\n \
    \       fib4 += 29l -> 266l\n        fib4 += 30l -> 276l\n        fib4 += 31l\
    \ -> 286l\n        fib4 += 32l -> 288l\n        fib4 += 33l -> 290l\n        fib4\
    \ += 34l -> 292l\n        fib4 += 35l -> 294l\n        fib4 += 36l -> 296l\n \
    \       fib4 += 37l -> 298l\n        fib4 += 38l -> 300l\n        fib4 += 39l\
    \ -> 302l\n        fib4 += 40l -> 304l\n        fib4 += 41l -> 306l\n        fib4\
    \ += 42l -> 308l\n        fib4 += 43l -> 310l\n        fib4 += 44l -> 312l\n \
    \       fib4 += 45l -> 314l\n        fib4 += 46l -> 316l\n        fib4 += 47l\
    \ -> 318l\n        fib4 += 48l -> 320l\n        fib4 += 49l \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8p_1akq.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(8, 16l)\n        fib4.put(9, 18l)\n        fib4.put(10, 20l)\n\
    \        fib4.put(11, 22l)\n        fib4.put(12, 24l)\n        fib4.put(13, 26l)\n\
    \        fib4.put(14, 28l)\n        fib4.put(15, 30l)\n        fib4.put(16, 32l)\n\
    \        fib4.put(17, 34l)\n        fib4.put(18, 36l)\n        fib4.put(19, 38l)\n\
    \        fib4.put(20, 40l)\n        fib4.put(21, 42l)\n        fib4.put(22, 44l)\n\
    \        fib4.put(23, 46l)\n        fib4.put(24, 48l)\n        fib4.put(25, 50l)\n\
    \        fib4.put(26, 52l)\n        fib4.put(27, 54l)\n        fib4.put(28, 56l)\n\
    \        fib4.put(29, 58l)\n        fib4.put(30, 60l)\n        fib4.put(31, 62l)\n\
    \        fib4.put(32, 64l)\n        fib4.put(33, 66l)\n        fib4.put(34, 68l)\n\
    \        fib4.put(35, 70l)\n        fib4.put(36, 72l)\n        fib4.put(37, 74l)\n\
    \        fib4.put(38, 76l)\n        fib4.put(39, 78l)\n        fib4.put(40, 80l)\n\
    \        fib4.put(41, 82l)\n        fib4.put(42, 84l)\n        fib4.put(43, 86l)\n\
    \        fib4.put(44, 88l)\n        fib4.put(45, 90l)\n        fib4.put(46, 92l)\n\
    \        fib4.put(47, 94l)\n        fib4.put(48, 96l)\n        fib4.put(49, 98l)\n\
    \        fib4.put(50, 100l)\n        fib4.put(51, 102l)\n        fib4.put(52,\
    \ 104l)\n        fib4.put(53, 106l)\n        fib4.put(54, 108l)\n        fib4.put(55,\
    \ 110l)\n        fib4.put(56, 112l)\n        fib4.put(57, 114l)\n        fib4.put(58,\
    \ 116l)\n        fib4.put(59, 118l)\n        fib4.put(60, 120l)\n        fib4.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiqedwl_l.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpiqedwl_l.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 18l)\n        fib4.put(10, 20l)\n\
    \        fib4.put(11, 22l)\n        fib4.put(12, 24l)\n        fib4.put(13, 26l)\n\
    \        fib4.put(14, 28l)\n        fib4.put(15, 30l)\n        fib4.put(16, 32l)\n\
    \        fib4.put(17, 34l)\n        fib4.put(18, 36l)\n        fib4.put(19, 38l)\n\
    \        fib4.put(20, 40l)\n        fib4.put(21, 42l)\n        fib4.put(22, 44l)\n\
    \        fib4.put(23, 46l)\n        fib4.put(24, 48l)\n        fib4.put(25, 50l)\n\
    \        fib4.put(26, 52l)\n        fib4.put(27, 54l)\n        fib4.put(28, 56l)\n\
    \        fib4.put(29, 58l)\n        fib4.put(30, 60l)\n        fib4.put(31, 62l)\n\
    \        fib4.put(32, 64l)\n        fib4.put(33, 66l)\n        fib4.put(34, 68l)\n\
    \        fib4.put(35, 70l)\n        fib4.put(36, 72l)\n        fib4.put(37, 74l)\n\
    \        fib4.put(38, 76l)\n        fib4.put(39, 78l)\n        fib4.put(40, 80l)\n\
    \        fib4.put(41, 82l)\n        fib4.put(42, 84l)\n        fib4.put(43, 86l)\n\
    \        fib4.put(44, 88l)\n        fib4.put(45, 90l)\n        fib4.put(46, 92l)\n\
    \        fib4.put(47, 94l)\n        fib4.put(48, 96l)\n        fib4.put(49, 98l)\n\
    \        fib4.put(50, 100l)\n        fib4.put(51, 102l)\n        fib4.put(52,\
    \ 104l)\n        fib4.put(53, 106l)\n        fib4.put(54, 108l)\n        fib4.put(55,\
    \ 110l)\n        fib4.put(56, 112l)\n        fib4.put(57, 114l)\n        fib4.put(58,\
    \ 116l)\n        fib4.put(59, 118l)\n        fib4.put(60, 120l)\n        fib4.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5dy4r8bg.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp5dy4r8bg.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwfaabh.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n <= 2) 1\n        else if (n <= 4) 2\n        else if\
    \ (n <= 8) 3\n        else fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n -\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpai1yd73q.scala:25)\n\tat Problem.main(tmpai1yd73q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 3\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_meh5ey.scala:25)\n\tat Problem.main(tmp1_meh5ey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wzms5ou.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 0\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphd8993f8.scala:25)\n\tat Problem.main(tmphd8993f8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0\n        fib4 +=\
    \ 1l -> 0\n        fib4 += 2l -> 2\n        fib4 += 3l -> 0\n        fib4 += 4l\
    \ -> fib4(4l-1) + fib4(4l-2) + fib4(4l-3) + fib4(4l-4) \n        fib4(n)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi68tsnab.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 12l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 18l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 21l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 24l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 27l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 30l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 33l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 36l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 38l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 41l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 43l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 45l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 47l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 49l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 51l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 53l)\n        fib4.put(54l, 0l)\n        fib\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52rlocoi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp52rlocoi.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 0l)\n        fib4.put(7, 0l)\n \
    \       fib4.put(8, 2l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n \
    \       fib4.put(11, 0l)\n        fib4.put(12, 2l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 2l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 2l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 2l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 2l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 2l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 2l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 2l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 2l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 2l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 2l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 2l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 2l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeb9n6z6k.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpeb9n6z6k.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n <= 1) 1\n        else if (n <= 2) 2\n        else if\
    \ (n <= 3) 3\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpviphsabo.scala:25)\n\tat Problem.main(tmpviphsabo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 0l)\n        fib4.put(7, 0l)\n \
    \       fib4.put(8, 0l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n \
    \       fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxhbb219v.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpxhbb219v.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4wijooz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(n, (fib4.get(n-1) + fib4.get(n-2) + fib4.get(n-3) + fib4.get(n-4)))\n\
    \        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6v56v_h6.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4wijooz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](4L)\n        fib4(0) = 0\n        fib4(1) = 0\n  \
    \      fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54xy2d_x.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4wijooz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0l\n        fib4\
    \ += 1l -> 0l\n        fib4 += 2l -> 2l\n        fib4 += 3l -> 0l\n        fib4\
    \ += 4l -> 4l\n        fib4 += 5l -> 8l\n        fib4 += 6l -> 14l\n        fib4\
    \ += 7l -> 20l\n        fib4 += 8l -> 28l\n        fib4 += 9l -> 36l\n       \
    \ fib4 += 10l -> 45l\n        fib4 += 11l -> 56l\n        fib4 += 12l -> 66l\n\
    \        fib4 += 13l -> 78l\n        fib4 += 14l -> 91l\n        fib4 += 15l ->\
    \ 104l\n        fib4 += 16l -> 118l\n        fib4 += 17l -> 126l\n        fib4\
    \ += 18l -> 136l\n        fib4 += 19l -> 145l\n        fib4 += 20l -> 154l\n \
    \       fib4 += 21l -> 164l\n        fib4 += 22l -> 174l\n        fib4 += 23l\
    \ -> 185l\n        fib4 += 24l -> 196l\n        fib4 += 25l -> 204l\n        fib4\
    \ += 26l -> 214l\n        fib4 += 27l -> 224l\n        fib4 += 28l -> 234l\n \
    \       fib4 += 29l -> 244l\n        fib4 += 30l -> 254l\n        fib4 += 31l\
    \ -> 264l\n        fib4 += 32l -> 276l\n        fib4 += 33l -> 286l\n        fib4\
    \ += 34l -> 297l\n        fib4 += 35l -> 306l\n        fib4 += 36l -> 315l\n \
    \       fib4 += 37l -> 324l\n        fib4 += 38l -> 334l\n        fib4 += 39l\
    \ -> 344l\n        fib4 += 40l -> 354l\n        fib4 += 41l -> 366l\n        fib4\
    \ += 42l -> 376l\n        fib4 += 43l -> 386l\n        fib4 += 44l -> 397l\n \
    \       fib4 += 45l -> 406l\n        fib4 += 46l -> 415l\n        fib4 += 47l\
    \ -> 424l\n        fib4 += 48l -> 434l\n        fib\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssjzlhpn.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssjzlhpn.scala:68:8\
    \ -------------------------\e[0m\e[0m\n\e[31m68 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(nl-1l) + fib4(nl-2l) + fib4(nl-3l) + fib4(nl-4l))\n        fib4.get(nl)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp48x_56lz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 20l)\n        fib4.put(10, 34l)\n\
    \        fib4.put(11, 56l)\n        fib4.put(12, 78l)\n        fib4.put(13, 100l)\n\
    \        fib4.put(14, 122l)\n        fib4.put(15, 144l)\n        fib4.put(16,\
    \ 168l)\n        fib4.put(17, 191l)\n        fib4.put(18, 214l)\n        fib4.put(19,\
    \ 237l)\n        fib4.put(20, 256l)\n        fib4.put(21, 278l)\n        fib4.put(22,\
    \ 300l)\n        fib4.put(23, 322l)\n        fib4.put(24, 344l)\n        fib4.put(25,\
    \ 366l)\n        fib4.put(26, 388l)\n        fib4.put(27, 410l)\n        fib4.put(28,\
    \ 434l)\n        fib4.put(29, 456l)\n        fib4.put(30, 478l)\n        fib4.put(31,\
    \ 500l)\n        fib4.put(32, 522l)\n        fib4.put(33, 554l)\n        fib4.put(34,\
    \ 580l)\n        fib4.put(35, 603l)\n        fib4.put(36, 626l)\n        fib4.put(37,\
    \ 658l)\n        fib4.put(38, 684l)\n        fib4.put(39, 706l)\n        fib4.put(40,\
    \ 728l)\n        fib4.put(41, 749l)\n        fib4.put(42, 768l)\n        fib4.put(43,\
    \ 789l)\n        fib4.put(44, 810l)\n        fib4.put(45, 832l)\n        fib4.put(46,\
    \ 854l)\n        fib4.put(47, 876l)\n        fib4.put(48, 890l)\n        fib4.put(49,\
    \ 912l)\n        fib4.put(50, 934l)\n        fib4.put(51, 954l)\n        fib4.put(52,\
    \ 976l)\n        fib4.put(53, 990l)\n        fib4.put(54, 1002l)\n        fib4.put(55,\
    \ 1014l)\n        fib4.put(56, 1026l)\n        fib4.put(57, 1038l)\n        fib\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp584naq90.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp584naq90.scala:77:8\
    \ -------------------------\e[0m\e[0m\n\e[31m77 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 12l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 17l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 20l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 23l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 27l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 30l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 32l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 34l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 36l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 38l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 40l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 42l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 44l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 46l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 48l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 50l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 52l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 54l)\n        fib\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxa8qeroo.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxa8qeroo.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += (0l -> 0l)\n        fib4\
    \ += (1l -> 0l)\n        fib4 += (2l -> 2l)\n        fib4 += (3l -> 0l)\n    \
    \    fib4 += (4l -> fib4.get(n - 1l) + fib4.get(n - 2l) + fib4.get(n - 3l) + fib4.get(n\
    \ - 4l))\n        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp77ftbk9k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](4L)\n        fib4(0) = 0\n        fib4(1) = 0\n  \
    \      fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54xy2d_x.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 20l)\n        fib4.put(10, 34l)\n\
    \        fib4.put(11, 56l)\n        fib4.put(12, 89l)\n        fib4.put(13, 120l)\n\
    \        fib4.put(14, 150l)\n        fib4.put(15, 180l)\n        fib4.put(16,\
    \ 210l)\n        fib4.put(17, 240l)\n        fib4.put(18, 270l)\n        fib4.put(19,\
    \ 300l)\n        fib4.put(20, 330l)\n        fib4.put(21, 360l)\n        fib4.put(22,\
    \ 390l)\n        fib4.put(23, 420l)\n        fib4.put(24, 450l)\n        fib4.put(25,\
    \ 480l)\n        fib4.put(26, 510l)\n        fib4.put(27, 540l)\n        fib4.put(28,\
    \ 570l)\n        fib4.put(29, 600l)\n        fib4.put(30, 630l)\n        fib4.put(31,\
    \ 660l)\n        fib4.put(32, 690l)\n        fib4.put(33, 720l)\n        fib4.put(34,\
    \ 750l)\n        fib4.put(35, 780l)\n        fib4.put(36, 810l)\n        fib4.put(37,\
    \ 840l)\n        fib4.put(38, 880l)\n        fib4.put(39, 910l)\n        fib4.put(40,\
    \ 940l)\n        fib4.put(41, 980l)\n        fib4.put(42, 1010l)\n        fib4.put(43,\
    \ 1040l)\n        fib4.put(44, 1080l)\n        fib4.put(45, 1110l)\n        fib4.put(46,\
    \ 1140l)\n        fib4.put(47, 1180l)\n        fib4.put(48, 1210l)\n        fib4.put(49,\
    \ 1240l)\n        fib4.put(50, 1280l)\n        fib4.put(51, 1310l)\n        fib4.put(52,\
    \ 1340l)\n        fib4.put(53, 1380l)\n        fib4.put(54, 1410l)\n        fib4.put(55,\
    \ 1440l)\n        fib4.put(56, 1480l)\n        fib4.put(57, 1510l)\n        fib4.put(58,\
    \ 15\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnce0dcpx.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnce0dcpx.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4wijooz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(nl)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl4e54iw2.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(n, (fib4.get(n-1) + fib4.get(n-2) + fib4.get(n-3) + fib4.get(n-4)))\n\
    \        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6v56v_h6.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(n, (fib4.get(n-1) + fib4.get(n-2) + fib4.get(n-3) + fib4.get(n-4)))\n\
    \        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6v56v_h6.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += 0 -> 0\n        fib4 +=\
    \ 1 -> 0\n        fib4 += 2 -> 2\n        fib4 += 3 -> 0\n        fib4 += 4 ->\
    \ 0\n        fib4 += 5 -> 0\n        fib4 += 6 -> 0\n        fib4 += 7 -> 0\n\
    \        fib4 += 8 -> 0\n        fib4 += 9 -> 0\n        fib4 += 10 -> 0\n   \
    \     fib4 += 11 -> 0\n        fib4 += 12 -> 0\n        fib4 += 13 -> 0\n    \
    \    fib4 += 14 -> 0\n        fib4 += 15 -> 0\n        fib4 += 16 -> 0\n     \
    \   fib4 += 17 -> 0\n        fib4 += 18 -> 0\n        fib4 += 19 -> 0\n      \
    \  fib4 += 20 -> 0\n        fib4 += 21 -> 0\n        fib4 += 22 -> 0\n       \
    \ fib4 += 23 -> 0\n        fib4 += 24 -> 0\n        fib4 += 25 -> 0\n        fib4\
    \ += 26 -> 0\n        fib4 += 27 -> 0\n        fib4 += 28 -> 0\n        fib4 +=\
    \ 29 -> 0\n        fib4 += 30 -> 0\n        fib4 += 31 -> 0\n        fib4 += 32\
    \ -> 0\n        fib4 += 33 -> 0\n        fib4 += 34 -> 0\n        fib4 += 35 ->\
    \ 0\n        fib4 += 36 -> 0\n        fib4 += 37 -> 0\n        fib4 += 38 -> 0\n\
    \        fib4 += 39 -> 0\n        fib4 += 40 -> 0\n        fib4 += 41 -> 0\n \
    \       fib4 += 42 -> 0\n        fib4 += 43 -> 0\n        fib4 += 44 -> 0\n  \
    \      fib4 += 45 -> 0\n        fib4 += 46 -> 0\n        fib4 += 47 -> 0\n   \
    \     fib4 += 48 -> 0\n        fib4 += 49 -> 0\n        fib4 += 50 -> 0\n    \
    \    fib4 += 51 -> 0\n        fib4 += 52 -> 0\n        fib4 += 53 -> 0\n     \
    \   fib4 += 54 -> 0\n        fib4 += 55 -> 0\n        fib4 += 56 -> 0\n      \
    \  fib4 += 57 -> 0\n        fib4 += 58 -> 0\n        fib4 += 59 -> 0\n       \
    \ fib4 += 60 -> 0\n        fib4 \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbrp1nkh6.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwfaabh.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 4l)\n        fib4.put(6l, 8l)\n        fib4.put(7l,\
    \ 14l)\n        fib4.get(n).asInstanceOf[Long]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0slp7m2a.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n <=\
    \ 0) 0\n        else if (n <= 2) 2\n        else if (n <= 4) 0\n        else if\
    \ (n <= 8) 4\n        else if (n <= 14) 8\n        else fib4(n - 4) + fib4(n -\
    \ 3) + fib4(n - 2) + fib4(n - 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyml_hgur.scala:27)\n\tat Problem.main(tmpyml_hgur.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += 0l -> 0l\n        fib4\
    \ += 1l -> 0l\n        fib4 += 2l -> 2l\n        fib4 += 3l -> 0l\n        fib4\
    \ += 4l -> 4l\n        fib4 += 5l -> 0l\n        fib4 += 6l -> 8l\n        fib4\
    \ += 7l -> 14l\n        fib4 += 8l -> 0l\n        fib4 += 9l -> 16l\n        fib4\
    \ += 10l -> 0l\n        fib4 += 11l -> 18l\n        fib4 += 12l -> 0l\n      \
    \  fib4 += 13l -> 20l\n        fib4 += 14l -> 0l\n        fib4 += 15l -> 22l\n\
    \        fib4 += 16l -> 0l\n        fib4 += 17l -> 24l\n        fib4 += 18l ->\
    \ 0l\n        fib4 += 19l -> 26l\n        fib4 += 20l -> 0l\n        fib4 += 21l\
    \ -> 28l\n        fib4 += 22l -> 0l\n        fib4 += 23l -> 30l\n        fib4\
    \ += 24l -> 0l\n        fib4 += 25l -> 32l\n        fib4 += 26l -> 0l\n      \
    \  fib4 += 27l -> 34l\n        fib4 += 28l -> 0l\n        fib4 += 29l -> 36l\n\
    \        fib4 += 30l -> 0l\n        fib4 += 31l -> 38l\n        fib4 += 32l ->\
    \ 0l\n        fib4 += 33l -> 40l\n        fib4 += 34l -> 0l\n        fib4 += 35l\
    \ -> 42l\n        fib4 += 36l -> 0l\n        fib4 += 37l -> 44l\n        fib4\
    \ += 38l -> 0l\n        fib4 += 39l -> 46l\n        fib4 += 40l -> 0l\n      \
    \  fib4 += 41l -> 48l\n        fib4 += 42l -> 0l\n        fib4 += 43l -> 50l\n\
    \        fib4 += 44l -> 0l\n        fib4 += 45l -> 52l\n        fib4 += 46l ->\
    \ 0l\n        fib4 += 47l -> 54l\n        fib4 += 48l -> 0l\n        fib4 += 49l\
    \ -> \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfcbbeeux.scala:68:22 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        fib4 += \e[31m49l\e[0m -> \n\e[31m\e[31m   |\e\
    [0m                      ^\e[0m\n\e[31m   |\e[0m                      expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfcbbeeux.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4 += (0l -> 0l)\n        fib4\
    \ += (1l -> 0l)\n        fib4 += (2l -> 2l)\n        fib4 += (3l -> 0l)\n    \
    \    fib4 += (4l -> fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n\
    \        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqmfizw0x.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](n)\n        fib4(0) = 0\n        fib4(1) = 0\n   \
    \     fib4(2) = 2\n        fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpotwfaabh.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
