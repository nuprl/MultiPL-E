language: scala
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n ==\
    \ 0) 0\n        else if (n == 1) 1\n        else if (n == 2) 2\n        else if\
    \ (n == 3) 3\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n -\
    \ 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3h7ub4_.scala:25)\n\tat Problem.main(tmpu3h7ub4_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 0l)\n        fib4.put(7, 0l)\n \
    \       fib4.put(8, 2l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n \
    \       fib4.put(11, 0l)\n        fib4.put(12, 2l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 2l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 2l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 2l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 2l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 2l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 2l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 2l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 2l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 2l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 2l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 2l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 2l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeb9n6z6k.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpeb9n6z6k.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqydlrvcz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 8l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 14l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpswzrv2i8.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4 += 0\n        fib4 += 0\n      \
    \  fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sn3c2i4.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ 0l)\n        fib4.put(5l, 0l)\n        fib4.put(6l, 0l)\n        fib4.put(7l,\
    \ 0l)\n        fib4.put(8l, 2l)\n        fib4.put(9l, 0l)\n        fib4.put(10l,\
    \ 0l)\n        fib4.put(11l, 0l)\n        fib4.put(12l, 0l)\n        fib4.put(13l,\
    \ 0l)\n        fib4.put(14l, 4l)\n        fib4.put(15l, 0l)\n        fib4.put(16l,\
    \ 0l)\n        fib4.put(17l, 0l)\n        fib4.put(18l, 0l)\n        fib4.put(19l,\
    \ 0l)\n        fib4.put(20l, 0l)\n        fib4.put(21l, 0l)\n        fib4.put(22l,\
    \ 0l)\n        fib4.put(23l, 0l)\n        fib4.put(24l, 0l)\n        fib4.put(25l,\
    \ 0l)\n        fib4.put(26l, 0l)\n        fib4.put(27l, 0l)\n        fib4.put(28l,\
    \ 0l)\n        fib4.put(29l, 0l)\n        fib4.put(30l, 0l)\n        fib4.put(31l,\
    \ 0l)\n        fib4.put(32l, 0l)\n        fib4.put(33l, 0l)\n        fib4.put(34l,\
    \ 0l)\n        fib4.put(35l, 0l)\n        fib4.put(36l, 0l)\n        fib4.put(37l,\
    \ 0l)\n        fib4.put(38l, 0l)\n        fib4.put(39l, 0l)\n        fib4.put(40l,\
    \ 0l)\n        fib4.put(41l, 0l)\n        fib4.put(42l, 0l)\n        fib4.put(43l,\
    \ 0l)\n        fib4.put(44l, 0l)\n        fib4.put(45l, 0l)\n        fib4.put(46l,\
    \ 0l)\n        fib4.put(47l, 0l)\n        fib4.put(48l, 0l)\n        fib4.put(49l,\
    \ 0l)\n        fib4.put(50l, 0l)\n        fib4.put(51l, 0l)\n        fib4.put(52l,\
    \ 0l)\n        fib4.put(53l, 0l)\n        fib4.put(54l, 0l)\n        fib\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j0pzhly.scala:74:8\
    \ -------------------------\e[0m\e[0m\n\e[31m74 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.Array[Long](4).fill(0)\n        fib4(0) += 1\n        fib4(1)\
    \ += 1\n        fib4(2) += 1\n        fib4(3) += 1\n        fib4(n) = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1l2er_k.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m).fill(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(4l,\
    \ fib4.get(3l) + fib4.get(2l) + fib4.get(1l) + fib4.get(0l))\n        fib4.get(nl)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl4e54iw2.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0l, 0l)\n        fib4.put(1l,\
    \ 0l)\n        fib4.put(2l, 2l)\n        fib4.put(3l, 0l)\n        fib4.put(nl,\
    \ fib4(n-1l) + fib4(n-2l) + fib4(n-3l) + fib4(n-4l))\n        fib4.get(nl)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyqxozwkz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.MutableList[Long]()\n        fib4 += 0\n        fib4 += 0\n  \
    \      fib4 += 2\n        fib4 += 0\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp98lytmmm.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]()\n        fib4.add(0)\n        fib4.add(1)\n  \
    \      fib4.add(2)\n        fib4.add(3)\n        fib4.add(4)\n        fib4.add(5)\n\
    \        fib4.add(6)\n        fib4.add(7)\n        fib4.add(8)\n        fib4.add(9)\n\
    \        fib4.add(10)\n        fib4.add(11)\n        fib4.add(12)\n        fib4.add(13)\n\
    \        fib4.add(14)\n        fib4.add(15)\n        fib4.add(16)\n        fib4.add(17)\n\
    \        fib4.add(18)\n        fib4.add(19)\n        fib4.add(20)\n        fib4.add(21)\n\
    \        fib4.add(22)\n        fib4.add(23)\n        fib4.add(24)\n        fib4.add(25)\n\
    \        fib4.add(26)\n        fib4.add(27)\n        fib4.add(28)\n        fib4.add(29)\n\
    \        fib4.add(30)\n        fib4.add(31)\n        fib4.add(32)\n        fib4.add(33)\n\
    \        fib4.add(34)\n        fib4.add(35)\n        fib4.add(36)\n        fib4.add(37)\n\
    \        fib4.add(38)\n        fib4.add(39)\n        fib4.add(40)\n        fib4.add(41)\n\
    \        fib4.add(42)\n        fib4.add(43)\n        fib4.add(44)\n        fib4.add(45)\n\
    \        fib4.add(46)\n        fib4.add(47)\n        fib4.add(48)\n        fib4.add(49)\n\
    \        fib4.add(50)\n        fib4.add(51)\n        fib4.add(52)\n        fib4.add(53)\n\
    \        fib4.add(54)\n        fib4.add(55)\n        fib4.add(56)\n        fib4.add(57)\n\
    \        fib4.add(58)\n        fib4.add(59)\n        fib4.add(60)\n        fib4.add(61)\n\
    \        fib4.add(62)\n        fib4.add(63)\n        fib4.add(64)\n        fib4.add(65)\n\
    \        fib4.add(66)\n        fib4.add(67)\n        fib4.add(68)\n        fib4.add(69)\n\
    \        fib4.add(70)\n        fib4.add(71)\n        fib4.add(72)\n        fib4.add(73)\n\
    \        fib4.add(74)\n        fib4.add(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpje_bc6r9.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje_bc6r9.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 4l)\n        fib4.put(6, 8l)\n        fib4.put(7, 14l)\n\
    \        fib4.put(8, 20l)\n        fib4.put(9, 34l)\n        fib4.put(10, 56l)\n\
    \        fib4.put(11, 89l)\n        fib4.put(12, 144l)\n        fib4.put(13, 233l)\n\
    \        fib4.put(14, 377l)\n        fib4.put(15, 610l)\n        fib4.put(16,\
    \ 987l)\n        fib4.put(17, 1597l)\n        fib4.put(18, 2584l)\n        fib4.put(19,\
    \ 4181l)\n        fib4.put(20, 6765l)\n        fib4.put(21, 10946l)\n        fib4.put(22,\
    \ 17711l)\n        fib4.put(23, 28657l)\n        fib4.put(24, 51421l)\n      \
    \  fib4.put(25, 82311l)\n        fib4.put(26, 134669l)\n        fib4.put(27, 218922l)\n\
    \        fib4.put(28, 461369l)\n        fib4.put(29, 750253l)\n        fib4.put(30,\
    \ 1213967l)\n        fib4.put(31, 1964186l)\n        fib4.put(32, 3932428l)\n\
    \        fib4.put(33, 6346583l)\n        fib4.put(34, 10233487l)\n        fib4.put(35,\
    \ 15848951l)\n        fib4.put(36, 25776296l)\n        fib4.put(37, 41399811l)\n\
    \        fib4.put(38, 67749007l)\n        fib4.put(39, 104079215l)\n        fib4.put(40,\
    \ 177893171l)\n        fib4.put(41, 286577300l)\n        fib4.put(42, 514229566l)\n\
    \        fib4.put(43, 823115319l)\n        fib4.put(44, 134669400l)\n        fib4.put(45,\
    \ 218922994l)\n        fib4.put(46, 461369441l)\n        fib4.put(47, 750253253l)\n\
    \        fib4.put(48, 1213967427l)\n        fib4.put(49, 1964186100l)\n      \
    \  fib4.put(50, 3932427883l)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8pzfspxx.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashMap[Long, Long]()\n        fib4.put(0, 0l)\n        fib4.put(1,\
    \ 0l)\n        fib4.put(2, 2l)\n        fib4.put(3, 0l)\n        fib4.put(4, 0l)\n\
    \        fib4.put(5, 0l)\n        fib4.put(6, 4l)\n        fib4.put(7, 8l)\n \
    \       fib4.put(8, 14l)\n        fib4.put(9, 0l)\n        fib4.put(10, 0l)\n\
    \        fib4.put(11, 0l)\n        fib4.put(12, 0l)\n        fib4.put(13, 0l)\n\
    \        fib4.put(14, 0l)\n        fib4.put(15, 0l)\n        fib4.put(16, 0l)\n\
    \        fib4.put(17, 0l)\n        fib4.put(18, 0l)\n        fib4.put(19, 0l)\n\
    \        fib4.put(20, 0l)\n        fib4.put(21, 0l)\n        fib4.put(22, 0l)\n\
    \        fib4.put(23, 0l)\n        fib4.put(24, 0l)\n        fib4.put(25, 0l)\n\
    \        fib4.put(26, 0l)\n        fib4.put(27, 0l)\n        fib4.put(28, 0l)\n\
    \        fib4.put(29, 0l)\n        fib4.put(30, 0l)\n        fib4.put(31, 0l)\n\
    \        fib4.put(32, 0l)\n        fib4.put(33, 0l)\n        fib4.put(34, 0l)\n\
    \        fib4.put(35, 0l)\n        fib4.put(36, 0l)\n        fib4.put(37, 0l)\n\
    \        fib4.put(38, 0l)\n        fib4.put(39, 0l)\n        fib4.put(40, 0l)\n\
    \        fib4.put(41, 0l)\n        fib4.put(42, 0l)\n        fib4.put(43, 0l)\n\
    \        fib4.put(44, 0l)\n        fib4.put(45, 0l)\n        fib4.put(46, 0l)\n\
    \        fib4.put(47, 0l)\n        fib4.put(48, 0l)\n        fib4.put(49, 0l)\n\
    \        fib4.put(50, 0l)\n        fib4.put(51, 0l)\n        fib4.put(52, 0l)\n\
    \        fib4.put(53, 0l)\n        fib4.put(54, 0l)\n        fib4.put(55, 0l)\n\
    \        fib4.put(56, 0l)\n        fib4.put(57, 0l)\n        fib4.put(58, 0l)\n\
    \        fib4.put(59, 0l)\n        fib4.put(60, 0l)\n        fib4.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporqs6bip.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmporqs6bip.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>>\
    \ fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val fib4\
    \ = new mutable.HashSet[Long]\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n        fib4\
    \ += 0\n        \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9gxens1.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797666
