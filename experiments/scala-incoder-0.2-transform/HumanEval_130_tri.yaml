name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val triList = mutable.ListBuffer[Long]()\n        triList +=\
    \ 3\n        triList += triList.last\n        triList += triList.last\n      \
    \  triList += triList.last\n        triList += triList.last\n        triList +=\
    \ triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += tri", " \
    \       val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add(tri(n - 1) + tri(n - 2) + tri(n + 1)))\n        list.toList", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val fibonacci\
    \ : List[Long] = List(1l, 2l, 3l)\n        val tribonacci : List[Long] = fibonacci.take(n\
    \ + 1).map(x => x + x.toLong)\n        tribonacci", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val a = tri(n - 1)\n                val\
    \ b = tri(n - 2)\n                val c = tri(n + 1)\n                a ::: b\
    \ ::: c\n        }\n        rec.apply(n)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val rec : PartialFunction[Long, List[Long]] = {\n            case 0 => List(1l)\n\
    \            case 1 => List(3l)\n            case 2 => List(2l)\n            case\
    \ 3 => List(8l)\n            case 4 => List(3l, 2l, 1l, 8l)\n            case\
    \ 5 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 6 => List(3l, 2l,\
    \ 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 7 => List(3l, 2l,\
    \ 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 8\
    \ => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l,\
    \ 2l, 1l, 8l)\n            case 9 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case\
    \ 10 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 11 => List(3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l,\
    \ 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 12 => List(3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l,\
    \ 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n          \
    \  case 13 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l,\
    \ 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, ", "        val\
    \ list = mutable.ListBuffer[Long]()\n        val a = tri(n-1)\n        val b =\
    \ tri(n-2)\n        val c = tri(n+2)\n        list += a\n        list += b\n \
    \       list += c\n        list.toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1l)\n            case 1 => List(3l)\n\
    \            case n => \n                val first = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n                if (n % 2 == 0) first else first :: second\n   \
    \     }\n        rec.apply(n)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3L)\n        list.add(1L)\n        list.add(2L)\n        list.add(8L)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs += (fibs.last\
    \ + fibs.last + fibs.head + fibs.last) / 2\n        fibs.take(n + 1).map(_.toLong)",
  "        val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val n1 = n - 1\n                val n2 = n - 2\n                val n3\
    \ = n + 3\n                val n4 = n + 4\n                val n5 = n + 5\n  \
    \              val n6 = n + 6\n                val n7 = n + 7\n              \
    \  val n8 = n + 8\n                val n9 = n + 9\n                val n10 = n\
    \ + 10\n                val n11 = n + 11\n                val n12 = n + 12\n \
    \               val n13 = n + 13\n                val n14 = n + 14\n         \
    \       val n15 = n + 15\n                val n16 = n + 16\n                val\
    \ n17 = n + 17\n                val n18 = n + 18\n                val n19 = n\
    \ + 19\n                val n20 = n + 20\n                val n21 = n + 21\n \
    \               val n22 = n + 22\n                val n23 = n + 23\n         \
    \       val n24 = n + 24\n                val n25 = n + 25\n                val\
    \ n26 = n + 26\n                val n27 = n + 27\n                val n28 = n\
    \ + 28\n                val n29 = n + 29\n                val n30 = n + 30\n \
    \               val n31 = n + 31\n                val n32 = n + 32\n         \
    \       val n33 = n + 33\n                val n34 = n + 34\n                val\
    \ n35 = n + 35\n                val n36 = n + 36\n                val n37 = n\
    \ + 37\n                val n38 = n + 38\n                val n39 = n + 39\n \
    \               val n40 = n + 40\n                val n41 = n + 41\n         \
    \       val n42 = n + 42\n                val n43 = n + 43\n                val\
    \ n44 = n + 44\n                val n45 = n + 45\n                val n46 = n\
    \ + 46\n                val n47 = n + 47\n                val n48 = n + 48\n \
    \               val n49 = n + 49\n                val n50 = n + 50\n         \
    \       val n51 = n + 51\n                val n52 = n + 52\n                val\
    \ n53 = n + 53\n                val n54 = n + 54\n                val n55 = n\
    \ + 55\n                val n56 = n + 56\n                val n57 = n + 57\n \
    \               val n58 = n + 58\n                val n59 = n + 59\n         \
    \       val n60 = n + 60\n                val n61 = n + 61\n                val\
    \ n6", "        val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n\
    \        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n\
    \ + 1).foreach(x => list.add(x.toLong + list.last))\n        list.toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add(x + list.get(list.size - 1)))\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last) / 2\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val fib : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri : List[Long] = List(0l, 1l, 2l)\n        val tri2 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri3 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri4 : List[Long] = List(0l, 1l, 2l)\n        val tri5 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri6 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri7 : List[Long] = List(0l, 1l, 2l)\n        val tri8 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri9 : List[Long] = List(0l, 1l, 2l)\n       \
    \ val tri10 : List[Long] = List(0l, 1l, 2l)\n        val tri11 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri12 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri13 : List[Long] = List(0l, 1l, 2l)\n        val tri14 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri15 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri16 : List[Long] = List(0l, 1l, 2l)\n        val tri17 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri18 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri19 : List[Long] = List(0l, 1l, 2l)\n        val tri20 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri21 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri22 : List[Long] = List(0l, 1l, 2l)\n        val tri23 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri24 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri25 : List[Long] = List(0l, 1l, 2l)\n        val tri26 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri27 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri28 : List[Long] = List(0l, 1l, 2l)\n        val tri29 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri30 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri31 : List[Long] = List(0l, 1l, 2l)\n        val tri32 : List[Long",
  "        val list = mutable.ListBuffer[Long]()\n        val tri1 = (3 : Long)\n\
    \        val tri2 = (tri1 + tri1)\n        val tri3 = (tri2 + tri2)\n        val\
    \ tri4 = (tri3 + tri3)\n        list += tri1\n        list += tri2\n        list\
    \ += tri3\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val a = mutable.ListBuffer[Long]()\n        val\
    \ b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3L)\n        list.add(1L)\n        list.add(n + 1L)\n      \
    \  list.add(list.last.head + list.last.tail.head + list.last.tail.tail.head +\
    \ list.last.tail.tail.tail.head)\n        list.toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case 2 => List(2l)\n            case n => \n                val first\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                first :: rec(n - 1)\n\
    \        }\n        rec.apply(n)", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong\
    \ + 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last)\n        fibs.take(n+1).map(_+_)", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n+1).foreach(x\
    \ => list.add(list.last.last + x))\n        list.toList", "        val a = 2l\n\
    \        val b = 3l\n        val c = a + b\n        val d = c + a\n        val\
    \ e = d + b\n        val f = e + c\n        val g = f + d\n        val h = g +\
    \ e\n        val i = h + f\n        val j = i + g\n        val k = j + h\n   \
    \     val l = k + i\n        val m = l + j\n        val n = m + k\n        val\
    \ o = n + l\n        val p = o + m\n        val q = p + n\n        val r = q +\
    \ o\n        val s = r + p\n        val t = s + q\n        val u = t + r\n   \
    \     val v = u + s\n        val w = v + t\n        val x = w + u\n        val\
    \ y = x + v\n        val z = y + w\n        val a = z + x\n        val b = a +\
    \ z\n        val c = b + a\n        val d = c + b\n        val e = d + c\n   \
    \     val f = e + d\n        val g = f + e\n        val h = g + f\n        val\
    \ i = h + g\n        val j = i + h\n        val k = j + i\n        val l = k +\
    \ j\n        val m = l + k\n        val n = m + l\n        val o = n + m\n   \
    \     val p = o + n\n        val q = p + o\n        val r = q + p\n        val\
    \ s = r + q\n        val t = s + r\n        val u = t + s\n        val v = u +\
    \ t\n        val w = v + u\n        val x = w + v\n        val y = x + w\n   \
    \     val z = y + x\n        val a = z + y\n        val b = a + z\n        val\
    \ c = b + a\n        val d = c + b\n        val e = d + c\n        val f = e +\
    \ d\n        val g = f + e\n        val h = g + f\n        val i = h + g\n   \
    \     val j = i + h\n        val k = j + i\n        val l = k + j\n        val\
    \ m = l + k\n        val n = m + l\n        val o = n + m\n        val p = o +\
    \ n\n        val q = p + o\n        val r = q + p\n        val s = r + q\n   \
    \     val t = s + r\n        val u = t + s\n        val v = u + t\n        val\
    \ w = v + u\n        val x = w + v\n        val y = x + w\n        val z = y +\
    \ x\n        val a = z", "        val fibs = mutable.ListBuffer[Long]()\n    \
    \    fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)",
  "        val list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n   \
    \     val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n    \
    \    list += b\n        list += c\n        list.toList", "        val fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(1)\n        fib.append(3)\n        fib.append(fib.last.head\
    \ + fib.last.tail.head + fib.last.tail.tail.head)\n        fib.append(fib.last.head\
    \ + fib.last.tail.head + fib.last.tail.tail.tail.head + fib.last.tail.tail.tail.tail.head)\n\
    \        fib.append(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.head)\n\
    \        fib.append(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.tail.tail.head)\n        fib.append(fib.last.head\
    \ + fib.last.tail.head + fib.last.tail.tail.tail.head + fib.last.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        fib.append(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.tail.head)\n\
    \        fib.append(fib.last.head + fib.last.tail.head + fib.last.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.head\
    \ + fib.last.tail.tail.tail.tail.tail.tail.head + fib.last.tail.tail.tail.tail.tail.tail.",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "       \
    \ val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] = List(0l,\
    \ 1l)\n        val result : List[Long] = List(0l)\n        val fib1 : List[Long]\
    \ = List(1l, 3l)\n        val fib2 : List[Long] = List(2l, 5l)\n        val fib3\
    \ : List[Long] = List(3l, 8l)\n        val fib4 : List[Long] = List(4l, 13l)\n\
    \        val fib5 : List[Long] = List(5l, 21l)\n        val fib6 : List[Long]\
    \ = List(6l, 34l)\n        val fib7 : List[Long] = List(7l, 55l)\n        val\
    \ fib8 : List[Long] = List(8l, 89l)\n        val fib9 : List[Long] = List(9l,\
    \ 144l)\n        val fib10 : List[Long] = List(10l, 233l)\n        val fib11 :\
    \ List[Long] = List(11l, 377l)\n        val fib12 : List[Long] = List(12l, 610l)\n\
    \        val fib13 : List[Long] = List(13l, 987l)\n        val fib14 : List[Long]\
    \ = List(14l, 1597l)\n        val fib15 : List[Long] = List(15l, 2584l)\n    \
    \    val fib16 : List[Long] = List(16l, 4181l)\n        val fib17 : List[Long]\
    \ = List(17l, 6765l)\n        val fib18 : List[Long] = List(18l, 13462l)\n   \
    \     val fib19 : List[Long] = List(19l, 26123l)\n        val fib20 : List[Long]\
    \ = List(20l, 51474l)\n        val fib21 : List[Long] = List(21l, 109419l)\n \
    \       val fib22 : List[Long] = List(22l, 219902l)\n        val fib23 : List[Long]\
    \ = List(23l, 418493l)\n        val fib24 : List[Long] = List(24l, 767883l)\n\
    \        val fib25 : List[Long] = List(25l, 1461126l)\n        val fib26 : List[Long]\
    \ = List(26l, 2836583l)\n        val fib27 : List[Long] = List(27l, 5629413l)\n\
    \        val fib28 : List[Long] = List(28l, 11258999l)\n        val fib29 : List[Long]\
    \ = List(29l, 22517998l)\n        val fib30 : List[Long] = List(30l, 45035996l)\n\
    \        val fib31 : List[Long] = List(31l, 90071993l)\n        val fib32 : List[Long]\
    \ = List(", "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci\
    \ += 3\n        fibonacci += (fibonacci(1) + fibonacci(2))\n        fibonacci\
    \ += (fibonacci(1) + fibonacci(2) + fibonacci(3))\n        fibonacci.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)",
  "        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n\
    \        val first = (3l).toLong\n        val second = (first+1l).toLong\n   \
    \     val third = (first+2l).toLong\n        list += first\n        list += second\n\
    \        list += third\n        list += third\n        list += second\n      \
    \  list += first\n        list += third\n        list += third\n        list +=\
    \ first\n        list += third\n        list += third\n        list += second\n\
    \        list += first\n        list += third\n        list += third\n       \
    \ list += first\n        list += third\n        list += third\n        list +=\
    \ second\n        list += first\n        list += third\n        list += third\n\
    \        list += first\n        list += third\n        list += third\n       \
    \ list += second\n        list += first\n        list += third\n        list +=\
    \ third\n        list += first\n        list += third\n        list += third\n\
    \        list += second\n        list += first\n        list += third\n      \
    \  list += third\n        list += first\n        list += third\n        list +=\
    \ third\n        list += second\n        list += first\n        list += third\n\
    \        list += third\n        list += first\n        list += third\n       \
    \ list += third\n        list += second\n        list += first\n        list +=\
    \ third\n        list += third\n        list += first\n        list += third\n\
    \        list += third\n        list += second\n        list += first\n      \
    \  list += third\n        list += third\n        list += first\n        list +=\
    \ third\n        list += third\n        list += second\n        list += first\n\
    \        list += third\n        list += third\n        list += first\n       \
    \ list += third\n        list += third\n        list += second\n        list +=\
    \ first\n        list += third\n        list += third\n        list += first\n\
    \        list += third\n        list += third\n        list += second\n      \
    \  list += first\n        list += third\n        list += third\n        list +=\
    \ first\n        list += third\n        list += third\n        list += second\n\
    \        list += first\n        list += third\n        list ", "        val triList\
    \ = new mutable.ListBuffer[Long]()\n        triList.add(3l)\n        triList.add(triList.last.asInstanceOf[Long]\
    \ + n.asInstanceOf[Long] / 2)\n        triList.add(triList.last.asInstanceOf[Long]\
    \ + triList.last.asInstanceOf[Long] + triList.last.asInstanceOf[Long] + n.asInstanceOf[Long])\n\
    \        triList.toList", "        val fib : List[Long] = List(0l, 1l, 2l)\n \
    \       val tri : List[Long] = List(0l, 1l, 2l)\n        var i : Long = 1\n  \
    \      while (i < n) {\n            tri ::= fib.zip(tri).map(x => x._1 + x._2).sum\n\
    \            i += 1\n        }\n        tri", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val fib : List[Long] = List(1l, 3l)\n        val\
    \ tri : List[Long] = if (n % 2 == 0) fib else fib.tail.zip(fib.tail.tail).map(x\
    \ => x._1 + x._2)\n        tri.take(n + 1).map(x => x.toLong)", "        val rec\
    \ : PartialFunction[Long, List[Long]] = {\n            case 0 => List(0l)\n  \
    \          case 1 => List(1l)\n            case n => \n                val first\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                first :: rec(n - 1)\n\
    \        }\n        rec.apply(n)", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2)\n        list.take(n + 1).toList", "        val rec = new\
    \ mutable.ListBuffer[Long]()\n        rec += 3\n        if (n % 2 == 0) {\n  \
    \          rec += n\n        }\n        else {\n            rec += n + 1\n   \
    \     }\n        rec += n\n        rec.toList", "        val fibonacci : List[Long]\
    \ = List(0l, 1l)\n        val tribonacci : List[Long] = List(0l, 1l, 2l)\n   \
    \     val tribonacci2 : List[Long] = List(0l, 1l, 2l, 3l)\n        val tribonacci3\
    \ : List[Long] = List(0l, 1l, 2l, 3l, 4l)\n        val tribonacci4 : List[Long]\
    \ = List(0l, 1l, 2l, 3l, 4l, 5l)\n        val tribonacci5 : List[Long] = List(0l,\
    \ 1l, 2l, 3l, 4l, 5l, 6l)\n        val tribonacci6 : List[Long] = List(0l, 1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l)\n        val tribonacci7 : List[Long] = List(0l, 1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l)\n        val tribonacci8 : List[Long] = List(0l,\
    \ 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)\n        val tribonacci9 : List[Long] =\
    \ List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val tribonacci10\
    \ : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l)\n    \
    \    val tribonacci11 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l,\
    \ 9l, 10l, 11l, 12l)\n        val tribonacci12 : List[Long] = List(0l, 1l, 2l,\
    \ 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l)\n        val tribonacci13 :\
    \ List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l,\
    \ 14l)\n        val tribonacci14 : List[Long] = List(0l, 1l, 2l, 3l, 4l, 5l, 6l,\
    \ 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l)\n        val tribonacci15 : List[Long]\
    \ = List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l,\
    \ 16l)\n        val tribonacci", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        result ++= a\n        result ++= b\n        result ++= c\n   \
    \     result.toList", "        val a = mutable.ListBuffer[Long]()\n        val\
    \ b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n+1).foreach(x\
    \ => list.add(list.last.last+x))\n        list.toList", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val a = n.toLong\n        val b = a\n\
    \        val c = b\n        val d = c\n        val e = d\n        val f = e\n\
    \        val g = f\n        val h = g\n        val i = h\n        val j = i\n\
    \        val k = j\n        val l = k\n        val m = l\n        val n = m\n\
    \        val o = n\n        val p = o\n        val q = p\n        val r = q\n\
    \        val s = r\n        val t = s\n        val u = t\n        val v = u\n\
    \        val w = v\n        val x = w\n        val y = x\n        val z = y\n\
    \        val a = z\n        val b = a\n        val c = b\n        val d = c\n\
    \        val e = d\n        val f = e\n        val g = f\n        val h = g\n\
    \        val i = h\n        val j = i\n        val k = j\n        val l = k\n\
    \        val m = l\n        val n = m\n        val o = n\n        val p = o\n\
    \        val q = p\n        val r = q\n        val s = r\n        val t = s\n\
    \        val u = t\n        val v = u\n        val w = v\n        val x = w\n\
    \        val y = x\n        val z = y\n        val a = z\n        val b = a\n\
    \        val c = b\n        val d = c\n        val e = d\n        val f = e\n\
    \        val g = f\n        val h = g\n        val i = h\n        val j = i\n\
    \        val k = j\n        val l = k\n        val m = l\n        val n = m\n\
    \        val o = n\n        val p = o\n        val q = p\n        val r = q\n\
    \        val s = r\n        val t = s\n        val u = t\n        val v = u\n\
    \        val w = v\n        val x = w\n        val y = x\n        val z = y\n\
    \        val a = z\n        val b = a\n        val c = b\n        val d = c\n\
    \        val e = d\n        val f = e\n        val g = f\n        val h = g\n\
    \        val i = h\n        val j = i\n        val k = j\n        val l = k\n\
    \        val m = l\n        val n = m\n        val o = n\n        val p = o\n\
    \        val q = p\n        val r = q\n        val s = r\n        val t = s\n\
    \        val u = t\n        val ", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n      \
    \  if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else if\
    \ (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.take(n +\
    \ 1).toList", "        val tri = mutable.ListBuffer[Long]()\n        tri += 3\n\
    \        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        tri.toList", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n\
    \        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n\
    \ + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n        list.toList",
  "        val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(1L)\n            case 1 => List(3L)\n            case 2 => List(2L)\n \
    \           case 3 => List(8L)\n            case 4 => List(3L, 2L, 1L)\n     \
    \       case 5 => List(8L, 3L, 1L, 2L)\n            case 6 => List(8L, 3L, 1L,\
    \ 2L, 5L)\n            case 7 => List(8L, 3L, 1L, 2L, 5L, 3L)\n            case\
    \ 8 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L)\n            case 9 => List(8L, 3L, 1L,\
    \ 2L, 5L, 3L, 2L, 1L)\n            case 10 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L,\
    \ 1L, 5L)\n            case 11 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L)\n\
    \            case 12 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L)\n   \
    \         case 13 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L)\n  \
    \          case 14 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L)\n\
    \            case 15 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L,\
    \ 3L)\n            case 16 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L,\
    \ 1L, 5L, 3L, 2L)\n            case 17 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L,\
    \ 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L)\n            case 18 => List(8L, 3L, 1L, 2L,\
    \ 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L)\n            case 19 =>\
    \ List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L, 3L)\n\
    \            case 20 => List(8L, 3L, 1L, 2L, 5L, 3L, 2L, 1L, 5L, 3L, 2L, 1L, 5L,\
    \ 3L, 2L, 1L, 5L, 3L, 2L)\n            case 21 => List(8L, 3L, 1L, ", "      \
    \  val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last) / 2\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val fibs = mutable.ListBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1)", "   \
    \     val fib : mutable.MutableList[Long] = mutable.MutableList(1)\n        fib(0)\
    \ = 3\n        fib(1) = 1\n        fib(2) = fib(0) + fib(1) + fib(3)\n       \
    \ val fibs = fib.toList\n        val fib1 = fibs.take(n + 1).reverse\n       \
    \ val fib2 = fibs.drop(n + 1).reverse\n        fib1 ::: fib2", "        val list\
    \ = new mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add(tri(n - 1) + tri(n - 2) + tri(n + 1)))\n        list.toList", " \
    \       val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list +=\
    \ 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n        list.toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val first = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n                first :: rec(n - 1)\n        }\n        rec.apply(n)",
  "        val rec : Long => List[Long] = { \n            if (n <= 1) List(1l.toLong)\n\
    \            else if (n % 2 == 0) List(1l.toLong, tri(n - 1).toLong + tri(n -\
    \ 2).toLong)\n            else List(1l.toLong, tri(n - 1).toLong, tri(n - 2).toLong,\
    \ tri(n + 1).toLong)\n        }\n        rec(n)", "        val fib : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri2 : List[Long] = List(0l, 1l, 2l)\n        val tri3 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri4 : List[Long] = List(0l, 1l, 2l)\n        val tri5\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri6 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri7 : List[Long] = List(0l, 1l, 2l)\n        val tri8 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri9 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri10 : List[Long] = List(0l, 1l, 2l)\n        val tri11 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri12 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri13 : List[Long] = List(0l, 1l, 2l)\n        val tri14 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri15 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri16 : List[Long] = List(0l, 1l, 2l)\n        val tri17 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri18 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri19 : List[Long] = List(0l, 1l, 2l)\n        val tri20 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri21 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri22 : List[Long] = List(0l, 1l, 2l)\n        val tri23 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri24 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri25 : List[Long] = List(0l, 1l, 2l)\n        val tri26 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri27 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri28 : List[Long] = List(0l, 1l, 2l)\n        val tri29 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri30 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri31 : List[Long] = List(0l, 1l, 2l)\n        val tri32 : List[Long",
  "        val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val a = tri(n - 1)\n                val b = tri(n - 2)\n             \
    \   val c = tri(n + 1)\n                a ::: b ::: c\n        }\n        rec.apply(n)",
  "        val fib : List[Long] = List(1l, 3l, 2l)\n        val tri : List[Long] =\
    \ if (n % 2 == 0) fib.drop(1).zip(fib.drop(2)).map(x => x._1 + x._2) else fib.drop(2).zip(fib.drop(1)).map(x\
    \ => x._1 + x._2 + x._3)\n        tri.take(n + 1).map(x => x.toLong)", "     \
    \   val list = mutable.ListBuffer[Long]()\n        list.add(3L)\n        list.add(1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1L)\n        list.add(n + 1L)\n        list.add(n + 1L)\n\
    \        list.add(n + 1", "        val fibs = mutable.ListBuffer[Long]()\n   \
    \     fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n       \
    \ fibs += (fibs.head + fibs.last + fibs.last)\n        fibs.take(n + 1)", "  \
    \      val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "       \
    \ val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n \
    \       else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val res : List[Long] = List()\
    \ \n        if (n == 0) res :+ 0\n        else if (n == 1) res :+ 1\n        else\
    \ if (n % 2 == 0) res :+ tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else res\
    \ :+ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n / 2)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val res : List[Long] = List() \n        if (n\
    \ == 0) res :+ 0\n        if (n == 1) res :+ 1\n        if (n % 2 == 0) res :+\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else res :+ tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1).map(_.toLong).toList",
  "        val l1 = List(1, 3)\n        val l2 = List(2, 3)\n        val l3 = List(3,\
    \ 8)\n        val l4 = List(4, 8)\n        val l5 = List(5, 16)\n        val l6\
    \ = List(6, 16)\n        val l7 = List(7, 32)\n        val l8 = List(8, 32)\n\
    \        val l9 = List(9, 64)\n        val l10 = List(10, 64)\n        val l11\
    \ = List(11, 128)\n        val l12 = List(12, 128)\n        val l13 = List(13,\
    \ 256)\n        val l14 = List(14, 256)\n        val l15 = List(15, 512)\n   \
    \     val l16 = List(16, 512)\n        val l17 = List(17, 1024)\n        val l18\
    \ = List(18, 1024)\n        val l19 = List(19, 2048)\n        val l20 = List(20,\
    \ 2048)\n        val l21 = List(21, 4096)\n        val l22 = List(22, 4096)\n\
    \        val l23 = List(23, 8192)\n        val l24 = List(24, 8192)\n        val\
    \ l25 = List(25, 16384)\n        val l26 = List(26, 16384)\n        val l27 =\
    \ List(27, 32768)\n        val l28 = List(28, 32768)\n        val l29 = List(29,\
    \ 65536)\n        val l30 = List(30, 65536)\n        val l31 = List(31, 131072)\n\
    \        val l32 = List(32, 131072)\n        val l33 = List(33, 262144)\n    \
    \    val l34 = List(34, 262144)\n        val l35 = List(35, 524288)\n        val\
    \ l36 = List(36, 524288)\n        val l37 = List(37, 1048576)\n        val l38\
    \ = List(38, 1048576)\n        val l39 = List(39, 2097152)\n        val l40 =\
    \ List(40, 2097152)\n        val l41 = List(41, 4194304)\n        val l42 = List(42,\
    \ 4194304)\n        val l43 = List(43, 8388608)\n        val l44 = List(44, 8388608)\n\
    \        val l45 = List(45, 16777216)\n        val l46 = List(46, 16777216)\n\
    \        val l47 = List(47, 33554432)\n        val l48 = List(48, 33554432)\n\
    \        val l49 = List(49, 67108864)\n        val l50 = List(50, 67108864)\n\
    \        val ", "        val fib : List[Long] = List(0l, 1l, 2l)\n        val\
    \ tri : List[Long] = List(0l, 1l, 2l)\n        val tri2 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri3 : List[Long] = List(0l, 1l, 2l)\n        val tri4\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri5 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri6 : List[Long] = List(0l, 1l, 2l)\n        val tri7 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri8 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri9 : List[Long] = List(0l, 1l, 2l)\n        val tri10 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri11 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri12 : List[Long] = List(0l, 1l, 2l)\n        val tri13 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri14 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri15 : List[Long] = List(0l, 1l, 2l)\n        val tri16 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri17 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri18 : List[Long] = List(0l, 1l, 2l)\n        val tri19 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri20 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri21 : List[Long] = List(0l, 1l, 2l)\n        val tri22 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri23 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri24 : List[Long] = List(0l, 1l, 2l)\n        val tri25 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri26 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri27 : List[Long] = List(0l, 1l, 2l)\n        val tri28 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri29 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri30 : List[Long] = List(0l, 1l, 2l)\n        val tri31 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri32 : List[Long", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add((x + list.last).asInstanceOf[Long]))\n\
    \        list.toList", "        val list = mutable.ListBuffer[Long]()\n      \
    \  val a = 2l\n        val b = 3l\n        val c = a + b\n        val d = c +\
    \ a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n   \
    \     val h = g + e\n        list += a\n        list += b\n        list += c\n\
    \        list += d\n        list += e\n        list += f\n        list += g\n\
    \        list += h\n        list += a + b\n        list += c + d\n        list\
    \ += e + f\n        list += g + h\n        list += a + b + c + d\n        list\
    \ += e + f + g + h\n        list += a + b + c + d + e + f + g + h\n        list\
    \ += a + b + c + d + e + f + g + h + a + b\n        list += c + d + e + f + g\
    \ + h + a + b + c + d\n        list += e + f + g + h + a + b + c + d + e + f +\
    \ g + h\n        list += g + h + a + b + c + d + e + f + g + h + a + b + c + d\n\
    \        list += h + a + b + c + d + e + f + g + h + a + b + c + d + e + f + g\
    \ + h\n        list += a + b + c + d + e + f + g + h + a + b + c + d + e + f +\
    \ g + h + a + b + c + d + e + f + g + h + a + b + c + d + e + f + g + h + a +\
    \ b + c + d + e + f + g + h + a + b + c + d + e + f + g + h + a + b + c + d +\
    \ e + f + g + h + a + b + c + d + e + f + g + h + a + b + c + d + e + f + g +\
    \ h + a + b + c + d + e + f + g + h + a + b + c + d + e + f + g + h + a + b +\
    \ c + d + e + f + g + h + a + b + c + d + e + f + g + h + a + b + c + d + e +\
    \ f + g + h + a + b + c + d + e + f + g + h + a + b + c + d + e + f + g + h +\
    \ a + b + c + d + e + f + g + h + a + b + c + ", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1L)\n            case 1 => List(3L)\n\
    \            case 2 => List(2L)\n            case n => \n                val l1\
    \ = tri(n - 1)\n                val l2 = tri(n - 2)\n                val l3 =\
    \ tri(n + 1)\n                l1 ::: l2 ::: l3\n        }\n        rec.apply(n)",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci +=\
    \ (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(1l)\n        list.add(3l)\n\
    \        list.add(2l)\n        list.", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1L)\n            case 1 => List(3L)\n\
    \            case 2 => List(2L)\n            case n => tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        }\n        rec.apply(n)", "        val list = mutable.ListBuffer[Long]()\n\
    \        val tri1 = if (n % 2 == 0) 3 else 1\n        val tri2 = if (n % 2 ==\
    \ 0) tri1 + 1 else tri1\n        val tri3 = if (n % 2 == 0) tri2 + 1 else tri2\n\
    \        list += tri1\n        list += tri2\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri3\n\
    \        list += tri3\n        list += tri3\n        list += tri3\n        list\
    \ += tri3\n        list += tri3\n        list += tri3\n        list += tri", " \
    \       val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val n1 = n - 1\n                val n2 = n - 2\n                val n3\
    \ = n + 3\n                val n4 = n + 4\n                val n5 = n + 5\n  \
    \              val n6 = n + 6\n                val n7 = n + 7\n              \
    \  val n8 = n + 8\n                val n9 = n + 9\n                val n10 = n\
    \ + 10\n                val n11 = n + 11\n                val n12 = n + 12\n \
    \               val n13 = n + 13\n                val n14 = n + 14\n         \
    \       val n15 = n + 15\n                val n16 = n + 16\n                val\
    \ n17 = n + 17\n                val n18 = n + 18\n                val n19 = n\
    \ + 19\n                val n20 = n + 20\n                val n21 = n + 21\n \
    \               val n22 = n + 22\n                val n23 = n + 23\n         \
    \       val n24 = n + 24\n                val n25 = n + 25\n                val\
    \ n26 = n + 26\n                val n27 = n + 27\n                val n28 = n\
    \ + 28\n                val n29 = n + 29\n                val n30 = n + 30\n \
    \               val n31 = n + 31\n                val n32 = n + 32\n         \
    \       val n33 = n + 33\n                val n34 = n + 34\n                val\
    \ n35 = n + 35\n                val n36 = n + 36\n                val n37 = n\
    \ + 37\n                val n38 = n + 38\n                val n39 = n + 39\n \
    \               val n40 = n + 40\n                val n41 = n + 41\n         \
    \       val n42 = n + 42\n                val n43 = n + 43\n                val\
    \ n44 = n + 44\n                val n45 = n + 45\n                val n46 = n\
    \ + 46\n                val n47 = n + 47\n                val n48 = n + 48\n \
    \               val n49 = n + 49\n                val n50 = n + 50\n         \
    \       val n51 = n + 51\n                val n52 = n + 52\n                val\
    \ n53 = n + 53\n                val n54 = n + 54\n                val n55 = n\
    \ + 55\n                val n56 = n + 56\n                val n57 = n + 57\n \
    \               val n58 = n + 58\n                val n59 = n + 59\n         \
    \       val n60 = n + 60\n                val n61 = n + 61\n                val\
    \ n6", "        val list = mutable.ListBuffer[Long]()\n        val a = 2l\n  \
    \      val b = 3l\n        val c = a + b\n        val d = c + a\n        val e\
    \ = d + b\n        val f = e + c\n        val g = f + d\n        val h = g + e\n\
    \        val i = h + f\n        val j = i + g\n        val k = j + h\n       \
    \ val l = k + i\n        list += a\n        list += b\n        list += c\n   \
    \     list += d\n        list += e\n        list += f\n        list += g\n   \
    \     list += h\n        list += i\n        list += j\n        list += k\n   \
    \     list += l\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong\
    \ + 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val tri = mutable.ListBuffer[Long]()\n        tri += 3\n        tri +=\
    \ (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        tri.toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n+1).map(_+_)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(nl.toLong)\n   \
    \     list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n      \
    \  list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n  \
    \      list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n     \
    \   list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n \
    \       list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n    \
    \    list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)", "        val fibo = mutable.ListBuffer[Long]()\n \
    \       fibo += 3\n        fibo += (fibo(n - 1) + fibo(n - 2) + fibo(n + 1))\n\
    \        if (n % 2 == 0) {\n            fibo\n        } else {\n            fibo.drop(1).reverse\n\
    \        }", "        val rec : Long => Long = { n =>\n            if (n % 2 ==\
    \ 0) \n                tri(n - 1) + tri(n - 2) + tri(n + 1)\n            else\n\
    \                tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        }\n        val res : List[Long] = List(rec(1l), rec(2l),\
    \ rec(3l))\n        res", "        val list = mutable.ListBuffer[Long]()\n   \
    \     val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n +\
    \ 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val tri = mutable.ListBuffer.empty[Long]\n\
    \        tri += 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     if (n % 2 == 0) tri += tri(n - 2)\n        else tri += tri(n + 1)\n    \
    \    tri.toList", "        val fibonacci = mutable.ListBuffer[Long]()\n      \
    \  fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last) / 2\n\
    \        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n\
    \        fibonacci.take(n + 1)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1)", "   \
    \     val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[Long]()\n        val r = mutable.ListBuffer[Long]()\n\
    \        val s = mutable.ListBuffer[Long]()\n        val t = mutable.ListBuffer[Long]()\n\
    \        val u = mutable.ListBuffer[Long]()\n        val v = mutable.ListBuffer[Long]()\n\
    \        val w = mutable.ListBuffer[Long]()\n        val x = mutable.ListBuffer[Long]()\n\
    \        val y = mutable.ListBuffer[Long]()\n        val z = mutable.ListBuffer[Long]()\n\
    \        val a = mutable.ListBuffer[Long]()\n        val b = mutable.ListBuffer[Long]()\n\
    \        val c = mutable.ListBuffer[Long]()\n        val d = mutable.ListBuffer[Long]()\n\
    \        val e = mutable.ListBuffer[Long]()\n        val f = mutable.ListBuffer[Long]()\n\
    \        val g = mutable.ListBuffer[Long]()\n        val h = mutable.ListBuffer[Long]()\n\
    \        val i = mutable.ListBuffer[Long]()\n        val j = mutable.ListBuffer[Long]()\n\
    \        val k = mutable.ListBuffer[Long]()\n        val l = mutable.ListBuffer[Long]()\n\
    \        val m = mutable.ListBuffer[Long]()\n        val n = mutable.ListBuffer[Long]()\n\
    \        val o = mutable.ListBuffer[Long]()\n        val p = mutable.ListBuffer[Long]()\n\
    \        val q = mutable.ListBuffer[", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val n1 = n - 1\n                val n2\
    \ = n - 2\n                val n3 = n + 1 \n                val n4 = n + 1\n \
    \               val n5 = n + 1\n                val n6 = n + 1\n             \
    \   val n7 = n + 1\n                val n8 = n + 1\n                val n9 = n\
    \ + 1\n                val n10 = n + 1\n                val n11 = n + 1\n    \
    \            val n12 = n + 1\n                val n13 = n + 1\n              \
    \  val n14 = n + 1\n                val n15 = n + 1\n                val n16 =\
    \ n + 1\n                val n17 = n + 1\n                val n18 = n + 1\n  \
    \              val n19 = n + 1\n                val n20 = n + 1\n            \
    \    val n21 = n + 1\n                val n22 = n + 1\n                val n23\
    \ = n + 1\n                val n24 = n + 1\n                val n25 = n + 1\n\
    \                val n26 = n + 1\n                val n27 = n + 1\n          \
    \      val n28 = n + 1\n                val n29 = n + 1\n                val n30\
    \ = n + 1\n                val n31 = n + 1\n                val n32 = n + 1\n\
    \                val n33 = n + 1\n                val n34 = n + 1\n          \
    \      val n35 = n + 1\n                val n36 = n + 1\n                val n37\
    \ = n + 1\n                val n38 = n + 1\n                val n39 = n + 1\n\
    \                val n40 = n + 1\n                val n41 = n + 1\n          \
    \      val n42 = n + 1\n                val n43 = n + 1\n                val n44\
    \ = n + 1\n                val n45 = n + 1\n                val n46 = n + 1\n\
    \                val n47 = n + 1\n                val n48 = n + 1\n          \
    \      val n49 = n + 1\n                val n50 = n + 1\n                val n51\
    \ = n + 1\n                val n52 = n + 1\n                val n53 = n + 1\n\
    \                val n54 = n + 1\n                val n55 = n + 1\n          \
    \      val n56 = n + 1\n                val n57 = n + 1\n                val n58\
    \ = n + 1\n                val n59 = n + 1\n                val n60 = n + 1\n\
    \                val n61 = n + 1\n                val n62 = n + 1\n          \
    \      val n63 = n + 1\n                val n64 = n + 1\n                val n65\
    \ = n + 1\n                val n66 = n + 1\n                val n67 = n", "  \
    \      val fibo = mutable.ListBuffer[Long]()\n        fibo += 3\n        fibo\
    \ += (fibo(1) + fibo(2))\n        fibo += (fibo(1) + fibo(2) + fibo(3))\n    \
    \    fibo.take(n + 1).map(_.toLong)", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1l.toLong)\n            case 1 =>\
    \ List(3l.toLong)\n            case 2 => List(2l.toLong)\n            case n =>\
    \ \n                val a = tri(n - 1)\n                val b = tri(n - 2)\n \
    \               val c = tri(n + 1)\n                a ::: b ::: c\n        }\n\
    \        rec.apply(n)", "        val fibs = mutable.ListBuffer[Long]()\n     \
    \   fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", " \
    \       val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val first = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                first\
    \ :: first\n        }\n        rec.apply(n)", "        val fib : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri : List[Long] = List(0l, 1l, 2l)\n        val\
    \ tri1 : List[Long] = List(0l, 1l, 2l)\n        val tri2 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri3 : List[Long] = List(0l, 1l, 2l)\n        val tri4\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri5 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri6 : List[Long] = List(0l, 1l, 2l)\n        val tri7 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri8 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri9 : List[Long] = List(0l, 1l, 2l)\n        val tri10 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri11 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri12 : List[Long] = List(0l, 1l, 2l)\n        val tri13 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri14 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri15 : List[Long] = List(0l, 1l, 2l)\n        val tri16 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri17 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri18 : List[Long] = List(0l, 1l, 2l)\n        val tri19 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri20 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri21 : List[Long] = List(0l, 1l, 2l)\n        val tri22 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri23 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri24 : List[Long] = List(0l, 1l, 2l)\n        val tri25 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri26 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri27 : List[Long] = List(0l, 1l, 2l)\n        val tri28 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri29 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri30 : List[Long] = List(0l, 1l, 2l)\n        val tri31 : List[Long] = ",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n        fibs += (fibs.head\
    \ + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n + 1).toList", " \
    \       val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n    \
    \    list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n\
    \ + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n   \
    \     val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n    \
    \    list += b\n        list += c\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        list += n\n        list.toList", " \
    \       val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(1l)\n            case 1 => List(3l)\n            case n => \n         \
    \       val first = tri(n - 1) + tri(n - 2) + tri(n + 1)\n                if (n\
    \ % 2 == 0) first else first :: first\n        }\n        rec.apply(n)", "   \
    \     val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri2 : List[Long] = List(0l, 1l, 2l)\n       \
    \ val tri3 : List[Long] = List(0l, 1l, 2l)\n        val tri4 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri5 : List[Long] = List(0l, 1l, 2l)\n        val tri6\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri7 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri8 : List[Long] = List(0l, 1l, 2l)\n        val tri9 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri10 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri11 : List[Long] = List(0l, 1l, 2l)\n        val tri12 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri13 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri14 : List[Long] = List(0l, 1l, 2l)\n        val tri15 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri16 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri17 : List[Long] = List(0l, 1l, 2l)\n        val tri18 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri19 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri20 : List[Long] = List(0l, 1l, 2l)\n        val tri21 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri22 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri23 : List[Long] = List(0l, 1l, 2l)\n        val tri24 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri25 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri26 : List[Long] = List(0l, 1l, 2l)\n        val tri27 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri28 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri29 : List[Long] = List(0l, 1l, 2l)\n        val tri30 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri31 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri32 : List[Long", "        val rec = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) rec += 0\n        else if (n == 1) rec += 3\n        else\
    \ rec += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        rec.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        list.add(1l)\n        list.add(nl.toLong)\n   \
    \     list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n      \
    \  list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n  \
    \      list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n     \
    \   list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n \
    \       list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n    \
    \    list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(1l)\n        list.add(nl.toLong)\n        list.add(1l)\n   \
    \     list.add(nl.toLong)", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last)\
    \ / 2\n        fibonacci.take(n+1)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n+1)", "        val list = mutable.ListBuffer[Long]()\n      \
    \  val a = 2\n        val b = 3\n        val c = a + b\n        val d = c + a\n\
    \        val e = d + b\n        val f = e + c\n        list += a\n        list\
    \ += b\n        list += c\n        list += d\n        list += e\n        list\
    \ += f\n        list += a + b\n        list += c + d\n        list += e + f\n\
    \        list += a + b + c\n        list += d + e + f\n        list += a + b +\
    \ c + d\n        list += e + f + a + b\n        list += f + e + a + b\n      \
    \  list += a + b + c + d + e\n        list += d + e + f + a + b\n        list\
    \ += e + f + a + b + c\n        list += f + e + a + b + c\n        list += a +\
    \ b + c + d + e + f\n        list += d + e + f + a + b + c\n        list += e\
    \ + f + a + b + c + d\n        list += f + e + a + b + c + d\n        list +=\
    \ a + b + c + d + e + f + a\n        list += d + e + f + a + b + c + d\n     \
    \   list += e + f + a + b + c + d + e\n        list += f + e + a + b + c + d +\
    \ e\n        list += a + b + c + d + e + f + a + b\n        list += d + e + f\
    \ + a + b + c + d\n        list += e + f + a + b + c + d + e\n        list +=\
    \ f + e + a + b + c + d + e\n        list += a + b + c + d + e + f + a + b + c\n\
    \        list += d + e + f + a + b + c + d + e\n        list += e + f + a + b\
    \ + c + d + e + f\n        list += f + e + a + b + c + d + e + f\n        list\
    \ += a + b + c + d + e + f + a + b + c\n        list += d + e + f + a + b + c\
    \ + d + e\n        list += e + f + a + b + c + d + e + f\n        list += f +\
    \ e + a + b + c + d + e + f\n        list += a + b + c + d + e + f + a + b + c\
    \ + d\n        list += d + e + f + a + b + c + d + e + f", "        val rec :\
    \ PartialFunction[Long, List[Long]] = {\n            case 0 => List(0l)\n    \
    \        case 1 => List(1l)\n            case n => \n                val a = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                a.filter(_ % 2 == 0).map(_ +\
    \ n).toList ::: a\n        }\n        rec.apply(n).reverse", "        val list\
    \ = mutable.ListBuffer[Long]()\n        val a = 2\n        val b = 3\n       \
    \ val c = a + b\n        val d = c + a\n        val e = d + b\n        val f =\
    \ e + c\n        list += a\n        list += b\n        list += c\n        list\
    \ += d\n        list += e\n        list += f\n        list += a + b\n        list\
    \ += c + d\n        list += e + f\n        list += a + c + e\n        list +=\
    \ b + d + f\n        list += a + b + c + d + e\n        list += b + c + d + e\
    \ + f\n        list += c + d + e + f\n        list += d + e + f\n        list\
    \ += e + f\n        list += f\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n <= 1L) {\n            list += n\n        } else {\n           \
    \ val a = tri(n - 1L)\n            val b = tri(n - 2L)\n            list += a(0L)\
    \ + b(1L) + a(2L)\n        }\n        list.toList", "        val fib : List[Long]\
    \ = List(1l, 3l)\n        val tri : List[Long] = if (n % 2 == 0) fib else fib.tail.zip(fib.tail.tail).map(x\
    \ => x._1 + x._2)\n        val result : List[Long] = if (n >= 0) tri.take(n +\
    \ 1) else tri\n        result", "        val fibo = mutable.ListBuffer[Long]()\n\
    \        fibo += 3\n        fibo += fibo.last.asInstanceOf[Long] + fibo.last.asInstanceOf[Long]\
    \ + fibo.last.asInstanceOf[Long]\n        fibo.take(n + 1).map(_.toLong)", " \
    \       val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val n1 = n - 1\n                val n2 = n - 2\n                val n3\
    \ = n + 1 \n                val n4 = n + 1\n                val n5 = n + 1\n \
    \               val n6 = n + 1\n                val n7 = n + 1\n             \
    \   val n8 = n + 1\n                val n9 = n + 1\n                val n10 =\
    \ n + 1\n                val n11 = n + 1\n                val n12 = n + 1\n  \
    \              val n13 = n + 1\n                val n14 = n + 1\n            \
    \    val n15 = n + 1\n                val n16 = n + 1\n                val n17\
    \ = n + 1\n                val n18 = n + 1\n                val n19 = n + 1\n\
    \                val n20 = n + 1\n                val n21 = n + 1\n          \
    \      val n22 = n + 1\n                val n23 = n + 1\n                val n24\
    \ = n + 1\n                val n25 = n + 1\n                val n26 = n + 1\n\
    \                val n27 = n + 1\n                val n28 = n + 1\n          \
    \      val n29 = n + 1\n                val n30 = n + 1\n                val n31\
    \ = n + 1\n                val n32 = n + 1\n                val n33 = n + 1\n\
    \                val n34 = n + 1\n                val n35 = n + 1\n          \
    \      val n36 = n + 1\n                val n37 = n + 1\n                val n38\
    \ = n + 1\n                val n39 = n + 1\n                val n40 = n + 1\n\
    \                val n41 = n + 1\n                val n42 = n + 1\n          \
    \      val n43 = n + 1\n                val n44 = n + 1\n                val n45\
    \ = n + 1\n                val n46 = n + 1\n                val n47 = n + 1\n\
    \                val n48 = n + 1\n                val n49 = n + 1\n          \
    \      val n50 = n + 1\n                val n51 = n + 1\n                val n52\
    \ = n + 1\n                val n53 = n + 1\n                val n54 = n + 1\n\
    \                val n55 = n + 1\n                val n56 = n + 1\n          \
    \      val n57 = n + 1\n                val n58 = n + 1\n                val n59\
    \ = n + 1\n                val n60 = n + 1\n                val n61 = n + 1\n\
    \                val n62 = n + 1\n                val n63 = n + 1\n          \
    \      val n64 = n + 1\n                val n65 = n + 1\n                val n66\
    \ = n + 1\n                val n67 = n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n  \
    \      list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val rec : Long => List[Long] = { \n          \
    \  if (n <= 0) Nil\n            else { \n                val first = if (n % 2\
    \ == 0) 3l else 1l\n                val second = if (n % 2 == 0) 1l else 3l\n\
    \                val third = if (n % 2 == 0) 2l else 1l\n                List(first.toLong,\
    \ second.toLong, third.toLong, n.toLong) \n            }\n        }\n        rec(n)",
  "        val list = mutable.ListBuffer[Long]()\n        val first = (3l).toLong\n\
    \        val second = (first+1l).toLong\n        val third = (first+2l).toLong\n\
    \        list += first\n        list += second\n        list += third\n      \
    \  list += n\n        list += (n+1l).toLong\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last) / 2\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n      \
    \  val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong +\
    \ 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.tail.head + fibonacci.tail.tail.head).toLong\n\
    \        fibonacci += (fibonacci.head + fibonacci.tail.head + fibonacci.tail.tail.tail.head).toLong\n\
    \        fibonacci += (fibonacci.head + fibonacci.tail.head + fibonacci.tail.tail.tail.tail.head).toLong\n\
    \        fibonacci.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3L)\n        if (n % 2 == 0) {\n            list.add(1L)\n \
    \           list.add(n / 2L)\n        }\n        else {\n            list.add(tri(n\
    \ - 1L) + tri(n - 2L) + tri(n + 1L))\n        }\n        list.toList", "     \
    \   val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(nl.toLong)\n        list.add(1l)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.toLong)\n        list.add(nl.toLong)\n        list.add(nl.toLong)\n\
    \        list.add(nl.", "        val list = mutable.ListBuffer[Long]()\n     \
    \   val a = 2l\n        val b = 3l\n        val c = a + b\n        val d = c +\
    \ a\n        val e = d + b\n        val f = e + c\n        list += a\n       \
    \ list += b\n        list += c\n        list += d\n        list += e\n       \
    \ list += f\n        list += a + b\n        list += c + d\n        list += e +\
    \ f\n        list += a + b + c\n        list += d + e + f\n        list += a +\
    \ b + c + d\n        list += e + f + a + b\n        list += f + e + a + b + c\n\
    \        list += f + e + a + b + c + d\n        list += f + e + a + b + c + d\
    \ + e\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val first = (3l).toLong\n        val second = (1l).toLong\n        val\
    \ third = (2l).toLong\n        val fourth = (3l).toLong\n        val fifth = (1l).toLong\n\
    \        val sixth = (1l).toLong\n        val seventh = (1l).toLong\n        val\
    \ eighth = (1l).toLong\n        val nineth = (1l).toLong\n        val tenth =\
    \ (1l).toLong\n        val eleventh = (1l).toLong\n        val twelfth = (1l).toLong\n\
    \        val thirteenth = (1l).toLong\n        val fourteenth = (1l).toLong\n\
    \        val fifteenth = (1l).toLong\n        val sixteenth = (1l).toLong\n  \
    \      val seventeenth = (1l).toLong\n        val eighteenth = (1l).toLong\n \
    \       val nineteenth = (1l).toLong\n        val twentieth = (1l).toLong\n  \
    \      val thirtieth = (1l).toLong\n        val fourtieth = (1l).toLong\n    \
    \    val fiftieth = (1l).toLong\n        val sixtieth = (1l).toLong\n        val\
    \ seventieth = (1l).toLong\n        val eightieth = (1l).toLong\n        val ninetieth\
    \ = (1l).toLong\n        val twentyeth = (1l).toLong\n        val thirtyeth =\
    \ (1l).toLong\n        val fourtyeth = (1l).toLong\n        val fiftyeth = (1l).toLong\n\
    \        val sixtyeth = (1l).toLong\n        val seventyeth = (1l).toLong\n  \
    \      val eightyeth = (1l).toLong\n        val ninetyeth = (1l).toLong\n    \
    \    val hundredth = (1l).toLong\n        val thousandth = (1l).toLong\n     \
    \   val millionth = (1l).toLong\n        val billionth = (1l).toLong\n       \
    \ val trillionth = (1l).toLong\n        val quadrillionth = (1l).toLong\n    \
    \    val quintillionth = (1l).toLong\n        val sextillionth = (1l).toLong\n\
    \        val septillionth = (1l).toLong\n        val octil", "        val fib\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] = List(0l, 1l,\
    \ 2l)\n        val result : List[Long] = List(0l, 1l, 2l)\n        val i : Long\
    \ = 0\n        val j : Long = 1\n        val k : Long = 2\n        while (i <\
    \ n) {\n            tri(i) = fib(j) + fib(k)\n            i += 1\n           \
    \ j += 1\n            k += 1\n        }\n        result", "        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[",
  "        val list = mutable.ListBuffer[Long]()\n        list.+=(n)\n        list.+=(n/2)\n\
    \        list.+=((n-1)/2)\n        list.+=((n+2)/2)\n        list.toList", " \
    \       val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n \
    \       fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci\
    \ += (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.toList",
  "        val list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n   \
    \     val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n    \
    \    list += b\n        list += c\n        list.toList", "        val fibo = mutable.ListBuffer[Long]()\n\
    \        fibo += 3\n        fibo.take(n + 1).foreach(x => fibo += x)\n       \
    \ fibo.take(n + 1).map(x => x.toLong)", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val a = tri(n - 1)\n                val\
    \ b = tri(n - 2)\n                val c = tri(n + 1)\n                a :+ b :+\
    \ c\n        }\n        rec.apply(n)", "        val res : List[Long] = List(0l,\
    \ 1l, 2l)\n        val even = n % 2 == 0\n        val odd = !even\n        val\
    \ tri = if (even) 3 else 4\n        val tri1 = tri + tri\n        val tri2 = tri1\
    \ + tri\n        val tri3 = tri2 + tri\n        val tri4 = tri3 + tri\n      \
    \  val tri5 = tri4 + tri\n        val tri6 = tri5 + tri\n        val tri7 = tri6\
    \ + tri\n        val tri8 = tri7 + tri\n        val tri9 = tri8 + tri\n      \
    \  val tri10 = tri9 + tri\n        val tri11 = tri10 + tri\n        val tri12\
    \ = tri11 + tri\n        val tri13 = tri12 + tri\n        val tri14 = tri13 +\
    \ tri\n        val tri15 = tri14 + tri\n        val tri16 = tri15 + tri\n    \
    \    val tri17 = tri16 + tri\n        val tri18 = tri17 + tri\n        val tri19\
    \ = tri18 + tri\n        val tri20 = tri19 + tri\n        val tri21 = tri20 +\
    \ tri\n        val tri22 = tri21 + tri\n        val tri23 = tri22 + tri\n    \
    \    val tri24 = tri23 + tri\n        val tri25 = tri24 + tri\n        val tri26\
    \ = tri25 + tri\n        val tri27 = tri26 + tri\n        val tri28 = tri27 +\
    \ tri\n        val tri29 = tri28 + tri\n        val tri30 = tri29 + tri\n    \
    \    val tri31 = tri30 + tri\n        val tri32 = tri31 + tri\n        val tri33\
    \ = tri32 + tri\n        val tri34 = tri33 + tri\n        val tri35 = tri34 +\
    \ tri\n        val tri36 = tri35 + tri\n        val tri37 = tri36 + tri\n    \
    \    val tri38 = tri37 + tri\n        val tri39 = tri38 + tri\n        val tri40\
    \ = tri39 + tri\n        val tri41 = tri40 + tri\n        val tri42 = tri41 +\
    \ tri\n        val tri43 = tri42 + tri\n        val tri44 = tri43 + tri\n    \
    \    val tri45 = tri44 + tri\n        val tri46 = tri45 + tri\n        val tri47\
    \ = tri46 + tri\n        val tri48 = tri47 + tri\n        val tri49 = tri48 + ",
  "        val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] =\
    \ if (n % 2 == 0) fib.tail else fib.init\n        tri.take(n + 1).map(_.toLong)",
  "        val tri = mutable.ListBuffer[Long]()\n        tri += 3\n        tri +=\
    \ (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        if (n % 2 == 0) tri += tri(n\
    \ - 1) + tri(n - 2)\n        else tri += tri(n + 1)\n        tri.toList", "  \
    \      val list = mutable.ListBuffer[Long]()\n        val a = 2l\n        val\
    \ b = 3l\n        val c = a + b\n        val d = c + a\n        val e = d + b\n\
    \        val f = e + c\n        list += a\n        list += b\n        list +=\
    \ c\n        list += d\n        list += e\n        list += f\n        list +=\
    \ a + b\n        list += c + d\n        list += e + f\n        list += a + b +\
    \ c\n        list += d + e + f\n        list += a + b + c + d\n        list +=\
    \ e + f + a + b\n        list += f + e + a + b + c\n        list += f + e + a\
    \ + b + c + d\n        list += f + e + a + b + c + d + e\n        list.toList",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list +=\
    \ 0\n        else if (n == 1) list += 3\n        else {\n            val a = tri(n\
    \ - 1)\n            val b = tri(n - 2)\n            list += a.head + b.head +\
    \ b.last\n        }\n        list.toList", "        val a = mutable.ListBuffer(3l)\n\
    \        val b = mutable.ListBuffer(1l)\n        val c = mutable.ListBuffer(2l)\n\
    \        val d = mutable.ListBuffer(8l)\n        val list = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val i = 2\n        while (i <= n) {\n      \
    \      list += a\n            list += b\n            list += c\n            list\
    \ += d\n            a += b\n            b += c\n            c += d\n         \
    \   d += a\n            i += 2\n        }\n        list.toList", "        val\
    \ tri = mutable.ListBuffer[Long]()\n        tri += 3\n        tri += (tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        tri.toList", "        val fibonacci =\
    \ mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci += (fibonacci(1)\
    \ + fibonacci(2))\n        fibonacci += (fibonacci(1) + fibonacci(2) + fibonacci(3))\n\
    \        fibonacci.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        val a = n.toLong\n        val b = n.toLong + 1\n        val c = n.toLong\
    \ + 2\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.last + fibs.last + fibs.last)\n        fibs += (fibs.last + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "       \
    \ val list = mutable.ListBuffer[Long]()\n        val a = 2\n        val b = 3\n\
    \        val c = a + b\n        val d = c + b\n        val e = d + c\n       \
    \ val f = e + d\n        val g = f + e\n        val h = g + f\n        list +=\
    \ a\n        list += b\n        list += c\n        list += d\n        list +=\
    \ e\n        list += f\n        list += g\n        list += h\n        list +=\
    \ a + b\n        list += c + d\n        list += e + f\n        list += g + h\n\
    \        list += a + b + c + d\n        list += e + f + g + h\n        list.toList",
  "        val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri2 : List[Long] = List(0l, 1l, 2l)\n       \
    \ val tri3 : List[Long] = List(0l, 1l, 2l)\n        val tri4 : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri5 : List[Long] = List(0l, 1l, 2l)\n        val tri6\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tri7 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri8 : List[Long] = List(0l, 1l, 2l)\n        val tri9 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri10 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri11 : List[Long] = List(0l, 1l, 2l)\n        val tri12 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri13 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri14 : List[Long] = List(0l, 1l, 2l)\n        val tri15 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri16 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri17 : List[Long] = List(0l, 1l, 2l)\n        val tri18 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri19 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri20 : List[Long] = List(0l, 1l, 2l)\n        val tri21 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri22 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri23 : List[Long] = List(0l, 1l, 2l)\n        val tri24 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri25 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri26 : List[Long] = List(0l, 1l, 2l)\n        val tri27 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri28 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri29 : List[Long] = List(0l, 1l, 2l)\n        val tri30 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri31 : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri32 : List[Long", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.last + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.last + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n      \
    \  list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.last))\n        list.toList",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci +=\
    \ (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.toList",
  "        val fib : List[Long] = List(0l, 1l, 2l)\n        val tri : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri_sum : List[Long] = List(0l, 1l, 2l)\n    \
    \    val tri_sum_index : List[Int] = List(0, 0, 0)\n        val tri_sum_index2\
    \ : List[Int] = List(0, 0, 0)\n        val tri_sum_index3 : List[Int] = List(0,\
    \ 0, 0)\n        val tri_sum_index4 : List[Int] = List(0, 0, 0)\n        val tri_sum_index5\
    \ : List[Int] = List(0, 0, 0)\n        val tri_sum_index6 : List[Int] = List(0,\
    \ 0, 0)\n        val tri_sum_index7 : List[Int] = List(0, 0, 0)\n        val tri_sum_index8\
    \ : List[Int] = List(0, 0, 0)\n        val tri_sum_index9 : List[Int] = List(0,\
    \ 0, 0)\n        val tri_sum_index10 : List[Int] = List(0, 0, 0)\n        val\
    \ tri_sum_index11 : List[Int] = List(0, 0, 0)\n        val tri_sum_index12 : List[Int]\
    \ = List(0, 0, 0)\n        val tri_sum_index13 : List[Int] = List(0, 0, 0)\n \
    \       val tri_sum_index14 : List[Int] = List(0, 0, 0)\n        val tri_sum_index15\
    \ : List[Int] = List(0, 0, 0)\n        val tri_sum_index16 : List[Int] = List(0,\
    \ 0, 0)\n        val tri_sum_index17 : List[Int] = List(0, 0, 0)\n        val\
    \ tri_sum_index18 : List[Int] = List(0, 0, 0)\n        val tri_sum_index19 : List[Int]\
    \ = List(0, 0, 0)\n        val tri_sum_index20 : List[Int] = List(0, 0, 0)\n \
    \       val tri_sum_index21 : List[Int] = List(0, 0, 0)\n        val tri_sum_index22\
    \ : List[Int] = List(0, 0, 0)\n        val tri_sum_index23 : List[Int] = List(0,\
    \ 0, 0)\n        val tri_sum_index24 : List[Int] = List(0, 0, 0)\n        val\
    \ tri_sum_index25 : List[Int] = List(0, 0, 0)\n        val tri_sum_index26 : List[Int]\
    \ = List(0, 0, 0)\n        val tri_sum_index27 : List[Int] = List(0, 0, 0)\n \
    \       val tri_sum_index28 : List[Int] = List(0, 0, 0)\n        val tri_sum_index29\
    \ : List[Int] = List(0, 0, 0)\n        val tri_sum_index30 : List[Int] = List(0,\
    \ 0, 0)\n        val tri_sum_index31 : List[Int] = List(0, 0, 0)\n        val\
    \ tri_sum_index", "        val fibs = mutable.ListBuffer[Long]()\n        fibs\
    \ += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last) / 2\n        fibs.take(n + 1).map(_.toLong)", "   \
    \     val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n \
    \       else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) result += 0\n        else if (n == 1) result += 3\n     \
    \   else result += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        result.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.add(nl.toLong)\n   \
    \     list.take(n+1).map(x => tri(x+1) + tri(x+2) + tri(x+3))", "        val l\
    \ = new mutable.ListBuffer[Long]()\n        if (n == 0) l += 0\n        else if\
    \ (n == 1) l += 3\n        else l += tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \      l.toList", "        val tri = mutable.ListBuffer[Long]()\n        tri +=\
    \ 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        tri.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n        fibs.take(n+1)",
  "        val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n     \
    \   val even = if (n % 2 == 0) list.add(1l) else list\n        val odd = if (n\
    \ % 2 == 1) list.add(n + 1l) else list\n        val result = even ++ odd\n   \
    \     result.take(n + 1)", "        val list = mutable.ListBuffer[Long]()\n  \
    \      if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\n        list.toList",
  "        val rec : Long => List[Long] = { n =>\n            val first = if (n %\
    \ 2 == 0) 3l else 1l\n            val second = if (n % 2 == 0) 1l else 3l\n  \
    \          val third = if (n % 2 == 0) 2l else 1l\n            List(first.toLong,\
    \ second.toLong, third.toLong)\n        }\n        val result = rec(n)\n     \
    \   result.dropRight(1).reverse", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val fibonacci = mutable.ListBuffer[Long]()\n \
    \       fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last)\
    \ / 2\n        fibonacci.take(n + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.+=(n)\n        list.+=(n/2).filter(_%2==0)\n        list.+=((n-1)/2).filter(_%2==1).map(_+(n-1)).filter(_%2==0)\n\
    \        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).map(_.toLong)",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n+1).map(_+_).toList", "       \
    \ val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last) / 2\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val a = 2\n        val b =\
    \ 3\n        val c = a + b\n        val d = c + a\n        val e = d + b\n   \
    \     val f = e + c\n        val g = f + d\n        val h = g + e\n        val\
    \ i = h + f\n        val j = i + g\n        val k = j + h\n        val l = k +\
    \ i\n        val m = l + j\n        val n = m + k\n        val o = (n + m).toLong\n\
    \        val p = List(o)\n        p :: tri(n)", "        val fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(3l.toLong)\n        val fib1 : mutable.MutableList[Long]\
    \ = mutable.MutableList(1l.toLong)\n        val fib2 : mutable.MutableList[Long]\
    \ = mutable.MutableList(2l.toLong)\n        val fib3 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib4 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib5 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib6 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib7 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib8 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib9 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib10 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib11 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib12 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib13 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib14 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib15 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib16 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib17 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib18 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib19 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib20 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib21 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib22 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib23 : mutable.MutableList[Long]\
    \ = mutable.MutableList(8l.toLong)\n        val fib24 : mutable.MutableList[Long]\
    \ = mut", "        val list = mutable.ListBuffer[Long]()\n        val first =\
    \ (3l).toLong\n        val second = (1l).toLong\n        val third = (2l).toLong\n\
    \        val fourth = (8l).toLong\n        list += first\n        list += second\n\
    \        list += third\n        list += fourth\n        if (n % 2 == 0) {\n  \
    \          list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += third\n            list += fourth\n            list += third\n\
    \            list += fourth\n            list += third\n            list += fourth\n\
    \            list += thir", "        val fibs = mutable.ListBuffer[Long]()\n \
    \       fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n     \
    \   fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val tri = mutable.ListBuffer.empty[Long]\n   \
    \     tri += 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  if (n % 2 == 0) tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        else\
    \ tri", "        val rec : PartialFunction[Long, List[Long]] = {\n           \
    \ case 0 => List(1l)\n            case 1 => List(3l)\n            case 2 => List(2l)\n\
    \            case n => tri(n - 1) + tri(n - 2) + tri(n + 1)\n        }\n     \
    \   rec.apply(n).reverse", "        val rec : PartialFunction[Long, List[Long]]\
    \ = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n      \
    \      case n => \n                val a = tri(n - 1)\n                val b =\
    \ tri(n - 2)\n                val c = tri(n + 1)\n                a ::: b :::\
    \ c\n        }\n        rec.apply(n)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n  \
    \      if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n % 2\
    \ == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2)\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) result ++= List(0l)\n        else if (n == 1) result ++=\
    \ List(3l)\n        else if (n % 2 == 0) result ++= tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n        else result ++= tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \       result.toList", "        val fibs = mutable.ListBuffer[Long]()\n     \
    \   fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs += (fibs.last\
    \ + fibs.last + fibs.head + 1) / 2\n        fibs.take(n + 1).toList", "      \
    \  val fib : List[Long] = List(1l, 3l)\n        val tri : List[Long] = if (n %\
    \ 2 == 0) fib else fib.tail.zip(fib.tail.tail).map { case (a, b) => a + b }\n\
    \        val result : List[Long] = if (n % 2 == 0) tri.tail else tri.tail.tail.zip(tri.tail.tail).map\
    \ { case (a, b) => a + b }\n        result", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = 2l\n        val b = 3l\n        val c = a + b\n        val d\
    \ = c + a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n\
    \        val h = g + e\n        val i = h + f\n        val j = i + g\n       \
    \ val k = j + h\n        val l = k + i\n        list += a\n        list += b\n\
    \        list += c\n        list += d\n        list += e\n        list += f\n\
    \        list += g\n        list += h\n        list += i\n        list += j\n\
    \        list += k\n        list += l\n        list.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else if\
    \ (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        list.toList", "        val res : List[Long] = List(0l)\n        val fib\
    \ : List[Long] = List(3l, 1l, 2l)\n        val fib1 : List[Long] = fib.tail\n\
    \        val fib2 : List[Long] = fib1.tail\n        val fib3 : List[Long] = fib2.tail\n\
    \        val fib4 : List[Long] = fib3.tail\n        val fib5 : List[Long] = fib4.tail\n\
    \        val fib6 : List[Long] = fib5.tail\n        val fib7 : List[Long] = fib6.tail\n\
    \        val fib8 : List[Long] = fib7.tail\n        val fib9 : List[Long] = fib8.tail\n\
    \        val fib10 : List[Long] = fib9.tail\n        val fib11 : List[Long] =\
    \ fib10.tail\n        val fib12 : List[Long] = fib11.tail\n        val fib13 :\
    \ List[Long] = fib12.tail\n        val fib14 : List[Long] = fib13.tail\n     \
    \   val fib15 : List[Long] = fib14.tail\n        val fib16 : List[Long] = fib15.tail\n\
    \        val fib17 : List[Long] = fib16.tail\n        val fib18 : List[Long] =\
    \ fib17.tail\n        val fib19 : List[Long] = fib18.tail\n        val fib20 :\
    \ List[Long] = fib19.tail\n        val fib21 : List[Long] = fib20.tail\n     \
    \   val fib22 : List[Long] = fib21.tail\n        val fib23 : List[Long] = fib22.tail\n\
    \        val fib24 : List[Long] = fib23.tail\n        val fib25 : List[Long] =\
    \ fib24.tail\n        val fib26 : List[Long] = fib25.tail\n        val fib27 :\
    \ List[Long] = fib26.tail\n        val fib28 : List[Long] = fib27.tail\n     \
    \   val fib29 : List[Long] = fib28.tail\n        val fib30 : List[Long] = fib29.tail\n\
    \        val fib31 : List[Long] = fib30.tail\n        val fib32 : List[Long] =\
    \ fib31.tail\n        val fib33 : List[Long] = fib32.tail\n        val fib34 :\
    \ List[Long] = fib33.tail\n        val fib35 : List[Long] = fib34.tail\n     \
    \   val fib36 : List[Long] = fib35.tail\n        val fib37 : List[Long] = fib36.tail\n\
    \        val fib38 : List[Long] = fib37.tail\n        val fib39 : List[Long] =\
    \ fib38.tail\n        val fib40 : List[Long] = fib39.tail\n        val fib41 :\
    \ List[Long] = fib40.tail", "        val list = mutable.ListBuffer[Long]()\n \
    \       if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n        \
    \    list += a(0) + b(1) + a(2)\n        }\n        list.toList", "        val\
    \ triList = new mutable.ListBuffer[Long]()\n        triList.add(3l)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong)\n\
    \        triList.add(1l)\n        triList.add(nl.toLong)\n        triList.add(1l)\n\
    \        triList.add(nl.toLong)\n        triList.add(1l)\n        triList.add(nl.toLong",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list +=\
    \ 0\n        if (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n        list.toList", "        val fibonacci : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tribonacci : List[Long] = List(0l, 1l, 2l)\n\
    \        val tribonacciTail : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTail : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTail : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTail : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTail :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, 1l, 2l)\n        val tribonacciTailTailTailTailTailTailTailTailTailTail\
    \ : List[Long] = List(0l, ", "        val rec : PartialFunction[Long, List[Long]]\
    \ = {\n            case 0 => List(0l)\n            case 1 => List(0l, 1l)\n  \
    \          case 2 => List(0l, 1l, 2l)\n            case 3 => List(0l, 1l, 2l,\
    \ 3l)\n            case 4 => List(0l, 1l, 2l, 3l, 4l)\n            case 5 => List(0l,\
    \ 1l, 2l, 3l, 4l, 5l)\n            case 6 => List(0l, 1l, 2l, 3l, 4l, 5l, 6l)\n\
    \            case 7 => List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l)\n            case\
    \ 8 => List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l)\n            case 9 => List(0l,\
    \ 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l)\n            case 10 => List(0l, 1l, 2l,\
    \ 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n            case 11 => List(0l, 1l, 2l, 3l,\
    \ 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l)\n            case 12 => List(0l, 1l, 2l, 3l,\
    \ 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l)\n            case 13 => List(0l, 1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l)\n            case 14 =>\
    \ List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l)\n    \
    \        case 15 => List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l,\
    \ 13l, 14l, 15l)\n            case 16 => List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l,\
    \ 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l)\n            case 17 => List(0l,\
    \ 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l, 15l, 16l, 17l)\n\
    \            case 18 => List(0l, 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l,\
    \ 12l, 13l, 14l, 15l, 16l, 17l, 18l)\n            case 19 => List(0l, 1l, 2l,\
    \ 3l, 4l, 5l, 6l, 7l, 8l, ", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3l)\n        if (n % 2 == 0) {\n            list.add(1l)\n \
    \           list.add(n / 2l)\n        } else {\n            list.add(tri(n - 1l)\
    \ + tri(n - 2l) + tri(n + 1l))\n        }\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last)\n\
    \        fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ - 3)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = new mutable.ListBuffer[Long]()\n        if (n <= 1L) list +=\
    \ n\n        else {\n            val a = tri(n - 1L)\n            val b = tri(n\
    \ - 2L)\n            val c = tri(n + 1L)\n            list += a(0)\n         \
    \   list += b(0)\n            list += c(0)\n        }\n        list.toList", " \
    \       val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val a = tri(n - 1)\n                val b = tri(n - 2)\n             \
    \   val c = tri(n + 1)\n                a :+ b :+ c\n        }\n        rec.apply(n)"]
stop_tokens:
- "\n    }\n"
