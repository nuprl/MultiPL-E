name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val triList = mutable.ListBuffer[Long]()\n        triList +=\
    \ 3\n        triList += triList.last\n        triList += triList.last\n      \
    \  triList += triList.last\n        triList += triList.last\n        triList +=\
    \ triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += tri", " \
    \       val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add(tri(n - 1) + tri(n - 2) + tri(n + 1)))\n        list.toList", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).map(_.toLong)", "        val fibonacci\
    \ : List[Long] = List(1l, 2l, 3l)\n        val tribonacci : List[Long] = fibonacci.take(n\
    \ + 1).map(x => x + x.toLong)\n        tribonacci", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(0l)\n            case 1 => List(1l)\n\
    \            case n => \n                val a = tri(n - 1)\n                val\
    \ b = tri(n - 2)\n                val c = tri(n + 1)\n                a ::: b\
    \ ::: c\n        }\n        rec.apply(n)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).map(_.toLong)", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val rec : PartialFunction[Long, List[Long]] = {\n            case 0 => List(1l)\n\
    \            case 1 => List(3l)\n            case 2 => List(2l)\n            case\
    \ 3 => List(8l)\n            case 4 => List(3l, 2l, 1l, 8l)\n            case\
    \ 5 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 6 => List(3l, 2l,\
    \ 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 7 => List(3l, 2l,\
    \ 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 8\
    \ => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l,\
    \ 2l, 1l, 8l)\n            case 9 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case\
    \ 10 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 11 => List(3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l,\
    \ 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n            case 12 => List(3l,\
    \ 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l,\
    \ 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l)\n          \
    \  case 13 => List(3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l,\
    \ 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, 1l, 8l, 3l, 2l, ", "        val\
    \ list = mutable.ListBuffer[Long]()\n        val a = tri(n-1)\n        val b =\
    \ tri(n-2)\n        val c = tri(n+2)\n        list += a\n        list += b\n \
    \       list += c\n        list.toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = {\n            case 0 => List(1l)\n            case 1 => List(3l)\n\
    \            case n => \n                val first = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n                if (n % 2 == 0) first else first :: second\n   \
    \     }\n        rec.apply(n)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3L)\n        list.add(1L)\n        list.add(2L)\n        list.add(8L)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs += (fibs.last\
    \ + fibs.last + fibs.head + fibs.last) / 2\n        fibs.take(n + 1).map(_.toLong)",
  "        val rec : PartialFunction[Long, List[Long]] = {\n            case 0 =>\
    \ List(0l)\n            case 1 => List(1l)\n            case n => \n         \
    \       val n1 = n - 1\n                val n2 = n - 2\n                val n3\
    \ = n + 3\n                val n4 = n + 4\n                val n5 = n + 5\n  \
    \              val n6 = n + 6\n                val n7 = n + 7\n              \
    \  val n8 = n + 8\n                val n9 = n + 9\n                val n10 = n\
    \ + 10\n                val n11 = n + 11\n                val n12 = n + 12\n \
    \               val n13 = n + 13\n                val n14 = n + 14\n         \
    \       val n15 = n + 15\n                val n16 = n + 16\n                val\
    \ n17 = n + 17\n                val n18 = n + 18\n                val n19 = n\
    \ + 19\n                val n20 = n + 20\n                val n21 = n + 21\n \
    \               val n22 = n + 22\n                val n23 = n + 23\n         \
    \       val n24 = n + 24\n                val n25 = n + 25\n                val\
    \ n26 = n + 26\n                val n27 = n + 27\n                val n28 = n\
    \ + 28\n                val n29 = n + 29\n                val n30 = n + 30\n \
    \               val n31 = n + 31\n                val n32 = n + 32\n         \
    \       val n33 = n + 33\n                val n34 = n + 34\n                val\
    \ n35 = n + 35\n                val n36 = n + 36\n                val n37 = n\
    \ + 37\n                val n38 = n + 38\n                val n39 = n + 39\n \
    \               val n40 = n + 40\n                val n41 = n + 41\n         \
    \       val n42 = n + 42\n                val n43 = n + 43\n                val\
    \ n44 = n + 44\n                val n45 = n + 45\n                val n46 = n\
    \ + 46\n                val n47 = n + 47\n                val n48 = n + 48\n \
    \               val n49 = n + 49\n                val n50 = n + 50\n         \
    \       val n51 = n + 51\n                val n52 = n + 52\n                val\
    \ n53 = n + 53\n                val n54 = n + 54\n                val n55 = n\
    \ + 55\n                val n56 = n + 56\n                val n57 = n + 57\n \
    \               val n58 = n + 58\n                val n59 = n + 59\n         \
    \       val n60 = n + 60\n                val n61 = n + 61\n                val\
    \ n6", "        val list = new mutable.ListBuffer[Long]()\n        list.add(3l)\n\
    \        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n        list.take(n\
    \ + 1).foreach(x => list.add(x.toLong + list.last))\n        list.toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        list.add(3l)\n        list.add(1l)\n\
    \        list.add(2l)\n        list.add(8l)\n        list.take(n + 1).foreach(x\
    \ => list.add(x + list.get(list.size - 1)))\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last) / 2\n\
    \        fibs.take(n + 1).map(_.toLong)", "        val fib : List[Long] = List(0l,\
    \ 1l, 2l)\n        val tri : List[Long] = List(0l, 1l, 2l)\n        val tri2 :\
    \ List[Long] = List(0l, 1l, 2l)\n        val tri3 : List[Long] = List(0l, 1l,\
    \ 2l)\n        val tri4 : List[Long] = List(0l, 1l, 2l)\n        val tri5 : List[Long]\
    \ = List(0l, 1l, 2l)\n        val tri6 : List[Long] = List(0l, 1l, 2l)\n     \
    \   val tri7 : List[Long] = List(0l, 1l, 2l)\n        val tri8 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri9 : List[Long] = List(0l, 1l, 2l)\n       \
    \ val tri10 : List[Long] = List(0l, 1l, 2l)\n        val tri11 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri12 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri13 : List[Long] = List(0l, 1l, 2l)\n        val tri14 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri15 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri16 : List[Long] = List(0l, 1l, 2l)\n        val tri17 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri18 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri19 : List[Long] = List(0l, 1l, 2l)\n        val tri20 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri21 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri22 : List[Long] = List(0l, 1l, 2l)\n        val tri23 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri24 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri25 : List[Long] = List(0l, 1l, 2l)\n        val tri26 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri27 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri28 : List[Long] = List(0l, 1l, 2l)\n        val tri29 : List[Long] =\
    \ List(0l, 1l, 2l)\n        val tri30 : List[Long] = List(0l, 1l, 2l)\n      \
    \  val tri31 : List[Long] = List(0l, 1l, 2l)\n        val tri32 : List[Long",
  "        val list = mutable.ListBuffer[Long]()\n        val tri1 = (3 : Long)\n\
    \        val tri2 = (tri1 + tri1)\n        val tri3 = (tri2 + tri2)\n        val\
    \ tri4 = (tri3 + tri3)\n        list += tri1\n        list += tri2\n        list\
    \ += tri3\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4\n        list += tri4\n        list += tri4\n        list\
    \ += tri4\n        list += tri4\n        list += tri4\n        list += tri4\n\
    \        list += tri4", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3l)\n        list.add(1l)\n        list.add(2l)\n        list.add(8l)\n\
    \        list.take(n + 1).foreach(x => list.add(x + list.get(list.size - 1)))\n\
    \        list.toList", "        val a = mutable.ListBuffer[Long]()\n        val\
    \ b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer[Long]()\n\
    \        val r = mutable.ListBuffer[Long]()\n        val s = mutable.ListBuffer[Long]()\n\
    \        val t = mutable.ListBuffer[Long]()\n        val u = mutable.ListBuffer[Long]()\n\
    \        val v = mutable.ListBuffer[Long]()\n        val w = mutable.ListBuffer[Long]()\n\
    \        val x = mutable.ListBuffer[Long]()\n        val y = mutable.ListBuffer[Long]()\n\
    \        val z = mutable.ListBuffer[Long]()\n        val a = mutable.ListBuffer[Long]()\n\
    \        val b = mutable.ListBuffer[Long]()\n        val c = mutable.ListBuffer[Long]()\n\
    \        val d = mutable.ListBuffer[Long]()\n        val e = mutable.ListBuffer[Long]()\n\
    \        val f = mutable.ListBuffer[Long]()\n        val g = mutable.ListBuffer[Long]()\n\
    \        val h = mutable.ListBuffer[Long]()\n        val i = mutable.ListBuffer[Long]()\n\
    \        val j = mutable.ListBuffer[Long]()\n        val k = mutable.ListBuffer[Long]()\n\
    \        val l = mutable.ListBuffer[Long]()\n        val m = mutable.ListBuffer[Long]()\n\
    \        val n = mutable.ListBuffer[Long]()\n        val o = mutable.ListBuffer[Long]()\n\
    \        val p = mutable.ListBuffer[Long]()\n        val q = mutable.ListBuffer["]
stop_tokens:
- "\n    }\n"
