name: HumanEval_129_minPath
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a grid with N rows and N columns (N >= 2) and a positive integer k,\
  \ \n    // each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    //\
  \ You have to find the minimum path of length k in the grid. You can start\n   \
  \ // from any cell, and in each step you can move to any of the neighbor cells,\n\
  \    // in other words, you can go to cells which share an edge with you current\n\
  \    // cell.\n    // Please note that a path of length k means visiting exactly\
  \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
  \    // A path A (of length k) is considered less than a path B (of length k) if\n\
  \    // after making the ordered lists of the values on the cells that A and B go\n\
  \    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n\
  \    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  \    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    //\
  \ lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n   \
  \ // Return an ordered list of the values on the cells that the minimum path go\
  \ through.\n    // Examples:    \n    // >>> minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l))\n    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n\
  \    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l))\n    // (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]],\
  \ k : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
  \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
  \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
  \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
  \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
  \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
  \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
  \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
  \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
  \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
  \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
  \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong),\
  \ List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong,\
  \ 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
  \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
  \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong),\
  \ List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val grid = grid.toList\n        val n = grid.size\n       \
    \ val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n  \
    \      val ans = List[Long]()\n        val visitedList = new mutable.ArrayList[Long]()\n\
    \        val visitedList2 = new mutable.ArrayList[Long]()\n        val visitedList3\
    \ = new mutable.ArrayList[Long]()\n        val visitedList4 = new mutable.ArrayList[Long]()\n\
    \        val visitedList5 = new mutable.ArrayList[Long]()\n        val visitedList6\
    \ = new mutable.ArrayList[Long]()\n        val visitedList7 = new mutable.ArrayList[Long]()\n\
    \        val visitedList8 = new mutable.ArrayList[Long]()\n        val visitedList9\
    \ = new mutable.ArrayList[Long]()\n        val visitedList10 = new mutable.ArrayList[Long]()\n\
    \        val visitedList11 = new mutable.ArrayList[Long]()\n        val visitedList12\
    \ = new mutable.ArrayList[Long]()\n        val visitedList13 = new mutable.ArrayList[Long]()\n\
    \        val visitedList14 = new mutable.ArrayList[Long]()\n        val visitedList15\
    \ = new mutable.ArrayList[Long]()\n        val visitedList16 = new mutable.ArrayList[Long]()\n\
    \        val visitedList17 = new mutable.ArrayList[Long]()\n        val visitedList18\
    \ = new mutable.ArrayList[Long]()\n        val visitedList19 = new mutable.ArrayList[Long]()\n\
    \        val visitedList20 = new mutable.ArrayList[Long]()\n        val visitedList21\
    \ = new mutable.ArrayList[Long]()\n        val visitedList22 = new mutable.ArrayList[Long]()\n\
    \        val visitedList23 = new mutable.ArrayList[Long]()\n        val visitedList24\
    \ = new mutable.ArrayList[Long]()\n        val visitedList25 = new mutable.ArrayList[Long]()\n\
    \        val visitedList26 = new mutable.ArrayList[Long]()\n        val visitedList27\
    \ = new mutable.ArrayList[Long]()\n        val visitedList28 = new mutable.ArrayList[Long]()\n\
    \        val visitedList29 = new mutable.ArrayList[Long]()\n        val visitedList30\
    \ = new mutable.ArrayList[Long]()\n        val visitedList31 = new mutable.ArrayList[Long]()\n\
    \        val visite", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = List[Long]()\n        val queue = mutable.Queue[Long]()\n \
    \       val visitedQueue = mutable.Queue[Long]()\n        val visitedQueueSize\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize2 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize3 = mutable.Queue[Long]()\n        val visitedQueueSize4\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize5 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize6 = mutable.Queue[Long]()\n        val visitedQueueSize7\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize8 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize9 = mutable.Queue[Long]()\n        val visitedQueueSize10\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize11 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize12 = mutable.Queue[Long]()\n        val visitedQueueSize13\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize14 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize15 = mutable.Queue[Long]()\n        val visitedQueueSize16\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize17 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize18 = mutable.Queue[Long]()\n        val visitedQueueSize19\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize20 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize21 = mutable.Queue[Long]()\n        val visitedQueueSize22\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize23 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize24 = mutable.Queue[Long]()\n        val visitedQueueSize25\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize26 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize27 = mutable.Queue[Long]()\n        val visitedQueueSize28\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize29 = mutable.", "     \
    \   val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).map(_.toLong).toList\n        val lst_B\
    \ = grid.map(_.toList).map(_.toLong).reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._2)\n        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._1).reverse\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._1).reverse.map(x => x._2)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._2)\n        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._1).reverse.map(x => x._1).reverse.map(x => x._1).reverse\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._1).reverse.map(x => x._2)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._1).reverse.map(x => x._2)\n        val lst_L = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._1).reverse.map(x => x._1).reverse.map(x => x._2)\n        val lst_M =\
    \ lst_A.zip(lst_B).map(x => x._1 < x._", "        val m = grid.length\n      \
    \  val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedMap = new\
    \ mutable.HashMap[Long, Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap28 = new mutable.HashMap[Long, ", "        val m = grid.length\n \
    \       val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 1 to m) {\n            val row = grid\n            val row\
    \ = grid\n            val row = grid\n            val row = grid\n           \
    \ val row = grid\n            val row = grid\n            val row = grid\n   \
    \         val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = ", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = new mutable.ArrayBuffer[Long]()\n\
    \        val visitedAns = new mutable.HashSet[Long]()\n        val visitedAnsSet\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet2 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet3 = new mutable.HashSet[Long]()\n        val visitedAnsSet4\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet5 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet6 = new mutable.HashSet[Long]()\n        val visitedAnsSet7\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet8 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet9 = new mutable.HashSet[Long]()\n        val visitedAnsSet10\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet11 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet12 = new mutable.HashSet[Long]()\n        val visitedAnsSet13\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet14 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet15 = new mutable.HashSet[Long]()\n        val visitedAnsSet16\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet17 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet18 = new mutable.HashSet[Long]()\n        val visitedAnsSet19\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet20 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet21 = new mutable.HashSet[Long]()\n        val visitedAnsSet22\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet23 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet24 = new mutable.HashSet[Long]()\n        val visitedAnsSet25\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet26", "        val m\
    \ = grid.length\n        val n = grid(0).length\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = List[Long]()\n\
    \        val visitedAns = List[Long]()\n        val visitedAnsSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val\
    \ visitedAnsSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n     \
    \   val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n       \
    \ val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val\
    \ visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSetSet =\
    \ mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n  \
    \      val visitedAnsSetSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n \
    \       val visitedAnsSetSetSetSetSetSetSetSetSet = ", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 1 to m) {\n            val row = grid(i)\n            val col\
    \ = grid(0).zipWithIndex.filter(_._1 == i).map(_._2).max\n            row += col\n\
    \            grid += row\n        }\n        val visited = mutable.ArrayBuffer.empty[Int](n)\n\
    \        val ans = mutable.ArrayBuffer.empty[Long](n)\n        val visitedSet\
    \ = mutable.HashSet[Int]()\n        val ansList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetList = mutable.HashSet[Int]()\n        val ansListList\
    \ = mutable.ArrayBuffer.empty[Long](n)\n        val visitedSetListList = mutable.HashSet[Int]()\n\
    \        val ansListListList = mutable.ArrayBuffer.empty[Long](n)\n        val\
    \ visitedSetListListList = mutable.HashSet[Int]()\n        val ansListListListList\
    \ = mutable.ArrayBuffer.empty[Long](n)\n        val visitedSetListListListList\
    \ = mutable.HashSet[Int]()\n        val ansListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListList = mutable.HashSet[Int]()\n       \
    \ val ansListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n     \
    \   val visitedSetListListListListListList = mutable.HashSet[Int]()\n        val\
    \ ansListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n     \
    \   val visitedSetListListListListListListList = mutable.HashSet[Int]()\n    \
    \    val ansListListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListListListList = mutable.HashSet[Int]()\n\
    \        val ansListListListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListListListListList = mutable.HashSet[Int]()\n\
    \        val ansListListListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListListListListListList = mutable.HashSet[Int]()\n\
    \        val ansListListListListListListListListListList = mutable.ArrayBuffer.empty[",
  "        val m = grid.length\n        val n = grid(0).length\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val lst_A\
    \ = grid.map(x => x.map(y => y)).toList\n        val lst_B = grid.map(x => x.map(y\
    \ => y)).toList\n        val lst_C = lst_A.map(x => x.toList).flatten\n      \
    \  val lst_D = lst_B.map(x => x.toList).flatten\n        val lst_E = lst_C.map(x\
    \ => x.toList).flatten\n        val lst_F = lst_D.map(x => x.toList).flatten\n\
    \        val lst_G = lst_E.map(x => x.toList).flatten\n        val lst_H = lst_F.map(x\
    \ => x.toList).flatten\n        val lst_I = lst_G.map(x => x.toList).flatten\n\
    \        val lst_J = lst_H.map(x => x.toList).flatten\n        val lst_K = lst_I.map(x\
    \ => x.toList).flatten\n        val lst_L = lst_J.map(x => x.toList).flatten\n\
    \        val lst_M = lst_K.map(x => x.toList).flatten\n        val lst_N = lst_L.map(x\
    \ => x.toList).flatten\n        val lst_O = lst_M.map(x => x.toList).flatten\n\
    \        val lst_P = lst_O.map(x => x.toList).flatten\n        val lst_Q = lst_P.map(x\
    \ => x.toList).flatten\n        val lst_R = lst_Q.map(x => x.toList).flatten\n\
    \        val lst_S = lst_R.map(x => x.toList).flatten\n        val lst_T = lst_S.map(x\
    \ => x.toList).flatten\n        val lst_U = lst_T.map(x => x.toList).flatten\n\
    \        val lst_V = lst_U.map(x => x.toList).flatten\n        val lst_W = lst_V.map(x\
    \ => x.toList).flatten\n        val lst_X = lst_W.map(x => x.toList).flatten\n\
    \        val lst_Y = lst_X.map(x => x.toList).flatten\n        val lst_Z = lst_Y.map(x\
    \ => x.toList).flatten\n        val lst_A = lst_Z.map(x => x.toList).flatten\n\
    \        val l", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visitedList\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        ", "        val n = grid.length\n        val m = grid(0).length\n   \
    \     val lst_A = grid.map(x => x.map(y => y)).toList\n        val lst_B = grid.map(x\
    \ => x.map(y => y)).toList\n        val lst_C = lst_A.map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x ",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._1))\n        val lst_F = lst_A.zip(lst_B).map(x => (x._2, x._2))\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_J = lst_A.zip(lst_B).map(x => (x._2, x._2))\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => (x._1, x._1))\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._2))\n        val lst_N = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._2))\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_R = lst_A.zip(lst_B).map(x => (x._2, x._1))\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => (x._2, x._2))\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_V = lst_A.zip(lst_B).map(x => (x._2, x._2))\n\
    \        ", "        val N = grid.size\n        val m = grid.head\n        val\
    \ n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_V = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        ", "        val N = grid.size\n        val m = grid.head\n        val\
    \ n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_R = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_V = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        ", "        val n = grid.length\n        val m = grid(0).length\n   \
    \     val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).toList\n\
    \        val lst_C = lst_A.map(x => x.toList)\n        val lst_D = lst_B.map(x\
    \ => x.toList)\n        val lst_E = lst_C.map(x => x.toList)\n        val lst_F\
    \ = lst_D.map(x => x.toList)\n        val lst_G = lst_E.map(x => x.toList)\n \
    \       val lst_H = lst_F.map(x => x.toList)\n        val lst_I = lst_G.map(x\
    \ => x.toList)\n        val lst_J = lst_H.map(x => x.toList)\n        val lst_K\
    \ = lst_I.map(x => x.toList)\n        val lst_L = lst_J.map(x => x.toList)\n \
    \       val lst_M = lst_K.map(x => x.toList)\n        val lst_N = lst_M.map(x\
    \ => x.toList)\n        val lst_O = lst_N.map(x => x.toList)\n        val lst_P\
    \ = lst_O.map(x => x.toList)\n        val lst_Q = lst_P.map(x => x.toList)\n \
    \       val lst_R = lst_Q.map(x => x.toList)\n        val lst_S = lst_R.map(x\
    \ => x.toList)\n        val lst_T = lst_S.map(x => x.toList)\n        val lst_U\
    \ = lst_T.map(x => x.toList)\n        val lst_V = lst_U.map(x => x.toList)\n \
    \       val lst_W = lst_V.map(x => x.toList)\n        val lst_X = lst_W.map(x\
    \ => x.toList)\n        val lst_Y = lst_X.map(x => x.toList)\n        val lst_Z\
    \ = lst_Y.map(x => x.toList)\n        val lst_A = lst_Z.map(x => x.toList)\n \
    \       val lst_B = lst_A.map(x => x.toList)\n        val lst_C = lst_B.map(x\
    \ => x.toList)\n        val lst_D = lst_C.map(x => x.toList)\n        val lst_E\
    \ = lst_D.map(x => x.toList)\n        val lst_F = lst_E.map(x => x.toList)\n \
    \       val lst_G = lst_F.", "        val grid = grid.toList\n        val n =\
    \ grid.size\n        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = List[Long]()\n        val queue = mutable.Queue[Long]()\n \
    \       val visitedList = new mutable.HashSet[Long]()\n        val queueList =\
    \ new mutable.Queue[Long]()\n        val queueList2 = new mutable.Queue[Long]()\n\
    \        val queueList3 = new mutable.Queue[Long]()\n        val queueList4 =\
    \ new mutable.Queue[Long]()\n        val queueList5 = new mutable.Queue[Long]()\n\
    \        val queueList6 = new mutable.Queue[Long]()\n        val queueList7 =\
    \ new mutable.Queue[Long]()\n        val queueList8 = new mutable.Queue[Long]()\n\
    \        val queueList9 = new mutable.Queue[Long]()\n        val queueList10 =\
    \ new mutable.Queue[Long]()\n        val queueList11 = new mutable.Queue[Long]()\n\
    \        val queueList12 = new mutable.Queue[Long]()\n        val queueList13\
    \ = new mutable.Queue[Long]()\n        val queueList14 = new mutable.Queue[Long]()\n\
    \        val queueList15 = new mutable.Queue[Long]()\n        val queueList16\
    \ = new mutable.Queue[Long]()\n        val queueList17 = new mutable.Queue[Long]()\n\
    \        val queueList18 = new mutable.Queue[Long]()\n        val queueList19\
    \ = new mutable.Queue[Long]()\n        val queueList20 = new mutable.Queue[Long]()\n\
    \        val queueList21 = new mutable.Queue[Long]()\n        val queueList22\
    \ = new mutable.Queue[Long]()\n        val queueList23 = new mutable.Queue[Long]()\n\
    \        val queueList24 = new mutable.Queue[Long]()\n        val queueList25\
    \ = new mutable.Queue[Long]()\n        val queueList26 = new mutable.Queue[Long]()\n\
    \        val queueList27 = new mutable.Queue[Long]()\n        val queueList28\
    \ = new mutable.Queue[Long]()\n        val queueList29 = new mutable.Queue[Long]()\n\
    \        val queueList30 = new mutable.Queue[Long]()\n        val queueList31\
    \ = new mutable.Queue[Long]()\n        val queueList32 = new mutable.Queue", " \
    \       val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n        val\
    \ lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val lst_E =\
    \ List[Long]()\n        val lst_F = List[Long]()\n        val lst_G = List[Long]()\n\
    \        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n        val\
    \ lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val lst_L =\
    \ List[Long]()\n        val lst_M = List[Long]()\n        val lst_N = List[Long]()\n\
    \        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n        val\
    \ lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val lst_S =\
    \ List[Long]()\n        val lst_T = List[Long]()\n        val lst_U = List[Long]()\n\
    \        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n        val\
    \ lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val lst_Z =\
    \ List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val ", "        val grid = grid.toList\n     \
    \   val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(x\
    \ => x.toList).sortBy(x => x.toLong).map(x => x.toLong).toList\n        val lst_B\
    \ = grid.map(x => x.toList).sortBy(x => x.toLong).map(x => x.toLong).toList\n\
    \        val lst_C = lst_A.zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x =>\
    \ x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x.", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._1))\n\
    \        val lst_D = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._2))\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._3))\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._4))\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._5))\n\
    \        val lst_H = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._6))\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._7))\n\
    \        val lst_J = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._8))\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._9))\n\
    \        val lst_L = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._10))\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._11))\n\
    \        val lst_N = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._12))\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._13))\n\
    \        val lst_P = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._14))\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._15))\n\
    \        val lst_R = lst_A.zip(lst_", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val visited = new Array[Boolean](n)\n        val\
    \ result = new Array[Long](k)\n        val lst_A = grid.map(_.toList)\n      \
    \  val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n \
    \       val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_B.map(_.toList)\n\
    \        val lst_F = lst_B.map(_.toList)\n        val lst_G = lst_C.map(_.toList)\n\
    \        val lst_H = lst_C.map(_.toList)\n        val lst_I = lst_D.map(_.toList)\n\
    \        val lst_J = lst_D.map(_.toList)\n        val lst_K = lst_E.map(_.toList)\n\
    \        val lst_L = lst_E.map(_.toList)\n        val lst_M = lst_F.map(_.toList)\n\
    \        val lst_N = lst_F.map(_.toList)\n        val lst_O = lst_G.map(_.toList)\n\
    \        val lst_P = lst_G.map(_.toList)\n        val lst_Q = lst_H.map(_.toList)\n\
    \        val lst_R = lst_H.map(_.toList)\n        val lst_S = lst_I.map(_.toList)\n\
    \        val lst_T = lst_I.map(_.toList)\n        val lst_U = lst_J.map(_.toList)\n\
    \        val lst_V = lst_J.map(_.toList)\n        val lst_W = lst_K.map(_.toList)\n\
    \        val lst_X = lst_K.map(_.toList)\n        val lst_Y = lst_L.map(_.toList)\n\
    \        val lst_Z = lst_L.map(_.toList)\n        val lst_AA = lst_M.map(_.toList)\n\
    \        val lst_AB = lst_M.map(_.toList)\n        val lst_AC = lst_N.map(_.toList)\n\
    \        val lst_AD = lst_N.map(_.toList)\n        val lst_AE = lst_O.map(_.toList)\n\
    \        val lst_AF = lst_O.map(_.toList)\n        val lst_AG = lst_P.map(_.toList)\n\
    \        val lst_AH = lst_P.map(_.toList)\n        val lst_AI = lst_Q.map(_.toList)\n\
    \        val lst_"]
stop_tokens:
- "\n    }\n"
