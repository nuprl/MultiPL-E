name: HumanEval_129_minPath
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a grid with N rows and N columns (N >= 2) and a positive integer k,\
  \ \n    // each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    //\
  \ You have to find the minimum path of length k in the grid. You can start\n   \
  \ // from any cell, and in each step you can move to any of the neighbor cells,\n\
  \    // in other words, you can go to cells which share an edge with you current\n\
  \    // cell.\n    // Please note that a path of length k means visiting exactly\
  \ k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n\
  \    // A path A (of length k) is considered less than a path B (of length k) if\n\
  \    // after making the ordered lists of the values on the cells that A and B go\n\
  \    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n\
  \    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  \    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    //\
  \ lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n   \
  \ // Return an ordered list of the values on the cells that the minimum path go\
  \ through.\n    // Examples:    \n    // >>> minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l))\n    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n\
  \    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l))\n    // (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]],\
  \ k : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong,\
  \ 8l.toLong, 9l.toLong))), (3l)).equals((List[Long](1l.toLong, 2l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong),\
  \ List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong,\
  \ 2l.toLong))), (1l)).equals((List[Long](1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong), List[Long](13l.toLong,\
  \ 14l.toLong, 15l.toLong, 16l.toLong))), (4l)).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 4l.toLong, 13l.toLong, 10l.toLong), List[Long](5l.toLong, 7l.toLong, 12l.toLong,\
  \ 1l.toLong), List[Long](3l.toLong, 16l.toLong, 11l.toLong, 15l.toLong), List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong))), (7l)).equals((List[Long](1l.toLong, 10l.toLong,\
  \ 1l.toLong, 10l.toLong, 1l.toLong, 10l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](8l.toLong,\
  \ 14l.toLong, 9l.toLong, 2l.toLong), List[Long](6l.toLong, 4l.toLong, 13l.toLong,\
  \ 15l.toLong), List[Long](5l.toLong, 7l.toLong, 1l.toLong, 12l.toLong), List[Long](3l.toLong,\
  \ 10l.toLong, 11l.toLong, 16l.toLong))), (5l)).equals((List[Long](1l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 1l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](11l.toLong,\
  \ 8l.toLong, 7l.toLong, 2l.toLong), List[Long](5l.toLong, 16l.toLong, 14l.toLong,\
  \ 4l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](12l.toLong,\
  \ 13l.toLong, 10l.toLong, 1l.toLong))), (9l)).equals((List[Long](1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](12l.toLong, 13l.toLong, 10l.toLong,\
  \ 1l.toLong), List[Long](9l.toLong, 3l.toLong, 15l.toLong, 6l.toLong), List[Long](5l.toLong,\
  \ 16l.toLong, 14l.toLong, 4l.toLong), List[Long](11l.toLong, 8l.toLong, 7l.toLong,\
  \ 2l.toLong))), (12l)).equals((List[Long](1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong,\
  \ 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 6l.toLong))));\n\
  \    assert(minPath((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 4l.toLong),\
  \ List[Long](3l.toLong, 1l.toLong, 5l.toLong), List[Long](6l.toLong, 8l.toLong,\
  \ 9l.toLong))), (8l)).equals((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](6l.toLong,\
  \ 1l.toLong, 5l.toLong), List[Long](3l.toLong, 8l.toLong, 9l.toLong), List[Long](2l.toLong,\
  \ 7l.toLong, 4l.toLong))), (8l)).equals((List[Long](1l.toLong, 5l.toLong, 1l.toLong,\
  \ 5l.toLong, 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong), List[Long](3l.toLong, 4l.toLong))), (10l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong))));\n    assert(minPath((List[List[Long]](List[Long](1l.toLong, 3l.toLong),\
  \ List[Long](3l.toLong, 2l.toLong))), (10l)).equals((List[Long](1l.toLong, 3l.toLong,\
  \ 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val grid = grid.toList\n        val n = grid.size\n       \
    \ val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n  \
    \      val ans = List[Long]()\n        val visitedList = new mutable.ArrayList[Long]()\n\
    \        val visitedList2 = new mutable.ArrayList[Long]()\n        val visitedList3\
    \ = new mutable.ArrayList[Long]()\n        val visitedList4 = new mutable.ArrayList[Long]()\n\
    \        val visitedList5 = new mutable.ArrayList[Long]()\n        val visitedList6\
    \ = new mutable.ArrayList[Long]()\n        val visitedList7 = new mutable.ArrayList[Long]()\n\
    \        val visitedList8 = new mutable.ArrayList[Long]()\n        val visitedList9\
    \ = new mutable.ArrayList[Long]()\n        val visitedList10 = new mutable.ArrayList[Long]()\n\
    \        val visitedList11 = new mutable.ArrayList[Long]()\n        val visitedList12\
    \ = new mutable.ArrayList[Long]()\n        val visitedList13 = new mutable.ArrayList[Long]()\n\
    \        val visitedList14 = new mutable.ArrayList[Long]()\n        val visitedList15\
    \ = new mutable.ArrayList[Long]()\n        val visitedList16 = new mutable.ArrayList[Long]()\n\
    \        val visitedList17 = new mutable.ArrayList[Long]()\n        val visitedList18\
    \ = new mutable.ArrayList[Long]()\n        val visitedList19 = new mutable.ArrayList[Long]()\n\
    \        val visitedList20 = new mutable.ArrayList[Long]()\n        val visitedList21\
    \ = new mutable.ArrayList[Long]()\n        val visitedList22 = new mutable.ArrayList[Long]()\n\
    \        val visitedList23 = new mutable.ArrayList[Long]()\n        val visitedList24\
    \ = new mutable.ArrayList[Long]()\n        val visitedList25 = new mutable.ArrayList[Long]()\n\
    \        val visitedList26 = new mutable.ArrayList[Long]()\n        val visitedList27\
    \ = new mutable.ArrayList[Long]()\n        val visitedList28 = new mutable.ArrayList[Long]()\n\
    \        val visitedList29 = new mutable.ArrayList[Long]()\n        val visitedList30\
    \ = new mutable.ArrayList[Long]()\n        val visitedList31 = new mutable.ArrayList[Long]()\n\
    \        val visite", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = List[Long]()\n        val queue = mutable.Queue[Long]()\n \
    \       val visitedQueue = mutable.Queue[Long]()\n        val visitedQueueSize\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize2 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize3 = mutable.Queue[Long]()\n        val visitedQueueSize4\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize5 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize6 = mutable.Queue[Long]()\n        val visitedQueueSize7\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize8 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize9 = mutable.Queue[Long]()\n        val visitedQueueSize10\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize11 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize12 = mutable.Queue[Long]()\n        val visitedQueueSize13\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize14 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize15 = mutable.Queue[Long]()\n        val visitedQueueSize16\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize17 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize18 = mutable.Queue[Long]()\n        val visitedQueueSize19\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize20 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize21 = mutable.Queue[Long]()\n        val visitedQueueSize22\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize23 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize24 = mutable.Queue[Long]()\n        val visitedQueueSize25\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize26 = mutable.Queue[Long]()\n\
    \        val visitedQueueSize27 = mutable.Queue[Long]()\n        val visitedQueueSize28\
    \ = mutable.Queue[Long]()\n        val visitedQueueSize29 = mutable.", "     \
    \   val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).map(_.toLong).toList\n        val lst_B\
    \ = grid.map(_.toList).map(_.toLong).reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._2)\n        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._1).reverse\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x\
    \ => x._1).reverse.map(x => x._2)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._2)\n        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x =>\
    \ x._1).reverse.map(x => x._1).reverse.map(x => x._1).reverse\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._1).reverse.map(x => x._2)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._1).reverse.map(x => x._2)\n        val lst_L = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2).map(x => x._1).reverse.map(x => x._1).reverse.map(x => x._1).reverse.map(x\
    \ => x._1).reverse.map(x => x._1).reverse.map(x => x._2)\n        val lst_M =\
    \ lst_A.zip(lst_B).map(x => x._1 < x._", "        val m = grid.length\n      \
    \  val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedMap = new\
    \ mutable.HashMap[Long, Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap28 = new mutable.HashMap[Long, ", "        val m = grid.length\n \
    \       val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 1 to m) {\n            val row = grid\n            val row\
    \ = grid\n            val row = grid\n            val row = grid\n           \
    \ val row = grid\n            val row = grid\n            val row = grid\n   \
    \         val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = grid\n            val row = grid\n            val row = grid\n\
    \            val row = grid\n            val row = grid\n            val row =\
    \ grid\n            val row = grid\n            val row = grid\n            val\
    \ row = grid\n            val row = grid\n            val row = grid\n       \
    \     val row = ", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = new mutable.ArrayBuffer[Long]()\n\
    \        val visitedAns = new mutable.HashSet[Long]()\n        val visitedAnsSet\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet2 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet3 = new mutable.HashSet[Long]()\n        val visitedAnsSet4\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet5 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet6 = new mutable.HashSet[Long]()\n        val visitedAnsSet7\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet8 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet9 = new mutable.HashSet[Long]()\n        val visitedAnsSet10\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet11 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet12 = new mutable.HashSet[Long]()\n        val visitedAnsSet13\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet14 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet15 = new mutable.HashSet[Long]()\n        val visitedAnsSet16\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet17 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet18 = new mutable.HashSet[Long]()\n        val visitedAnsSet19\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet20 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet21 = new mutable.HashSet[Long]()\n        val visitedAnsSet22\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet23 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet24 = new mutable.HashSet[Long]()\n        val visitedAnsSet25\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet26", "        val m\
    \ = grid.length\n        val n = grid(0).length\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = List[Long]()\n\
    \        val visitedAns = List[Long]()\n        val visitedAnsSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val\
    \ visitedAnsSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n     \
    \   val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n       \
    \ val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val\
    \ visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSetSet\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSetSet =\
    \ mutable.HashSet[Long]()\n        val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n\
    \        val visitedAnsSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n  \
    \      val visitedAnsSetSetSetSetSetSetSetSetSet = mutable.HashSet[Long]()\n \
    \       val visitedAnsSetSetSetSetSetSetSetSetSet = ", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        for (i <- 1 to m) {\n            val row = grid(i)\n            val col\
    \ = grid(0).zipWithIndex.filter(_._1 == i).map(_._2).max\n            row += col\n\
    \            grid += row\n        }\n        val visited = mutable.ArrayBuffer.empty[Int](n)\n\
    \        val ans = mutable.ArrayBuffer.empty[Long](n)\n        val visitedSet\
    \ = mutable.HashSet[Int]()\n        val ansList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetList = mutable.HashSet[Int]()\n        val ansListList\
    \ = mutable.ArrayBuffer.empty[Long](n)\n        val visitedSetListList = mutable.HashSet[Int]()\n\
    \        val ansListListList = mutable.ArrayBuffer.empty[Long](n)\n        val\
    \ visitedSetListListList = mutable.HashSet[Int]()\n        val ansListListListList\
    \ = mutable.ArrayBuffer.empty[Long](n)\n        val visitedSetListListListList\
    \ = mutable.HashSet[Int]()\n        val ansListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListList = mutable.HashSet[Int]()\n       \
    \ val ansListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n     \
    \   val visitedSetListListListListListList = mutable.HashSet[Int]()\n        val\
    \ ansListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n     \
    \   val visitedSetListListListListListListList = mutable.HashSet[Int]()\n    \
    \    val ansListListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListListListList = mutable.HashSet[Int]()\n\
    \        val ansListListListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListListListListList = mutable.HashSet[Int]()\n\
    \        val ansListListListListListListListListList = mutable.ArrayBuffer.empty[Long](n)\n\
    \        val visitedSetListListListListListListListListList = mutable.HashSet[Int]()\n\
    \        val ansListListListListListListListListListList = mutable.ArrayBuffer.empty[",
  "        val m = grid.length\n        val n = grid(0).length\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val lst_A\
    \ = grid.map(x => x.map(y => y)).toList\n        val lst_B = grid.map(x => x.map(y\
    \ => y)).toList\n        val lst_C = lst_A.map(x => x.toList).flatten\n      \
    \  val lst_D = lst_B.map(x => x.toList).flatten\n        val lst_E = lst_C.map(x\
    \ => x.toList).flatten\n        val lst_F = lst_D.map(x => x.toList).flatten\n\
    \        val lst_G = lst_E.map(x => x.toList).flatten\n        val lst_H = lst_F.map(x\
    \ => x.toList).flatten\n        val lst_I = lst_G.map(x => x.toList).flatten\n\
    \        val lst_J = lst_H.map(x => x.toList).flatten\n        val lst_K = lst_I.map(x\
    \ => x.toList).flatten\n        val lst_L = lst_J.map(x => x.toList).flatten\n\
    \        val lst_M = lst_K.map(x => x.toList).flatten\n        val lst_N = lst_L.map(x\
    \ => x.toList).flatten\n        val lst_O = lst_M.map(x => x.toList).flatten\n\
    \        val lst_P = lst_O.map(x => x.toList).flatten\n        val lst_Q = lst_P.map(x\
    \ => x.toList).flatten\n        val lst_R = lst_Q.map(x => x.toList).flatten\n\
    \        val lst_S = lst_R.map(x => x.toList).flatten\n        val lst_T = lst_S.map(x\
    \ => x.toList).flatten\n        val lst_U = lst_T.map(x => x.toList).flatten\n\
    \        val lst_V = lst_U.map(x => x.toList).flatten\n        val lst_W = lst_V.map(x\
    \ => x.toList).flatten\n        val lst_X = lst_W.map(x => x.toList).flatten\n\
    \        val lst_Y = lst_X.map(x => x.toList).flatten\n        val lst_Z = lst_Y.map(x\
    \ => x.toList).flatten\n        val lst_A = lst_Z.map(x => x.toList).flatten\n\
    \        val l", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visitedList\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        ", "        val n = grid.length\n        val m = grid(0).length\n   \
    \     val lst_A = grid.map(x => x.map(y => y)).toList\n        val lst_B = grid.map(x\
    \ => x.map(y => y)).toList\n        val lst_C = lst_A.map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x\
    \ => x.toList).map(x => x.toList).map(x => x.toList).map(x => x.toList).map(x ",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._1))\n        val lst_F = lst_A.zip(lst_B).map(x => (x._2, x._2))\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_J = lst_A.zip(lst_B).map(x => (x._2, x._2))\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => (x._1, x._1))\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._2))\n        val lst_N = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => (x._2, x._1))\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => (x._2, x._2))\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_R = lst_A.zip(lst_B).map(x => (x._2, x._1))\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => (x._2, x._2))\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => (x._2, x._1))\n        val lst_V = lst_A.zip(lst_B).map(x => (x._2, x._2))\n\
    \        ", "        val N = grid.size\n        val m = grid.head\n        val\
    \ n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_R = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_V = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        ", "        val N = grid.size\n        val m = grid.head\n        val\
    \ n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_R = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_V = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        ", "        val n = grid.length\n        val m = grid(0).length\n   \
    \     val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).toList\n\
    \        val lst_C = lst_A.map(x => x.toList)\n        val lst_D = lst_B.map(x\
    \ => x.toList)\n        val lst_E = lst_C.map(x => x.toList)\n        val lst_F\
    \ = lst_D.map(x => x.toList)\n        val lst_G = lst_E.map(x => x.toList)\n \
    \       val lst_H = lst_F.map(x => x.toList)\n        val lst_I = lst_G.map(x\
    \ => x.toList)\n        val lst_J = lst_H.map(x => x.toList)\n        val lst_K\
    \ = lst_I.map(x => x.toList)\n        val lst_L = lst_J.map(x => x.toList)\n \
    \       val lst_M = lst_K.map(x => x.toList)\n        val lst_N = lst_M.map(x\
    \ => x.toList)\n        val lst_O = lst_N.map(x => x.toList)\n        val lst_P\
    \ = lst_O.map(x => x.toList)\n        val lst_Q = lst_P.map(x => x.toList)\n \
    \       val lst_R = lst_Q.map(x => x.toList)\n        val lst_S = lst_R.map(x\
    \ => x.toList)\n        val lst_T = lst_S.map(x => x.toList)\n        val lst_U\
    \ = lst_T.map(x => x.toList)\n        val lst_V = lst_U.map(x => x.toList)\n \
    \       val lst_W = lst_V.map(x => x.toList)\n        val lst_X = lst_W.map(x\
    \ => x.toList)\n        val lst_Y = lst_X.map(x => x.toList)\n        val lst_Z\
    \ = lst_Y.map(x => x.toList)\n        val lst_A = lst_Z.map(x => x.toList)\n \
    \       val lst_B = lst_A.map(x => x.toList)\n        val lst_C = lst_B.map(x\
    \ => x.toList)\n        val lst_D = lst_C.map(x => x.toList)\n        val lst_E\
    \ = lst_D.map(x => x.toList)\n        val lst_F = lst_E.map(x => x.toList)\n \
    \       val lst_G = lst_F.", "        val grid = grid.toList\n        val n =\
    \ grid.size\n        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = List[Long]()\n        val queue = mutable.Queue[Long]()\n \
    \       val visitedList = new mutable.HashSet[Long]()\n        val queueList =\
    \ new mutable.Queue[Long]()\n        val queueList2 = new mutable.Queue[Long]()\n\
    \        val queueList3 = new mutable.Queue[Long]()\n        val queueList4 =\
    \ new mutable.Queue[Long]()\n        val queueList5 = new mutable.Queue[Long]()\n\
    \        val queueList6 = new mutable.Queue[Long]()\n        val queueList7 =\
    \ new mutable.Queue[Long]()\n        val queueList8 = new mutable.Queue[Long]()\n\
    \        val queueList9 = new mutable.Queue[Long]()\n        val queueList10 =\
    \ new mutable.Queue[Long]()\n        val queueList11 = new mutable.Queue[Long]()\n\
    \        val queueList12 = new mutable.Queue[Long]()\n        val queueList13\
    \ = new mutable.Queue[Long]()\n        val queueList14 = new mutable.Queue[Long]()\n\
    \        val queueList15 = new mutable.Queue[Long]()\n        val queueList16\
    \ = new mutable.Queue[Long]()\n        val queueList17 = new mutable.Queue[Long]()\n\
    \        val queueList18 = new mutable.Queue[Long]()\n        val queueList19\
    \ = new mutable.Queue[Long]()\n        val queueList20 = new mutable.Queue[Long]()\n\
    \        val queueList21 = new mutable.Queue[Long]()\n        val queueList22\
    \ = new mutable.Queue[Long]()\n        val queueList23 = new mutable.Queue[Long]()\n\
    \        val queueList24 = new mutable.Queue[Long]()\n        val queueList25\
    \ = new mutable.Queue[Long]()\n        val queueList26 = new mutable.Queue[Long]()\n\
    \        val queueList27 = new mutable.Queue[Long]()\n        val queueList28\
    \ = new mutable.Queue[Long]()\n        val queueList29 = new mutable.Queue[Long]()\n\
    \        val queueList30 = new mutable.Queue[Long]()\n        val queueList31\
    \ = new mutable.Queue[Long]()\n        val queueList32 = new mutable.Queue", " \
    \       val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n        val\
    \ lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val lst_E =\
    \ List[Long]()\n        val lst_F = List[Long]()\n        val lst_G = List[Long]()\n\
    \        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n        val\
    \ lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val lst_L =\
    \ List[Long]()\n        val lst_M = List[Long]()\n        val lst_N = List[Long]()\n\
    \        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n        val\
    \ lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val lst_S =\
    \ List[Long]()\n        val lst_T = List[Long]()\n        val lst_U = List[Long]()\n\
    \        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n        val\
    \ lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val lst_Z =\
    \ List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val ", "        val grid = grid.toList\n     \
    \   val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(x\
    \ => x.toList).sortBy(x => x.toLong).map(x => x.toLong).toList\n        val lst_B\
    \ = grid.map(x => x.toList).sortBy(x => x.toLong).map(x => x.toLong).toList\n\
    \        val lst_C = lst_A.zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x =>\
    \ x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x =>\
    \ x._2).map(x => x._1).zip(lst_B).sortBy(x => x._1).map(x => x._2).map(x => x._1).zip(lst_B).sortBy(x\
    \ => x._1).map(x => x.", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._1))\n\
    \        val lst_D = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._2))\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._3))\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._4))\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._5))\n\
    \        val lst_H = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._6))\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._7))\n\
    \        val lst_J = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._8))\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._9))\n\
    \        val lst_L = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._10))\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._11))\n\
    \        val lst_N = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._12))\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._13))\n\
    \        val lst_P = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._14))\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._15))\n\
    \        val lst_R = lst_A.zip(lst_", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val visited = new Array[Boolean](n)\n        val\
    \ result = new Array[Long](k)\n        val lst_A = grid.map(_.toList)\n      \
    \  val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n \
    \       val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_B.map(_.toList)\n\
    \        val lst_F = lst_B.map(_.toList)\n        val lst_G = lst_C.map(_.toList)\n\
    \        val lst_H = lst_C.map(_.toList)\n        val lst_I = lst_D.map(_.toList)\n\
    \        val lst_J = lst_D.map(_.toList)\n        val lst_K = lst_E.map(_.toList)\n\
    \        val lst_L = lst_E.map(_.toList)\n        val lst_M = lst_F.map(_.toList)\n\
    \        val lst_N = lst_F.map(_.toList)\n        val lst_O = lst_G.map(_.toList)\n\
    \        val lst_P = lst_G.map(_.toList)\n        val lst_Q = lst_H.map(_.toList)\n\
    \        val lst_R = lst_H.map(_.toList)\n        val lst_S = lst_I.map(_.toList)\n\
    \        val lst_T = lst_I.map(_.toList)\n        val lst_U = lst_J.map(_.toList)\n\
    \        val lst_V = lst_J.map(_.toList)\n        val lst_W = lst_K.map(_.toList)\n\
    \        val lst_X = lst_K.map(_.toList)\n        val lst_Y = lst_L.map(_.toList)\n\
    \        val lst_Z = lst_L.map(_.toList)\n        val lst_AA = lst_M.map(_.toList)\n\
    \        val lst_AB = lst_M.map(_.toList)\n        val lst_AC = lst_N.map(_.toList)\n\
    \        val lst_AD = lst_N.map(_.toList)\n        val lst_AE = lst_O.map(_.toList)\n\
    \        val lst_AF = lst_O.map(_.toList)\n        val lst_AG = lst_P.map(_.toList)\n\
    \        val lst_AH = lst_P.map(_.toList)\n        val lst_AI = lst_Q.map(_.toList)\n\
    \        val lst_", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.", "     \
    \   val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._1))\n\
    \        val lst_D = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._2))\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._3))\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._4))\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._5))\n\
    \        val lst_H = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._6))\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._7))\n\
    \        val lst_J = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._8))\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._9))\n\
    \        val lst_L = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._10))\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._11))\n\
    \        val lst_N = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._12))\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._13))\n\
    \        val lst_P = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._14))\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(y => y._15))\n\
    \        val lst_R = lst_A.", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val path = new mutable.ArrayBuffer[Long]()\n\
    \        val lst_A = new mutable.ArrayBuffer[Long]()\n        val lst_B = new\
    \ mutable.ArrayBuffer[Long]()\n        for (i <- 1 to n) {\n            lst_A\
    \ += grid(i).head\n            lst_B += grid(0).head\n        }\n        visited.add(grid(0).head)\n\
    \        path.add(grid(0).head)\n        val minPath = new mutable.ArrayBuffer[Long]()\n\
    \        val minPathLength = k\n        val minPathLengthIndex = k\n        val\
    \ minPathLengthValue = grid(0).head\n        val minPathLengthValueIndex = grid(0).head\n\
    \        val minPathLengthValueValue = grid(0).head\n        val minPathLengthValueIndexValue\
    \ = grid(0).head\n        val minPathLengthValueIndexValue = 0\n        val minPathLengthValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValue = 0\n        val minPathLengthValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValue = 0\n    \
    \    val minPathLengthValueIndexValueIndexValueIndexValueIndex = 0\n        val\
    \ minPathLengthValueIndexValueIndexValueIndexValueIndexValue = 0\n        val\
    \ minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndex = 0\n      \
    \  val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValue =\
    \ 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue\
    \ = 0\n        val minPathLengthValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = 0\n        val minPath", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer(grid: _*)\n        val visited = mutable.ArrayBuffer(grid:\
    \ _*)\n        val ans = mutable.ArrayBuffer(grid: _*)\n        val visitedMap\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansList = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedMapList = mutable.HashMap[List[Long], Boolean]()\n \
    \       val ansListList = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListList = mutable.ArrayBuffer(grid:\
    \ _*)\n        val visitedMapListListList = mutable.HashMap[List[Long], Boolean]()\n\
    \        val ansListListListList = mutable.ArrayBuffer(grid: _*)\n        val\
    \ visitedMapListListListList = mutable.HashMap[List[Long], Boolean]()\n      \
    \  val ansListListListListList = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListList\
    \ = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListListList\
    \ = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListListListList\
    \ = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListListListListList\
    \ = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListListListListListList\
    \ = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListListListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListListListListListListList\
    \ = mutable.ArrayBuffer(grid: _*)\n        val visitedMapListListListListListListListListListListList\
    \ = mutable.HashMap[List[Long], Boolean]()\n        val ansListListListListListListListListListListListList\
    \ = mutable.Array", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]\n        val queue = new mutable.PriorityQueue[(Long,\
    \ Long)](\n            new Comparator[(Long, Long)]{\n                override\
    \ def compare(o1 : (Long, Long), o2 : (Long, Long)) : Int = {\n              \
    \      val l1 = o1._1\n                    val l2 = o2._1\n                  \
    \  if (l1 < l2) -1 else if (l1 > l2) 1 else 0\n                }\n           \
    \ }\n        )\n        val ans = List[Long]()\n        val visitedAns = new mutable.HashSet[Long]\n\
    \        val queueAns = new mutable.PriorityQueue[(Long, Long)](\n           \
    \ new Comparator[(Long, Long)]{\n                override def compare(o1 : (Long,\
    \ Long), o2 : (Long, Long)) : Int = {\n                    val l1 = o1._1\n  \
    \                  val l2 = o2._1\n                    if (l1 < l2) -1 else if\
    \ (l1 > l2) 1 else 0\n                }\n            }\n        )\n        val\
    \ ansList = List[Long]()\n        val visitedAnsList = List[Long]()\n        for\
    \ (i <- 1 to k) {\n            val curr = queue.poll()\n            val curr =\
    \ curr._1\n            val curr = curr._2\n            val curr = curr\n     \
    \       val curr = curr\n            val curr = curr\n            val curr = curr\n\
    \            val curr = curr\n            val curr = curr\n            val curr\
    \ = curr\n            val curr = curr\n            val curr = curr\n         \
    \   val curr = curr\n            val curr = curr\n            val curr = curr\n\
    \            val curr = curr\n            val curr = curr\n            val curr\
    \ = curr\n            val curr = curr\n            val curr = curr\n         \
    \   val curr = curr\n            val curr = curr\n            val curr = curr\n\
    \            val curr = curr\n            val curr = curr\n            val curr\
    \ = curr\n            val curr = curr\n            val curr = curr\n         \
    \   val curr = curr\n            val curr = curr\n            val curr = curr\n\
    \            val curr = curr\n            val curr = curr\n            val curr\
    \ = curr\n            val curr = curr\n            val curr = curr\n         \
    \   val curr = curr\n            val curr = curr\n            val curr = curr\n\
    \            val curr = curr\n            val curr = curr\n            val curr\
    \ = curr\n            val cur", "        val n = grid.length\n        val m =\
    \ grid(0).length\n        val gridWithValues = grid.map(row => row.map(_.toLong))\n\
    \        val gridWithValuesAndIndex = gridWithValues.zipWithIndex\n        val\
    \ gridWithValuesAndIndexSorted = gridWithValuesAndIndex.sortBy(_._1).reverse\n\
    \        val gridWithValuesAndIndexSortedWithIndex = gridWithValuesAndIndexSorted.map{\n\
    \            case (row, index) => (index, row)\n        }\n        val gridWithValuesAndIndexSortedWithIndexAndIndex\
    \ = gridWithValuesAndIndexSortedWithIndex.zipWithIndex\n        val gridWithValuesAndIndexSortedWithIndexAndIndexSorted\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndex.sortBy(_._1).reverse\n     \
    \   val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndex = gridWithValuesAndIndexSortedWithIndexAndIndexSorted.map{\n\
    \            case (row, index) => (index, row)\n        }\n        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndex\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndex.zipWithIndex\n\
    \        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSorted\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndex.sortBy(_._1).reverse\n\
    \        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndex\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSorted.map{\n\
    \            case (row, index) => (index, row)\n        }\n        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndex\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndex.zipWithIndex\n\
    \        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSorted\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndex.sortBy(_._1).reverse\n\
    \        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndex\
    \ = gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSorted.map{\n\
    \            case (row, index) => (index, row)\n        }\n        val gridWithValuesAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndexSortedWithIndexAndIndex\
    \ = gridWithValue", "        val N = grid.size\n        val m = grid.head\n  \
    \      val n = grid.last\n        val lst_A = grid.map(_.toList)\n        val\
    \ lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        ", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val path = new Array[Long](k)\n     \
    \   var minPath = 0\n        var minPathIndex = 0\n        var minPathValue =\
    \ 0\n        var minPathValueIndex = 0\n        var minPathValueIndex2 = 0\n \
    \       var minPathValueIndex3 = 0\n        var minPathValueIndex4 = 0\n     \
    \   var minPathValueIndex5 = 0\n        var minPathValueIndex6 = 0\n        var\
    \ minPathValueIndex7 = 0\n        var minPathValueIndex8 = 0\n        var minPathValueIndex9\
    \ = 0\n        var minPathValueIndex10 = 0\n        var minPathValueIndex11 =\
    \ 0\n        var minPathValueIndex12 = 0\n        var minPathValueIndex13 = 0\n\
    \        var minPathValueIndex14 = 0\n        var minPathValueIndex15 = 0\n  \
    \      var minPathValueIndex16 = 0\n        var minPathValueIndex17 = 0\n    \
    \    var minPathValueIndex18 = 0\n        var minPathValueIndex19 = 0\n      \
    \  var minPathValueIndex20 = 0\n        var minPathValueIndex21 = 0\n        var\
    \ minPathValueIndex22 = 0\n        var minPathValueIndex23 = 0\n        var minPathValueIndex24\
    \ = 0\n        var minPathValueIndex25 = 0\n        var minPathValueIndex26 =\
    \ 0\n        var minPathValueIndex27 = 0\n        var minPathValueIndex28 = 0\n\
    \        var minPathValueIndex29 = 0\n        var minPathValueIndex30 = 0\n  \
    \      var minPathValueIndex31 = 0\n        var minPathValueIndex32 = 0\n    \
    \    var minPathValueIndex33 = 0\n        var minPathValueIndex34 = 0\n      \
    \  var minPathValueIndex35 = 0\n        var minPathValueIndex36 = 0\n        var\
    \ minPathValueIndex37 = 0\n        var minPathValueIndex38 = 0\n        var minPathValueIndex39\
    \ = 0\n        var minPathValueIndex40 = 0\n        var minPathValueIndex41 =\
    \ 0\n        var minPathValueIndex42 = 0\n        var minPathValueIndex43 = 0\n\
    \        var minPathValueIndex44 = 0\n        var minPathValueIndex45 = 0\n  \
    \      var minPathValueIndex46 = 0\n        var minPathValueIndex47 = 0\n    \
    \    var minPathValueIndex48 = 0\n        var minPathValueIndex49 = 0\n      \
    \  var minPathValueIndex50 = 0\n        var minPathValueIndex51 = 0\n        var\
    \ minPathValueIndex52 = 0\n        var minPathValueIndex53 = 0\n        var minPathValueIndex54\
    \ = 0\n        var minPathValueIndex55 = 0\n        var minPathValueIndex56 =\
    \ 0\n        var minPathValueIndex57 = 0\n        var minPathValueIndex58 = 0\n\
    \        var minPathValueIndex59 = 0\n        var ", "        val grid = grid.toList\n\
    \        val n = grid.size\n        val m = grid(0).size\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val queue\
    \ = mutable.Queue[Long]()\n        val visitedList = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList = mutable.ArrayBuffer.empty[Long]\n        val queueList2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList4 = mutable.ArrayBuffer.empty[Long]\n        val queueList5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList7 = mutable.ArrayBuffer.empty[Long]\n        val queueList8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList10 = mutable.ArrayBuffer.empty[Long]\n        val queueList11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList13 = mutable.ArrayBuffer.empty[Long]\n        val queueList14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList16 = mutable.ArrayBuffer.empty[Long]\n        val queueList17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList19 = mutable.ArrayBuffer.empty[Long]\n        val queueList20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList22 = mutable.ArrayBuffer.empty[Long]\n        val queueList23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList25 = mutable.ArrayBuffer.empty[Long]\n        val queueList26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList28 = mutable.ArrayBuffer.empty[Long]\n        val queueList29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val queueList30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val queueList31 = mut", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val result = new Array[Long](k)\n        var index = 0\n        var minPath\
    \ = 0\n        var minPathIndex = 0\n        var currentCell = 0\n        var\
    \ currentCellIndex = 0\n        var currentCellValue = 0\n        var currentCellValueIndex\
    \ = 0\n        var currentCellValueIndexMin = 0\n        var currentCellValueIndexMax\
    \ = 0\n        var currentCellValueIndexMinMax = 0\n        var currentCellValueIndexMinMaxIndex\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndex\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndex = 0\n        var currentCellValueIndexMinMaxIndexMinIndex\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin\
    \ = 0\n        var currentCellValueIndexMinMaxIndexMinIndexMin = 0\n        var\
    \ currentCellValue", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val visited = new Array[Boolean](m)\n        val ans = new Array[Long](m)\n\
    \        val stack = new Array[Long](k)\n        val stackSize = new Array[Long](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackIndex2 = new Array[Int](k)\n\
    \        val stackIndex3 = new Array[Int](k)\n        val stackIndex4 = new Array[Int](k)\n\
    \        val stackIndex5 = new Array[Int](k)\n        val stackIndex6 = new Array[Int](k)\n\
    \        val stackIndex7 = new Array[Int](k)\n        val stackIndex8 = new Array[Int](k)\n\
    \        val stackIndex9 = new Array[Int](k)\n        val stackIndex10 = new Array[Int](k)\n\
    \        val stackIndex11 = new Array[Int](k)\n        val stackIndex12 = new\
    \ Array[Int](k)\n        val stackIndex13 = new Array[Int](k)\n        val stackIndex14\
    \ = new Array[Int](k)\n        val stackIndex15 = new Array[Int](k)\n        val\
    \ stackIndex16 = new Array[Int](k)\n        val stackIndex17 = new Array[Int](k)\n\
    \        val stackIndex18 = new Array[Int](k)\n        val stackIndex19 = new\
    \ Array[Int](k)\n        val stackIndex20 = new Array[Int](k)\n        val stackIndex21\
    \ = new Array[Int](k)\n        val stackIndex22 = new Array[Int](k)\n        val\
    \ stackIndex23 = new Array[Int](k)\n        val stackIndex24 = new Array[Int](k)\n\
    \        val stackIndex25 = new Array[Int](k)\n        val stackIndex26 = new\
    \ Array[Int](k)\n        val stackIndex27 = new Array[Int](k)\n        val stackIndex28\
    \ = new Array[Int](k)\n        val stackIndex29 = new Array[Int](k)\n        val\
    \ stackIndex30 = new Array[Int](k)\n        val stackIndex31 = new Array[Int](k)\n\
    \        val stackIndex32 = new Array[Int](k)\n        val stackIndex33 = new\
    \ Array[Int](k)\n        val stackIndex34 = new Array[Int](k)\n        val stackIndex35\
    \ = new Array[Int](k)\n        val stackIndex36 = new Array[Int](k)\n        val\
    \ stackIndex37 = new Array[Int](k)\n        val stackIndex38 = new Array[Int](k)\n",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer(grid)\n        val visited = mutable.HashSet[Long]()\n \
    \       val ans = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_G = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_H = mutable.ArrayBuffer.empty[Long]\n        val lst_I = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_J = mutable.ArrayBuffer.empty[Long]\n        val lst_K = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_L = mutable.ArrayBuffer.empty[Long]\n        val lst_M = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_N = mutable.ArrayBuffer.empty[Long]\n        val lst_O = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_P = mutable.ArrayBuffer.empty[Long]\n        val lst_Q = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_R = mutable.ArrayBuffer.empty[Long]\n        val lst_S = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_T = mutable.ArrayBuffer.empty[Long]\n        val lst_U = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_V = mutable.ArrayBuffer.empty[Long]\n        val lst_W = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_X = mutable.ArrayBuffer.empty[Long]\n        val lst_Y = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_Z = mutable.ArrayBuffer.empty[Long]\n        val lst_A = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_B = mutable.ArrayBuffer.empty[Long]\n        val lst_C = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_D = mutable.ArrayBuffer.empty[Long]\n        val lst_E = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_F = mutable.ArrayBuffer.empty[Long]\n        val lst_", "   \
    \     val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ grid.toList\n        val grid2 = grid.map(_.toList)\n        val grid3 = grid2.map(_.toList)\n\
    \        val grid4 = grid3.map(_.toList)\n        val grid5 = grid4.map(_.toList)\n\
    \        val grid6 = grid5.map(_.toList)\n        val grid7 = grid6.map(_.toList)\n\
    \        val grid8 = grid7.map(_.toList)\n        val grid9 = grid8.map(_.toList)\n\
    \        val grid10 = grid9.map(_.toList)\n        val grid11 = grid10.map(_.toList)\n\
    \        val grid12 = grid11.map(_.toList)\n        val grid13 = grid12.map(_.toList)\n\
    \        val grid14 = grid13.map(_.toList)\n        val grid15 = grid14.map(_.toList)\n\
    \        val grid16 = grid15.map(_.toList)\n        val grid17 = grid16.map(_.toList)\n\
    \        val grid18 = grid17.map(_.toList)\n        val grid19 = grid18.map(_.toList)\n\
    \        val grid20 = grid19.map(_.toList)\n        val grid21 = grid20.map(_.toList)\n\
    \        val grid22 = grid21.map(_.toList)\n        val grid23 = grid22.map(_.toList)\n\
    \        val grid24 = grid23.map(_.toList)\n        val grid25 = grid24.map(_.toList)\n\
    \        val grid26 = grid25.map(_.toList)\n        val grid27 = grid26.map(_.toList)\n\
    \        val grid28 = grid27.map(_.toList)\n        val grid29 = grid28.map(_.toList)\n\
    \        val grid30 = grid29.map(_.toList)\n        val grid31 = grid30.map(_.toList)\n\
    \        val grid32 = grid31.map(_.toList)\n        val grid33 = grid32.map(_.toList)\n\
    \        val grid34 = grid33.map(_.toList)\n        val grid35 = grid34.map(_.toList)\n\
    \        val grid36 = grid35.map(_.toList)\n        val grid37 = grid36.map(_.toList)\n\
    \        val grid38 = grid37.map(_.toList)\n        val grid39 = grid38.map(_.toList)\n\
    \        val grid40 = grid39.map(_.toList)\n        val grid41 = grid40.map(_.toList)\n\
    \        val grid42 = grid41.map(_.toList)\n        val grid43 = grid42.map(_.",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ visitedIndex = new Array[Int](k)\n        val visitedIndexSet = new HashSet[Int]()\n\
    \        val visitedIndexSet2 = new HashSet[Int]()\n        val visitedIndexSet3\
    \ = new HashSet[Int]()\n        val visitedIndexSet4 = new HashSet[Int]()\n  \
    \      val visitedIndexSet5 = new HashSet[Int]()\n        val visitedIndexSet6\
    \ = new HashSet[Int]()\n        val visitedIndexSet7 = new HashSet[Int]()\n  \
    \      val visitedIndexSet8 = new HashSet[Int]()\n        val visitedIndexSet9\
    \ = new HashSet[Int]()\n        val visitedIndexSet10 = new HashSet[Int]()\n \
    \       val visitedIndexSet11 = new HashSet[Int]()\n        val visitedIndexSet12\
    \ = new HashSet[Int]()\n        val visitedIndexSet13 = new HashSet[Int]()\n \
    \       val visitedIndexSet14 = new HashSet[Int]()\n        val visitedIndexSet15\
    \ = new HashSet[Int]()\n        val visitedIndexSet16 = new HashSet[Int]()\n \
    \       val visitedIndexSet17 = new HashSet[Int]()\n        val visitedIndexSet18\
    \ = new HashSet[Int]()\n        val visitedIndexSet19 = new HashSet[Int]()\n \
    \       val visitedIndexSet20 = new HashSet[Int]()\n        val visitedIndexSet21\
    \ = new HashSet[Int]()\n        val visitedIndexSet22 = new HashSet[Int]()\n \
    \       val visitedIndexSet23 = new HashSet[Int]()\n        val visitedIndexSet24\
    \ = new HashSet[Int]()\n        val visitedIndexSet25 = new HashSet[Int]()\n \
    \       val visitedIndexSet26 = new HashSet[Int]()\n        val visitedIndexSet27\
    \ = new HashSet[Int]()\n        val visitedIndexSet28 = new HashSet[Int]()\n \
    \       val visitedIndexSet29 = new HashSet[Int]()\n        val visitedIndexSet30\
    \ = new HashSet[Int]()\n        val visitedIndexSet31 = new HashSet[Int]()\n",
  "        val n = grid.length\n        val m = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ stack = new Array[Long](k)\n        val stackIndex = new Array[Int](k)\n   \
    \     val stackIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new ", "        val m = grid.size\n        val n = grid(0).size\n        val\
    \ lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n       \
    \ val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n \
    \       val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.", "     \
    \   val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zipWithIndex.map(x => x._2.toLong)\n        val lst_D\
    \ = lst_B.zipWithIndex.map(x => x._2.toLong)\n        val lst_E = lst_C.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_F = lst_D.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_G = lst_E.zipWithIndex.map(x => x._2.toLong)\n        val lst_H\
    \ = lst_F.zipWithIndex.map(x => x._2.toLong)\n        val lst_I = lst_G.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_J = lst_H.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_K = lst_I.zipWithIndex.map(x => x._2.toLong)\n        val lst_L\
    \ = lst_J.zipWithIndex.map(x => x._2.toLong)\n        val lst_M = lst_K.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_N = lst_L.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_O = lst_M.zipWithIndex.map(x => x._2.toLong)\n        val lst_P\
    \ = lst_O.zipWithIndex.map(x => x._2.toLong)\n        val lst_Q = lst_P.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_R = lst_Q.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_S = lst_R.zipWithIndex.map(x => x._2.toLong)\n        val lst_T\
    \ = lst_S.zipWithIndex.map(x => x._2.toLong)\n        val lst_U = lst_T.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_V = lst_U.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_W = lst_V.zipWithIndex.map(x => x._2.", "        val N = grid.length\n\
    \        val M = grid(0).length\n        val grid = grid.toList\n        val grid\
    \ = grid.sortWith((x, y) => x._1 < y._1)\n        val grid = grid.map(_.toList)\n\
    \        val grid = grid.map(_.sortWith((x, y) => x._1 < y._1))\n        val grid\
    \ = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(_.map(_.toLong))\n\
    \        val grid = grid.map(_.map(_.toLong))\n        val grid = grid.map(",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val grid = grid.tail\n        val gridSize = grid.size\n        val gridSize\
    \ = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize =\
    \ gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize\
    \ - 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize -\
    \ 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n\
    \        val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n  \
    \      val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n    \
    \    val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n      \
    \  val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n        val\
    \ gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize\
    \ = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize =\
    \ gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize\
    \ - 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize -\
    \ 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n\
    \        val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n  \
    \      val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n    \
    \    val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n      \
    \  val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n        val\
    \ gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize\
    \ = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize =\
    \ gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize\
    \ - 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize -\
    \ 1\n        val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n\
    \        val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n  \
    \      val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n    \
    \    val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n      \
    \  val gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n        val\
    \ gridSize = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize\
    \ = gridSize - 1\n        val gridSize = gridSize - 1\n        val gridSize =\
    \ gridSize - 1\n        ", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).map(_.toLong).toList\n        val lst_B\
    \ = grid.map(_.toList).map(_.toLong).reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => x._1).zip(lst_C.map(x =>\
    \ x._2)).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x\
    \ => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x =>\
    \ x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x\
    \ => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x =>\
    \ x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x\
    \ => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x =>\
    \ x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x\
    \ => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x =>\
    \ x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x\
    \ => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x =>\
    \ x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x\
    \ => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x => x._1).zip(x._2).map(x =>\
    \ x._", "        val m = grid.size\n        val n = grid(0).size\n        val\
    \ lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).toList\n\
    \        val lst_C = lst_A.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_D = lst_B.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_E = lst_C.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_F = lst_D.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_G = lst_E.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_H = lst_F.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_I = lst_G.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_J = lst_H.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_K = lst_I.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_L = lst_J.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_M = lst_K.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_N = lst_L.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_O = lst_M.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_P = lst_O.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_Q = lst_P.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_R = lst_Q.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_S = lst_R.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_T = lst_S.map(_.toList).sortBy(_.reverse).map(_.toList).distinct\n\
    \        val lst_U = lst_T.map(_.toList).", "        val m = grid.length\n   \
    \     val n = grid(0).length\n        val result = new Array[Long](k)\n      \
    \  val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackTop = new Array[Int](k)\n        val stackBottom = new Array[Int](k)\n\
    \        val stackBottomIndex = new Array[Int](k)\n        val stackBottomIndex2\
    \ = new Array[Int](k)\n        val stackBottomIndex3 = new Array[Int](k)\n   \
    \     val stackBottomIndex4 = new Array[Int](k)\n        val stackBottomIndex5\
    \ = new Array[Int](k)\n        val stackBottomIndex6 = new Array[Int](k)\n   \
    \     val stackBottomIndex7 = new Array[Int](k)\n        val stackBottomIndex8\
    \ = new Array[Int](k)\n        val stackBottomIndex9 = new Array[Int](k)\n   \
    \     val stackBottomIndex10 = new Array[Int](k)\n        val stackBottomIndex11\
    \ = new Array[Int](k)\n        val stackBottomIndex12 = new Array[Int](k)\n  \
    \      val stackBottomIndex13 = new Array[Int](k)\n        val stackBottomIndex14\
    \ = new Array[Int](k)\n        val stackBottomIndex15 = new Array[Int](k)\n  \
    \      val stackBottomIndex16 = new Array[Int](k)\n        val stackBottomIndex17\
    \ = new Array[Int](k)\n        val stackBottomIndex18 = new Array[Int](k)\n  \
    \      val stackBottomIndex19 = new Array[Int](k)\n        val stackBottomIndex20\
    \ = new Array[Int](k)\n        val stackBottomIndex21 = new Array[Int](k)\n  \
    \      val stackBottomIndex22 = new Array[Int](k)\n        val stackBottomIndex23\
    \ = new Array[Int](k)\n        val stackBottomIndex24 = new Array[Int](k)\n  \
    \      val stackBottomIndex25 = new Array[Int](k)\n        val stackBottomIndex26\
    \ = new Array[Int](k)\n        val stackBottomIndex27 = new Array[Int](k)\n  \
    \      val stackBottomIndex28 = new Array[Int](k)\n        val stackBottomIndex29\
    \ = new Array[Int](k)\n        val stackBottomIndex30 = new Array[Int](k)\n  \
    \      val stackBottomIndex31 = new Array[Int](k)\n        val stackBottomIndex32\
    \ = new Array[Int](k)\n        val stackBottomIndex33 = new ", "        val m\
    \ = grid.length\n        val n = grid(0).length\n        val result = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        var index = 0\n        var\
    \ minIndex = 0\n        var minValue = grid(0).head\n        var minPath = new\
    \ Array[Long](k)\n        visited(0) = true\n        for(i <- 1 to k) {\n    \
    \        minPath(i) = grid(0).head\n            minIndex = i\n            minValue\
    \ = grid(0).head\n            for(j <- 1 to n) {\n                if(visited(j)\
    \ == false) {\n                    visited(j) = true\n                    if(grid((i\
    \ - 1).toInt)(j) < minValue) {\n                        minIndex = j\n       \
    \                 minValue = grid((i - 1).toInt)(j)\n                    }\n \
    \               }\n            }\n            result(i) = minValue\n         \
    \   minPath(i) = minIndex\n        }\n        result", "        val grid = grid.toSet\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = List[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedAns = mutable.HashSet[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visited", "        val\
    \ N = grid.length\n        val M = grid(0).length\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]\n        val ans = List[Long]()\n\
    \        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n        val\
    \ lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val lst_E =\
    \ List[Long]()\n        val lst_F = List[Long]()\n        val lst_G = List[Long]()\n\
    \        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n        val\
    \ lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val lst_L =\
    \ List[Long]()\n        val lst_M = List[Long]()\n        val lst_N = List[Long]()\n\
    \        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n        val\
    \ lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val lst_S =\
    \ List[Long]()\n        val lst_T = List[Long]()\n        val lst_U = List[Long]()\n\
    \        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n        val\
    \ lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val lst_Z =\
    \ List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val l", "        val n = grid.length\n       \
    \ val m = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = new mutable.ArrayList[Long]()\n        val visitedAns = new\
    \ mutable.HashSet[Long]()\n        val visitedAnsSet = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet2 = new mutable.HashSet[Long]()\n        val visitedAnsSet3\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet4 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet5 = new mutable.HashSet[Long]()\n        val visitedAnsSet6\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet7 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet8 = new mutable.HashSet[Long]()\n        val visitedAnsSet9\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet10 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet11 = new mutable.HashSet[Long]()\n        val visitedAnsSet12\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet13 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet14 = new mutable.HashSet[Long]()\n        val visitedAnsSet15\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet16 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet17 = new mutable.HashSet[Long]()\n        val visitedAnsSet18\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet19 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet20 = new mutable.HashSet[Long]()\n        val visitedAnsSet21\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet22 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet23 = new mutable.HashSet[Long]()\n        val visitedAnsSet24\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet25 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet26", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val stack = mutable.Stack[Long]()\n \
    \       val stackSize = mutable.Stack[Int]()\n        val stackSize2 = mutable.Stack[Int]()\n\
    \        val stackSize3 = mutable.Stack[Int]()\n        val stackSize4 = mutable.Stack[Int]()\n\
    \        val stackSize5 = mutable.Stack[Int]()\n        val stackSize6 = mutable.Stack[Int]()\n\
    \        val stackSize7 = mutable.Stack[Int]()\n        val stackSize8 = mutable.Stack[Int]()\n\
    \        val stackSize9 = mutable.Stack[Int]()\n        val stackSize10 = mutable.Stack[Int]()\n\
    \        val stackSize11 = mutable.Stack[Int]()\n        val stackSize12 = mutable.Stack[Int]()\n\
    \        val stackSize13 = mutable.Stack[Int]()\n        val stackSize14 = mutable.Stack[Int]()\n\
    \        val stackSize15 = mutable.Stack[Int]()\n        val stackSize16 = mutable.Stack[Int]()\n\
    \        val stackSize17 = mutable.Stack[Int]()\n        val stackSize18 = mutable.Stack[Int]()\n\
    \        val stackSize19 = mutable.Stack[Int]()\n        val stackSize20 = mutable.Stack[Int]()\n\
    \        val stackSize21 = mutable.Stack[Int]()\n        val stackSize22 = mutable.Stack[Int]()\n\
    \        val stackSize23 = mutable.Stack[Int]()\n        val stackSize24 = mutable.Stack[Int]()\n\
    \        val stackSize25 = mutable.Stack[Int]()\n        val stackSize26 = mutable.Stack[Int]()\n\
    \        val stackSize27 = mutable.Stack[Int]()\n        val stackSize28 = mutable.Stack[Int]()\n\
    \        val stackSize29 = mutable.Stack[Int]()\n        val stackSize30 = mutable.Stack[Int]()\n\
    \        val stackSize31 = mutable.Stack[Int]()\n        val stackSize32 = mutable.Stack[Int]()\n\
    \        val stackSize33 = mutable.Stack[Int]()\n        val stackSize34 = mutable.",
  "        val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        var min = 0\n        var index = 0\n        var\
    \ index2 = 0\n        var index3 = 0\n        var index4 = 0\n        var index5\
    \ = 0\n        var index6 = 0\n        var index7 = 0\n        var index8 = 0\n\
    \        var index9 = 0\n        var index10 = 0\n        var index11 = 0\n  \
    \      var index12 = 0\n        var index13 = 0\n        var index14 = 0\n   \
    \     var index15 = 0\n        var index16 = 0\n        var index17 = 0\n    \
    \    var index18 = 0\n        var index19 = 0\n        var index20 = 0\n     \
    \   var index21 = 0\n        var index22 = 0\n        var index23 = 0\n      \
    \  var index24 = 0\n        var index25 = 0\n        var index26 = 0\n       \
    \ var index27 = 0\n        var index28 = 0\n        var index29 = 0\n        var\
    \ index30 = 0\n        var index31 = 0\n        var index32 = 0\n        var index33\
    \ = 0\n        var index34 = 0\n        var index35 = 0\n        var index36 =\
    \ 0\n        var index37 = 0\n        var index38 = 0\n        var index39 = 0\n\
    \        var index40 = 0\n        var index41 = 0\n        var index42 = 0\n \
    \       var index43 = 0\n        var index44 = 0\n        var index45 = 0\n  \
    \      var index46 = 0\n        var index47 = 0\n        var index48 = 0\n   \
    \     var index49 = 0\n        var index50 = 0\n        var index51 = 0\n    \
    \    var index52 = 0\n        var index53 = 0\n        var index54 = 0\n     \
    \   var index55 = 0\n        var index56 = 0\n        var index57 = 0\n      \
    \  var index58 = 0\n        var index59 = 0\n        var index60 = 0\n       \
    \ var index61 = 0\n        var index62 = 0\n        var index63 = 0\n        var\
    \ index64 = 0\n        var index65 = 0\n        var index66 = 0\n        var index67\
    \ = 0\n        var index68 = 0\n        var index69 = 0\n        var index70 =\
    \ 0\n        var index71 = 0\n        var index72 = 0\n        var index73 = 0\n\
    \        var index74 = 0\n        var index75 = 0\n        var index76 = 0\n \
    \       var index77 = 0\n        var index78 = 0\n        var index79 = 0\n  \
    \      var index80 = 0\n        var index81 = 0\n        var index82 = 0\n   \
    \     var index83 = 0\n        var index84 = 0\n        var index85 = 0\n    \
    \    var index86 = 0\n        var index87 = 0\n        var index88 = 0\n     \
    \   var index89 = 0\n        var index90 = 0\n        var index91 = 0\n      \
    \  var index92 = 0\n        var index93 = 0\n        var index94 = 0\n       \
    \ var index95 = 0\n        var index96 = 0\n        var index97 = 0\n        var ",
  "        val m = grid.size\n        val n = grid.head.size\n        val lst_A =\
    \ grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var k =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l = 0\n        var l =\
    \ 0\n        var l = 0\n        var l = 0\n        var l", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val visitedList = new mutable.ListBuffer[Long]()\n\
    \        val visitedList2 = new mutable.ListBuffer[Long]()\n        val visitedList3\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList4 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList5 = new mutable.ListBuffer[Long]()\n        val visitedList6\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList7 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList8 = new mutable.ListBuffer[Long]()\n        val visitedList9\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList10 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList11 = new mutable.ListBuffer[Long]()\n        val visitedList12\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList13 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList14 = new mutable.ListBuffer[Long]()\n        val visitedList15\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList16 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList17 = new mutable.ListBuffer[Long]()\n        val visitedList18\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList19 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList20 = new mutable.ListBuffer[Long]()\n        val visitedList21\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList22 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList23 = new mutable.ListBuffer[Long]()\n        val visitedList24\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList25 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList26 = new mutable.ListBuffer[Long]()\n        val visitedList27\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList28 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList29 = new mutable.ListBuffer[Long]()\n        val visitedList30\
    \ = new mutable.ListBuffer[Long]", "        val m = grid.size\n        val n =\
    \ grid(0).size\n        val lst_A = grid.map(x => x.map(y => y)).toList\n    \
    \    val lst_B = grid.map(x => x.map(y => y)).toList\n        val lst_C = lst_A.map(x\
    \ => x.toList)\n        val lst_D = lst_B.map(x => x.toList)\n        val lst_E\
    \ = lst_C.map(x => x.toList)\n        val lst_F = lst_D.map(x => x.toList)\n \
    \       val lst_G = lst_E.map(x => x.toList)\n        val lst_H = lst_F.map(x\
    \ => x.toList)\n        val lst_I = lst_G.map(x => x.toList)\n        val lst_J\
    \ = lst_H.map(x => x.toList)\n        val lst_K = lst_I.map(x => x.toList)\n \
    \       val lst_L = lst_J.map(x => x.toList)\n        val lst_M = lst_K.map(x\
    \ => x.toList)\n        val lst_N = lst_M.map(x => x.toList)\n        val lst_O\
    \ = lst_N.map(x => x.toList)\n        val lst_P = lst_O.map(x => x.toList)\n \
    \       val lst_Q = lst_P.map(x => x.toList)\n        val lst_R = lst_Q.map(x\
    \ => x.toList)\n        val lst_S = lst_R.map(x => x.toList)\n        val lst_T\
    \ = lst_S.map(x => x.toList)\n        val lst_U = lst_T.map(x => x.toList)\n \
    \       val lst_V = lst_U.map(x => x.toList)\n        val lst_W = lst_V.map(x\
    \ => x.toList)\n        val lst_X = lst_W.map(x => x.toList)\n        val lst_Y\
    \ = lst_X.map(x => x.toList)\n        val lst_Z = lst_Y.map(x => x.toList)\n \
    \       val lst_A = lst_Z.map(x => x.toList)\n        val lst_B = lst_A.map(x\
    \ => x.toList)\n        val lst_C = lst_B.map(x => x.toList)\n        val lst_D\
    \ = lst_C.map(x => x.toList)\n        val lst_E = lst_D.map(x => x.toList)\n \
    \       val lst_F = lst_E.map(x => x.toList)\n", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = new mutable.ArrayList[Long]()\n        val stack = new mutable.Stack[Long]()\n\
    \        val stackSize = new mutable.HashSet[Long]()\n        val stackSize2 =\
    \ new mutable.HashSet[Long]()\n        val stackSize3 = new mutable.HashSet[Long]()\n\
    \        val stackSize4 = new mutable.HashSet[Long]()\n        val stackSize5\
    \ = new mutable.HashSet[Long]()\n        val stackSize6 = new mutable.HashSet[Long]()\n\
    \        val stackSize7 = new mutable.HashSet[Long]()\n        val stackSize8\
    \ = new mutable.HashSet[Long]()\n        val stackSize9 = new mutable.HashSet[Long]()\n\
    \        val stackSize10 = new mutable.HashSet[Long]()\n        val stackSize11\
    \ = new mutable.HashSet[Long]()\n        val stackSize12 = new mutable.HashSet[Long]()\n\
    \        val stackSize13 = new mutable.HashSet[Long]()\n        val stackSize14\
    \ = new mutable.HashSet[Long]()\n        val stackSize15 = new mutable.HashSet[Long]()\n\
    \        val stackSize16 = new mutable.HashSet[Long]()\n        val stackSize17\
    \ = new mutable.HashSet[Long]()\n        val stackSize18 = new mutable.HashSet[Long]()\n\
    \        val stackSize19 = new mutable.HashSet[Long]()\n        val stackSize20\
    \ = new mutable.HashSet[Long]()\n        val stackSize21 = new mutable.HashSet[Long]()\n\
    \        val stackSize22 = new mutable.HashSet[Long]()\n        val stackSize23\
    \ = new mutable.HashSet[Long]()\n        val stackSize24 = new mutable.HashSet[Long]()\n\
    \        val stackSize25 = new mutable.HashSet[Long]()\n        val stackSize26\
    \ = new mutable.HashSet[Long]()\n        val stackSize27 = new mutable.HashSet[Long]()\n\
    \        val stackSize28 = new mutable.HashSet[Long]()\n        val stackSize29\
    \ = new mutable.HashSet[Long]()\n        val stackSize30 = new mutable.HashSet[Long]()\n\
    \        val stackSize31 = new mutable.HashSet", "        val grid = grid.toList\n\
    \        val N = grid.size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visitedMap =\
    \ new mutable.HashMap[Long, Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap28 = new mutable.HashMap[Long, ", "        val N = grid.length\n \
    \       val M = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val lst_A = grid.map(_.toList)\n    \
    \    val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_B.map(_.toList)\n\
    \        val lst_F = lst_B.map(_.toList)\n        val lst_G = lst_C.map(_.toList)\n\
    \        val lst_H = lst_C.map(_.toList)\n        val lst_I = lst_D.map(_.toList)\n\
    \        val lst_J = lst_D.map(_.toList)\n        val lst_K = lst_E.map(_.toList)\n\
    \        val lst_L = lst_E.map(_.toList)\n        val lst_M = lst_F.map(_.toList)\n\
    \        val lst_N = lst_F.map(_.toList)\n        val lst_O = lst_G.map(_.toList)\n\
    \        val lst_P = lst_G.map(_.toList)\n        val lst_Q = lst_H.map(_.toList)\n\
    \        val lst_R = lst_H.map(_.toList)\n        val lst_S = lst_I.map(_.toList)\n\
    \        val lst_T = lst_I.map(_.toList)\n        val lst_U = lst_J.map(_.toList)\n\
    \        val lst_V = lst_J.map(_.toList)\n        val lst_W = lst_K.map(_.toList)\n\
    \        val lst_X = lst_K.map(_.toList)\n        val lst_Y = lst_L.map(_.toList)\n\
    \        val lst_Z = lst_L.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_B.map(_.toList)\n        val lst_C = lst_C.map(_.toList)\n\
    \        val lst_D = lst_D.map(_.toList)\n        val lst_E = lst_E.map(_.toList)\n\
    \        val lst_F = lst_F.map(_.toList)\n        val lst_G = lst_G.map(_.toList)\n\
    \        val lst_H = lst_H.map(_.toList)\n        val lst_I = lst_I.map(_.toList)\n\
    \        val lst_J = lst_J.map(", "        val N = grid.length\n        val m\
    \ = grid.head\n        val n = grid.last\n        val grid = grid.tail\n     \
    \   val grid2 = grid.tail.tail\n        val grid3 = grid2.tail.tail\n        val\
    \ grid4 = grid3.tail.tail\n        val grid5 = grid4.tail.tail\n        val grid6\
    \ = grid5.tail.tail\n        val grid7 = grid6.tail.tail\n        val grid8 =\
    \ grid7.tail.tail\n        val grid9 = grid8.tail.tail\n        val grid10 = grid9.tail.tail\n\
    \        val grid11 = grid10.tail.tail\n        val grid12 = grid11.tail.tail\n\
    \        val grid13 = grid12.tail.tail\n        val grid14 = grid13.tail.tail\n\
    \        val grid15 = grid14.tail.tail\n        val grid16 = grid15.tail.tail\n\
    \        val grid17 = grid16.tail.tail\n        val grid18 = grid17.tail.tail\n\
    \        val grid19 = grid18.tail.tail\n        val grid20 = grid19.tail.tail\n\
    \        val grid21 = grid20.tail.tail\n        val grid22 = grid21.tail.tail\n\
    \        val grid23 = grid22.tail.tail\n        val grid24 = grid23.tail.tail\n\
    \        val grid25 = grid24.tail.tail\n        val grid26 = grid25.tail.tail\n\
    \        val grid27 = grid26.tail.tail\n        val grid28 = grid27.tail.tail\n\
    \        val grid29 = grid28.tail.tail\n        val grid30 = grid29.tail.tail\n\
    \        val grid31 = grid30.tail.tail\n        val grid32 = grid31.tail.tail\n\
    \        val grid33 = grid32.tail.tail\n        val grid34 = grid33.tail.tail\n\
    \        val grid35 = grid34.tail.tail\n        val grid36 = grid35.tail.tail\n\
    \        val grid37 = grid36.tail.tail\n        val grid38 = grid37.tail.tail\n\
    \        val grid39 = grid38.tail.tail\n        val grid40 = grid39.tail.tail\n\
    \        val grid41 = grid40.tail.tail\n        val grid42 = grid41.tail.tail\n\
    \        val grid43 = grid42.tail.tail\n        val grid44 = grid43.tail.tail\n\
    \        val grid45 = grid44.tail.tail\n        val grid46 = grid45.tail.tail\n",
  "        val m = grid.size\n        val n = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val ans = new mutable.ArrayList[Long]()\n\
    \        val stack = new mutable.ArrayList[Long]()\n        val stackSize = new\
    \ mutable.ArrayList[Long]()\n        val stackSize2 = new mutable.ArrayList[Long]()\n\
    \        val stackSize3 = new mutable.ArrayList[Long]()\n        val stackSize4\
    \ = new mutable.ArrayList[Long]()\n        val stackSize5 = new mutable.ArrayList[Long]()\n\
    \        val stackSize6 = new mutable.ArrayList[Long]()\n        val stackSize7\
    \ = new mutable.ArrayList[Long]()\n        val stackSize8 = new mutable.ArrayList[Long]()\n\
    \        val stackSize9 = new mutable.ArrayList[Long]()\n        val stackSize10\
    \ = new mutable.ArrayList[Long]()\n        val stackSize11 = new mutable.ArrayList[Long]()\n\
    \        val stackSize12 = new mutable.ArrayList[Long]()\n        val stackSize13\
    \ = new mutable.ArrayList[Long]()\n        val stackSize14 = new mutable.ArrayList[Long]()\n\
    \        val stackSize15 = new mutable.ArrayList[Long]()\n        val stackSize16\
    \ = new mutable.ArrayList[Long]()\n        val stackSize17 = new mutable.ArrayList[Long]()\n\
    \        val stackSize18 = new mutable.ArrayList[Long]()\n        val stackSize19\
    \ = new mutable.ArrayList[Long]()\n        val stackSize20 = new mutable.ArrayList[Long]()\n\
    \        val stackSize21 = new mutable.ArrayList[Long]()\n        val stackSize22\
    \ = new mutable.ArrayList[Long]()\n        val stackSize23 = new mutable.ArrayList[Long]()\n\
    \        val stackSize24 = new mutable.ArrayList[Long]()\n        val stackSize25\
    \ = new mutable.ArrayList[Long]()\n        val stackSize26 = new mutable.ArrayList[Long]()\n\
    \        val stackSize27 = new mutable.ArrayList[Long]()\n        val stackSize28\
    \ = new mutable.ArrayList[Long]()\n        val stackSize29 = new mutable.ArrayList[Long]()\n\
    \        val stackSize30 = new mutable.ArrayList[Long]()\n        val stackSize31\
    \ = new mutable.ArrayList[Long]()\n        val stackSize32 = new mutable.ArrayList[Long]()\n\
    \        val stackSize33 = new mutable.ArrayList[Long]", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(x\
    \ => x.toList).distinct\n        val lst_D = lst_B.map(x => x.toList).distinct\n\
    \        val lst_E = lst_C.map(x => x.toList).distinct\n        val lst_F = lst_D.map(x\
    \ => x.toList).distinct\n        val lst_G = lst_E.map(x => x.toList).distinct\n\
    \        val lst_H = lst_F.map(x => x.toList).distinct\n        val lst_I = lst_G.map(x\
    \ => x.toList).distinct\n        val lst_J = lst_H.map(x => x.toList).distinct\n\
    \        val lst_K = lst_I.map(x => x.toList).distinct\n        val lst_L = lst_J.map(x\
    \ => x.toList).distinct\n        val lst_M = lst_K.map(x => x.toList).distinct\n\
    \        val lst_N = lst_M.map(x => x.toList).distinct\n        val lst_O = lst_N.map(x\
    \ => x.toList).distinct\n        val lst_P = lst_O.map(x => x.toList).distinct\n\
    \        val lst_Q = lst_P.map(x => x.toList).distinct\n        val lst_R = lst_Q.map(x\
    \ => x.toList).distinct\n        val lst_S = lst_R.map(x => x.toList).distinct\n\
    \        val lst_T = lst_S.map(x => x.toList).distinct\n        val lst_U = lst_T.map(x\
    \ => x.toList).distinct\n        val lst_V = lst_U.map(x => x.toList).distinct\n\
    \        val lst_W = lst_V.map(x => x.toList).distinct\n        val lst_X = lst_W.map(x\
    \ => x.toList).distinct\n        val lst_Y = lst_X.map(x => x.toList).distinct\n\
    \        val lst_Z = lst_Y.map(x => x.toList).distinct\n        val lst_A = lst_Z.map(x\
    \ => x.toList).distinct\n        val lst_B = lst_A.map(x => x.toList).distinct\n\
    \        val lst_C = lst_B.map(x => x.toList).distinct\n", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     var min = 0\n        var index = 0\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var j = 0\n        var k = 0\n\
    \        var i = 1\n        var j = 0\n        var k = 0\n        var i = 1\n\
    \        var j = 0\n        var k = 0\n        var i = 1\n        var j = 0\n\
    \        var k = 0\n        var i = 1\n        var ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val grid = grid.toList\n        val grid2\
    \ = grid.map(_.toList)\n        val grid3 = grid2.map(_.toList)\n        val grid4\
    \ = grid3.map(_.toList)\n        val grid5 = grid4.map(_.toList)\n        val\
    \ grid6 = grid5.map(_.toList)\n        val grid7 = grid6.map(_.toList)\n     \
    \   val grid8 = grid7.map(_.toList)\n        val grid9 = grid8.map(_.toList)\n\
    \        val grid10 = grid9.map(_.toList)\n        val grid11 = grid10.map(_.toList)\n\
    \        val grid12 = grid11.map(_.toList)\n        val grid13 = grid12.map(_.toList)\n\
    \        val grid14 = grid13.map(_.toList)\n        val grid15 = grid14.map(_.toList)\n\
    \        val grid16 = grid15.map(_.toList)\n        val grid17 = grid16.map(_.toList)\n\
    \        val grid18 = grid17.map(_.toList)\n        val grid19 = grid18.map(_.toList)\n\
    \        val grid20 = grid19.map(_.toList)\n        val grid21 = grid20.map(_.toList)\n\
    \        val grid22 = grid21.map(_.toList)\n        val grid23 = grid22.map(_.toList)\n\
    \        val grid24 = grid23.map(_.toList)\n        val grid25 = grid24.map(_.toList)\n\
    \        val grid26 = grid25.map(_.toList)\n        val grid27 = grid26.map(_.toList)\n\
    \        val grid28 = grid27.map(_.toList)\n        val grid29 = grid28.map(_.toList)\n\
    \        val grid30 = grid29.map(_.toList)\n        val grid31 = grid30.map(_.toList)\n\
    \        val grid32 = grid31.map(_.toList)\n        val grid33 = grid32.map(_.toList)\n\
    \        val grid34 = grid33.map(_.toList)\n        val grid35 = grid34.map(_.toList)\n\
    \        val grid36 = grid35.map(_.toList)\n        val grid37 = grid36.map(_.toList)\n\
    \        val grid38 = grid37.map(_.toList)\n        val grid39 = grid38.map(_.toList)\n\
    \        val grid40 = grid39.map(_.toList)\n        val grid41 = grid40.map(_.toList)\n\
    \        val grid42 = grid41.map(_.toList)\n        val grid43 = grid42.map(_.",
  "        val n = grid.size\n        val m = grid.head.length\n        val lst_A\
    \ = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        val lst_C\
    \ = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n        val\
    \ lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n     \
    \   val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.", "     \
    \   val N = grid.length\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_R = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_V = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        ", "        val n = grid.length\n        val m = grid(0).length\n   \
    \     val grid = mutable.ArrayBuffer.empty[List[Long]]\n        for (i <- 1 to\
    \ n) {\n            val row = grid((i - 1).toInt)\n            val col = grid((i).toInt)\n\
    \            val list = row ++ col\n            grid += list\n        }\n    \
    \    val result = new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]()\n        val visitedCount2\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount3 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount4 = new mutable.HashMap[Long, Int]()\n     \
    \   val visitedCount5 = new mutable.HashMap[Long, Int]()\n        val visitedCount6\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount7 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount8 = new mutable.HashMap[Long, Int]()\n     \
    \   val visitedCount9 = new mutable.HashMap[Long, Int]()\n        val visitedCount10\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount11 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount12 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount13 = new mutable.HashMap[Long, Int]()\n        val visitedCount14\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount15 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount16 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount17 = new mutable.HashMap[Long, Int]()\n        val visitedCount18\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount19 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount20 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount21 = new mutable.HashMap[Long, Int]()\n        val visitedCount22\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount23 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount24 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount25 = new mutable.Hash", "        val N = grid.length\n  \
    \      val M = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = new mutable.ListBuffer[Long]()\n\
    \        val visitedAns = new mutable.HashSet[Long]()\n        val visitedAnsSet\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet2 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet3 = new mutable.HashSet[Long]()\n        val visitedAnsSet4\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet5 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet6 = new mutable.HashSet[Long]()\n        val visitedAnsSet7\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet8 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet9 = new mutable.HashSet[Long]()\n        val visitedAnsSet10\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet11 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet12 = new mutable.HashSet[Long]()\n        val visitedAnsSet13\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet14 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet15 = new mutable.HashSet[Long]()\n        val visitedAnsSet16\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet17 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet18 = new mutable.HashSet[Long]()\n        val visitedAnsSet19\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet20 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet21 = new mutable.HashSet[Long]()\n        val visitedAnsSet22\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet23 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet24 = new mutable.HashSet[Long]()\n        val visitedAnsSet25\
    \ = new mutable.HashSet[Long]()\n", "        val N = grid.size\n        val m\
    \ = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zipWithIndex.filter(_._1\
    \ < _._1).map(_._2)\n        val lst_D = lst_B.zipWithIndex.filter(_._1 < _._1).map(_._2)\n\
    \        val lst_E = lst_C.zipWithIndex.filter(_._1 < _._1).map(_._2)\n      \
    \  val lst_F = lst_D.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_G\
    \ = lst_E.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_H = lst_F.zipWithIndex.filter(_._1\
    \ < _._1).map(_._2)\n        val lst_I = lst_G.zipWithIndex.filter(_._1 < _._1).map(_._2)\n\
    \        val lst_J = lst_H.zipWithIndex.filter(_._1 < _._1).map(_._2)\n      \
    \  val lst_K = lst_I.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_L\
    \ = lst_J.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_M = lst_K.zipWithIndex.filter(_._1\
    \ < _._1).map(_._2)\n        val lst_N = lst_L.zipWithIndex.filter(_._1 < _._1).map(_._2)\n\
    \        val lst_O = lst_M.zipWithIndex.filter(_._1 < _._1).map(_._2)\n      \
    \  val lst_P = lst_O.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_Q\
    \ = lst_P.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_R = lst_Q.zipWithIndex.filter(_._1\
    \ < _._1).map(_._2)\n        val lst_S = lst_R.zipWithIndex.filter(_._1 < _._1).map(_._2)\n\
    \        val lst_T = lst_S.zipWithIndex.filter(_._1 < _._1).map(_._2)\n      \
    \  val lst_U = lst_T.zipWithIndex.filter(_._1 < _._1).map(_._2)\n        val lst_",
  "        val m = grid.size\n        val n = grid(0).size\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_D = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x else x.reverse).reverse\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x else x.reverse).reverse\n        val lst_F = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x else x.reverse).reverse.reverse\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x else x.reverse).reverse.reverse.reverse\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val grid = grid.toSet\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedSet = mutable.HashSet[Long]()\n        val visitedSet2 = mutable.HashSet[Long]()\n\
    \        val visitedSet3 = mutable.HashSet[Long]()\n        val visitedSet4 =\
    \ mutable.HashSet[Long]()\n        val visitedSet5 = mutable.HashSet[Long]()\n\
    \        val visitedSet6 = mutable.HashSet[Long]()\n        val visitedSet7 =\
    \ mutable.HashSet[Long]()\n        val visitedSet8 = mutable.HashSet[Long]()\n\
    \        val visitedSet9 = mutable.HashSet[Long]()\n        val visitedSet10 =\
    \ mutable.HashSet[Long]()\n        val visitedSet11 = mutable.HashSet[Long]()\n\
    \        val visitedSet12 = mutable.HashSet[Long]()\n        val visitedSet13\
    \ = mutable.HashSet[Long]()\n        val visitedSet14 = mutable.HashSet[Long]()\n\
    \        val visitedSet15 = mutable.HashSet[Long]()\n        val visitedSet16\
    \ = mutable.HashSet[Long]()\n        val visitedSet17 = mutable.HashSet[Long]()\n\
    \        val visitedSet18 = mutable.HashSet[Long]()\n        val visitedSet19\
    \ = mutable.HashSet[Long]()\n        val visitedSet20 = mutable.HashSet[Long]()\n\
    \        val visitedSet21 = mutable.HashSet[Long]()\n        val visitedSet22\
    \ = mutable.HashSet[Long]()\n        val visitedSet23 = mutable.HashSet[Long]()\n\
    \        val visitedSet24 = mutable.HashSet[Long]()\n        val visitedSet25\
    \ = mutable.HashSet[Long]()\n        val visitedSet26 = mutable.HashSet[Long]()\n\
    \        val visitedSet27 = mutable.HashSet[Long]()\n        val visitedSet28\
    \ = mutable.HashSet[Long]()\n        val visitedSet29 = mutable.HashSet[Long]()\n\
    \        val visitedSet30 = mutable.HashSet[Long]()\n        val visitedSet31\
    \ = mutable.HashSet[Long]()\n        val visitedSet32 = ", "        val N = grid.length\n\
    \        val m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_D = lst_B.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_E = lst_C.zipWithIndex.map(x => x._2.toLong)\n        val lst_F\
    \ = lst_D.zipWithIndex.map(x => x._2.toLong)\n        val lst_G = lst_E.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_H = lst_F.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_I = lst_G.zipWithIndex.map(x => x._2.toLong)\n        val lst_J\
    \ = lst_H.zipWithIndex.map(x => x._2.toLong)\n        val lst_K = lst_I.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_L = lst_J.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_M = lst_K.zipWithIndex.map(x => x._2.toLong)\n        val lst_N\
    \ = lst_L.zipWithIndex.map(x => x._2.toLong)\n        val lst_O = lst_M.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_P = lst_O.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_Q = lst_P.zipWithIndex.map(x => x._2.toLong)\n        val lst_R\
    \ = lst_Q.zipWithIndex.map(x => x._2.toLong)\n        val lst_S = lst_R.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val lst_T = lst_S.zipWithIndex.map(x => x._2.toLong)\n\
    \        val lst_U = lst_T.zipWithIndex.map(x => x._2.toLong)\n        val lst_V\
    \ = lst_U.zipWithIndex.map(x => x._2.toLong)\n        val lst_W = lst_V.zipWithIndex.map(x\
    \ => x._2.", "        val grid = grid.toList\n        val n = grid.size\n    \
    \    val m = grid.head.length\n        val lst_A = grid.map(x => x.toList).flatten\n\
    \        val lst_B = grid.map(x => x.toList).flatten.reverse\n        val lst_C\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2)).toList\n        val lst_D = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).toList.reverse\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).toList\n        val lst_F = lst_A.zip(lst_B).map(x => (x._1,\
    \ x._2)).toList.reverse.reverse\n        val lst_G = lst_A.zip(lst_B).map(x =>\
    \ (x._1, x._2)).toList.reverse.reverse.reverse\n        val lst_H = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).toList.reverse.reverse.reverse.reverse\n        val lst_I =\
    \ lst_A.zip(lst_B).map(x => (x._1, x._2)).toList.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val n = grid.length\n        val m = grid(0).length\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val lst_A\
    \ = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        val lst_C\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._1))\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_E\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_G\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_I\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_K\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_M\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_O\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x._2))\n        val lst_Q\
    \ = lst_A.zip(lst_B).map(x => x._1.zip(x._2).map(x => x.", "        val grid =\
    \ grid.toList\n        val n = grid.size\n        val m = grid(0).size\n     \
    \   val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n        val\
    \ lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val lst_E =\
    \ List[Long]()\n        val lst_F = List[Long]()\n        val lst_G = List[Long]()\n\
    \        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n        val\
    \ lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val lst_L =\
    \ List[Long]()\n        val lst_M = List[Long]()\n        val lst_N = List[Long]()\n\
    \        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n        val\
    \ lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val lst_S =\
    \ List[Long]()\n        val lst_T = List[Long]()\n        val lst_U = List[Long]()\n\
    \        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n        val\
    \ lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val lst_Z =\
    \ List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val ", "        val N = grid.size\n        val\
    \ m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(x =>\
    \ x.toList)\n        val lst_B = grid.reverse.map(x => x.toList)\n        val\
    \ lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D = lst_C.map(x\
    \ => (x._1, x._2))\n        val lst_E = lst_D.map(x => (x._1, x._2))\n       \
    \ val lst_F = lst_E.map(x => (x._1, x._2))\n        val lst_G = lst_F.map(x =>\
    \ (x._1, x._2))\n        val lst_H = lst_G.map(x => (x._1, x._2))\n        val\
    \ lst_I = lst_H.map(x => (x._1, x._2))\n        val lst_J = lst_I.map(x => (x._1,\
    \ x._2))\n        val lst_K = lst_J.map(x => (x._1, x._2))\n        val lst_L\
    \ = lst_K.map(x => (x._1, x._2))\n        val lst_M = lst_L.map(x => (x._1, x._2))\n\
    \        val lst_N = lst_M.map(x => (x._1, x._2))\n        val lst_O = lst_N.map(x\
    \ => (x._1, x._2))\n        val lst_P = lst_O.map(x => (x._1, x._2))\n       \
    \ val lst_Q = lst_P.map(x => (x._1, x._2))\n        val lst_R = lst_Q.map(x =>\
    \ (x._1, x._2))\n        val lst_S = lst_R.map(x => (x._1, x._2))\n        val\
    \ lst_T = lst_S.map(x => (x._1, x._2))\n        val lst_U = lst_T.map(x => (x._1,\
    \ x._2))\n        val lst_V = lst_U.map(x => (x._1, x._2))\n        val lst_W\
    \ = lst_V.map(x => (x._1, x._2))\n        val lst_X = lst_W.map(x => (x._1, x._2))\n\
    \        val lst_Y = lst_X.map(x => (x._1, x._2))\n        val lst_Z = lst_Y.map(x\
    \ => (x._1, x._2))\n        val lst_A = lst_Z.map(x => (x._1, x.", "        val\
    \ grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        ", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val result = new Array[Long](k)\n     \
    \   val visited = new Array[Boolean](k)\n        val queue = new Array[Int](k)\n\
    \        val stack = new Array[Int](k)\n        val lst_A = new Array[Long](k)\n\
    \        val lst_B = new Array[Long](k)\n        for (i <- 0 until k) {\n    \
    \        visited(i) = false\n            queue(i) = 0\n            stack(i) =\
    \ 0\n            lst_A(i) = 0\n            lst_B(i) = 0\n        }\n        val\
    \ index = 0\n        val index2 = 0\n        val index3 = 0\n        val index4\
    \ = 0\n        val index5 = 0\n        val index6 = 0\n        val index7 = 0\n\
    \        val index8 = 0\n        val index9 = 0\n        val index10 = 0\n   \
    \     val index11 = 0\n        val index12 = 0\n        val index13 = 0\n    \
    \    val index14 = 0\n        val index15 = 0\n        val index16 = 0\n     \
    \   val index17 = 0\n        val index18 = 0\n        val index19 = 0\n      \
    \  val index20 = 0\n        val index21 = 0\n        val index22 = 0\n       \
    \ val index23 = 0\n        val index24 = 0\n        val index25 = 0\n        val\
    \ index26 = 0\n        val index27 = 0\n        val index28 = 0\n        val index29\
    \ = 0\n        val index30 = 0\n        val index31 = 0\n        val index32 =\
    \ 0\n        val index33 = 0\n        val index34 = 0\n        val index35 = 0\n\
    \        val index36 = 0\n        val index37 = 0\n        val index38 = 0\n \
    \       val index39 = 0\n        val index40 = 0\n        val index41 = 0\n  \
    \      val index42 = 0\n        val index43 = 0\n        val index44 = 0\n   \
    \     val index45 = 0\n        val index46 = 0\n        val index47 = 0\n    \
    \    val index48 = 0\n        val index49 = 0\n        val index50 = 0\n     \
    \   val index51 = 0\n        val index52 = 0\n        val index53 = 0\n      \
    \  val index54 = 0\n        val index55 = 0\n        val index56 = 0\n       \
    \ val index57 = 0\n        val index58 = 0\n        val index59 = 0\n        val\
    \ index60 = 0\n        val index61 = 0\n        val index62 = 0\n        val index63\
    \ = 0\n        val index64 = 0\n        val index65 = 0\n        val index66 =\
    \ 0\n        ", "        val grid = grid.toList\n        val n = grid.size\n \
    \       val m = grid(0).size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedList =\
    \ new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        ", "        val m = grid.length\n        val n = grid(0).length\n   \
    \     val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visited_ind = new Array[Int](k)\n        val visited_ind_ind = new\
    \ Array[Int](k)\n        val visited_ind_ind_ind = new Array[Int](k)\n       \
    \ val visited_ind_ind_ind_ind = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n\
    \        val visited_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n       \
    \ val visited_ind_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n        val\
    \ visited_ind_ind_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n        val\
    \ visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n      \
    \  val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n\
    \        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind = new Array[Int](k)\n\
    \        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind = new\
    \ Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new Array[Int](k)\n        val visited_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_",
  "        val n = grid.size\n        val m = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val ans = new mutable.ArrayList[Long]()\n\
    \        val lst_A = new mutable.ArrayList[Long]()\n        val lst_B = new mutable.ArrayList[Long]()\n\
    \        val lst_C = new mutable.ArrayList[Long]()\n        val lst_D = new mutable.ArrayList[Long]()\n\
    \        val lst_E = new mutable.ArrayList[Long]()\n        val lst_F = new mutable.ArrayList[Long]()\n\
    \        val lst_G = new mutable.ArrayList[Long]()\n        val lst_H = new mutable.ArrayList[Long]()\n\
    \        val lst_I = new mutable.ArrayList[Long]()\n        val lst_J = new mutable.ArrayList[Long]()\n\
    \        val lst_K = new mutable.ArrayList[Long]()\n        val lst_L = new mutable.ArrayList[Long]()\n\
    \        val lst_M = new mutable.ArrayList[Long]()\n        val lst_N = new mutable.ArrayList[Long]()\n\
    \        val lst_O = new mutable.ArrayList[Long]()\n        val lst_P = new mutable.ArrayList[Long]()\n\
    \        val lst_Q = new mutable.ArrayList[Long]()\n        val lst_R = new mutable.ArrayList[Long]()\n\
    \        val lst_S = new mutable.ArrayList[Long]()\n        val lst_T = new mutable.ArrayList[Long]()\n\
    \        val lst_U = new mutable.ArrayList[Long]()\n        val lst_V = new mutable.ArrayList[Long]()\n\
    \        val lst_W = new mutable.ArrayList[Long]()\n        val lst_X = new mutable.ArrayList[Long]()\n\
    \        val lst_Y = new mutable.ArrayList[Long]()\n        val lst_Z = new mutable.ArrayList[Long]()\n\
    \        val lst_AA = new mutable.ArrayList[Long]()\n        val lst_AB = new\
    \ mutable.ArrayList[Long]()\n        val lst_AC = new mutable.ArrayList[Long]()\n\
    \        val lst_AD = new mutable.ArrayList[Long]()\n        val lst_AE = new\
    \ mutable.ArrayList[Long]()\n        val lst_AF = new mutable.ArrayList[Long]()\n\
    \        val lst_AG = new mutable.ArrayList[Long]()\n        val lst_AH = new\
    \ mutable.ArrayList[Long", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val lst_A = List[Long]()\n        val\
    \ lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D =\
    \ List[Long]()\n        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n\
    \        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val\
    \ lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val lst_K =\
    \ List[Long]()\n        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n\
    \        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val\
    \ lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R =\
    \ List[Long]()\n        val lst_S = List[Long]()\n        val lst_T = List[Long]()\n\
    \        val lst_U = List[Long]()\n        val lst_V = List[Long]()\n        val\
    \ lst_W = List[Long]()\n        val lst_X = List[Long]()\n        val lst_Y =\
    \ List[Long]()\n        val lst_Z = List[Long]()\n        val lst_A = List[Long]()\n\
    \        val lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val\
    \ lst_D = List[Long]()\n        val lst_E = List[Long]()\n        val lst_F =\
    \ List[Long]()\n        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n\
    \        val lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val\
    \ lst_K = List[Long]()\n        val lst_L = List[Long]()\n        val lst_M =\
    \ List[Long]()\n        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n\
    \        val lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val\
    \ lst_R = List[Long]()\n        val lst_S = List[Long]()\n        val ", "   \
    \     val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ visitedIndex = new Array[Int](k)\n        val visitedIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndex = new Array[Int](k)\n        val visitedIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val visitedIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n     \
    \   val visitedIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val visitedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array", "        val N = grid.length\n        val m = grid.head\n    \
    \    val n = grid.last\n        val grid = grid.tail\n        val grid2 = grid.tail.tail\n\
    \        val grid3 = grid.tail.tail.tail\n        val grid4 = grid.tail.tail.tail.tail\n\
    \        val grid5 = grid.tail.tail.tail.tail.tail\n        val grid6 = grid.tail.tail.tail.tail.tail.tail\n\
    \        val grid7 = grid.tail.tail.tail.tail.tail.tail.tail\n        val grid8\
    \ = grid.tail.tail.tail.tail.tail.tail.tail.tail\n        val grid9 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid10 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid11 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid12 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val grid13 = grid.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail",
  "        val m = grid.size\n        val n = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val ans = mutable.ArrayBuffer.empty[Long]\n\
    \        val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.reverse.map(_.toList).toList\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 compare x._2).zipWithIndex.filter(_._1\
    \ == 0).map(_._2).toList\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2).zipWithIndex.filter(_._1 == 1).map(_._2).toList\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).zipWithIndex.filter(_._1 == 2).map(_._2).toList\n    \
    \    val lst_F = lst_A.zip(lst_B).map(x => x._1 compare x._2).zipWithIndex.filter(_._1\
    \ == 3).map(_._2).toList\n        val lst_G = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2).zipWithIndex.filter(_._1 == 4).map(_._2).toList\n        val lst_H = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).zipWithIndex.filter(_._1 == 5).map(_._2).toList\n    \
    \    val lst_I = lst_A.zip(lst_B).map(x => x._1 compare x._2).zipWithIndex.filter(_._1\
    \ == 6).map(_._2).toList\n        val lst_J = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2).zipWithIndex.filter(_._1 == 7).map(_._2).toList\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 compare x._2).zipWithIndex.filter(_._1 == 8).map(_._2).toList\n    \
    \    val lst_L = lst_A.zip(lst_B).map(x => x._1 compare x._2).zipWithIndex.filter(_._1\
    \ == 9).map(_._2).toList\n        val lst_M = lst_A.zip(lst_B).map(x => x._1 compare\
    \ x._2).zipWithIndex.filter(_._1 == 10).map(_._2).toList\n        val lst_", " \
    \       val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).reverse\n        val lst_C = lst_A.map(x\
    \ => x.toList).reverse\n        val lst_D = lst_A.map(x => x.toList).reverse\n\
    \        val lst_E = lst_B.map(x => x.toList).reverse\n        val lst_F = lst_B.map(x\
    \ => x.toList).reverse\n        val lst_G = lst_C.map(x => x.toList).reverse\n\
    \        val lst_H = lst_C.map(x => x.toList).reverse\n        val lst_I = lst_D.map(x\
    \ => x.toList).reverse\n        val lst_J = lst_D.map(x => x.toList).reverse\n\
    \        val lst_K = lst_E.map(x => x.toList).reverse\n        val lst_L = lst_E.map(x\
    \ => x.toList).reverse\n        val lst_M = lst_F.map(x => x.toList).reverse\n\
    \        val lst_N = lst_F.map(x => x.toList).reverse\n        val lst_O = lst_G.map(x\
    \ => x.toList).reverse\n        val lst_P = lst_G.map(x => x.toList).reverse\n\
    \        val lst_Q = lst_H.map(x => x.toList).reverse\n        val lst_R = lst_H.map(x\
    \ => x.toList).reverse\n        val lst_S = lst_I.map(x => x.toList).reverse\n\
    \        val lst_T = lst_I.map(x => x.toList).reverse\n        val lst_U = lst_J.map(x\
    \ => x.toList).reverse\n        val lst_V = lst_J.map(x => x.toList).reverse\n\
    \        val lst_W = lst_K.map(x => x.toList).reverse\n        val lst_X = lst_K.map(x\
    \ => x.toList).reverse\n        val lst_Y = lst_L.map(x => x.toList).reverse\n\
    \        val lst_Z = lst_L.map(x => x.toList).reverse\n        val lst_A = lst_A.map(x\
    \ => x.toList).reverse\n        val lst_B = lst_B.map(x => x.toList).reverse\n\
    \        val lst_C = lst_C.map(x => x.toList).reverse\n        val ", "      \
    \  val m = grid.length\n        val n = grid(0).length\n        val result = new\
    \ Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val visited_in\
    \ = new Array[Boolean](k)\n        val visited_out = new Array[Boolean](k)\n \
    \       val visited_in2 = new Array[Boolean](k)\n        val visited_out2 = new\
    \ Array[Boolean](k)\n        val visited_in3 = new Array[Boolean](k)\n       \
    \ val visited_out3 = new Array[Boolean](k)\n        val visited_in4 = new Array[Boolean](k)\n\
    \        val visited_out4 = new Array[Boolean](k)\n        val visited_in5 = new\
    \ Array[Boolean](k)\n        val visited_out5 = new Array[Boolean](k)\n      \
    \  val visited_in6 = new Array[Boolean](k)\n        val visited_out6 = new Array[Boolean](k)\n\
    \        val visited_in7 = new Array[Boolean](k)\n        val visited_out7 = new\
    \ Array[Boolean](k)\n        val visited_in8 = new Array[Boolean](k)\n       \
    \ val visited_out8 = new Array[Boolean](k)\n        val visited_in9 = new Array[Boolean](k)\n\
    \        val visited_out9 = new Array[Boolean](k)\n        val visited_in10 =\
    \ new Array[Boolean](k)\n        val visited_out10 = new Array[Boolean](k)\n \
    \       val visited_in11 = new Array[Boolean](k)\n        val visited_out11 =\
    \ new Array[Boolean](k)\n        val visited_in12 = new Array[Boolean](k)\n  \
    \      val visited_out12 = new Array[Boolean](k)\n        val visited_in13 = new\
    \ Array[Boolean](k)\n        val visited_out13 = new Array[Boolean](k)\n     \
    \   val visited_in14 = new Array[Boolean](k)\n        val visited_out14 = new\
    \ Array[Boolean](k)\n        val visited_in15 = new Array[Boolean](k)\n      \
    \  val visited_out15 = new Array[Boolean](k)\n        val visited_in16 = new Array[Boolean](k)\n\
    \        val visited_out16 = new Array[Boolean](k)\n        val visited_in17 =\
    \ new Array[Boolean](k)\n        val visited_out17 = new Array[Boolean](k)\n \
    \       val visited_in18 = new Array[Boolean](k)\n        val visited_out18 =\
    \ new Array[Boolean](k)\n        val visited_in19 = new Array[Boolean](k)", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val lst_A\
    \ = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        var i\
    \ = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var minPath\
    \ : List[Long] = Nil\n        while (i < n && j < m) {\n            if (lst_A(i)\
    \ < lst_B(j)) {\n                k = k + 1\n                lst_A(i) = lst_A(i)\
    \ + 1\n                lst_B(j) = lst_B(j) + 1\n                i = i + 1\n  \
    \              j = j + 1\n            } else {\n                k = k + 1\n  \
    \              lst_A(i) = lst_A(i) + 1\n                lst_B(j) = lst_B(j) +\
    \ 1\n                i = i + 1\n                j = j + 1\n            }\n   \
    \     }\n        if (k == l) {\n            minPath = lst_A\n        } else {\n\
    \            minPath = lst_B\n        }\n        minPath", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new Array[Long](k)\n   \
    \     val visited = new Array[Boolean](k)\n        var i = 0\n        var j =\
    \ 0\n        var k = 0\n        var min = 0\n        var minIndex = 0\n      \
    \  var minValue = 0\n        var minPath = 0\n        var minPathIndex = 0\n \
    \       var minPathValue = 0\n        var minPathPath = 0\n        var minPathPathIndex\
    \ = 0\n        var minPathPathValue = 0\n        var minPathPathPath = 0\n   \
    \     var minPathPathPath = 0\n        var minPathPathPathValue = 0\n        var\
    \ minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n        var minPathPathPathPath\
    \ = 0\n        var minPathPathPathValue = 0\n        var minPathPathPathPath =\
    \ 0\n        var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n\
    \        var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n \
    \       var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n  \
    \      var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n   \
    \     var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n    \
    \    var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n     \
    \   var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n      \
    \  var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n       \
    \ var minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n        var\
    \ minPathPathPathValue = 0\n        var minPathPathPathPath = 0\n        var minPathPathPathValue\
    \ = 0\n        var minPathPathPathPath = 0\n        var minPathPathPathValue =\
    \ 0\n        var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n\
    \        var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n \
    \       var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n  \
    \      var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n   \
    \     var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n    \
    \    var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n     \
    \   var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n      \
    \  var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n       \
    \ var minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n        var\
    \ minPathPathPathPath = 0\n        var minPathPathPathValue = 0\n        var minPathPathPathPath\
    \ = 0\n        var min", "        val N = grid.size\n        val m = grid.head\n\
    \        val n = grid.last\n        val lst_A = grid.map(_.toList)\n        val\
    \ lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        ", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = new mutable.ArrayList[Long]()\n        val stack = new mutable.ArrayList[Long]()\n\
    \        val stackSize = 0\n        val stackMax = k\n        val stackMin = k\n\
    \        val stackMaxIndex = k\n        val stackMinIndex = k\n        val stackMaxValue\
    \ = grid\n        val stackMinValue = grid\n        val stackMaxIndex = grid\n\
    \        val stackMinIndex = grid\n        val stackMaxValue = grid\n        val\
    \ stackMinValue = grid\n        val stackMaxIndex = grid\n        val stackMinIndex\
    \ = grid\n        val stackMaxValue = grid\n        val stackMinValue = grid\n\
    \        val stackMaxIndex = grid\n        val stackMinIndex = grid\n        val\
    \ stackMaxValue = grid\n        val stackMinValue = grid\n        val stackMaxIndex\
    \ = grid\n        val stackMinIndex = grid\n        val stackMaxValue = grid\n\
    \        val stackMinValue = grid\n        val stackMaxIndex = grid\n        val\
    \ stackMinIndex = grid\n        val stackMaxValue = grid\n        val stackMinValue\
    \ = grid\n        val stackMaxIndex = grid\n        val stackMinIndex = grid\n\
    \        val stackMaxValue = grid\n        val stackMinValue = grid\n        val\
    \ stackMaxIndex = grid\n        val stackMinIndex = grid\n        val stackMaxValue\
    \ = grid\n        val stackMinValue = grid\n        val stackMaxIndex = grid\n\
    \        val stackMinIndex = grid\n        val stackMaxValue = grid\n        val\
    \ stackMinValue = grid\n        val stackMaxIndex = grid\n        val stackMinIndex\
    \ = grid\n        val stackMaxValue = grid\n        val stackMinValue = grid\n\
    \        val stackMaxIndex = grid\n        val stackMinIndex = grid\n        val\
    \ stackMaxValue = grid\n        val stackMinValue = grid\n        val stackMaxIndex\
    \ = grid\n        val stackMinIndex = grid\n        val stackMaxValue = grid\n\
    \        val stackMinValue = grid\n        val stackMaxIndex = grid\n        val\
    \ stackMinIndex = grid\n        val stackMaxValue = grid\n        val stackMinValue\
    \ = grid\n        val stackMaxIndex = grid\n        val stackMinIndex = grid\n\
    \        val stackMaxValue = grid\n        val stackMinValue = grid\n        val\
    \ stackMaxIndex = grid\n        val stackMinIndex = grid\n        val stackMaxValue\
    \ = grid\n        val stackMinValue = grid\n        val stackMaxIndex = grid\n\
    \        val stackMinIndex = grid\n        val stackMaxValue = grid\n", "    \
    \    val N = grid.size\n        val m = N * N\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val queue = mutable.PriorityQueue[Long]()\n\
    \        val lst_A = grid.map(_.toList).map(_.toSet).toList\n        val lst_B\
    \ = grid.map(_.toList).map(_.toSet).sortBy(-_).toList\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).toList\n        val lst_D = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_E = lst_C.map(x => (x._2, x._1)).toMap\n        val lst_F = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_G = lst_C.map(x => (x._2, x._1)).toMap\n\
    \        val lst_H = lst_C.map(x => (x._1, x._2)).toMap\n        val lst_I = lst_C.map(x\
    \ => (x._2, x._1)).toMap\n        val lst_J = lst_C.map(x => (x._1, x._2)).toMap\n\
    \        val lst_K = lst_C.map(x => (x._2, x._1)).toMap\n        val lst_L = lst_C.map(x\
    \ => (x._1, x._2)).toMap\n        val lst_M = lst_C.map(x => (x._2, x._1)).toMap\n\
    \        val lst_N = lst_C.map(x => (x._2, x._1)).toMap\n        val lst_O = lst_C.map(x\
    \ => (x._2, x._1)).toMap\n        val lst_P = lst_C.map(x => (x._2, x._1)).toMap\n\
    \        val lst_Q = lst_C.map(x => (x._2, x._1)).toMap\n        val lst_R = lst_C.map(x\
    \ => (x._2, x._1)).toMap\n        val lst_S = lst_C.map(x => (x._2, x._1)).toMap\n\
    \        val lst_T = lst_C.map(x => (x._2, x._1)).toMap\n        val lst_U = lst_C.map(x\
    \ => (x._2, x._1)).toMap\n        val lst_V = lst_C.map(x => (x._2, x._1)).toMap\n\
    \        val lst_W = lst_C.map(", "        val n = grid.length\n        val m\
    \ = grid(0).length\n        val lst_A = grid.map(_.toList)\n        val lst_B\
    \ = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n        val lst_D\
    \ = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n        val\
    \ lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n     \
    \   val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val result = new Array[Long](k)\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var min = 0\n        var minIndex = 0\n        var\
    \ minValue = 0\n        var minValueIndex = 0\n        var minValueIndex2 = 0\n\
    \        var minValueIndex3 = 0\n        var minValueIndex4 = 0\n        var minValueIndex5\
    \ = 0\n        var minValueIndex6 = 0\n        var minValueIndex7 = 0\n      \
    \  var minValueIndex8 = 0\n        var minValueIndex9 = 0\n        var minValueIndex10\
    \ = 0\n        var minValueIndex11 = 0\n        var minValueIndex12 = 0\n    \
    \    var minValueIndex13 = 0\n        var minValueIndex14 = 0\n        var minValueIndex15\
    \ = 0\n        var minValueIndex16 = 0\n        var minValueIndex17 = 0\n    \
    \    var minValueIndex18 = 0\n        var minValueIndex19 = 0\n        var minValueIndex20\
    \ = 0\n        var minValueIndex21 = 0\n        var minValueIndex22 = 0\n    \
    \    var minValueIndex23 = 0\n        var minValueIndex24 = 0\n        var minValueIndex25\
    \ = 0\n        var minValueIndex26 = 0\n        var minValueIndex27 = 0\n    \
    \    var minValueIndex28 = 0\n        var minValueIndex29 = 0\n        var minValueIndex30\
    \ = 0\n        var minValueIndex31 = 0\n        var minValueIndex32 = 0\n    \
    \    var minValueIndex33 = 0\n        var minValueIndex34 = 0\n        var minValueIndex35\
    \ = 0\n        var minValueIndex36 = 0\n        var minValueIndex37 = 0\n    \
    \    var minValueIndex38 = 0\n        var minValueIndex39 = 0\n        var minValueIndex40\
    \ = 0\n        var minValueIndex41 = 0\n        var minValueIndex42 = 0\n    \
    \    var minValueIndex43 = 0\n        var minValueIndex44 = 0\n        var minValueIndex45\
    \ = 0\n        var minValueIndex46 = 0\n        var minValueIndex47 = 0\n    \
    \    var minValueIndex48 = 0\n        var minValueIndex49 = 0\n        var minValueIndex50\
    \ = 0\n        var minValueIndex51 = 0\n        var minValueIndex52 = 0\n    \
    \    var minValueIndex53 = 0\n        var minValueIndex54 = 0\n        var minValueIndex55\
    \ = 0\n        var minValueIndex56 = 0\n        var minValueIndex57 = 0\n    \
    \    var minValueIndex58 = 0\n        var minValueIndex59 = 0\n        var minValueIndex60\
    \ = 0\n        var minValueIndex61 = 0\n        var minValueIndex62 = 0\n    \
    \    var minValueIndex63 = 0\n        var minValueIndex64 = 0\n        var minValueIndex65\
    \ = 0\n        var minValueIndex66 = 0\n        var minValue", "        val n\
    \ = grid.length\n        val m = grid(0).length\n        val result = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val stack = new Array[Long](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackInd = new Array[Int](k)\n\
    \        val stackIndSize = new Array[Int](k)\n        val stackIndInd = new Array[Int](k)\n\
    \        val stackIndIndSize = new Array[Int](k)\n        val stackIndIndInd =\
    \ new Array[Int](k)\n        val stackIndIndIndSize = new Array[Int](k)\n    \
    \    val stackIndIndIndInd = new Array[Int](k)\n        val stackIndIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndSize = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndSize\
    \ = new Array[Int](k)\n        val stackIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n\
    \        val stackIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n      \
    \  val stackIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val\
    \ stackIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val\
    \ stackIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val\
    \ stackIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n        val\
    \ stackIndIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n     \
    \   val stackIndIndIndIndIndIndIndIndIndIndIndIndIndIndSize = new Array[Int](k)\n",
  "        val m = grid.size\n        val n = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val ans = new mutable.ListBuffer[Long]()\n\
    \        val lst_A = grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_D = lst_C.map(x => if (x._1 < x._2) x else x.reverse)\n     \
    \   val lst_E = lst_D.map(x => if (x._1 < x._2) x else x.reverse)\n        val\
    \ lst_F = lst_E.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_G\
    \ = lst_F.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_H = lst_G.map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_I = lst_H.map(x => if\
    \ (x._1 < x._2) x else x.reverse)\n        val lst_J = lst_I.map(x => if (x._1\
    \ < x._2) x else x.reverse)\n        val lst_K = lst_J.map(x => if (x._1 < x._2)\
    \ x else x.reverse)\n        val lst_L = lst_K.map(x => if (x._1 < x._2) x else\
    \ x.reverse)\n        val lst_M = lst_L.map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_N = lst_M.map(x => if (x._1 < x._2) x else x.reverse)\n     \
    \   val lst_O = lst_N.map(x => if (x._1 < x._2) x else x.reverse)\n        val\
    \ lst_P = lst_O.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_Q\
    \ = lst_P.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_R = lst_Q.map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_S = lst_R.map(x => if\
    \ (x._1 < x._2) x else x.reverse)\n        val lst_T = lst_S.map(x => if (x._1\
    \ < x._2) x else x.reverse)", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val path = new mutable.ArrayList[Long]()\n\
    \        val lst_A = new mutable.ArrayList[Long]()\n        val lst_B = new mutable.ArrayList[Long]()\n\
    \        val lst_C = new mutable.ArrayList[Long]()\n        val lst_D = new mutable.ArrayList[Long]()\n\
    \        val lst_E = new mutable.ArrayList[Long]()\n        val lst_F = new mutable.ArrayList[Long]()\n\
    \        val lst_G = new mutable.ArrayList[Long]()\n        val lst_H = new mutable.ArrayList[Long]()\n\
    \        val lst_I = new mutable.ArrayList[Long]()\n        val lst_J = new mutable.ArrayList[Long]()\n\
    \        val lst_K = new mutable.ArrayList[Long]()\n        val lst_L = new mutable.ArrayList[Long]()\n\
    \        val lst_M = new mutable.ArrayList[Long]()\n        val lst_N = new mutable.ArrayList[Long]()\n\
    \        val lst_O = new mutable.ArrayList[Long]()\n        val lst_P = new mutable.ArrayList[Long]()\n\
    \        val lst_Q = new mutable.ArrayList[Long]()\n        val lst_R = new mutable.ArrayList[Long]()\n\
    \        val lst_S = new mutable.ArrayList[Long]()\n        val lst_T = new mutable.ArrayList[Long]()\n\
    \        val lst_U = new mutable.ArrayList[Long]()\n        val lst_V = new mutable.ArrayList[Long]()\n\
    \        val lst_W = new mutable.ArrayList[Long]()\n        val lst_X = new mutable.ArrayList[Long]()\n\
    \        val lst_Y = new mutable.ArrayList[Long]()\n        val lst_Z = new mutable.ArrayList[Long]()\n\
    \        val lst_AA = new mutable.ArrayList[Long]()\n        val lst_AB = new\
    \ mutable.ArrayList[Long]()\n        val lst_AC = new mutable.ArrayList[Long]()\n\
    \        val lst_AD = new mutable.ArrayList[Long]()\n        val lst_AE = new\
    \ mutable.ArrayList[Long]()\n        val lst_AF = new mutable.ArrayList[Long]()\n\
    \        val lst_AG = new mutable.ArrayList[Long]()\n        val lst_AH = new\
    \ mutable.ArrayList[Long", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.", "     \
    \   val m = grid.length\n        val n = grid(0).length\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        var visited = new mutable.HashSet[Long]()\n\
    \        var cur = 0\n        var next = 0\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var i = 1\n        var j =\
    \ 0\n        var k = 0\n        var i = 1\n        var j = 0\n        var k =\
    \ 0\n        var i = 1\n        var j = 0\n        var k = 0\n        var i =\
    \ 1\n        var j = 0\n        var k = 0\n        var ", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.HashSet.empty[Long]\n        val visitedList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedListSize = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedListSize = mut", "   \
    \     val m = grid.length\n        val n = grid(0).length\n        val result\
    \ = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n       \
    \ val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n   \
    \     val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n        val lst_AN = new Array[Long](",
  "        val n = grid.size\n        val m = grid.head.length\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val queue\
    \ = mutable.PriorityQueue[Long]()\n        val visitedSet = mutable.HashSet[Long]()\n\
    \        val visitedSet2 = mutable.HashSet[Long]()\n        val visitedSet3 =\
    \ mutable.HashSet[Long]()\n        val visitedSet4 = mutable.HashSet[Long]()\n\
    \        val visitedSet5 = mutable.HashSet[Long]()\n        val visitedSet6 =\
    \ mutable.HashSet[Long]()\n        val visitedSet7 = mutable.HashSet[Long]()\n\
    \        val visitedSet8 = mutable.HashSet[Long]()\n        val visitedSet9 =\
    \ mutable.HashSet[Long]()\n        val visitedSet10 = mutable.HashSet[Long]()\n\
    \        val visitedSet11 = mutable.HashSet[Long]()\n        val visitedSet12\
    \ = mutable.HashSet[Long]()\n        val visitedSet13 = mutable.HashSet[Long]()\n\
    \        val visitedSet14 = mutable.HashSet[Long]()\n        val visitedSet15\
    \ = mutable.HashSet[Long]()\n        val visitedSet16 = mutable.HashSet[Long]()\n\
    \        val visitedSet17 = mutable.HashSet[Long]()\n        val visitedSet18\
    \ = mutable.HashSet[Long]()\n        val visitedSet19 = mutable.HashSet[Long]()\n\
    \        val visitedSet20 = mutable.HashSet[Long]()\n        val visitedSet21\
    \ = mutable.HashSet[Long]()\n        val visitedSet22 = mutable.HashSet[Long]()\n\
    \        val visitedSet23 = mutable.HashSet[Long]()\n        val visitedSet24\
    \ = mutable.HashSet[Long]()\n        val visitedSet25 = mutable.HashSet[Long]()\n\
    \        val visitedSet26 = mutable.HashSet[Long]()\n        val visitedSet27\
    \ = mutable.HashSet[Long]()\n        val visitedSet28 = mutable.HashSet[Long]()\n\
    \        val visitedSet29 = mutable.HashSet[Long]()\n        val visitedSet30\
    \ = mutable.HashSet[", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = grid.map(_.toList).toList\n        val lst_B = grid.map(_.toList).toList\n\
    \        val lst_C = lst_A.map(x => x.toList).flatten\n        val lst_D = lst_B.map(x\
    \ => x.toList).flatten\n        val lst_E = lst_C.map(x => x.toList).flatten\n\
    \        val lst_F = lst_D.map(x => x.toList).flatten\n        val lst_G = lst_E.map(x\
    \ => x.toList).flatten\n        val lst_H = lst_F.map(x => x.toList).flatten\n\
    \        val lst_I = lst_G.map(x => x.toList).flatten\n        val lst_J = lst_H.map(x\
    \ => x.toList).flatten\n        val lst_K = lst_I.map(x => x.toList).flatten\n\
    \        val lst_L = lst_J.map(x => x.toList).flatten\n        val lst_M = lst_K.map(x\
    \ => x.toList).flatten\n        val lst_N = lst_L.map(x => x.toList).flatten\n\
    \        val lst_O = lst_M.map(x => x.toList).flatten\n        val lst_P = lst_O.map(x\
    \ => x.toList).flatten\n        val lst_Q = lst_P.map(x => x.toList).flatten\n\
    \        val lst_R = lst_Q.map(x => x.toList).flatten\n        val lst_S = lst_R.map(x\
    \ => x.toList).flatten\n        val lst_T = lst_S.map(x => x.toList).flatten\n\
    \        val lst_U = lst_T.map(x => x.toList).flatten\n        val lst_V = lst_U.map(x\
    \ => x.toList).flatten\n        val lst_W = lst_V.map(x => x.toList).flatten\n\
    \        val lst_X = lst_W.map(x => x.toList).flatten\n        val lst_Y = lst_X.map(x\
    \ => x.toList).flatten\n        val lst_Z = lst_Y.map(x => x.toList).flatten\n\
    \        val lst_A = lst_Z.map(x => x.toList).flatten\n        val lst_B = lst_A.map(x\
    \ => x.toList).flatten\n        val lst_C = lst_B.map(x => x.toList).flatten\n",
  "        val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_C.map(x => (x._1, x._2))\n        val lst_E = lst_D.map(x => (x._1, x._2))\n\
    \        val lst_F = lst_E.map(x => (x._1, x._2))\n        val lst_G = lst_F.map(x\
    \ => (x._1, x._2))\n        val lst_H = lst_G.map(x => (x._1, x._2))\n       \
    \ val lst_I = lst_H.map(x => (x._1, x._2))\n        val lst_J = lst_I.map(x =>\
    \ (x._1, x._2))\n        val lst_K = lst_J.map(x => (x._1, x._2))\n        val\
    \ lst_L = lst_K.map(x => (x._1, x._2))\n        val lst_M = lst_L.map(x => (x._1,\
    \ x._2))\n        val lst_N = lst_M.map(x => (x._1, x._2))\n        val lst_O\
    \ = lst_N.map(x => (x._1, x._2))\n        val lst_P = lst_O.map(x => (x._1, x._2))\n\
    \        val lst_Q = lst_P.map(x => (x._1, x._2))\n        val lst_R = lst_Q.map(x\
    \ => (x._1, x._2))\n        val lst_S = lst_R.map(x => (x._1, x._2))\n       \
    \ val lst_T = lst_S.map(x => (x._1, x._2))\n        val lst_U = lst_T.map(x =>\
    \ (x._1, x._2))\n        val lst_V = lst_U.map(x => (x._1, x._2))\n        val\
    \ lst_W = lst_V.map(x => (x._1, x._2))\n        val lst_X = lst_W.map(x => (x._1,\
    \ x._2))\n        val lst_Y = lst_X.map(x => (x._1, x._2))\n        val lst_Z\
    \ = lst_Y.map(x => (x._1, x._2))\n        val lst_A = lst_Z.map(x => (x._1, x._2))\n\
    \        ", "        val n = grid.size\n        val m = grid(0).size\n       \
    \ val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n   \
    \     var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n   \
    \     var k = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l = 0\n   \
    \     var l = 0\n        var l = 0\n        var l = 0\n        var l", "     \
    \   val m = grid.length\n        val n = grid(0).length\n        val result =\
    \ new mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]()\n        val visitedCount2\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount3 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount4 = new mutable.HashMap[Long, Int]()\n     \
    \   val visitedCount5 = new mutable.HashMap[Long, Int]()\n        val visitedCount6\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount7 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount8 = new mutable.HashMap[Long, Int]()\n     \
    \   val visitedCount9 = new mutable.HashMap[Long, Int]()\n        val visitedCount10\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount11 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount12 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount13 = new mutable.HashMap[Long, Int]()\n        val visitedCount14\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount15 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount16 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount17 = new mutable.HashMap[Long, Int]()\n        val visitedCount18\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount19 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount20 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount21 = new mutable.HashMap[Long, Int]()\n        val visitedCount22\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount23 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount24 = new mutable.HashMap[Long, Int]()\n    \
    \    val visitedCount25 = new mutable.HashMap[Long, Int]()\n        val visitedCount26\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount27 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCount28 = new mutable.HashMap[Long, ", "        val\
    \ N = grid.size\n        val m = grid.head\n        val n = grid.last\n      \
    \  val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zipWithIndex.map(x => (x._2, x._1))\n        val lst_D\
    \ = lst_B.zipWithIndex.map(x => (x._2, x._1))\n        val lst_E = lst_C.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_F = lst_D.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_G = lst_E.zipWithIndex.map(x => (x._2, x._1))\n        val lst_H\
    \ = lst_F.zipWithIndex.map(x => (x._2, x._1))\n        val lst_I = lst_G.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_J = lst_H.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_K = lst_I.zipWithIndex.map(x => (x._2, x._1))\n        val lst_L\
    \ = lst_J.zipWithIndex.map(x => (x._2, x._1))\n        val lst_M = lst_K.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_N = lst_L.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_O = lst_M.zipWithIndex.map(x => (x._2, x._1))\n        val lst_P\
    \ = lst_O.zipWithIndex.map(x => (x._2, x._1))\n        val lst_Q = lst_P.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_R = lst_Q.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_S = lst_R.zipWithIndex.map(x => (x._2, x._1))\n        val lst_T\
    \ = lst_S.zipWithIndex.map(x => (x._2, x._1))\n        val lst_U = lst_T.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val lst_V = lst_U.zipWithIndex.map(x => (x._2, x._1))\n\
    \        val lst_W = lst_V.zipWithIndex.map(x => (x._2, ", "        val N = grid.size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val queue = mutable.Queue[Long]()\n        val visitedList = mutable.ListBuffer[Long]()\n\
    \        val queueList = mutable.ListBuffer[Long]()\n        val queueList2 =\
    \ mutable.ListBuffer[Long]()\n        val queueList3 = mutable.ListBuffer[Long]()\n\
    \        val queueList4 = mutable.ListBuffer[Long]()\n        val queueList5 =\
    \ mutable.ListBuffer[Long]()\n        val queueList6 = mutable.ListBuffer[Long]()\n\
    \        val queueList7 = mutable.ListBuffer[Long]()\n        val queueList8 =\
    \ mutable.ListBuffer[Long]()\n        val queueList9 = mutable.ListBuffer[Long]()\n\
    \        val queueList10 = mutable.ListBuffer[Long]()\n        val queueList11\
    \ = mutable.ListBuffer[Long]()\n        val queueList12 = mutable.ListBuffer[Long]()\n\
    \        val queueList13 = mutable.ListBuffer[Long]()\n        val queueList14\
    \ = mutable.ListBuffer[Long]()\n        val queueList15 = mutable.ListBuffer[Long]()\n\
    \        val queueList16 = mutable.ListBuffer[Long]()\n        val queueList17\
    \ = mutable.ListBuffer[Long]()\n        val queueList18 = mutable.ListBuffer[Long]()\n\
    \        val queueList19 = mutable.ListBuffer[Long]()\n        val queueList20\
    \ = mutable.ListBuffer[Long]()\n        val queueList21 = mutable.ListBuffer[Long]()\n\
    \        val queueList22 = mutable.ListBuffer[Long]()\n        val queueList23\
    \ = mutable.ListBuffer[Long]()\n        val queueList24 = mutable.ListBuffer[Long]()\n\
    \        val queueList25 = mutable.ListBuffer[Long]()\n        val queueList26\
    \ = mutable.ListBuffer[Long]()\n        val queueList27 = mutable.ListBuffer[Long]()\n\
    \        val queueList28 = mutable.ListBuffer[Long]()\n        val queueList29\
    \ = mutable.ListBuffer[Long]()\n        val queueList30 = mutable.ListBuffer[Long]()\n\
    \        val queueList31 = mutable.ListBuffer[Long]()\n        val queueList32\
    \ = ", "        val N = grid.size\n        val m = grid.head\n        val n =\
    \ grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_F = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_H\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_J = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_K = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_L\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_M = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_N = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_O = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_P\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_Q = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_R = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        val lst_S = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_T\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_U = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1)\n        val lst_V = lst_A.zip(lst_B).map(x => x._2 < x._1)\n\
    \        ", "        val grid = grid.toList\n        val n = grid.size\n     \
    \   val m = grid(0).size\n        val visited = new mutable.HashSet[Long]\n  \
    \      val ans = List[Long]()\n        val lst_A = List[Long]()\n        val lst_B\
    \ = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n\
    \        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val\
    \ lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val lst_I =\
    \ List[Long]()\n        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n\
    \        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val\
    \ lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val lst_P =\
    \ List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n\
    \        val lst_S = List[Long]()\n        val lst_T = List[Long]()\n        val\
    \ lst_U = List[Long]()\n        val lst_V = List[Long]()\n        val lst_W =\
    \ List[Long]()\n        val lst_X = List[Long]()\n        val lst_Y = List[Long]()\n\
    \        val lst_Z = List[Long]()\n        val lst_A = List[Long]()\n        val\
    \ lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D =\
    \ List[Long]()\n        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n\
    \        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val\
    \ lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val lst_K =\
    \ List[Long]()\n        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n\
    \        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val\
    \ lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R =\
    \ List[Long]()\n        val lst_S = List[Long]()\n        val l", "        val\
    \ N = grid.size\n        val m = N * N\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_A.zip(lst_B).map(x => (x._1, x._2)).reverse\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(_._2\
    \ < N * N).map(x => (x._2, x._1))\n        val lst_F = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2, x._1)).reverse\n\
    \        val lst_G = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(_._2\
    \ < N * N).map(x => (x._2, x._1)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2,\
    \ x._1)).reverse\n        val lst_H = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(_._2\
    \ < N * N).map(x => (x._2, x._1)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2,\
    \ x._1)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2, x._1)).reverse\n  \
    \      val lst_I = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(_._2\
    \ < N * N).map(x => (x._2, x._1)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2,\
    \ x._1)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2, x._1)).zipWithIndex.filter(_._2\
    \ < N * N).map(x => (x._2, x._1)).reverse\n        val lst_J = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).zipWithIndex.filter(_._2 < N * N).map(x => (x._2, x._1)).zipWithIndex.filter(_._2\
    \ < N * N).map(x => (x.", "        val grid = grid.toList\n        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedMap = new\
    \ mutable.HashMap[Long, Int]()\n        val visitedMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap3 = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedMap4 = new mutable.HashMap[Long, Int]()\n        val visitedMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap7 = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedMap8 = new mutable.HashMap[Long, Int]()\n        val visitedMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap11 = new mutable.HashMap[Long, Int]()\n      \
    \  val visitedMap12 = new mutable.HashMap[Long, Int]()\n        val visitedMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap15 = new mutable.HashMap[Long, Int]()\n      \
    \  val visitedMap16 = new mutable.HashMap[Long, Int]()\n        val visitedMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap19 = new mutable.HashMap[Long, Int]()\n      \
    \  val visitedMap20 = new mutable.HashMap[Long, Int]()\n        val visitedMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap23 = new mutable.HashMap[Long, Int]()\n      \
    \  val visitedMap24 = new mutable.HashMap[Long, Int]()\n        val visitedMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedMap27 = new mutable.HashMap[Long, Int]()\n      \
    \  val visitedMap28", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n\
    \        val queue = mutable.PriorityQueue[Long]()\n        for (i <- 1 to n)\
    \ {\n            queue.enqueue(grid(i)(0))\n        }\n        val visitedCount\
    \ = new mutable.HashMap[Long, Int]()\n        while (queue.nonEmpty) {\n     \
    \       val v = queue.dequeue()\n            if (visited(v)) {\n             \
    \   visitedCount(v) = visitedCount(v) + 1\n            } else {\n            \
    \    visited(v) = true\n                ans ::= v\n                for (i <- 1\
    \ to m) {\n                    val x = grid((i - 1)/n)(i)\n                  \
    \  val y = grid((i - 1)%n)(i)\n                    if (x == v && y != v) {\n \
    \                       queue.enqueue(y)\n                    }\n            \
    \    }\n            }\n        }\n        ans.sortWith((x, y) => x < y)", "  \
    \      val m = grid.size\n        val n = grid(0).size\n        val grid = grid.toList\n\
    \        val grid2 = grid.map(_.toList)\n        val grid3 = grid2.map(_.toList)\n\
    \        val grid4 = grid3.map(_.toList)\n        val grid5 = grid4.map(_.toList)\n\
    \        val grid6 = grid5.map(_.toList)\n        val grid7 = grid6.map(_.toList)\n\
    \        val grid8 = grid7.map(_.toList)\n        val grid9 = grid8.map(_.toList)\n\
    \        val grid10 = grid9.map(_.toList)\n        val grid11 = grid10.map(_.toList)\n\
    \        val grid12 = grid11.map(_.toList)\n        val grid13 = grid12.map(_.toList)\n\
    \        val grid14 = grid13.map(_.toList)\n        val grid15 = grid14.map(_.toList)\n\
    \        val grid16 = grid15.map(_.toList)\n        val grid17 = grid16.map(_.toList)\n\
    \        val grid18 = grid17.map(_.toList)\n        val grid19 = grid18.map(_.toList)\n\
    \        val grid20 = grid19.map(_.toList)\n        val grid21 = grid20.map(_.toList)\n\
    \        val grid22 = grid21.map(_.toList)\n        val grid23 = grid22.map(_.toList)\n\
    \        val grid24 = grid23.map(_.toList)\n        val grid25 = grid24.map(_.toList)\n\
    \        val grid26 = grid25.map(_.toList)\n        val grid27 = grid26.map(_.toList)\n\
    \        val grid28 = grid27.map(_.toList)\n        val grid29 = grid28.map(_.toList)\n\
    \        val grid30 = grid29.map(_.toList)\n        val grid31 = grid30.map(_.toList)\n\
    \        val grid32 = grid31.map(_.toList)\n        val grid33 = grid32.map(_.toList)\n\
    \        val grid34 = grid33.map(_.toList)\n        val grid35 = grid34.map(_.toList)\n\
    \        val grid36 = grid35.map(_.toList)\n        val grid37 = grid36.map(_.toList)\n\
    \        val grid38 = grid37.map(_.toList)\n        val grid39 = grid38.map(_.toList)\n\
    \        val grid40 = grid39.map(_.toList)\n        val grid41 = grid40.map(_.toList)\n\
    \        val grid42 = grid41.map(_.toList)\n        val grid43 = grid42.map(_.",
  "        val grid = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n\
    \        val grid = grid.map(_.toList)\n        val grid2 = grid.map(_.toList)\n\
    \        val grid3 = grid.map(_.toList)\n        val grid4 = grid.map(_.toList)\n\
    \        val grid5 = grid.map(_.toList)\n        val grid6 = grid.map(_.toList)\n\
    \        val grid7 = grid.map(_.toList)\n        val grid8 = grid.map(_.toList)\n\
    \        val grid9 = grid.map(_.toList)\n        val grid10 = grid.map(_.toList)\n\
    \        val grid11 = grid.map(_.toList)\n        val grid12 = grid.map(_.toList)\n\
    \        val grid13 = grid.map(_.toList)\n        val grid14 = grid.map(_.toList)\n\
    \        val grid15 = grid.map(_.toList)\n        val grid16 = grid.map(_.toList)\n\
    \        val grid17 = grid.map(_.toList)\n        val grid18 = grid.map(_.toList)\n\
    \        val grid19 = grid.map(_.toList)\n        val grid20 = grid.map(_.toList)\n\
    \        val grid21 = grid.map(_.toList)\n        val grid22 = grid.map(_.toList)\n\
    \        val grid23 = grid.map(_.toList)\n        val grid24 = grid.map(_.toList)\n\
    \        val grid25 = grid.map(_.toList)\n        val grid26 = grid.map(_.toList)\n\
    \        val grid27 = grid.map(_.toList)\n        val grid28 = grid.map(_.toList)\n\
    \        val grid29 = grid.map(_.toList)\n        val grid30 = grid.map(_.toList)\n\
    \        val grid31 = grid.map(_.toList)\n        val grid32 = grid.map(_.toList)\n\
    \        val grid33 = grid.map(_.toList)\n        val grid34 = grid.map(_.toList)\n\
    \        val grid35 = grid.map(_.toList)\n        val grid36 = grid.map(_.toList)\n\
    \        val grid37 = grid.map(_.toList)\n        val grid38 = grid.map(_.toList)\n\
    \        val grid39 = grid.map(_.toList)\n        val grid40 = grid.map(_.toList)\n\
    \        val grid41 = grid.map(_.toList)\n        val grid42 = grid.map(_.toList)\n\
    \        val grid43 = grid.map(_.toList)\n        val grid44 = grid.map(_.toList)\n\
    \        val grid45 = grid.map(_.toList)\n        val grid46 = grid.map(_.toList)",
  "        val m = grid.length\n        val n = grid(0).length\n        val path =\
    \ new Array[Long](k)\n        val visited = new Array[Boolean](k)\n        val\
    \ lst_A = new Array[Long](n)\n        val lst_B = new Array[Long](n)\n       \
    \ val lst_C = new Array[Long](n)\n        val lst_D = new Array[Long](n)\n   \
    \     val lst_E = new Array[Long](n)\n        val lst_F = new Array[Long](n)\n\
    \        val lst_G = new Array[Long](n)\n        val lst_H = new Array[Long](n)\n\
    \        val lst_I = new Array[Long](n)\n        val lst_J = new Array[Long](n)\n\
    \        val lst_K = new Array[Long](n)\n        val lst_L = new Array[Long](n)\n\
    \        val lst_M = new Array[Long](n)\n        val lst_N = new Array[Long](n)\n\
    \        val lst_O = new Array[Long](n)\n        val lst_P = new Array[Long](n)\n\
    \        val lst_Q = new Array[Long](n)\n        val lst_R = new Array[Long](n)\n\
    \        val lst_S = new Array[Long](n)\n        val lst_T = new Array[Long](n)\n\
    \        val lst_U = new Array[Long](n)\n        val lst_V = new Array[Long](n)\n\
    \        val lst_W = new Array[Long](n)\n        val lst_X = new Array[Long](n)\n\
    \        val lst_Y = new Array[Long](n)\n        val lst_Z = new Array[Long](n)\n\
    \        val lst_AA = new Array[Long](n)\n        val lst_AB = new Array[Long](n)\n\
    \        val lst_AC = new Array[Long](n)\n        val lst_AD = new Array[Long](n)\n\
    \        val lst_AE = new Array[Long](n)\n        val lst_AF = new Array[Long](n)\n\
    \        val lst_AG = new Array[Long](n)\n        val lst_AH = new Array[Long](n)\n\
    \        val lst_AI = new Array[Long](n)\n        val lst_AJ = new Array[Long](n)\n\
    \        val lst_AK = new Array[Long](n)\n        val lst_AL = new Array[Long](n)\n\
    \        val lst_AM = new Array[Long](n)\n        val lst_AN = new Array[Long]",
  "        val n = grid.length\n        val m = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]\n        val ans\
    \ = List[Long]()\n        val lst_A = List[Long]()\n        val lst_B = List[Long]()\n\
    \        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n        val\
    \ lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val lst_G =\
    \ List[Long]()\n        val lst_H = List[Long]()\n        val lst_I = List[Long]()\n\
    \        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n        val\
    \ lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val lst_N =\
    \ List[Long]()\n        val lst_O = List[Long]()\n        val lst_P = List[Long]()\n\
    \        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n        val\
    \ lst_S = List[Long]()\n        val lst_T = List[Long]()\n        val lst_U =\
    \ List[Long]()\n        val lst_V = List[Long]()\n        val lst_W = List[Long]()\n\
    \        val lst_X = List[Long]()\n        val lst_Y = List[Long]()\n        val\
    \ lst_Z = List[Long]()\n        val lst_A = List[Long]()\n        val lst_B =\
    \ List[Long]()\n        val lst_C = List[Long]()\n        val lst_D = List[Long]()\n\
    \        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n        val\
    \ lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val lst_I =\
    \ List[Long]()\n        val lst_J = List[Long]()\n        val lst_K = List[Long]()\n\
    \        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n        val\
    \ lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val lst_P =\
    \ List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R = List[Long]()\n\
    \        val lst_S = List[Long]()\n        val l", "        val N = grid.size\n\
    \        val M = grid(0).size\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val stack\
    \ = mutable.Stack[Long]()\n        val stack2 = mutable.Stack[Long]()\n      \
    \  val stack3 = mutable.Stack[Long]()\n        val stack4 = mutable.Stack[Long]()\n\
    \        val stack5 = mutable.Stack[Long]()\n        val stack6 = mutable.Stack[Long]()\n\
    \        val stack7 = mutable.Stack[Long]()\n        val stack8 = mutable.Stack[Long]()\n\
    \        val stack9 = mutable.Stack[Long]()\n        val stack10 = mutable.Stack[Long]()\n\
    \        val stack11 = mutable.Stack[Long]()\n        val stack12 = mutable.Stack[Long]()\n\
    \        val stack13 = mutable.Stack[Long]()\n        val stack14 = mutable.Stack[Long]()\n\
    \        val stack15 = mutable.Stack[Long]()\n        val stack16 = mutable.Stack[Long]()\n\
    \        val stack17 = mutable.Stack[Long]()\n        val stack18 = mutable.Stack[Long]()\n\
    \        val stack19 = mutable.Stack[Long]()\n        val stack20 = mutable.Stack[Long]()\n\
    \        val stack21 = mutable.Stack[Long]()\n        val stack22 = mutable.Stack[Long]()\n\
    \        val stack23 = mutable.Stack[Long]()\n        val stack24 = mutable.Stack[Long]()\n\
    \        val stack25 = mutable.Stack[Long]()\n        val stack26 = mutable.Stack[Long]()\n\
    \        val stack27 = mutable.Stack[Long]()\n        val stack28 = mutable.Stack[Long]()\n\
    \        val stack29 = mutable.Stack[Long]()\n        val stack30 = mutable.Stack[Long]()\n\
    \        val stack31 = mutable.Stack[Long]()\n        val stack32 = mutable.Stack[Long]()\n\
    \        val stack33 = mutable.Stack[Long]()\n        val stack34 = mutable.Stack[Long]()\n\
    \        val stack35 = mutable.Stack[Long]()\n        val stack36 = mutable.Stack[Long]()\n\
    \        val stack37 = mutable.Stack[Long]()\n", "        val N = grid.length\n\
    \        val m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => if (x._1 < x._2) x._1 else x._2)\n        val lst_D = lst_A.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_E = lst_D.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_F = lst_E.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_G = lst_F.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_H = lst_G.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_I = lst_H.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_J = lst_I.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_K = lst_J.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_L = lst_K.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_M = lst_L.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_N = lst_M.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_O = lst_N.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_P = lst_O.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_Q = lst_P.zip(lst_C).map(x\
    \ => if (x._1 < x._2) x._2 else x._1)\n        val lst_R = lst_Q.zip(lst_", " \
    \       val n = grid.length\n        val m = grid(0).length\n        val visited\
    \ = new Array[Boolean](m * n)\n        val ans = List[Long]()\n        val lst_A\
    \ = grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2)).reverse\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1))\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).reverse\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).reverse\n        val lst_H = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x\
    \ => (x._2, x._1)).reverse\n        val lst_I = lst_A.zip(lst_B).map(x => (x._1,\
    \ x._2)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x\
    \ => (x._2, x._1)).zipWithIndex.filter(x => x._2 < k).map(x => (x._2, x._1)).reverse\n\
    \        val lst_J = lst_A.zip(lst_B).map(x => (x._1, x._2)).zipWithIndex.filter(x\
    \ => x._2 < k).map(x => (x.", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val lst_A = grid.map(_.toList).map(_.toLong).toList\n        val lst_B\
    \ = grid.map(_.toList).map(_.toLong).reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_D = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_E = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_F\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_G = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_H = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_I = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_K = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_L = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_M = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_N\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_O = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_P = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_Q = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_R\
    \ = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_S = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2)\n        val lst_T = lst_A.zip(lst_B).map(x => x._1 < x._2)\n\
    \        val lst_U = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_V\
    \ = lst_A.zip(lst_B).map(x => x.", "        val n = grid.length\n        val m\
    \ = grid(0).length\n        val result = new Array[Long](k)\n        var i = k\
    \ - 1\n        var j = 0\n        var count = 0\n        var curr = grid(0).head\n\
    \        var next = grid(0).head\n        var min = 0\n        while (i < n) {\n\
    \            while (j < m) {\n                if (curr < next) {\n           \
    \         val temp = curr\n                    curr = next\n                 \
    \   next = temp\n                }\n                count += 1\n             \
    \   val temp = next\n                next = grid((i + 1) % n)(j)\n           \
    \     grid((i + 1) % n)(j) = temp\n                j += 1\n            }\n   \
    \         i += 1\n            min = math.min(min, count)\n            count =\
    \ 0\n            curr = 0\n            next = grid((i + 1) % n)(0)\n        }\n\
    \        val temp = min\n        min = count\n        count = temp\n        val\
    \ temp = min\n        min = temp\n        val temp = min\n        min = temp\n\
    \        val temp = min\n        min = temp\n        val temp = min\n        min\
    \ = temp\n        val temp = min\n        min = temp\n        val temp = min\n\
    \        min = temp\n        val temp = min\n        min = temp\n        val temp\
    \ = min\n        min = temp\n        val temp = min\n        min = temp\n    \
    \    val temp = min\n        min = temp\n        val temp = min\n        min =\
    \ temp\n        val temp = min\n        min = temp\n        val temp = min\n \
    \       min = temp\n        val temp = min\n        min = temp\n        val temp\
    \ = min\n        min = temp\n        val temp = min\n        min = temp\n    \
    \    val temp = min\n        min = temp\n        val temp = min\n        min =\
    \ temp\n        val temp = min\n        min = temp\n        val temp = min\n \
    \       min = temp\n        val temp = min\n        min = temp\n        val temp\
    \ = min\n        min = temp\n        val temp = min\n        min = temp\n    \
    \    val temp = min\n        min = temp\n        val temp = min\n        min =\
    \ temp\n        val temp = min\n        min = temp\n        val temp = min\n \
    \       min = temp\n        val temp = min\n        min = temp\n        val temp\
    \ = min\n        min = temp\n        val temp = min\n        min = temp\n    \
    \    val temp = min\n        min = temp\n        val temp = min\n        min =\
    \ temp\n        val temp = min\n        min = temp\n        val temp = min\n \
    \       min = temp\n        val temp = min\n        min = temp\n        val temp\
    \ = min\n        min = temp\n        val temp = min\n        min = temp\n    \
    \    val temp = min\n        min = temp\n        val temp = min\n        min =\
    \ temp\n        ", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedList =\
    \ new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        ", "        val N = grid.length\n        val m = grid.head\n        val\
    \ n = grid.last\n        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_D = lst_C.map(x => if (x._1 < x._2) x else x.reverse)\n     \
    \   val lst_E = lst_D.map(x => if (x._1 < x._2) x else x.reverse)\n        val\
    \ lst_F = lst_E.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_G\
    \ = lst_F.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_H = lst_G.map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_I = lst_H.map(x => if\
    \ (x._1 < x._2) x else x.reverse)\n        val lst_J = lst_I.map(x => if (x._1\
    \ < x._2) x else x.reverse)\n        val lst_K = lst_J.map(x => if (x._1 < x._2)\
    \ x else x.reverse)\n        val lst_L = lst_K.map(x => if (x._1 < x._2) x else\
    \ x.reverse)\n        val lst_M = lst_L.map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_N = lst_M.map(x => if (x._1 < x._2) x else x.reverse)\n     \
    \   val lst_O = lst_N.map(x => if (x._1 < x._2) x else x.reverse)\n        val\
    \ lst_P = lst_O.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_Q\
    \ = lst_P.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_R = lst_Q.map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_S = lst_R.map(x => if\
    \ (x._1 < x._2) x else x.reverse)\n        val lst_T = lst_S.map(x => if (x._1\
    \ < x._2) x else x.reverse)\n        val lst_U = lst_T.map(x => if (x._1 < x._2)\
    \ x else x.reverse)", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visited2 = new mutable.HashSet[Long]()\n\
    \        val visited3 = new mutable.HashSet[Long]()\n        val visited4 = new\
    \ mutable.HashSet[Long]()\n        val visited5 = new mutable.HashSet[Long]()\n\
    \        val visited6 = new mutable.HashSet[Long]()\n        val visited7 = new\
    \ mutable.HashSet[Long]()\n        val visited8 = new mutable.HashSet[Long]()\n\
    \        val visited9 = new mutable.HashSet[Long]()\n        val visited10 = new\
    \ mutable.HashSet[Long]()\n        val visited11 = new mutable.HashSet[Long]()\n\
    \        val visited12 = new mutable.HashSet[Long]()\n        val visited13 =\
    \ new mutable.HashSet[Long]()\n        val visited14 = new mutable.HashSet[Long]()\n\
    \        val visited15 = new mutable.HashSet[Long]()\n        val visited16 =\
    \ new mutable.HashSet[Long]()\n        val visited17 = new mutable.HashSet[Long]()\n\
    \        val visited18 = new mutable.HashSet[Long]()\n        val visited19 =\
    \ new mutable.HashSet[Long]()\n        val visited20 = new mutable.HashSet[Long]()\n\
    \        val visited21 = new mutable.HashSet[Long]()\n        val visited22 =\
    \ new mutable.HashSet[Long]()\n        val visited23 = new mutable.HashSet[Long]()\n\
    \        val visited24 = new mutable.HashSet[Long]()\n        val visited25 =\
    \ new mutable.HashSet[Long]()\n        val visited26 = new mutable.HashSet[Long]()\n\
    \        val visited27 = new mutable.HashSet[Long]()\n        val visited28 =\
    \ new mutable.HashSet[Long]()\n        val visited29 = new mutable.HashSet[Long]()\n\
    \        val visited30 = new mutable.HashSet[Long]()\n        val visited31 =\
    \ new mutable.HashSet[Long]()\n        val visited32 = new mutable.HashSet[Long]()\n\
    \        val visited33 = new mutable.HashSet", "        val grid = grid.toList\n\
    \        val n = grid.length\n        val m = grid(0).length\n        val visited\
    \ = new mutable.HashSet[Long]\n        val ans = new mutable.ListBuffer[Long]\n\
    \        val stack = new mutable.Stack[Long]\n        val stackSize = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize2 = new mutable.HashMap[Long, Int]\n        val stackSize3\
    \ = new mutable.HashMap[Long, Int]\n        val stackSize4 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize5 = new mutable.HashMap[Long, Int]\n        val stackSize6\
    \ = new mutable.HashMap[Long, Int]\n        val stackSize7 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize8 = new mutable.HashMap[Long, Int]\n        val stackSize9\
    \ = new mutable.HashMap[Long, Int]\n        val stackSize10 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize11 = new mutable.HashMap[Long, Int]\n        val\
    \ stackSize12 = new mutable.HashMap[Long, Int]\n        val stackSize13 = new\
    \ mutable.HashMap[Long, Int]\n        val stackSize14 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize15 = new mutable.HashMap[Long, Int]\n        val\
    \ stackSize16 = new mutable.HashMap[Long, Int]\n        val stackSize17 = new\
    \ mutable.HashMap[Long, Int]\n        val stackSize18 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize19 = new mutable.HashMap[Long, Int]\n        val\
    \ stackSize20 = new mutable.HashMap[Long, Int]\n        val stackSize21 = new\
    \ mutable.HashMap[Long, Int]\n        val stackSize22 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize23 = new mutable.HashMap[Long, Int]\n        val\
    \ stackSize24 = new mutable.HashMap[Long, Int]\n        val stackSize25 = new\
    \ mutable.HashMap[Long, Int]\n        val stackSize26 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize27 = new mutable.HashMap[Long, Int]\n        val\
    \ stackSize28 = new mutable.HashMap[Long, Int]\n        val stackSize29 = new\
    \ mutable.HashMap[Long, Int]\n        val stackSize30 = new mutable.HashMap[Long,\
    \ Int]\n        val stackSize31 = ", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n    \
    \    val ans = new mutable.ListBuffer[Long]()\n        val stack = new mutable.Stack[Long]()\n\
    \        val stack2 = new mutable.Stack[Long]()\n        val stack3 = new mutable.Stack[Long]()\n\
    \        val stack4 = new mutable.Stack[Long]()\n        val stack5 = new mutable.Stack[Long]()\n\
    \        val stack6 = new mutable.Stack[Long]()\n        val stack7 = new mutable.Stack[Long]()\n\
    \        val stack8 = new mutable.Stack[Long]()\n        val stack9 = new mutable.Stack[Long]()\n\
    \        val stack10 = new mutable.Stack[Long]()\n        val stack11 = new mutable.Stack[Long]()\n\
    \        val stack12 = new mutable.Stack[Long]()\n        val stack13 = new mutable.Stack[Long]()\n\
    \        val stack14 = new mutable.Stack[Long]()\n        val stack15 = new mutable.Stack[Long]()\n\
    \        val stack16 = new mutable.Stack[Long]()\n        val stack17 = new mutable.Stack[Long]()\n\
    \        val stack18 = new mutable.Stack[Long]()\n        val stack19 = new mutable.Stack[Long]()\n\
    \        val stack20 = new mutable.Stack[Long]()\n        val stack21 = new mutable.Stack[Long]()\n\
    \        val stack22 = new mutable.Stack[Long]()\n        val stack23 = new mutable.Stack[Long]()\n\
    \        val stack24 = new mutable.Stack[Long]()\n        val stack25 = new mutable.Stack[Long]()\n\
    \        val stack26 = new mutable.Stack[Long]()\n        val stack27 = new mutable.Stack[Long]()\n\
    \        val stack28 = new mutable.Stack[Long]()\n        val stack29 = new mutable.Stack[Long]()\n\
    \        val stack30 = new mutable.Stack[Long]()\n        val stack31 = new mutable.Stack[Long]()\n\
    \        val stack32 = new mutable.Stack[Long]()\n        val stack33 = new mutable.Stack[Long]()\n\
    \        val stack34 = new mutable.Stack[Long]()\n        val stack35 = new mutable.Stack[Long]()\n\
    \        val stack36 = new mutable.Stack[Long]()\n        val stack", "      \
    \  val n = grid.size\n        val m = grid(0).size\n        val visited = new\
    \ mutable.HashSet[Long]\n        val ans = new mutable.ArrayList[Long]\n     \
    \   val lst_A = new mutable.ArrayList[Long]\n        val lst_B = new mutable.ArrayList[Long]\n\
    \        val lst_C = new mutable.ArrayList[Long]\n        val lst_D = new mutable.ArrayList[Long]\n\
    \        val lst_E = new mutable.ArrayList[Long]\n        val lst_F = new mutable.ArrayList[Long]\n\
    \        val lst_G = new mutable.ArrayList[Long]\n        val lst_H = new mutable.ArrayList[Long]\n\
    \        val lst_I = new mutable.ArrayList[Long]\n        val lst_J = new mutable.ArrayList[Long]\n\
    \        val lst_K = new mutable.ArrayList[Long]\n        val lst_L = new mutable.ArrayList[Long]\n\
    \        val lst_M = new mutable.ArrayList[Long]\n        val lst_N = new mutable.ArrayList[Long]\n\
    \        val lst_O = new mutable.ArrayList[Long]\n        val lst_P = new mutable.ArrayList[Long]\n\
    \        val lst_Q = new mutable.ArrayList[Long]\n        val lst_R = new mutable.ArrayList[Long]\n\
    \        val lst_S = new mutable.ArrayList[Long]\n        val lst_T = new mutable.ArrayList[Long]\n\
    \        val lst_U = new mutable.ArrayList[Long]\n        val lst_V = new mutable.ArrayList[Long]\n\
    \        val lst_W = new mutable.ArrayList[Long]\n        val lst_X = new mutable.ArrayList[Long]\n\
    \        val lst_Y = new mutable.ArrayList[Long]\n        val lst_Z = new mutable.ArrayList[Long]\n\
    \        val lst_AA = new mutable.ArrayList[Long]\n        val lst_AB = new mutable.ArrayList[Long]\n\
    \        val lst_AC = new mutable.ArrayList[Long]\n        val lst_AD = new mutable.ArrayList[Long]\n\
    \        val lst_AE = new mutable.ArrayList[Long]\n        val lst_AF = new mutable.ArrayList[Long]\n\
    \        val lst_AG = new mutable.ArrayList[Long]\n        val lst_AH = new mutable.ArrayList[Long]\n\
    \        val lst_AI = new mutable.ArrayList[Long]\n        val lst_AJ = new mutable.ArrayList[Long]\n\
    \        val lst_AK = new mut", "        val n = grid.length\n        val m =\
    \ grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n      \
    \  val visited = new mutable.HashSet[Long]()\n        val visitedMap = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap4\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap8\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap13\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap18\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap23\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap28\
    \ = new mutable.HashMap[Long, ", "        val n = grid.length\n        val m =\
    \ grid(0).length\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m).init\n\
    \        val visited = mutable.ArrayBuffer.empty[Boolean](m).init\n        val\
    \ visitedCount = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts\
    \ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n       \
    \ val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_\
    \ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n       \
    \ val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_\
    \ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n       \
    \ val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_\
    \ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n       \
    \ val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_\
    \ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n       \
    \ val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_\
    \ = mutable.ArrayBuffer.empty[Int](m).init\n        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n\
    \        val visitedCounts_ = mutable.ArrayBuffer.empty[Int](m).init\n       \
    \ val visitedCounts_ = mutable.ArrayBuffer.empty[Int", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val visited = new Array[Boolean](m)\n\
    \        val path = new Array[Long](k)\n        val lst_A = new Array[Long](n)\n\
    \        val lst_B = new Array[Long](n)\n        val lst_C = new Array[Long](n)\n\
    \        val lst_D = new Array[Long](n)\n        val lst_E = new Array[Long](n)\n\
    \        val lst_F = new Array[Long](n)\n        val lst_G = new Array[Long](n)\n\
    \        val lst_H = new Array[Long](n)\n        val lst_I = new Array[Long](n)\n\
    \        val lst_J = new Array[Long](n)\n        val lst_K = new Array[Long](n)\n\
    \        val lst_L = new Array[Long](n)\n        val lst_M = new Array[Long](n)\n\
    \        val lst_N = new Array[Long](n)\n        val lst_O = new Array[Long](n)\n\
    \        val lst_P = new Array[Long](n)\n        val lst_Q = new Array[Long](n)\n\
    \        val lst_R = new Array[Long](n)\n        val lst_S = new Array[Long](n)\n\
    \        val lst_T = new Array[Long](n)\n        val lst_U = new Array[Long](n)\n\
    \        val lst_V = new Array[Long](n)\n        val lst_W = new Array[Long](n)\n\
    \        val lst_X = new Array[Long](n)\n        val lst_Y = new Array[Long](n)\n\
    \        val lst_Z = new Array[Long](n)\n        val lst_AA = new Array[Long](n)\n\
    \        val lst_AB = new Array[Long](n)\n        val lst_AC = new Array[Long](n)\n\
    \        val lst_AD = new Array[Long](n)\n        val lst_AE = new Array[Long](n)\n\
    \        val lst_AF = new Array[Long](n)\n        val lst_AG = new Array[Long](n)\n\
    \        val lst_AH = new Array[Long](n)\n        val lst_AI = new Array[Long](n)\n\
    \        val lst_AJ = new Array[Long](n)\n        val lst_AK = new Array[Long](n)\n\
    \        val lst_AL = new Array[Long](n)\n        val lst_AM = new Array[Long](n)\n\
    \        val lst_AN = new Array[Long]", "        val n = grid.size\n        val\
    \ m = grid.head.length\n        val visited = new mutable.HashSet[Long]()\n  \
    \      val ans = Array[Long](n)\n        val lst_A = Array[Long](1l)\n       \
    \ val lst_B = Array[Long](1l)\n        val lst_C = Array[Long](1l)\n        val\
    \ lst_D = Array[Long](1l)\n        val lst_E = Array[Long](1l)\n        val lst_F\
    \ = Array[Long](1l)\n        val lst_G = Array[Long](1l)\n        val lst_H =\
    \ Array[Long](1l)\n        val lst_I = Array[Long](1l)\n        val lst_J = Array[Long](1l)\n\
    \        val lst_K = Array[Long](1l)\n        val lst_L = Array[Long](1l)\n  \
    \      val lst_M = Array[Long](1l)\n        val lst_N = Array[Long](1l)\n    \
    \    val lst_O = Array[Long](1l)\n        val lst_P = Array[Long](1l)\n      \
    \  val lst_Q = Array[Long](1l)\n        val lst_R = Array[Long](1l)\n        val\
    \ lst_S = Array[Long](1l)\n        val lst_T = Array[Long](1l)\n        val lst_U\
    \ = Array[Long](1l)\n        val lst_V = Array[Long](1l)\n        val lst_W =\
    \ Array[Long](1l)\n        val lst_X = Array[Long](1l)\n        val lst_Y = Array[Long](1l)\n\
    \        val lst_Z = Array[Long](1l)\n        val lst_A = Array[Long](1l)\n  \
    \      val lst_B = Array[Long](1l)\n        val lst_C = Array[Long](1l)\n    \
    \    val lst_D = Array[Long](1l)\n        val lst_E = Array[Long](1l)\n      \
    \  val lst_F = Array[Long](1l)\n        val lst_G = Array[Long](1l)\n        val\
    \ lst_H = Array[Long](1l)\n        val lst_I = Array[Long](1l)\n        val lst_J\
    \ = Array[Long](1l)\n        val lst_K = Array[Long](1l)\n        val lst_L =\
    \ Array[Long](1l)\n        val lst_M = ", "        val grid = grid.toList\n  \
    \      val n = grid.size\n        val m = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]\n        val result = new mutable.ListBuffer[Long]\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]\n        val visitedCountMap\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap2 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap3 = new mutable.HashMap[Long, Int]\n      \
    \  val visitedCountMap4 = new mutable.HashMap[Long, Int]\n        val visitedCountMap5\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap6 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap7 = new mutable.HashMap[Long, Int]\n      \
    \  val visitedCountMap8 = new mutable.HashMap[Long, Int]\n        val visitedCountMap9\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap10 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap11 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap12 = new mutable.HashMap[Long, Int]\n        val visitedCountMap13\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap14 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap15 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap16 = new mutable.HashMap[Long, Int]\n        val visitedCountMap17\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap18 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap19 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap20 = new mutable.HashMap[Long, Int]\n        val visitedCountMap21\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap22 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap23 = new mutable.HashMap[Long, Int]\n     \
    \   val visitedCountMap24 = new mutable.HashMap[Long, Int]\n        val visitedCountMap25\
    \ = new mutable.HashMap[Long, Int]\n        val visitedCountMap26 = new mutable.HashMap[Long,\
    \ Int]\n        val visitedCountMap27 = new mutable.", "        val N = grid.length\n\
    \        val M = grid(0).length\n        val grid = grid.toList\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val lst_A\
    \ = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        val lst_C\
    \ = lst_A.map(_.toList)\n        val lst_D = lst_B.map(_.toList)\n        val\
    \ lst_E = lst_C.map(_.toList)\n        val lst_F = lst_D.map(_.toList)\n     \
    \   val lst_G = lst_E.map(_.toList)\n        val lst_H = lst_F.map(_.toList)\n\
    \        val lst_I = lst_G.map(_.toList)\n        val lst_J = lst_H.map(_.toList)\n\
    \        val lst_K = lst_I.map(_.toList)\n        val lst_L = lst_J.map(_.toList)\n\
    \        val lst_M = lst_K.map(_.toList)\n        val lst_N = lst_L.map(_.toList)\n\
    \        val lst_O = lst_M.map(_.toList)\n        val lst_P = lst_O.map(_.toList)\n\
    \        val lst_Q = lst_P.map(_.toList)\n        val lst_R = lst_Q.map(_.toList)\n\
    \        val lst_S = lst_R.map(_.toList)\n        val lst_T = lst_S.map(_.toList)\n\
    \        val lst_U = lst_T.map(_.toList)\n        val lst_V = lst_U.map(_.toList)\n\
    \        val lst_W = lst_V.map(_.toList)\n        val lst_X = lst_W.map(_.toList)\n\
    \        val lst_Y = lst_X.map(_.toList)\n        val lst_Z = lst_Y.map(_.toList)\n\
    \        val lst_A = lst_Z.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_B.map(_.toList)\n        val lst_D = lst_C.map(_.toList)\n\
    \        val lst_E = lst_D.map(_.toList)\n        val lst_F = lst_E.map(_.toList)\n\
    \        val lst_G = lst_F.map(_.toList)\n        val lst_H = lst_G.map(_.toList)\n\
    \        val lst_I = lst_H.map(_.toList)\n        val ", "        val m = grid.size\n\
    \        val n = grid(0).size\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_A.map(_.toList).zip(lst_B).map(x =>\
    \ (x._1, x._2)).map(x => (x._1, x._2))\n        val lst_E = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val\
    \ lst_F = lst_A.map(_.toList).zip(lst_B).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val lst_G = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2)).map(x => (x._1, x._2))\n        val lst_H = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val lst_I = lst_A.map(_.toList).zip(lst_B).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n\
    \        val lst_J = lst_A.map(_.toList).zip(lst_B).map(x => (x._1, x._2)).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, ",
  "        val n = grid.length\n        val m = grid(0).length\n        val lst_A\
    \ = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        val lst_C\
    \ = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n        val\
    \ lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n     \
    \   val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.map(_.toList)\n\
    \        val lst_M = lst_A.map(_.toList)\n        val lst_N = lst_A.map(_.toList)\n\
    \        val lst_O = lst_A.map(_.toList)\n        val lst_P = lst_A.map(_.toList)\n\
    \        val lst_Q = lst_A.map(_.toList)\n        val lst_R = lst_A.map(_.toList)\n\
    \        val lst_S = lst_A.map(_.toList)\n        val lst_T = lst_A.map(_.toList)\n\
    \        val lst_U = lst_A.map(_.toList)\n        val lst_V = lst_A.map(_.toList)\n\
    \        val lst_W = lst_A.map(_.toList)\n        val lst_X = lst_A.map(_.toList)\n\
    \        val lst_Y = lst_A.map(_.toList)\n        val lst_Z = lst_A.map(_.toList)\n\
    \        val lst_A = lst_A.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_A.map(_.toList)\n\
    \        val lst_E = lst_A.map(_.toList)\n        val lst_F = lst_A.map(_.toList)\n\
    \        val lst_G = lst_A.map(_.toList)\n        val lst_H = lst_A.map(_.toList)\n\
    \        val lst_I = lst_A.map(_.toList)\n        val lst_J = lst_A.map(_.toList)\n\
    \        val lst_K = lst_A.map(_.toList)\n        val lst_L = lst_A.", "     \
    \   val N = grid.length\n        val M = grid(0).length\n        val grid = grid.toList\n\
    \        val visited = new mutable.HashSet[Long]()\n        val result = new mutable.ArrayList[Long]()\n\
    \        val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val resultCount = new mutable.HashMap[Long, Int]()\n       \
    \ val visitedCount = new mutable.HashMap[Long, Int]()\n        val resultCount\
    \ = new mutable.HashMap[Long, Int]()\n        ", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val lst_A = grid.map(_.toList).flatten\n\
    \        val lst_B = grid.map(_.toList).flatten.reverse\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        val l", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedList =\
    \ new mutable.ListBuffer[Long]()\n        val visitedList2 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]()\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList5 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]()\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList8 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]()\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList11 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]()\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList14 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]()\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList17 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]()\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList20 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]()\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList23 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]()\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList26 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]()\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList29 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList30 = new mut", "        val n = grid.length\n        val\
    \ m = grid(0).length\n        val lst_A = grid.map(_.toList)\n        val lst_B\
    \ = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n        val lst_D\
    \ = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n        val\
    \ lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n     \
    \   val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = List[Long]()\n        val queue = mutable.Queue[Long]()\n \
    \       val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long]()\n\
    \        val visitedCount = mutable.HashMap[Long, Long]()\n        val visitedCount2\
    \ = mutable.HashMap[Long, Long]()\n        val queue = mutable.Queue[Long", " \
    \       val n = grid.size\n        val m = grid(0).size\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.", "        val grid = grid.toSet\n        val visited\
    \ = new mutable.HashSet[Long]()\n        val path = new mutable.HashSet[Long]()\n\
    \        val visitedPath = new mutable.HashSet[Long]()\n        val pathLength\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength2 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength3 = new mutable.HashMap[Long, Long]()\n     \
    \   val pathLength4 = new mutable.HashMap[Long, Long]()\n        val pathLength5\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength6 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength7 = new mutable.HashMap[Long, Long]()\n     \
    \   val pathLength8 = new mutable.HashMap[Long, Long]()\n        val pathLength9\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength10 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength11 = new mutable.HashMap[Long, Long]()\n    \
    \    val pathLength12 = new mutable.HashMap[Long, Long]()\n        val pathLength13\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength14 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength15 = new mutable.HashMap[Long, Long]()\n    \
    \    val pathLength16 = new mutable.HashMap[Long, Long]()\n        val pathLength17\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength18 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength19 = new mutable.HashMap[Long, Long]()\n    \
    \    val pathLength20 = new mutable.HashMap[Long, Long]()\n        val pathLength21\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength22 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength23 = new mutable.HashMap[Long, Long]()\n    \
    \    val pathLength24 = new mutable.HashMap[Long, Long]()\n        val pathLength25\
    \ = new mutable.HashMap[Long, Long]()\n        val pathLength26 = new mutable.HashMap[Long,\
    \ Long]()\n        val pathLength27 = new mutable.HashMap[Long, Long]()\n    \
    \    val pathLength28 = new mutable.HashMap[Long, Long]()\n        val pathLength29\
    \ = new mutable.HashMap[Long, Long]()", "        val N = grid.size\n        val\
    \ m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val lst_A = grid.map(_.toList)\n    \
    \    val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.", "        val grid = grid.toList\n        val n =\
    \ grid.length\n        val m = grid(0).length\n        val grid = grid.map(_.toList)\n\
    \        val visited = new mutable.HashSet[Long]\n        val visitedList = new\
    \ mutable.ListBuffer[Long]\n        val visitedList2 = new mutable.ListBuffer[Long]\n\
    \        val visitedList3 = new mutable.ListBuffer[Long]\n        val visitedList4\
    \ = new mutable.ListBuffer[Long]\n        val visitedList5 = new mutable.ListBuffer[Long]\n\
    \        val visitedList6 = new mutable.ListBuffer[Long]\n        val visitedList7\
    \ = new mutable.ListBuffer[Long]\n        val visitedList8 = new mutable.ListBuffer[Long]\n\
    \        val visitedList9 = new mutable.ListBuffer[Long]\n        val visitedList10\
    \ = new mutable.ListBuffer[Long]\n        val visitedList11 = new mutable.ListBuffer[Long]\n\
    \        val visitedList12 = new mutable.ListBuffer[Long]\n        val visitedList13\
    \ = new mutable.ListBuffer[Long]\n        val visitedList14 = new mutable.ListBuffer[Long]\n\
    \        val visitedList15 = new mutable.ListBuffer[Long]\n        val visitedList16\
    \ = new mutable.ListBuffer[Long]\n        val visitedList17 = new mutable.ListBuffer[Long]\n\
    \        val visitedList18 = new mutable.ListBuffer[Long]\n        val visitedList19\
    \ = new mutable.ListBuffer[Long]\n        val visitedList20 = new mutable.ListBuffer[Long]\n\
    \        val visitedList21 = new mutable.ListBuffer[Long]\n        val visitedList22\
    \ = new mutable.ListBuffer[Long]\n        val visitedList23 = new mutable.ListBuffer[Long]\n\
    \        val visitedList24 = new mutable.ListBuffer[Long]\n        val visitedList25\
    \ = new mutable.ListBuffer[Long]\n        val visitedList26 = new mutable.ListBuffer[Long]\n\
    \        val visitedList27 = new mutable.ListBuffer[Long]\n        val visitedList28\
    \ = new mutable.ListBuffer[Long]\n        val visitedList29 = new mutable.ListBuffer[Long]\n\
    \        val visitedList30 = new mutable.ListBuffer[Long]\n        val visitedList31\
    \ = new mutable.ListBuffer[Long]\n        val visited", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        val lst_C = lst_A.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_D = lst_B.map(_.toList).sortBy(_.reverse)\n        val lst_E\
    \ = lst_C.map(_.toList).sortBy(_.reverse)\n        val lst_F = lst_D.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_G = lst_E.map(_.toList).sortBy(_.reverse)\n        val lst_H\
    \ = lst_F.map(_.toList).sortBy(_.reverse)\n        val lst_I = lst_G.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_J = lst_H.map(_.toList).sortBy(_.reverse)\n        val lst_K\
    \ = lst_I.map(_.toList).sortBy(_.reverse)\n        val lst_L = lst_J.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_M = lst_K.map(_.toList).sortBy(_.reverse)\n        val lst_N\
    \ = lst_L.map(_.toList).sortBy(_.reverse)\n        val lst_O = lst_M.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_P = lst_O.map(_.toList).sortBy(_.reverse)\n        val lst_Q\
    \ = lst_P.map(_.toList).sortBy(_.reverse)\n        val lst_R = lst_Q.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_S = lst_R.map(_.toList).sortBy(_.reverse)\n        val lst_T\
    \ = lst_S.map(_.toList).sortBy(_.reverse)\n        val lst_U = lst_T.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_V = lst_U.map(_.toList).sortBy(_.reverse)\n        val lst_W\
    \ = lst_V.map(_.toList).sortBy(_.reverse)\n        val lst_X = lst_W.map(_.toList).sortBy(_.reverse)\n\
    \        val lst_Y = lst_X.map(_.toList).sortBy(_.reverse)\n        val lst_Z\
    \ = lst_Y.map(_.toList).sortBy(_.reverse)\n        val lst_", "        val m =\
    \ grid.length\n        val n = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedMap = new\
    \ mutable.HashMap[Long, Boolean]()\n        val visitedMap2 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap5\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap9\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap14\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap19\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap24\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap28 = new mutable.HashMap[Long, ", "        val n = grid.size\n   \
    \     val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val path = new mutable.ArrayList[Long]()\n        val lst_A = new mutable.ArrayList[Long]()\n\
    \        val lst_B = new mutable.ArrayList[Long]()\n        val lst_C = new mutable.ArrayList[Long]()\n\
    \        val lst_D = new mutable.ArrayList[Long]()\n        val lst_E = new mutable.ArrayList[Long]()\n\
    \        val lst_F = new mutable.ArrayList[Long]()\n        val lst_G = new mutable.ArrayList[Long]()\n\
    \        val lst_H = new mutable.ArrayList[Long]()\n        val lst_I = new mutable.ArrayList[Long]()\n\
    \        val lst_J = new mutable.ArrayList[Long]()\n        val lst_K = new mutable.ArrayList[Long]()\n\
    \        val lst_L = new mutable.ArrayList[Long]()\n        val lst_M = new mutable.ArrayList[Long]()\n\
    \        val lst_N = new mutable.ArrayList[Long]()\n        val lst_O = new mutable.ArrayList[Long]()\n\
    \        val lst_P = new mutable.ArrayList[Long]()\n        val lst_Q = new mutable.ArrayList[Long]()\n\
    \        val lst_R = new mutable.ArrayList[Long]()\n        val lst_S = new mutable.ArrayList[Long]()\n\
    \        val lst_T = new mutable.ArrayList[Long]()\n        val lst_U = new mutable.ArrayList[Long]()\n\
    \        val lst_V = new mutable.ArrayList[Long]()\n        val lst_W = new mutable.ArrayList[Long]()\n\
    \        val lst_X = new mutable.ArrayList[Long]()\n        val lst_Y = new mutable.ArrayList[Long]()\n\
    \        val lst_Z = new mutable.ArrayList[Long]()\n        val lst_AA = new mutable.ArrayList[Long]()\n\
    \        val lst_AB = new mutable.ArrayList[Long]()\n        val lst_AC = new\
    \ mutable.ArrayList[Long]()\n        val lst_AD = new mutable.ArrayList[Long]()\n\
    \        val lst_AE = new mutable.ArrayList[Long]()\n        val lst_AF = new\
    \ mutable.ArrayList[Long]()\n        val lst_AG = new mutable.ArrayList[Long]()\n\
    \        val lst_AH = new mutable.ArrayList[Long", "        val grid = grid.toList\n\
    \        val N = grid.size\n        val grid = grid.toList\n        val grid =\
    \ grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val grid\
    \ = grid.toList\n        val grid = grid.toList\n        val grid = grid.toList\n\
    \        val grid = grid.toList\n        val grid = grid.toList\n        val ",
  "        val N = grid.length\n        val M = grid(0).length\n        val grid =\
    \ grid.toList\n        val visited = new mutable.HashSet[Long]()\n        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        val visitedCount = new mutable.HashMap[Long,\
    \ Int]()\n        val visitedCountMax = new mutable.HashMap[Long, Int]()\n   \
    \     val visitedCountMaxMax = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMax = new\
    \ mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMax = new\
    \ mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMax = new\
    \ mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = new mutable.HashMap[Long, Int]()\n        val visitedCountMaxMaxMaxMaxMaxMaxMaxMaxMaxMax",
  "        val n = grid.size\n        val m = grid(0).size\n        val visited =\
    \ new mutable.HashSet[Long]()\n        val path = new mutable.ListBuffer[Long]()\n\
    \        val queue = new mutable.PriorityQueue[Long]()\n        val lst_A = grid.map(_.toList).map(_.toLong)\n\
    \        val lst_B = grid.map(_.toList).map(_.toLong).reverse\n        val lst_C\
    \ = lst_A.zip(lst_B).map(x => x._1 - x._2)\n        val lst_D = lst_A.zip(lst_B).map(x\
    \ => x._2 - x._1)\n        val lst_E = lst_C.zip(lst_D).map(x => x._1 - x._2)\n\
    \        val lst_F = lst_C.zip(lst_D).map(x => x._2 - x._1)\n        val lst_G\
    \ = lst_E.zip(lst_F).map(x => x._1 - x._2)\n        val lst_H = lst_E.zip(lst_F).map(x\
    \ => x._2 - x._1)\n        val lst_I = lst_G.zip(lst_H).map(x => x._1 - x._2)\n\
    \        val lst_J = lst_G.zip(lst_H).map(x => x._2 - x._1)\n        val lst_K\
    \ = lst_I.zip(lst_J).map(x => x._1 - x._2)\n        val lst_L = lst_I.zip(lst_J).map(x\
    \ => x._2 - x._1)\n        val lst_M = lst_K.zip(lst_L).map(x => x._1 - x._2)\n\
    \        val lst_N = lst_K.zip(lst_L).map(x => x._2 - x._1)\n        val lst_O\
    \ = lst_M.zip(lst_N).map(x => x._1 - x._2)\n        val lst_P = lst_M.zip(lst_N).map(x\
    \ => x._2 - x._1)\n        val lst_Q = lst_O.zip(lst_P).map(x => x._1 - x._2)\n\
    \        val lst_R = lst_O.zip(lst_P).map(x => x._2 - x._1)\n        val lst_S\
    \ = lst_Q.zip(lst_R).map(x => x._1 - x._2)\n        val lst_T = lst_Q.zip(lst_R).map(x\
    \ => x._2 - x._1)\n        ", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.map(_.toList)\n        val lst_D = lst_B.map(_.toList)\n\
    \        val lst_E = lst_C.map(_.toList)\n        val lst_F = lst_D.map(_.toList)\n\
    \        val lst_G = lst_E.map(_.toList)\n        val lst_H = lst_F.map(_.toList)\n\
    \        val lst_I = lst_G.map(_.toList)\n        val lst_J = lst_H.map(_.toList)\n\
    \        val lst_K = lst_I.map(_.toList)\n        val lst_L = lst_J.map(_.toList)\n\
    \        val lst_M = lst_K.map(_.toList)\n        val lst_N = lst_L.map(_.toList)\n\
    \        val lst_O = lst_M.map(_.toList)\n        val lst_P = lst_O.map(_.toList)\n\
    \        val lst_Q = lst_P.map(_.toList)\n        val lst_R = lst_Q.map(_.toList)\n\
    \        val lst_S = lst_R.map(_.toList)\n        val lst_T = lst_S.map(_.toList)\n\
    \        val lst_U = lst_T.map(_.toList)\n        val lst_V = lst_U.map(_.toList)\n\
    \        val lst_W = lst_V.map(_.toList)\n        val lst_X = lst_W.map(_.toList)\n\
    \        val lst_Y = lst_X.map(_.toList)\n        val lst_Z = lst_Y.map(_.toList)\n\
    \        val lst_A = lst_Z.map(_.toList)\n        val lst_B = lst_A.map(_.toList)\n\
    \        val lst_C = lst_B.map(_.toList)\n        val lst_D = lst_C.map(_.toList)\n\
    \        val lst_E = lst_D.map(_.toList)\n        val lst_F = lst_E.map(_.toList)\n\
    \        val lst_G = lst_F.map(_.toList)\n        val lst_H = lst_G.map(_.toList)\n\
    \        val lst_I = lst_H.map(_.toList)\n        val lst_J = lst_I.map(_.toList)\n\
    \        val lst_K = lst_J.map(_.toList)\n        val l", "        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = new mutable.ListBuffer[Long]()\n        val visitedAns = new\
    \ mutable.HashSet[Long]()\n        val visitedAnsSet = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet2 = new mutable.HashSet[Long]()\n        val visitedAnsSet3\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet4 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet5 = new mutable.HashSet[Long]()\n        val visitedAnsSet6\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet7 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet8 = new mutable.HashSet[Long]()\n        val visitedAnsSet9\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet10 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet11 = new mutable.HashSet[Long]()\n        val visitedAnsSet12\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet13 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet14 = new mutable.HashSet[Long]()\n        val visitedAnsSet15\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet16 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet17 = new mutable.HashSet[Long]()\n        val visitedAnsSet18\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet19 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet20 = new mutable.HashSet[Long]()\n        val visitedAnsSet21\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet22 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet23 = new mutable.HashSet[Long]()\n        val visitedAnsSet24\
    \ = new mutable.HashSet[Long]()\n        val visitedAnsSet25 = new mutable.HashSet[Long]()\n\
    \        val visitedAnsSet", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <-\
    \ 0 until m) {\n            val row = grid(i)\n            for (j <- 0 until n)\
    \ {\n                val cell = row[j]\n                val value = cell.toLong\n\
    \                val list = if (j == 0) List(cell) else grid((i - 1).toInt).drop(1).take(1).map(x\
    \ => x.toLong).sortWith((x, y) => x < y)\n                row += value\n     \
    \           grid += list\n            }\n        }\n        val result = grid.sortWith((x,\
    \ y) => x < y)\n        result.take(k).map(x => x.toLong)", "        val N = grid.size\n\
    \        val m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        ", "        val N = grid.length\n\
    \        val m = grid.head\n        val n = grid.last\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m - 1\n        val n = n - 1\n    \
    \    val m = m + 1\n        val n = n + 1\n        val m = m - 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n + 1\n        val m = m -\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n + 1\n   \
    \     val m = m - 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n + 1\n        val m = m - 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n + 1\n        val m = m - 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n + 1\n        val m = m - 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n + 1\n        val m = m -\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n + 1\n   \
    \     val m = m - 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n + 1\n        val m = m - 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n + 1\n        val m = m - 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n + 1\n        val m = m - 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n + 1\n        val m = m -\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n + 1\n   \
    \     val m = m - 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n + 1\n        val m = m - 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n + 1\n        val m = m - 1\n        val n = n - 1\n   \
    \     val m = m + 1\n        val n = n + 1\n        val m = m - 1\n        val\
    \ n = n - 1\n        val m = m + 1\n        val n = n + 1\n        val m = m -\
    \ 1\n        val n = n - 1\n        val m = m + 1\n        val n = n + 1\n   \
    \     val m = m - 1\n        val n = n - 1\n        val m = m + 1\n        val\
    \ n = n + 1\n        val m = m - 1\n        val n = n - 1\n        val m = m +\
    \ 1\n        val n = n + 1\n", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visitedList = new mutable.ListBuffer[Long]()\n\
    \        val visitedList2 = new mutable.ListBuffer[Long]()\n        val visitedList3\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList4 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList5 = new mutable.ListBuffer[Long]()\n        val visitedList6\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList7 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList8 = new mutable.ListBuffer[Long]()\n        val visitedList9\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList10 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList11 = new mutable.ListBuffer[Long]()\n        val visitedList12\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList13 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList14 = new mutable.ListBuffer[Long]()\n        val visitedList15\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList16 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList17 = new mutable.ListBuffer[Long]()\n        val visitedList18\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList19 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList20 = new mutable.ListBuffer[Long]()\n        val visitedList21\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList22 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList23 = new mutable.ListBuffer[Long]()\n        val visitedList24\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList25 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList26 = new mutable.ListBuffer[Long]()\n        val visitedList27\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList28 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList29 = new mutable.ListBuffer[Long]()\n        val visitedList30\
    \ = new mut", "        val N = grid.length\n        val M = grid(0).length\n \
    \       val grid = mutable.ArrayBuffer.empty[List[Long]](N)\n        for (i <-\
    \ 0 until N) {\n            val row = grid\n            val col = grid\n     \
    \       val row = i\n            val col = i\n            val row1 = row\n   \
    \         val col1 = col\n            val row2 = row\n            val col2 = col\n\
    \            val row3 = row\n            val col3 = col\n            val row4\
    \ = row\n            val col4 = col\n            val row5 = row\n            val\
    \ col5 = col\n            val row6 = row\n            val col6 = col\n       \
    \     val row7 = row\n            val col7 = col\n            val row8 = row\n\
    \            val col8 = col\n            val row9 = row\n            val col9\
    \ = col\n            val row10 = row\n            val col10 = col\n          \
    \  val row11 = row\n            val col11 = col\n            val row12 = row\n\
    \            val col12 = col\n            val row13 = row\n            val col13\
    \ = col\n            val row14 = row\n            val col14 = col\n          \
    \  val row15 = row\n            val col15 = col\n            val row16 = row\n\
    \            val col16 = col\n            val row17 = row\n            val col17\
    \ = col\n            val row18 = row\n            val col18 = col\n          \
    \  val row19 = row\n            val col19 = col\n            val row20 = row\n\
    \            val col20 = col\n            val row21 = row\n            val col21\
    \ = col\n            val row22 = row\n            val col22 = col\n          \
    \  val row23 = row\n            val col23 = col\n            val row24 = row\n\
    \            val col24 = col\n            val row25 = row\n            val col25\
    \ = col\n            val row26 = row\n            val col26 = col\n          \
    \  val row27 = row\n            val col27 = col\n            val row28 = row\n\
    \            val col28 = col\n            val row29 = row\n            val col29\
    \ = col\n            val row30 = row\n            val col30 = col\n          \
    \  val row31 = row\n            val col31 = col\n            val row32 = row\n\
    \            val col32 = col\n            val row33 = row\n            val col33\
    \ = col\n            val row34 = row\n            val col34 = col\n          \
    \  val row35", "        val n = grid.size\n        val m = grid(0).size\n    \
    \    val visited = new mutable.HashSet[Long]()\n        val ans = new mutable.ArrayList[Long]()\n\
    \        val lst_A = new mutable.ArrayList[Long]()\n        val lst_B = new mutable.ArrayList[Long]()\n\
    \        val lst_C = new mutable.ArrayList[Long]()\n        val lst_D = new mutable.ArrayList[Long]()\n\
    \        val lst_E = new mutable.ArrayList[Long]()\n        val lst_F = new mutable.ArrayList[Long]()\n\
    \        val lst_G = new mutable.ArrayList[Long]()\n        val lst_H = new mutable.ArrayList[Long]()\n\
    \        val lst_I = new mutable.ArrayList[Long]()\n        val lst_J = new mutable.ArrayList[Long]()\n\
    \        val lst_K = new mutable.ArrayList[Long]()\n        val lst_L = new mutable.ArrayList[Long]()\n\
    \        val lst_M = new mutable.ArrayList[Long]()\n        val lst_N = new mutable.ArrayList[Long]()\n\
    \        val lst_O = new mutable.ArrayList[Long]()\n        val lst_P = new mutable.ArrayList[Long]()\n\
    \        val lst_Q = new mutable.ArrayList[Long]()\n        val lst_R = new mutable.ArrayList[Long]()\n\
    \        val lst_S = new mutable.ArrayList[Long]()\n        val lst_T = new mutable.ArrayList[Long]()\n\
    \        val lst_U = new mutable.ArrayList[Long]()\n        val lst_V = new mutable.ArrayList[Long]()\n\
    \        val lst_W = new mutable.ArrayList[Long]()\n        val lst_X = new mutable.ArrayList[Long]()\n\
    \        val lst_Y = new mutable.ArrayList[Long]()\n        val lst_Z = new mutable.ArrayList[Long]()\n\
    \        val lst_AA = new mutable.ArrayList[Long]()\n        val lst_AB = new\
    \ mutable.ArrayList[Long]()\n        val lst_AC = new mutable.ArrayList[Long]()\n\
    \        val lst_AD = new mutable.ArrayList[Long]()\n        val lst_AE = new\
    \ mutable.ArrayList[Long]()\n        val lst_AF = new mutable.ArrayList[Long]()\n\
    \        val lst_AG = new mutable.ArrayList[Long]()\n        val lst_AH = new\
    \ mutable.ArrayList[Long", "        val m = grid.size\n        val n = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = new mutable.ListBuffer[Long]()\n\
    \        val stack = new mutable.Stack[Long]()\n        val stack2 = new mutable.Stack[Long]()\n\
    \        val stack3 = new mutable.Stack[Long]()\n        val stack4 = new mutable.Stack[Long]()\n\
    \        val stack5 = new mutable.Stack[Long]()\n        val stack6 = new mutable.Stack[Long]()\n\
    \        val stack7 = new mutable.Stack[Long]()\n        val stack8 = new mutable.Stack[Long]()\n\
    \        val stack9 = new mutable.Stack[Long]()\n        val stack10 = new mutable.Stack[Long]()\n\
    \        val stack11 = new mutable.Stack[Long]()\n        val stack12 = new mutable.Stack[Long]()\n\
    \        val stack13 = new mutable.Stack[Long]()\n        val stack14 = new mutable.Stack[Long]()\n\
    \        val stack15 = new mutable.Stack[Long]()\n        val stack16 = new mutable.Stack[Long]()\n\
    \        val stack17 = new mutable.Stack[Long]()\n        val stack18 = new mutable.Stack[Long]()\n\
    \        val stack19 = new mutable.Stack[Long]()\n        val stack20 = new mutable.Stack[Long]()\n\
    \        val stack21 = new mutable.Stack[Long]()\n        val stack22 = new mutable.Stack[Long]()\n\
    \        val stack23 = new mutable.Stack[Long]()\n        val stack24 = new mutable.Stack[Long]()\n\
    \        val stack25 = new mutable.Stack[Long]()\n        val stack26 = new mutable.Stack[Long]()\n\
    \        val stack27 = new mutable.Stack[Long]()\n        val stack28 = new mutable.Stack[Long]()\n\
    \        val stack29 = new mutable.Stack[Long]()\n        val stack30 = new mutable.Stack[Long]()\n\
    \        val stack31 = new mutable.Stack[Long]()\n        val stack32 = new mutable.Stack[Long]()\n\
    \        val stack33 = new mutable.Stack[Long]()\n        val stack34 = new mutable.Stack[Long]()\n\
    \        val stack35 = new mutable.Stack[Long]()\n        val stack36 = new mutable.Stack[Long]()\n\
    \        val stack", "        val n = grid.length\n        val m = grid(0).length\n\
    \        val result = new Array[Long](k)\n        var min = 0\n        var index\
    \ = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var minPath\
    \ = 0\n        var minPathIndex = 0\n        var minPathIndex2 = 0\n        var\
    \ minPathIndex3 = 0\n        var minPathIndex4 = 0\n        var minPathIndex5\
    \ = 0\n        var minPathIndex6 = 0\n        var minPathIndex7 = 0\n        var\
    \ minPathIndex8 = 0\n        var minPathIndex9 = 0\n        var minPathIndex10\
    \ = 0\n        var minPathIndex11 = 0\n        var minPathIndex12 = 0\n      \
    \  var minPathIndex13 = 0\n        var minPathIndex14 = 0\n        var minPathIndex15\
    \ = 0\n        var minPathIndex16 = 0\n        var minPathIndex17 = 0\n      \
    \  var minPathIndex18 = 0\n        var minPathIndex19 = 0\n        var minPathIndex20\
    \ = 0\n        var minPathIndex21 = 0\n        var minPathIndex22 = 0\n      \
    \  var minPathIndex23 = 0\n        var minPathIndex24 = 0\n        var minPathIndex25\
    \ = 0\n        var minPathIndex26 = 0\n        var minPathIndex27 = 0\n      \
    \  var minPathIndex28 = 0\n        var minPathIndex29 = 0\n        var minPathIndex30\
    \ = 0\n        var minPathIndex31 = 0\n        var minPathIndex32 = 0\n      \
    \  var minPathIndex33 = 0\n        var minPathIndex34 = 0\n        var minPathIndex35\
    \ = 0\n        var minPathIndex36 = 0\n        var minPathIndex37 = 0\n      \
    \  var minPathIndex38 = 0\n        var minPathIndex39 = 0\n        var minPathIndex40\
    \ = 0\n        var minPathIndex41 = 0\n        var minPathIndex42 = 0\n      \
    \  var minPathIndex43 = 0\n        var minPathIndex44 = 0\n        var minPathIndex45\
    \ = 0\n        var minPathIndex46 = 0\n        var minPathIndex47 = 0\n      \
    \  var minPathIndex48 = 0\n        var minPathIndex49 = 0\n        var minPathIndex50\
    \ = 0\n        var minPathIndex51 = 0\n        var minPathIndex52 = 0\n      \
    \  var minPathIndex53 = 0\n        var minPathIndex54 = 0\n        var minPathIndex55\
    \ = 0\n        var minPathIndex56 = 0\n        var minPathIndex57 = 0\n      \
    \  var minPathIndex58 = 0\n        var minPathIndex59 = 0\n        var minPathIndex60\
    \ = 0\n        var minPathIndex61 = 0\n        var minPathIndex62 = 0\n      \
    \  var minPathIndex63 = 0\n        var minPathIndex64 = 0\n        var minPathIndex65\
    \ = 0\n        var minPathIndex66 = 0\n        var minPathIndex", "        val\
    \ n = grid.size\n        val m = grid(0).size\n        val result = new Array[Long](k)\n\
    \        val visited = new Array[Boolean](k)\n        val stack = new Array[Int](k)\n\
    \        val stackSize = new Array[Int](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndex2 = new Array[Int](k)\n        val stackIndex3 = new Array[Int](k)\n\
    \        val stackIndex4 = new Array[Int](k)\n        val stackIndex5 = new Array[Int](k)\n\
    \        val stackIndex6 = new Array[Int](k)\n        val stackIndex7 = new Array[Int](k)\n\
    \        val stackIndex8 = new Array[Int](k)\n        val stackIndex9 = new Array[Int](k)\n\
    \        val stackIndex10 = new Array[Int](k)\n        val stackIndex11 = new\
    \ Array[Int](k)\n        val stackIndex12 = new Array[Int](k)\n        val stackIndex13\
    \ = new Array[Int](k)\n        val stackIndex14 = new Array[Int](k)\n        val\
    \ stackIndex15 = new Array[Int](k)\n        val stackIndex16 = new Array[Int](k)\n\
    \        val stackIndex17 = new Array[Int](k)\n        val stackIndex18 = new\
    \ Array[Int](k)\n        val stackIndex19 = new Array[Int](k)\n        val stackIndex20\
    \ = new Array[Int](k)\n        val stackIndex21 = new Array[Int](k)\n        val\
    \ stackIndex22 = new Array[Int](k)\n        val stackIndex23 = new Array[Int](k)\n\
    \        val stackIndex24 = new Array[Int](k)\n        val stackIndex25 = new\
    \ Array[Int](k)\n        val stackIndex26 = new Array[Int](k)\n        val stackIndex27\
    \ = new Array[Int](k)\n        val stackIndex28 = new Array[Int](k)\n        val\
    \ stackIndex29 = new Array[Int](k)\n        val stackIndex30 = new Array[Int](k)\n\
    \        val stackIndex31 = new Array[Int](k)\n        val stackIndex32 = new\
    \ Array[Int](k)\n        val stackIndex33 = new Array[Int](k)\n        val stackIndex34\
    \ = new Array[Int](k)\n        val stackIndex35 = new Array[Int](k)\n        val\
    \ stackIndex36 = new Array[Int](k)\n        val stackIndex37 = new Array[Int](k)\n\
    \        val stackIndex38 = new Array[Int](k)\n", "        val m = grid.size\n\
    \        val n = grid.head.size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ArrayList[Long]()\n        val visitedList2\
    \ = new mutable.ArrayList[Long]()\n        val visitedList3 = new mutable.ArrayList[Long]()\n\
    \        val visitedList4 = new mutable.ArrayList[Long]()\n        val visitedList5\
    \ = new mutable.ArrayList[Long]()\n        val visitedList6 = new mutable.ArrayList[Long]()\n\
    \        val visitedList7 = new mutable.ArrayList[Long]()\n        val visitedList8\
    \ = new mutable.ArrayList[Long]()\n        val visitedList9 = new mutable.ArrayList[Long]()\n\
    \        val visitedList10 = new mutable.ArrayList[Long]()\n        val visitedList11\
    \ = new mutable.ArrayList[Long]()\n        val visitedList12 = new mutable.ArrayList[Long]()\n\
    \        val visitedList13 = new mutable.ArrayList[Long]()\n        val visitedList14\
    \ = new mutable.ArrayList[Long]()\n        val visitedList15 = new mutable.ArrayList[Long]()\n\
    \        val visitedList16 = new mutable.ArrayList[Long]()\n        val visitedList17\
    \ = new mutable.ArrayList[Long]()\n        val visitedList18 = new mutable.ArrayList[Long]()\n\
    \        val visitedList19 = new mutable.ArrayList[Long]()\n        val visitedList20\
    \ = new mutable.ArrayList[Long]()\n        val visitedList21 = new mutable.ArrayList[Long]()\n\
    \        val visitedList22 = new mutable.ArrayList[Long]()\n        val visitedList23\
    \ = new mutable.ArrayList[Long]()\n        val visitedList24 = new mutable.ArrayList[Long]()\n\
    \        val visitedList25 = new mutable.ArrayList[Long]()\n        val visitedList26\
    \ = new mutable.ArrayList[Long]()\n        val visitedList27 = new mutable.ArrayList[Long]()\n\
    \        val visitedList28 = new mutable.ArrayList[Long]()\n        val visitedList29\
    \ = new mutable.ArrayList[Long]()\n        val visitedList30 = new mutable.ArrayList[Long]()\n\
    \        val visitedList31 = new mutable.ArrayList[Long]()\n        val visitedList32\
    \ = new mutable.ArrayList[Long]()\n        val visited", "        val m = grid.size\n\
    \        val n = grid.head.size\n        val grid = grid.toList\n        val grid\
    \ = grid.sortBy(x => x.toLong)\n        val grid = grid.map(x => x.toList)\n \
    \       val grid = grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n\
    \        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x =>\
    \ x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x\
    \ => x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid =\
    \ grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n      \
    \  val grid = grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n\
    \        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x =>\
    \ x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x\
    \ => x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid =\
    \ grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n      \
    \  val grid = grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n\
    \        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x =>\
    \ x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x\
    \ => x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid =\
    \ grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n      \
    \  val grid = grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n\
    \        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x =>\
    \ x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x\
    \ => x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid =\
    \ grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n      \
    \  val grid = grid.map(x => x.toList)\n        val grid = grid.map(x => x.toList)\n\
    \        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x =>\
    \ x.toList)\n        val grid = grid.map(x => x.toList)\n        val grid = grid.map(x\
    \ => x.toList)\n        val grid = grid.map(x ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val visited = new mutable.HashSet[Long]()\n        val visitedFrom =\
    \ new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom2\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom3\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom4\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom5\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom6\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom7\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom8\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom9\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom10\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom11\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom12\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom13\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom14\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom15\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom16\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom17\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom18\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom19\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom20\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom21\
    \ = new mutable.HashMap[Long, mutable.ListBuffer[Long]]()\n        val visitedFrom22\
    \ = new mutable.Hash", "        val N = grid.size\n        val m = N * N\n   \
    \     val lst_A = grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n\
    \        val lst_C = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n  \
    \      val lst_D = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n    \
    \    val lst_E = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n      \
    \  val lst_F = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n        val\
    \ lst_G = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n        val lst_H\
    \ = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n        val lst_I =\
    \ lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n        val lst_J = lst_A.map(x\
    \ => lst_B.map(y => if (x == y) x else y))\n        val lst_K = lst_A.map(x =>\
    \ lst_B.map(y => if (x == y) x else y))\n        val lst_L = lst_A.map(x => lst_B.map(y\
    \ => if (x == y) x else y))\n        val lst_M = lst_A.map(x => lst_B.map(y =>\
    \ if (x == y) x else y))\n        val lst_N = lst_A.map(x => lst_B.map(y => if\
    \ (x == y) x else y))\n        val lst_O = lst_A.map(x => lst_B.map(y => if (x\
    \ == y) x else y))\n        val lst_P = lst_A.map(x => lst_B.map(y => if (x ==\
    \ y) x else y))\n        val lst_Q = lst_A.map(x => lst_B.map(y => if (x == y)\
    \ x else y))\n        val lst_R = lst_A.map(x => lst_B.map(y => if (x == y) x\
    \ else y))\n        val lst_S = lst_A.map(x => lst_B.map(y => if (x == y) x else\
    \ y))\n        val lst_T = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n\
    \        val lst_U = lst_A.map(x => lst_B.map(y => if (x == y) x else y))\n  \
    \      val lst_V = lst_A.map(x => l", "        val m = grid.length\n        val\
    \ n = grid(0).length\n        val visited = new Array[Boolean](m)\n        val\
    \ result = new Array[Long](k)\n        val stack = new Array[Long](k)\n      \
    \  val stackPointer = 0\n        val stackPointer2 = 1\n        val stackPointer3\
    \ = 2\n        val stackPointer4 = 3\n        val stackPointer5 = 4\n        val\
    \ stackPointer6 = 5\n        val stackPointer7 = 6\n        val stackPointer8\
    \ = 7\n        val stackPointer9 = 8\n        val stackPointer10 = 9\n       \
    \ val stackPointer11 = 10\n        val stackPointer12 = 11\n        val stackPointer13\
    \ = 12\n        val stackPointer14 = 13\n        val stackPointer15 = 14\n   \
    \     val stackPointer16 = 15\n        val stackPointer17 = 16\n        val stackPointer18\
    \ = 17\n        val stackPointer19 = 18\n        val stackPointer20 = 19\n   \
    \     val stackPointer21 = 20\n        val stackPointer22 = 21\n        val stackPointer23\
    \ = 22\n        val stackPointer24 = 23\n        val stackPointer25 = 24\n   \
    \     val stackPointer26 = 25\n        val stackPointer27 = 26\n        val stackPointer28\
    \ = 27\n        val stackPointer29 = 28\n        val stackPointer30 = 29\n   \
    \     val stackPointer31 = 30\n        val stackPointer32 = 31\n        val stackPointer33\
    \ = 32\n        val stackPointer34 = 33\n        val stackPointer35 = 34\n   \
    \     val stackPointer36 = 35\n        val stackPointer37 = 36\n        val stackPointer38\
    \ = 37\n        val stackPointer39 = 38\n        val stackPointer40 = 39\n   \
    \     val stackPointer41 = 40\n        val stackPointer42 = 41\n        val stackPointer43\
    \ = 42\n        val stackPointer44 = 43\n        val stackPointer45 = 44\n   \
    \     val stackPointer46 = 45\n        val stackPointer47 = 46\n        val stackPointer48\
    \ = 47\n        val stackPointer49 = 48\n        val stackPointer50 = 49\n   \
    \     val stackPointer51 = 50\n        val stackPointer52 = 51\n        val stackPointer53\
    \ = 52\n        val stackPointer54 = 53\n        val stackPointer55 = 54\n   \
    \     val stackPointer56 = 55\n        val stackPointer57 = 56\n        val stackPointer58\
    \ = 57\n        val stackPointer59 = 58\n        val stackPointer60 = 59\n   \
    \     val stackPointer61 = 60\n", "        val m = grid.length\n        val n\
    \ = grid(0).length\n        val result = new Array[Long](k)\n        var min =\
    \ 0\n        var index = 0\n        var current = 0\n        var next = 0\n  \
    \      var nextIndex = 0\n        var currentIndex = 0\n        var currentMin\
    \ = 0\n        var currentMinIndex = 0\n        var currentMinValue = 0\n    \
    \    var currentMinValueIndex = 0\n        var currentMinValueIndex2 = 0\n   \
    \     var currentMinValueIndex3 = 0\n        var currentMinValueIndex4 = 0\n \
    \       var currentMinValueIndex5 = 0\n        var currentMinValueIndex6 = 0\n\
    \        var currentMinValueIndex7 = 0\n        var currentMinValueIndex8 = 0\n\
    \        var currentMinValueIndex9 = 0\n        var currentMinValueIndex10 = 0\n\
    \        var currentMinValueIndex11 = 0\n        var currentMinValueIndex12 =\
    \ 0\n        var currentMinValueIndex13 = 0\n        var currentMinValueIndex14\
    \ = 0\n        var currentMinValueIndex15 = 0\n        var currentMinValueIndex16\
    \ = 0\n        var currentMinValueIndex17 = 0\n        var currentMinValueIndex18\
    \ = 0\n        var currentMinValueIndex19 = 0\n        var currentMinValueIndex20\
    \ = 0\n        var currentMinValueIndex21 = 0\n        var currentMinValueIndex22\
    \ = 0\n        var currentMinValueIndex23 = 0\n        var currentMinValueIndex24\
    \ = 0\n        var currentMinValueIndex25 = 0\n        var currentMinValueIndex26\
    \ = 0\n        var currentMinValueIndex27 = 0\n        var currentMinValueIndex28\
    \ = 0\n        var currentMinValueIndex29 = 0\n        var currentMinValueIndex30\
    \ = 0\n        var currentMinValueIndex31 = 0\n        var currentMinValueIndex32\
    \ = 0\n        var currentMinValueIndex33 = 0\n        var currentMinValueIndex34\
    \ = 0\n        var currentMinValueIndex35 = 0\n        var currentMinValueIndex36\
    \ = 0\n        var currentMinValueIndex37 = 0\n        var currentMinValueIndex38\
    \ = 0\n        var currentMinValueIndex39 = 0\n        var currentMinValueIndex40\
    \ = 0\n        var currentMinValueIndex41 = 0\n        var currentMinValueIndex42\
    \ = 0\n        var currentMinValueIndex43 = 0\n        var currentMinValueIndex44\
    \ = 0\n        var currentMinValueIndex45 = 0\n        var currentMinValueIndex46\
    \ = 0\n        var currentMinValueIndex47 = 0\n        var currentMinValueIndex48\
    \ = 0\n        var currentMinValueIndex49 = 0\n        var currentMinValueIndex50\
    \ = 0\n        var currentMinValueIndex51 = 0\n        var currentMinValueIndex52\
    \ = 0\n        var currentMinValueIndex53 = 0\n        var currentMinValueIndex54\
    \ = 0\n        var currentMinValueIndex55 = 0\n        var currentMinValueIndex56\
    \ = 0", "        val n = grid.length\n        val m = grid(0).length\n       \
    \ val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Long](k)\n        val stackIndex = 0\n        val\
    \ stackSize = k\n        val stackTop = stack(0)\n        val stackBottom = stack(k\
    \ - 1)\n        val stackBottomIndex = k - 1\n        val stackBottomValue = grid((stackBottomIndex\
    \ - 1) to stackBottomIndex).map(_.toLong).sum\n        val stackBottomValue2 =\
    \ grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n       \
    \ val stackBottomValue3 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue4 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue5 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue6 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue7 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue8 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue9 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue10 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue11 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue12 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue13 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue14 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue15 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue16 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val stackBottomValue17 = grid((stackBottomIndex - 1) to stackBottomIndex).map(_.toLong).sum\n\
    \        val ", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Int](k)\n        val stackSize = new Array[Int](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackTop = new Array[Int](k)\n\
    \        val stackTopIndex = new Array[Int](k)\n        val stackTopIndex2 = new\
    \ Array[Int](k)\n        val stackTopIndex3 = new Array[Int](k)\n        val stackTopIndex4\
    \ = new Array[Int](k)\n        val stackTopIndex5 = new Array[Int](k)\n      \
    \  val stackTopIndex6 = new Array[Int](k)\n        val stackTopIndex7 = new Array[Int](k)\n\
    \        val stackTopIndex8 = new Array[Int](k)\n        val stackTopIndex9 =\
    \ new Array[Int](k)\n        val stackTopIndex10 = new Array[Int](k)\n       \
    \ val stackTopIndex11 = new Array[Int](k)\n        val stackTopIndex12 = new Array[Int](k)\n\
    \        val stackTopIndex13 = new Array[Int](k)\n        val stackTopIndex14\
    \ = new Array[Int](k)\n        val stackTopIndex15 = new Array[Int](k)\n     \
    \   val stackTopIndex16 = new Array[Int](k)\n        val stackTopIndex17 = new\
    \ Array[Int](k)\n        val stackTopIndex18 = new Array[Int](k)\n        val\
    \ stackTopIndex19 = new Array[Int](k)\n        val stackTopIndex20 = new Array[Int](k)\n\
    \        val stackTopIndex21 = new Array[Int](k)\n        val stackTopIndex22\
    \ = new Array[Int](k)\n        val stackTopIndex23 = new Array[Int](k)\n     \
    \   val stackTopIndex24 = new Array[Int](k)\n        val stackTopIndex25 = new\
    \ Array[Int](k)\n        val stackTopIndex26 = new Array[Int](k)\n        val\
    \ stackTopIndex27 = new Array[Int](k)\n        val stackTopIndex28 = new Array[Int](k)\n\
    \        val stackTopIndex29 = new Array[Int](k)\n        val stackTopIndex30\
    \ = new Array[Int](k)\n        val stackTopIndex31 = new Array[Int](k)\n     \
    \   val stackTopIndex32 = new Array[Int](k)\n        val stackTopIndex33 = new\
    \ Array[Int](k)\n        val stackTopIndex", "        val n = grid.length\n  \
    \      val m = grid(0).length\n        val result = new Array[Long](k)\n     \
    \   val visited = new Array[Boolean](k)\n        val visited_in = new Array[Boolean](k)\n\
    \        val visited_out = new Array[Boolean](k)\n        val visited_in2 = new\
    \ Array[Boolean](k)\n        val visited_out2 = new Array[Boolean](k)\n      \
    \  val visited_in3 = new Array[Boolean](k)\n        val visited_out3 = new Array[Boolean](k)\n\
    \        val visited_in4 = new Array[Boolean](k)\n        val visited_out4 = new\
    \ Array[Boolean](k)\n        val visited_in5 = new Array[Boolean](k)\n       \
    \ val visited_out5 = new Array[Boolean](k)\n        val visited_in6 = new Array[Boolean](k)\n\
    \        val visited_out6 = new Array[Boolean](k)\n        val visited_in7 = new\
    \ Array[Boolean](k)\n        val visited_out7 = new Array[Boolean](k)\n      \
    \  val visited_in8 = new Array[Boolean](k)\n        val visited_out8 = new Array[Boolean](k)\n\
    \        val visited_in9 = new Array[Boolean](k)\n        val visited_out9 = new\
    \ Array[Boolean](k)\n        val visited_in10 = new Array[Boolean](k)\n      \
    \  val visited_out10 = new Array[Boolean](k)\n        val visited_in11 = new Array[Boolean](k)\n\
    \        val visited_out11 = new Array[Boolean](k)\n        val visited_in12 =\
    \ new Array[Boolean](k)\n        val visited_out12 = new Array[Boolean](k)\n \
    \       val visited_in13 = new Array[Boolean](k)\n        val visited_out13 =\
    \ new Array[Boolean](k)\n        val visited_in14 = new Array[Boolean](k)\n  \
    \      val visited_out14 = new Array[Boolean](k)\n        val visited_in15 = new\
    \ Array[Boolean](k)\n        val visited_out15 = new Array[Boolean](k)\n     \
    \   val visited_in16 = new Array[Boolean](k)\n        val visited_out16 = new\
    \ Array[Boolean](k)\n        val visited_in17 = new Array[Boolean](k)\n      \
    \  val visited_out17 = new Array[Boolean](k)\n        val visited_in18 = new Array[Boolean](k)\n\
    \        val visited_out18 = new Array[Boolean](k)\n        val visited_in19 =\
    \ new Array[Boolean](k)", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val visitedList = List[Long]()\n    \
    \    val visitedList2 = List[Long]()\n        val visitedList3 = List[Long]()\n\
    \        val visitedList4 = List[Long]()\n        val visitedList5 = List[Long]()\n\
    \        val visitedList6 = List[Long]()\n        val visitedList7 = List[Long]()\n\
    \        val visitedList8 = List[Long]()\n        val visitedList9 = List[Long]()\n\
    \        val visitedList10 = List[Long]()\n        val visitedList11 = List[Long]()\n\
    \        val visitedList12 = List[Long]()\n        val visitedList13 = List[Long]()\n\
    \        val visitedList14 = List[Long]()\n        val visitedList15 = List[Long]()\n\
    \        val visitedList16 = List[Long]()\n        val visitedList17 = List[Long]()\n\
    \        val visitedList18 = List[Long]()\n        val visitedList19 = List[Long]()\n\
    \        val visitedList20 = List[Long]()\n        val visitedList21 = List[Long]()\n\
    \        val visitedList22 = List[Long]()\n        val visitedList23 = List[Long]()\n\
    \        val visitedList24 = List[Long]()\n        val visitedList25 = List[Long]()\n\
    \        val visitedList26 = List[Long]()\n        val visitedList27 = List[Long]()\n\
    \        val visitedList28 = List[Long]()\n        val visitedList29 = List[Long]()\n\
    \        val visitedList30 = List[Long]()\n        val visitedList31 = List[Long]()\n\
    \        val visitedList32 = List[Long]()\n        val visitedList33 = List[Long]()\n\
    \        val visitedList34 = List[Long]()\n        val visitedList35 = List[Long]()\n\
    \        val visitedList36 = List[Long]()\n        val visitedList37 = List[Long]()\n\
    \        val visitedList38 = List[Long]()\n        val visitedList39 = List[Long]()\n\
    \        val visitedList40 = List[Long]()\n        val ", "        val n = grid.length\n\
    \        val m = grid(0).length\n        val grid = grid.toList\n        val grid2\
    \ = grid.map(_.toList)\n        val grid3 = grid2.map(_.toList)\n        val grid4\
    \ = grid3.map(_.toList)\n        val grid5 = grid4.map(_.toList)\n        val\
    \ grid6 = grid5.map(_.toList)\n        val grid7 = grid6.map(_.toList)\n     \
    \   val grid8 = grid7.map(_.toList)\n        val grid9 = grid8.map(_.toList)\n\
    \        val grid10 = grid9.map(_.toList)\n        val grid11 = grid10.map(_.toList)\n\
    \        val grid12 = grid11.map(_.toList)\n        val grid13 = grid12.map(_.toList)\n\
    \        val grid14 = grid13.map(_.toList)\n        val grid15 = grid14.map(_.toList)\n\
    \        val grid16 = grid15.map(_.toList)\n        val grid17 = grid16.map(_.toList)\n\
    \        val grid18 = grid17.map(_.toList)\n        val grid19 = grid18.map(_.toList)\n\
    \        val grid20 = grid19.map(_.toList)\n        val grid21 = grid20.map(_.toList)\n\
    \        val grid22 = grid21.map(_.toList)\n        val grid23 = grid22.map(_.toList)\n\
    \        val grid24 = grid23.map(_.toList)\n        val grid25 = grid24.map(_.toList)\n\
    \        val grid26 = grid25.map(_.toList)\n        val grid27 = grid26.map(_.toList)\n\
    \        val grid28 = grid27.map(_.toList)\n        val grid29 = grid28.map(_.toList)\n\
    \        val grid30 = grid29.map(_.toList)\n        val grid31 = grid30.map(_.toList)\n\
    \        val grid32 = grid31.map(_.toList)\n        val grid33 = grid32.map(_.toList)\n\
    \        val grid34 = grid33.map(_.toList)\n        val grid35 = grid34.map(_.toList)\n\
    \        val grid36 = grid35.map(_.toList)\n        val grid37 = grid36.map(_.toList)\n\
    \        val grid38 = grid37.map(_.toList)\n        val grid39 = grid38.map(_.toList)\n\
    \        val grid40 = grid39.map(_.toList)\n        val grid41 = grid40.map(_.toList)\n\
    \        val grid42 = grid41.map(_.toList)\n        val grid43 = grid42.map(_.",
  "        val m = grid.length\n        val n = grid(0).length\n        val grid =\
    \ mutable.ArrayBuffer.empty[List[Long]](m)\n        for (i <- 0 until m) {\n \
    \           val row = grid(i)\n            val col = grid(0).zipWithIndex.filter(_._1\
    \ == i).map(_._2).max\n            row += i\n            col += i\n          \
    \  grid += row\n            grid += col\n        }\n        val visited = mutable.ArrayBuffer.empty[Long]\n\
    \        val ans = mutable.ArrayBuffer.empty[Long]\n        val visitedCount =\
    \ mutable.ArrayBuffer.empty[Long]\n        val anCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount2 = mutable.ArrayBuffer.empty[Long]\n        val anCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val anCount3 = mutable.ArrayBuffer.empty[Long]\n        val visitedCount4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val anCount4 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount5 = mutable.ArrayBuffer.empty[Long]\n        val anCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val anCount6 = mutable.ArrayBuffer.empty[Long]\n        val visitedCount7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val anCount7 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount8 = mutable.ArrayBuffer.empty[Long]\n        val anCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val anCount9 = mutable.ArrayBuffer.empty[Long]\n        val visitedCount10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val anCount10 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount11 = mutable.ArrayBuffer.empty[Long]\n        val anCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val visitedCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val anCount12 = mutable.ArrayBuffer.empty[Long]\n        val visitedCount13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val anCount13 = mutable.ArrayBuffer.empty[Long]\n\
    \        val visitedCount14 = mutable.ArrayBuffer.empty[Long]\n        val anCount14\
    \ = mutable.ArrayBuffer.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = mutable.ArrayBuffer(grid.toList)\n        val visited = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCount = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n\
    \        val visitedCounts_ = mutable.ArrayBuffer(grid.toList)\n        val visitedCounts_\
    \ = mutable.ArrayBuffer(grid.toList)", "        val N = grid.length\n        val\
    \ m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        ", "        val n = grid.size\n\
    \        val m = grid.head.length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList.reverse).toList\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_C.map(x => (x._1, x._2))\n       \
    \ val lst_E = lst_D.map(x => (x._1, x._2))\n        val lst_F = lst_E.map(x =>\
    \ (x._1, x._2))\n        val lst_G = lst_F.map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_G.map(x => (x._1, x._2))\n        val lst_I = lst_H.map(x => (x._1,\
    \ x._2))\n        val lst_J = lst_I.map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_J.map(x => (x._1, x._2))\n        val lst_L = lst_K.map(x => (x._1, x._2))\n\
    \        val lst_M = lst_L.map(x => (x._1, x._2))\n        val lst_N = lst_M.map(x\
    \ => (x._1, x._2))\n        val lst_O = lst_N.map(x => (x._1, x._2))\n       \
    \ val lst_P = lst_O.map(x => (x._1, x._2))\n        val lst_Q = lst_P.map(x =>\
    \ (x._1, x._2))\n        val lst_R = lst_Q.map(x => (x._1, x._2))\n        val\
    \ lst_S = lst_R.map(x => (x._1, x._2))\n        val lst_T = lst_S.map(x => (x._1,\
    \ x._2))\n        val lst_U = lst_T.map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_U.map(x => (x._1, x._2))\n        val lst_W = lst_V.map(x => (x._1, x._2))\n\
    \        val lst_X = lst_W.map(x => (x._1, x._2))\n        val lst_Y = lst_X.map(x\
    \ => (x._1, x._2))\n        val lst_Z = lst_Y.map(x => (x._1, x._2))\n       \
    \ val lst_A = lst_Z.map(x => (x._1, x._2))\n        val l", "        val grid\
    \ = grid.toList\n        val n = grid.size\n        val m = grid(0).size\n   \
    \     val lst_A = grid.map(x => x.toList).flatten\n        val lst_B = grid.map(x\
    \ => x.toList).flatten.reverse\n        val lst_C = lst_A.map(x => x.toList).flatten\n\
    \        val lst_D = lst_A.map(x => x.toList).flatten.reverse\n        val lst_E\
    \ = lst_B.map(x => x.toList).flatten\n        val lst_F = lst_B.map(x => x.toList).flatten.reverse\n\
    \        val lst_G = lst_C.map(x => x.toList).flatten\n        val lst_H = lst_C.map(x\
    \ => x.toList).flatten.reverse\n        val lst_I = lst_D.map(x => x.toList).flatten\n\
    \        val lst_J = lst_D.map(x => x.toList).flatten.reverse\n        val lst_K\
    \ = lst_E.map(x => x.toList).flatten\n        val lst_L = lst_E.map(x => x.toList).flatten.reverse\n\
    \        val lst_M = lst_F.map(x => x.toList).flatten\n        val lst_N = lst_F.map(x\
    \ => x.toList).flatten.reverse\n        val lst_O = lst_G.map(x => x.toList).flatten\n\
    \        val lst_P = lst_G.map(x => x.toList).flatten.reverse\n        val lst_Q\
    \ = lst_H.map(x => x.toList).flatten\n        val lst_R = lst_H.map(x => x.toList).flatten.reverse\n\
    \        val lst_S = lst_I.map(x => x.toList).flatten\n        val lst_T = lst_I.map(x\
    \ => x.toList).flatten.reverse\n        val lst_U = lst_J.map(x => x.toList).flatten\n\
    \        val lst_V = lst_J.map(x => x.toList).flatten.reverse\n        val lst_W\
    \ = lst_K.map(x => x.toList).flatten\n        val lst_X = lst_K.map(x => x.toList).flatten.reverse\n\
    \        val lst_Y = lst_L.map(x => x.toList).flatten\n        val lst_Z = lst_L.map(x\
    \ => x.toList).flatten.reverse\n        val lst_A = lst_A.map(x => x.toLong)\n\
    \        val lst_B = lst_B.map(x => x.to", "        val N = grid.length\n    \
    \    val m = grid.head\n        val n = grid.last\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.toLong\n        val n = n.toLong\n        val m = m.toLong\n\
    \        val n = n.toLong\n        val m = m.toLong\n        val n = n.toLong\n\
    \        val m = m.", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val visitedList = new mutable.ListBuffer[Long]()\n\
    \        val visitedList2 = new mutable.ListBuffer[Long]()\n        val visitedList3\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList4 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList5 = new mutable.ListBuffer[Long]()\n        val visitedList6\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList7 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList8 = new mutable.ListBuffer[Long]()\n        val visitedList9\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList10 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList11 = new mutable.ListBuffer[Long]()\n        val visitedList12\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList13 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList14 = new mutable.ListBuffer[Long]()\n        val visitedList15\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList16 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList17 = new mutable.ListBuffer[Long]()\n        val visitedList18\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList19 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList20 = new mutable.ListBuffer[Long]()\n        val visitedList21\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList22 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList23 = new mutable.ListBuffer[Long]()\n        val visitedList24\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList25 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList26 = new mutable.ListBuffer[Long]()\n        val visitedList27\
    \ = new mutable.ListBuffer[Long]()\n        val visitedList28 = new mutable.ListBuffer[Long]()\n\
    \        val visitedList29 = new mutable.ListBuffer[Long]()\n        val visitedList30\
    \ = new mut", "        val N = grid.size\n        val m = grid.head\n        val\
    \ n = grid.last\n        val m = m.toLong\n        val n = n.toLong\n        val\
    \ m = m - 1\n        val n = n - 1\n        val grid = grid.tail\n        val\
    \ grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n    \
    \    val grid = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n\
    \        val grid = grid.tail\n        val grid = grid.tail\n        val grid\
    \ = grid.tail\n        val grid = grid.tail\n        val grid = grid.tail\n  \
    \      val grid = grid.tail\n        val grid = grid.tail\n        val grid =\
    \ grid.tail\n        val grid = grid.tail\n", "        val n = grid.size\n   \
    \     val m = grid.head.length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        val stack = new\
    \ mutable.Stack[Long]()\n        val stack2 = new mutable.Stack[Long]()\n    \
    \    val stack3 = new mutable.Stack[Long]()\n        val stack4 = new mutable.Stack[Long]()\n\
    \        val stack5 = new mutable.Stack[Long]()\n        val stack6 = new mutable.Stack[Long]()\n\
    \        val stack7 = new mutable.Stack[Long]()\n        val stack8 = new mutable.Stack[Long]()\n\
    \        val stack9 = new mutable.Stack[Long]()\n        val stack10 = new mutable.Stack[Long]()\n\
    \        val stack11 = new mutable.Stack[Long]()\n        val stack12 = new mutable.Stack[Long]()\n\
    \        val stack13 = new mutable.Stack[Long]()\n        val stack14 = new mutable.Stack[Long]()\n\
    \        val stack15 = new mutable.Stack[Long]()\n        val stack16 = new mutable.Stack[Long]()\n\
    \        val stack17 = new mutable.Stack[Long]()\n        val stack18 = new mutable.Stack[Long]()\n\
    \        val stack19 = new mutable.Stack[Long]()\n        val stack20 = new mutable.Stack[Long]()\n\
    \        val stack21 = new mutable.Stack[Long]()\n        val stack22 = new mutable.Stack[Long]()\n\
    \        val stack23 = new mutable.Stack[Long]()\n        val stack24 = new mutable.Stack[Long]()\n\
    \        val stack25 = new mutable.Stack[Long]()\n        val stack26 = new mutable.Stack[Long]()\n\
    \        val stack27 = new mutable.Stack[Long]()\n        val stack28 = new mutable.Stack[Long]()\n\
    \        val stack29 = new mutable.Stack[Long]()\n        val stack30 = new mutable.Stack[Long]()\n\
    \        val stack31 = new mutable.Stack[Long]()\n        val stack32 = new mutable.Stack[Long]()\n\
    \        val stack33 = new mutable.Stack[Long]()\n        val stack34 = new mutable.Stack[Long]()\n\
    \        val stack35 = new mutable.Stack[Long]()\n        val stack36 = new mutable.Stack[Long]()\n\
    \        val stack", "        val n = grid.size\n        val m = grid.head\n \
    \       val visited = new mutable.HashSet[Long]()\n        val path = new mutable.ArrayList[Long]()\n\
    \        val lst_A = new mutable.ArrayList[Long]()\n        val lst_B = new mutable.ArrayList[Long]()\n\
    \        val lst_C = new mutable.ArrayList[Long]()\n        val lst_D = new mutable.ArrayList[Long]()\n\
    \        val lst_E = new mutable.ArrayList[Long]()\n        val lst_F = new mutable.ArrayList[Long]()\n\
    \        val lst_G = new mutable.ArrayList[Long]()\n        val lst_H = new mutable.ArrayList[Long]()\n\
    \        val lst_I = new mutable.ArrayList[Long]()\n        val lst_J = new mutable.ArrayList[Long]()\n\
    \        val lst_K = new mutable.ArrayList[Long]()\n        val lst_L = new mutable.ArrayList[Long]()\n\
    \        val lst_M = new mutable.ArrayList[Long]()\n        val lst_N = new mutable.ArrayList[Long]()\n\
    \        val lst_O = new mutable.ArrayList[Long]()\n        val lst_P = new mutable.ArrayList[Long]()\n\
    \        val lst_Q = new mutable.ArrayList[Long]()\n        val lst_R = new mutable.ArrayList[Long]()\n\
    \        val lst_S = new mutable.ArrayList[Long]()\n        val lst_T = new mutable.ArrayList[Long]()\n\
    \        val lst_U = new mutable.ArrayList[Long]()\n        val lst_V = new mutable.ArrayList[Long]()\n\
    \        val lst_W = new mutable.ArrayList[Long]()\n        val lst_X = new mutable.ArrayList[Long]()\n\
    \        val lst_Y = new mutable.ArrayList[Long]()\n        val lst_Z = new mutable.ArrayList[Long]()\n\
    \        val lst_AA = new mutable.ArrayList[Long]()\n        val lst_AB = new\
    \ mutable.ArrayList[Long]()\n        val lst_AC = new mutable.ArrayList[Long]()\n\
    \        val lst_AD = new mutable.ArrayList[Long]()\n        val lst_AE = new\
    \ mutable.ArrayList[Long]()\n        val lst_AF = new mutable.ArrayList[Long]()\n\
    \        val lst_AG = new mutable.ArrayList[Long]()\n        val lst_AH = new\
    \ mutable.ArrayList[Long]", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Long](k)\n        val stackIndex = new Array[Int](k)\n\
    \        val stackIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = new ", "        val n = grid.length\n        val m = grid(0).length\n    \
    \    val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val stack = new Array[Long](k)\n        val stackSize = new Array[Int](k)\n\
    \        val stackIndex = new Array[Int](k)\n        val stackIndexSize = new\
    \ Array[Int](k)\n        val stackIndexIndex = new Array[Int](k)\n        val\
    \ stackIndexIndexSize = new Array[Int](k)\n        val stackIndexIndexIndex =\
    \ new Array[Int](k)\n        val stackIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndex = new Array[Int](k)\n        val stackIndexIndexIndexIndexSize\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexSize = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n       \
    \ val stackIndexIndexIndexIndexIndexSize = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndex\
    \ = new Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexSize = new\
    \ Array[Int](k)\n        val stackIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexIndex = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndexIndexIndexSize = new Array[Int](k)\n\
    \        val stackIndexIndexIndexIndexIndexIndex", "        val m = grid.length\n\
    \        val n = grid(0).length\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val lst_A = List[Long]()\n        val\
    \ lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val lst_D =\
    \ List[Long]()\n        val lst_E = List[Long]()\n        val lst_F = List[Long]()\n\
    \        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n        val\
    \ lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val lst_K =\
    \ List[Long]()\n        val lst_L = List[Long]()\n        val lst_M = List[Long]()\n\
    \        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n        val\
    \ lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val lst_R =\
    \ List[Long]()\n        val lst_S = List[Long]()\n        val lst_T = List[Long]()\n\
    \        val lst_U = List[Long]()\n        val lst_V = List[Long]()\n        val\
    \ lst_W = List[Long]()\n        val lst_X = List[Long]()\n        val lst_Y =\
    \ List[Long]()\n        val lst_Z = List[Long]()\n        val lst_A = List[Long]()\n\
    \        val lst_B = List[Long]()\n        val lst_C = List[Long]()\n        val\
    \ lst_D = List[Long]()\n        val lst_E = List[Long]()\n        val lst_F =\
    \ List[Long]()\n        val lst_G = List[Long]()\n        val lst_H = List[Long]()\n\
    \        val lst_I = List[Long]()\n        val lst_J = List[Long]()\n        val\
    \ lst_K = List[Long]()\n        val lst_L = List[Long]()\n        val lst_M =\
    \ List[Long]()\n        val lst_N = List[Long]()\n        val lst_O = List[Long]()\n\
    \        val lst_P = List[Long]()\n        val lst_Q = List[Long]()\n        val\
    \ lst_R = List[Long]()\n        val lst_S = List[Long]()\n        val lst_T =\
    \ List[Long]()", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid.head.length\n        val visited = new mutable.HashSet[Long]\n\
    \        val ans = List[Long]()\n        val visitedList = List[Long]()\n    \
    \    val visitedList2 = List[Long]()\n        val visitedList3 = List[Long]()\n\
    \        val visitedList4 = List[Long]()\n        val visitedList5 = List[Long]()\n\
    \        val visitedList6 = List[Long]()\n        val visitedList7 = List[Long]()\n\
    \        val visitedList8 = List[Long]()\n        val visitedList9 = List[Long]()\n\
    \        val visitedList10 = List[Long]()\n        val visitedList11 = List[Long]()\n\
    \        val visitedList12 = List[Long]()\n        val visitedList13 = List[Long]()\n\
    \        val visitedList14 = List[Long]()\n        val visitedList15 = List[Long]()\n\
    \        val visitedList16 = List[Long]()\n        val visitedList17 = List[Long]()\n\
    \        val visitedList18 = List[Long]()\n        val visitedList19 = List[Long]()\n\
    \        val visitedList20 = List[Long]()\n        val visitedList21 = List[Long]()\n\
    \        val visitedList22 = List[Long]()\n        val visitedList23 = List[Long]()\n\
    \        val visitedList24 = List[Long]()\n        val visitedList25 = List[Long]()\n\
    \        val visitedList26 = List[Long]()\n        val visitedList27 = List[Long]()\n\
    \        val visitedList28 = List[Long]()\n        val visitedList29 = List[Long]()\n\
    \        val visitedList30 = List[Long]()\n        val visitedList31 = List[Long]()\n\
    \        val visitedList32 = List[Long]()\n        val visitedList33 = List[Long]()\n\
    \        val visitedList34 = List[Long]()\n        val visitedList35 = List[Long]()\n\
    \        val visitedList36 = List[Long]()\n        val visitedList37 = List[Long]()\n\
    \        val visitedList38 = List[Long]()\n        val visitedList39 = List[Long]()\n\
    \        val visitedList40 = List[Long]()\n        val visite", "        val N\
    \ = grid.length\n        val m = grid.head\n        val n = grid.last\n      \
    \  val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_D = lst_C.map(x => if (x._1 < x._2) x else x.reverse)\n     \
    \   val lst_E = lst_D.map(x => if (x._1 < x._2) x else x.reverse)\n        val\
    \ lst_F = lst_E.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_G\
    \ = lst_F.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_H = lst_G.map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_I = lst_H.map(x => if\
    \ (x._1 < x._2) x else x.reverse)\n        val lst_J = lst_I.map(x => if (x._1\
    \ < x._2) x else x.reverse)\n        val lst_K = lst_J.map(x => if (x._1 < x._2)\
    \ x else x.reverse)\n        val lst_L = lst_K.map(x => if (x._1 < x._2) x else\
    \ x.reverse)\n        val lst_M = lst_L.map(x => if (x._1 < x._2) x else x.reverse)\n\
    \        val lst_N = lst_M.map(x => if (x._1 < x._2) x else x.reverse)\n     \
    \   val lst_O = lst_N.map(x => if (x._1 < x._2) x else x.reverse)\n        val\
    \ lst_P = lst_O.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_Q\
    \ = lst_P.map(x => if (x._1 < x._2) x else x.reverse)\n        val lst_R = lst_Q.map(x\
    \ => if (x._1 < x._2) x else x.reverse)\n        val lst_S = lst_R.map(x => if\
    \ (x._1 < x._2) x else x.reverse)\n        val lst_T = lst_S.map(x => if (x._1\
    \ < x._2) x else x.reverse)\n        val lst_U = lst_T.map(x => if (x._1 < x._2)\
    \ x else x.reverse)", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val visited = new mutable.HashSet[Long]()\n        val ans = new mutable.ListBuffer[Long]()\n\
    \        val lst_A = grid.map(_.toList).flatten\n        val lst_B = grid.map(_.toList).flatten.reverse\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val\
    \ lst_E = lst_A.zip(lst_B).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x\
    \ => (x._1, x._2))\n        val lst_F = lst_A.zip(lst_B).map(x => (x._1, x._2)).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val\
    \ lst_G = lst_A.zip(lst_B).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val\
    \ lst_H = lst_A.zip(lst_B).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2))\n        val lst_I = lst_A.zip(lst_B).map(x => (x._1, x._2)).map(x =>\
    \ (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2))\n        val lst_J = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._2)).map(x => (x._1,\
    \ x._2)).map(x => (x._1, x._2)).map(x => (x._1, x._", "        val n = grid.size\n\
    \        val m = grid.head.length\n        val visited = new Array[Boolean](n)\n\
    \        val ans = new Array[Long](n)\n        val lst_A = new Array[Long](n)\n\
    \        val lst_B = new Array[Long](n)\n        val lst_C = new Array[Long](n)\n\
    \        val lst_D = new Array[Long](n)\n        val lst_E = new Array[Long](n)\n\
    \        val lst_F = new Array[Long](n)\n        val lst_G = new Array[Long](n)\n\
    \        val lst_H = new Array[Long](n)\n        val lst_I = new Array[Long](n)\n\
    \        val lst_J = new Array[Long](n)\n        val lst_K = new Array[Long](n)\n\
    \        val lst_L = new Array[Long](n)\n        val lst_M = new Array[Long](n)\n\
    \        val lst_N = new Array[Long](n)\n        val lst_O = new Array[Long](n)\n\
    \        val lst_P = new Array[Long](n)\n        val lst_Q = new Array[Long](n)\n\
    \        val lst_R = new Array[Long](n)\n        val lst_S = new Array[Long](n)\n\
    \        val lst_T = new Array[Long](n)\n        val lst_U = new Array[Long](n)\n\
    \        val lst_V = new Array[Long](n)\n        val lst_W = new Array[Long](n)\n\
    \        val lst_X = new Array[Long](n)\n        val lst_Y = new Array[Long](n)\n\
    \        val lst_Z = new Array[Long](n)\n        val lst_AA = new Array[Long](n)\n\
    \        val lst_AB = new Array[Long](n)\n        val lst_AC = new Array[Long](n)\n\
    \        val lst_AD = new Array[Long](n)\n        val lst_AE = new Array[Long](n)\n\
    \        val lst_AF = new Array[Long](n)\n        val lst_AG = new Array[Long](n)\n\
    \        val lst_AH = new Array[Long](n)\n        val lst_AI = new Array[Long](n)\n\
    \        val lst_AJ = new Array[Long](n)\n        val lst_AK = new Array[Long](n)\n\
    \        val lst_AL = new Array[Long](n)\n        val lst_AM = new Array[Long](n)\n\
    \        val lst_AN = new Array[Long]", "        val n = grid.size\n        val\
    \ m = grid(0).size\n        val grid = mutable.ArrayBuffer.empty[List[Long]](m)\n\
    \        val visited = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val visited_ = mutable.ArrayBuffer.empty[Boolean]\n        val visited_\
    \ = mutable.ArrayBuffer.", "        val grid = grid.toList\n        val n = grid.size\n\
    \        val m = grid(0).size\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedList = new mutable.ArrayList[Long]()\n        val visitedList2\
    \ = new mutable.ArrayList[Long]()\n        val visitedList3 = new mutable.ArrayList[Long]()\n\
    \        val visitedList4 = new mutable.ArrayList[Long]()\n        val visitedList5\
    \ = new mutable.ArrayList[Long]()\n        val visitedList6 = new mutable.ArrayList[Long]()\n\
    \        val visitedList7 = new mutable.ArrayList[Long]()\n        val visitedList8\
    \ = new mutable.ArrayList[Long]()\n        val visitedList9 = new mutable.ArrayList[Long]()\n\
    \        val visitedList10 = new mutable.ArrayList[Long]()\n        val visitedList11\
    \ = new mutable.ArrayList[Long]()\n        val visitedList12 = new mutable.ArrayList[Long]()\n\
    \        val visitedList13 = new mutable.ArrayList[Long]()\n        val visitedList14\
    \ = new mutable.ArrayList[Long]()\n        val visitedList15 = new mutable.ArrayList[Long]()\n\
    \        val visitedList16 = new mutable.ArrayList[Long]()\n        val visitedList17\
    \ = new mutable.ArrayList[Long]()\n        val visitedList18 = new mutable.ArrayList[Long]()\n\
    \        val visitedList19 = new mutable.ArrayList[Long]()\n        val visitedList20\
    \ = new mutable.ArrayList[Long]()\n        val visitedList21 = new mutable.ArrayList[Long]()\n\
    \        val visitedList22 = new mutable.ArrayList[Long]()\n        val visitedList23\
    \ = new mutable.ArrayList[Long]()\n        val visitedList24 = new mutable.ArrayList[Long]()\n\
    \        val visitedList25 = new mutable.ArrayList[Long]()\n        val visitedList26\
    \ = new mutable.ArrayList[Long]()\n        val visitedList27 = new mutable.ArrayList[Long]()\n\
    \        val visitedList28 = new mutable.ArrayList[Long]()\n        val visitedList29\
    \ = new mutable.ArrayList[Long]()\n        val visitedList30 = new mutable.ArrayList[Long]()\n\
    \        val visitedList31 = new mutable.ArrayList[Long]()\n        val visitedList32\
    \ = new mutable.ArrayList[Long", "        val n = grid.size\n        val m = grid(0).size\n\
    \        val lst_A = new Array[Long](k)\n        val lst_B = new Array[Long](k)\n\
    \        val lst_C = new Array[Long](k)\n        val lst_D = new Array[Long](k)\n\
    \        val lst_E = new Array[Long](k)\n        val lst_F = new Array[Long](k)\n\
    \        val lst_G = new Array[Long](k)\n        val lst_H = new Array[Long](k)\n\
    \        val lst_I = new Array[Long](k)\n        val lst_J = new Array[Long](k)\n\
    \        val lst_K = new Array[Long](k)\n        val lst_L = new Array[Long](k)\n\
    \        val lst_M = new Array[Long](k)\n        val lst_N = new Array[Long](k)\n\
    \        val lst_O = new Array[Long](k)\n        val lst_P = new Array[Long](k)\n\
    \        val lst_Q = new Array[Long](k)\n        val lst_R = new Array[Long](k)\n\
    \        val lst_S = new Array[Long](k)\n        val lst_T = new Array[Long](k)\n\
    \        val lst_U = new Array[Long](k)\n        val lst_V = new Array[Long](k)\n\
    \        val lst_W = new Array[Long](k)\n        val lst_X = new Array[Long](k)\n\
    \        val lst_Y = new Array[Long](k)\n        val lst_Z = new Array[Long](k)\n\
    \        val lst_AA = new Array[Long](k)\n        val lst_AB = new Array[Long](k)\n\
    \        val lst_AC = new Array[Long](k)\n        val lst_AD = new Array[Long](k)\n\
    \        val lst_AE = new Array[Long](k)\n        val lst_AF = new Array[Long](k)\n\
    \        val lst_AG = new Array[Long](k)\n        val lst_AH = new Array[Long](k)\n\
    \        val lst_AI = new Array[Long](k)\n        val lst_AJ = new Array[Long](k)\n\
    \        val lst_AK = new Array[Long](k)\n        val lst_AL = new Array[Long](k)\n\
    \        val lst_AM = new Array[Long](k)\n        val lst_AN = new Array[Long](k)\n\
    \        val lst_AO = new Array[Long](k)\n        val lst_AP = new ", "      \
    \  val n = grid.size\n        val m = grid(0).size\n        val visited = new\
    \ mutable.HashSet[Long]()\n        val ans = List[Long]()\n        val lst_A =\
    \ grid.map(_.toList)\n        val lst_B = grid.map(_.toList)\n        val lst_C\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_E = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_F = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_G\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_H = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_I = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_J = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_K\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_L = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_M = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_N = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_O\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_P = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_Q = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_R = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_S\
    \ = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_T = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_U = lst_A.zip(lst_B).map(x => (x._1, x._2))\n\
    \        val lst_V = lst_A.", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        var min = 0\n        var max\
    \ = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l\
    \ = 0\n        var m = 0\n        var n = 0\n        var p = 0\n        var q\
    \ = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u\
    \ = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y\
    \ = 0\n        var z = 0\n        var count = 0\n        var index = 0\n     \
    \   var index2 = 0\n        var index3 = 0\n        var index4 = 0\n        var\
    \ index5 = 0\n        var index6 = 0\n        var index7 = 0\n        var index8\
    \ = 0\n        var index9 = 0\n        var index10 = 0\n        var index11 =\
    \ 0\n        var index12 = 0\n        var index13 = 0\n        var index14 = 0\n\
    \        var index15 = 0\n        var index16 = 0\n        var index17 = 0\n \
    \       var index18 = 0\n        var index19 = 0\n        var index20 = 0\n  \
    \      var index21 = 0\n        var index22 = 0\n        var index23 = 0\n   \
    \     var index24 = 0\n        var index25 = 0\n        var index26 = 0\n    \
    \    var index27 = 0\n        var index28 = 0\n        var index29 = 0\n     \
    \   var index30 = 0\n        var index31 = 0\n        var index32 = 0\n      \
    \  var index33 = 0\n        var index34 = 0\n        var index35 = 0\n       \
    \ var index36 = 0\n        var index37 = 0\n        var index38 = 0\n        var\
    \ index39 = 0\n        var index40 = 0\n        var index41 = 0\n        var index42\
    \ = 0\n        var index43 = 0\n        var index44 = 0\n        var index45 =\
    \ 0\n        var index46 = 0\n        var index47 = 0\n        var index48 = 0\n\
    \        var index49 = 0\n        var index50 = 0\n        var index51 = 0\n \
    \       var index52 = 0\n        var index53 = 0\n        var index54 = 0\n  \
    \      var index55 = 0\n        var index56 = 0\n        var index57 = 0\n   \
    \     var index58 = 0\n        var index59 = 0\n        var index60 = 0\n    \
    \    var index61 = 0\n        var index62 = 0\n        var index63 = 0\n     \
    \   var index64 = 0\n        var index65 = 0\n        var index66 = 0\n      \
    \  var index67 = 0\n        var index68 = 0\n        var index69 = 0\n       \
    \ var index70 = 0\n        var index71 = 0\n        var index72 = 0\n        var\
    \ index73 = 0\n        var index74 = 0\n        var index75 = 0\n        var index76\
    \ = 0\n        var index77 = 0\n        var index78 = 0\n        var index79 =\
    \ 0\n        var index80 = 0\n        var index81 = 0\n        var index82 = 0\n\
    \        var index83", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val result = new Array[Long](k)\n        val visited = new Array[Boolean](k)\n\
    \        val visited_in = new Array[Boolean](k)\n        val visited_out = new\
    \ Array[Boolean](k)\n        val visited_in_out = new Array[Boolean](k)\n    \
    \    val visited_in_out_in = new Array[Boolean](k)\n        val visited_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in = new Array[Boolean](k)\n\
    \        val visited_in_out_in_out_in_out = new Array[Boolean](k)\n        val\
    \ visited_in_out_in_out_in_out_in = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in_out_in\
    \ = new Array[Boolean](k)\n        val visited_in_out_in_out_in_out_in_", "  \
    \      val N = grid.size\n        val m = grid.head\n        val n = grid.last\n\
    \        val lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => (x._1, x._2))\n        val lst_D\
    \ = lst_A.zip(lst_C).map(x => (x._1, x._2))\n        val lst_E = lst_D.zip(lst_C).map(x\
    \ => (x._1, x._2))\n        val lst_F = lst_E.zip(lst_C).map(x => (x._1, x._2))\n\
    \        val lst_G = lst_F.zip(lst_C).map(x => (x._1, x._2))\n        val lst_H\
    \ = lst_G.zip(lst_C).map(x => (x._1, x._2))\n        val lst_I = lst_H.zip(lst_C).map(x\
    \ => (x._1, x._2))\n        val lst_J = lst_I.zip(lst_C).map(x => (x._1, x._2))\n\
    \        val lst_K = lst_J.zip(lst_C).map(x => (x._1, x._2))\n        val lst_L\
    \ = lst_K.zip(lst_C).map(x => (x._1, x._2))\n        val lst_M = lst_L.zip(lst_C).map(x\
    \ => (x._1, x._2))\n        val lst_N = lst_M.zip(lst_C).map(x => (x._1, x._2))\n\
    \        val lst_O = lst_N.zip(lst_C).map(x => (x._1, x._2))\n        val lst_P\
    \ = lst_O.zip(lst_C).map(x => (x._1, x._2))\n        val lst_Q = lst_P.zip(lst_C).map(x\
    \ => (x._1, x._2))\n        val lst_R = lst_Q.zip(lst_C).map(x => (x._1, x._2))\n\
    \        val lst_S = lst_R.zip(lst_C).map(x => (x._1, x._2))\n        val lst_T\
    \ = lst_S.zip(lst_C).map(x => (x._1, x._2))\n        val lst_U = lst_T.zip(lst_C).map(x\
    \ => (x._1, x._2))\n        val lst_V = lst_U.zip(lst_C).map(x => (x._1, x._2))",
  "        val n = grid.size\n        val m = grid(0).size\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        val visited = new mutable.HashSet[Long]()\n\
    \        val visitedMap = new mutable.HashMap[Long, Boolean]()\n        val visitedMap2\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap3 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap4 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap5 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap6\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap7 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap8 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap9 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap10\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap11 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap12 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap13 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap14 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap15\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap16 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap17 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap18 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap19 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap20\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap21 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap22 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap23 = new mutable.HashMap[Long, Boolean]()\n        val\
    \ visitedMap24 = new mutable.HashMap[Long, Boolean]()\n        val visitedMap25\
    \ = new mutable.HashMap[Long, Boolean]()\n        val visitedMap26 = new mutable.HashMap[Long,\
    \ Boolean]()\n        val visitedMap27 = new mutable.HashMap[Long, Boolean]()\n\
    \        val visitedMap28 = new mutable.HashMap[Long, ", "        val N = grid.size\n\
    \        val m = grid.head\n        val n = grid.last\n        val lst_A = grid.map(_.toList)\n\
    \        val lst_B = grid.reverse.map(_.toList)\n        val lst_C = lst_A.zip(lst_B).map(x\
    \ => (x._1, x._2))\n        val lst_D = lst_A.zip(lst_C).map(x => (x._1, x._2))\n\
    \        val lst_E = lst_B.zip(lst_C).map(x => (x._1, x._2))\n        val lst_F\
    \ = lst_A.zip(lst_E).map(x => (x._1, x._2))\n        val lst_G = lst_A.zip(lst_F).map(x\
    \ => (x._1, x._2))\n        val lst_H = lst_A.zip(lst_G).map(x => (x._1, x._2))\n\
    \        val lst_I = lst_A.zip(lst_H).map(x => (x._1, x._2))\n        val lst_J\
    \ = lst_A.zip(lst_I).map(x => (x._1, x._2))\n        val lst_K = lst_A.zip(lst_J).map(x\
    \ => (x._1, x._2))\n        val lst_L = lst_A.zip(lst_K).map(x => (x._1, x._2))\n\
    \        val lst_M = lst_A.zip(lst_L).map(x => (x._1, x._2))\n        val lst_N\
    \ = lst_A.zip(lst_M).map(x => (x._1, x._2))\n        val lst_O = lst_A.zip(lst_N).map(x\
    \ => (x._1, x._2))\n        val lst_P = lst_A.zip(lst_O).map(x => (x._1, x._2))\n\
    \        val lst_Q = lst_A.zip(lst_P).map(x => (x._1, x._2))\n        val lst_R\
    \ = lst_A.zip(lst_Q).map(x => (x._1, x._2))\n        val lst_S = lst_A.zip(lst_R).map(x\
    \ => (x._1, x._2))\n        val lst_T = lst_A.zip(lst_S).map(x => (x._1, x._2))\n\
    \        val lst_U = lst_A.zip(lst_T).map(x => (x._1, x._2))\n        val lst_V\
    \ = lst_A.zip(lst_U).map(x => (x._1, x._2))\n        ", "        val N = grid.length\n\
    \        val M = grid(0).length\n        val lst_A = grid.map(_.toList).toList\n\
    \        val lst_B = grid.map(_.toList).toList\n        var i = 0\n        var\
    \ j = 0\n        var lst_C: List[Long] = Nil\n        var lst_D: List[Long] =\
    \ Nil\n        var lst_E: List[Long] = Nil\n        var lst_F: List[Long] = Nil\n\
    \        var lst_G: List[Long] = Nil\n        var lst_H: List[Long] = Nil\n  \
    \      var lst_I: List[Long] = Nil\n        var lst_J: List[Long] = Nil\n    \
    \    var lst_K: List[Long] = Nil\n        var lst_L: List[Long] = Nil\n      \
    \  var lst_M: List[Long] = Nil\n        var lst_N: List[Long] = Nil\n        var\
    \ lst_O: List[Long] = Nil\n        var lst_P: List[Long] = Nil\n        var lst_Q:\
    \ List[Long] = Nil\n        var lst_R: List[Long] = Nil\n        var lst_S: List[Long]\
    \ = Nil\n        var lst_T: List[Long] = Nil\n        var lst_U: List[Long] =\
    \ Nil\n        var lst_V: List[Long] = Nil\n        var lst_W: List[Long] = Nil\n\
    \        var lst_X: List[Long] = Nil\n        var lst_Y: List[Long] = Nil\n  \
    \      var lst_Z: List[Long] = Nil\n        var lst_AA: List[Long] = Nil\n   \
    \     var lst_AB: List[Long] = Nil\n        var lst_AC: List[Long] = Nil\n   \
    \     var lst_AD: List[Long] = Nil\n        var lst_AE: List[Long] = Nil\n   \
    \     var lst_AF: List[Long] = Nil\n        var lst_AG: List[Long] = Nil\n   \
    \     var lst_AH: List[Long] = Nil\n        var lst_AI: List[Long] = Nil\n   \
    \     var lst_AJ: List[Long] = Nil\n        var lst_AK: List[Long] = Nil\n   \
    \     var lst_AL: List[Long] = Nil\n        var lst_AM: List[Long] = Nil\n   \
    \     var lst_AN: List[Long] = Nil\n        var lst_AO: List[Long] = Nil\n   \
    \     var lst_AP: List[Long] = Nil\n        var lst_AQ: List[Long] = Nil\n   \
    \     var lst_AR: List[Long] = Nil\n        var lst_AS: List[Long] = Nil\n   \
    \     var lst_AT: List[Long] = Nil\n        var lst_AU: List[Long] = Nil\n   \
    \     var lst_AV: List[Long] = Nil\n        var lst_AW: List[", "        val N\
    \ = grid.size\n        val m = grid.head\n        val n = grid.last\n        val\
    \ lst_A = grid.map(_.toList)\n        val lst_B = grid.reverse.map(_.toList)\n\
    \        val lst_C = lst_A.zip(lst_B).map(x => x._1 < x._2)\n        val lst_D\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1)\n        val lst_E = lst_A.zip(lst_B).map(x\
    \ => x._1 < x._2 && x._2 < x._3)\n        val lst_F = lst_A.zip(lst_B).map(x =>\
    \ x._2 < x._1 && x._1 < x._3)\n        val lst_G = lst_A.zip(lst_B).map(x => x._1\
    \ < x._2 && x._2 < x._3 && x._3 < x._1)\n        val lst_H = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1 && x._1 < x._3 && x._3 < x._2)\n        val lst_I = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1 && x._1 < x._3 && x._3 < x._2 && x._4 < x._1)\n        val lst_J\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1 && x._1 < x._3 && x._3 < x._2 && x._4\
    \ < x._2)\n        val lst_K = lst_A.zip(lst_B).map(x => x._2 < x._1 && x._1 <\
    \ x._3 && x._3 < x._2 && x._4 < x._3)\n        val lst_L = lst_A.zip(lst_B).map(x\
    \ => x._2 < x._1 && x._1 < x._3 && x._3 < x._2 && x._4 < x._4)\n        val lst_M\
    \ = lst_A.zip(lst_B).map(x => x._2 < x._1 && x._1 < x._3 && x._3 < x._2 && x._4\
    \ < x._3 && x._1 < x._4)\n        val lst_N = lst_A.zip(lst_B).map(x => x._2 <\
    \ x._1 && x._1 < x._3 && x._3 < x._2 && x._4 < x._3 && x._2 < x._4)\n        val\
    \ lst_O = lst_A.zip(lst_B).map(x => x.", "        val grid = grid.toList\n   \
    \     val N = grid.size\n        val visited = new mutable.HashSet[Long]()\n \
    \       val ans = List[Long]()\n        val lst_A = grid.map(_.toList)\n     \
    \   val lst_B = grid.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)\n        val lst_K = lst_A.map(_.toList)\n\
    \        val lst_L = lst_A.map(_.toList)\n        val lst_M = lst_A.map(_.toList)\n\
    \        val lst_N = lst_A.map(_.toList)\n        val lst_O = lst_A.map(_.toList)\n\
    \        val lst_P = lst_A.map(_.toList)\n        val lst_Q = lst_A.map(_.toList)\n\
    \        val lst_R = lst_A.map(_.toList)\n        val lst_S = lst_A.map(_.toList)\n\
    \        val lst_T = lst_A.map(_.toList)\n        val lst_U = lst_A.map(_.toList)\n\
    \        val lst_V = lst_A.map(_.toList)\n        val lst_W = lst_A.map(_.toList)\n\
    \        val lst_X = lst_A.map(_.toList)\n        val lst_Y = lst_A.map(_.toList)\n\
    \        val lst_Z = lst_A.map(_.toList)\n        val lst_A = lst_A.map(_.toList)\n\
    \        val lst_B = lst_A.map(_.toList)\n        val lst_C = lst_A.map(_.toList)\n\
    \        val lst_D = lst_A.map(_.toList)\n        val lst_E = lst_A.map(_.toList)\n\
    \        val lst_F = lst_A.map(_.toList)\n        val lst_G = lst_A.map(_.toList)\n\
    \        val lst_H = lst_A.map(_.toList)\n        val lst_I = lst_A.map(_.toList)\n\
    \        val lst_J = lst_A.map(_.toList)", "        val m = grid.length\n    \
    \    val n = grid(0).length\n        val result = new Array[Long](k)\n       \
    \ var min = 0\n        var index = 0\n        var minIndex = 0\n        var minValue\
    \ = 0\n        var minValueIndex = 0\n        var minValueIndex2 = 0\n       \
    \ var minValueIndex3 = 0\n        var minValueIndex4 = 0\n        var minValueIndex5\
    \ = 0\n        var minValueIndex6 = 0\n        var minValueIndex7 = 0\n      \
    \  var minValueIndex8 = 0\n        var minValueIndex9 = 0\n        var minValueIndex10\
    \ = 0\n        var minValueIndex11 = 0\n        var minValueIndex12 = 0\n    \
    \    var minValueIndex13 = 0\n        var minValueIndex14 = 0\n        var minValueIndex15\
    \ = 0\n        var minValueIndex16 = 0\n        var minValueIndex17 = 0\n    \
    \    var minValueIndex18 = 0\n        var minValueIndex19 = 0\n        var minValueIndex20\
    \ = 0\n        var minValueIndex21 = 0\n        var minValueIndex22 = 0\n    \
    \    var minValueIndex23 = 0\n        var minValueIndex24 = 0\n        var minValueIndex25\
    \ = 0\n        var minValueIndex26 = 0\n        var minValueIndex27 = 0\n    \
    \    var minValueIndex28 = 0\n        var minValueIndex29 = 0\n        var minValueIndex30\
    \ = 0\n        var minValueIndex31 = 0\n        var minValueIndex32 = 0\n    \
    \    var minValueIndex33 = 0\n        var minValueIndex34 = 0\n        var minValueIndex35\
    \ = 0\n        var minValueIndex36 = 0\n        var minValueIndex37 = 0\n    \
    \    var minValueIndex38 = 0\n        var minValueIndex39 = 0\n        var minValueIndex40\
    \ = 0\n        var minValueIndex41 = 0\n        var minValueIndex42 = 0\n    \
    \    var minValueIndex43 = 0\n        var minValueIndex44 = 0\n        var minValueIndex45\
    \ = 0\n        var minValueIndex46 = 0\n        var minValueIndex47 = 0\n    \
    \    var minValueIndex48 = 0\n        var minValueIndex49 = 0\n        var minValueIndex50\
    \ = 0\n        var minValueIndex51 = 0\n        var minValueIndex52 = 0\n    \
    \    var minValueIndex53 = 0\n        var minValueIndex54 = 0\n        var minValueIndex55\
    \ = 0\n        var minValueIndex56 = 0\n        var minValueIndex57 = 0\n    \
    \    var minValueIndex58 = 0\n        var minValueIndex59 = 0\n        var minValueIndex60\
    \ = 0\n        var minValueIndex61 = 0\n        var minValueIndex62 = 0\n    \
    \    var minValueIndex63 = 0\n        var minValueIndex64 = 0\n        var minValueIndex65\
    \ = 0\n        var minValueIndex66 = 0\n        var minValueIndex67 = 0\n    \
    \    var minValue", "        val m = grid.length\n        val n = grid(0).length\n\
    \        val grid = grid.toList\n        val visited = new mutable.HashSet[Long]()\n\
    \        val ans = List[Long]()\n        val visitedAns = List[Long]()\n     \
    \   val visitedAnsSet = mutable.HashSet[Long]()\n        val visitedAnsSet2 =\
    \ mutable.HashSet[Long]()\n        val visitedAnsSet3 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet4 = mutable.HashSet[Long]()\n        val visitedAnsSet5\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet6 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet7 = mutable.HashSet[Long]()\n        val visitedAnsSet8\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet9 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet10 = mutable.HashSet[Long]()\n        val visitedAnsSet11\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet12 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet13 = mutable.HashSet[Long]()\n        val visitedAnsSet14\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet15 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet16 = mutable.HashSet[Long]()\n        val visitedAnsSet17\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet18 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet19 = mutable.HashSet[Long]()\n        val visitedAnsSet20\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet21 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet22 = mutable.HashSet[Long]()\n        val visitedAnsSet23\
    \ = mutable.HashSet[Long]()\n        val visitedAnsSet24 = mutable.HashSet[Long]()\n\
    \        val visitedAnsSet25 = mutable.HashSet[Long]()\n        val visitedAnsSet26\
    \ = mutable.HashSet[Long]()\n        val "]
stop_tokens:
- "\n    }\n"
