language: scala
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i+1)) {\n     \
    \           max(i) = arr(i)\n                i += 1\n            } else {\n  \
    \              max(i) = arr(i+1)\n                i += 1\n            }\n    \
    \    }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ujlvpy3.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0ujlvpy3.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) > arr(maxIndex)) {\n                maxList += arr(i)\n       \
    \         maxIndex = i\n            }\n        }\n        if (maxIndex < k) {\n\
    \            val newList = maxList.take(k - maxIndex)\n            val newList2\
    \ = maxList.drop(k - maxIndex)\n            val newList3 = newList.zip(newList2).map(x\
    \ => x._1 + x._2)\n            val newList4 = newList3.sortWith(_ > _)\n     \
    \       val newList5 = newList4.take(k).toList\n            val newList6 = newList4.drop(k).toList\n\
    \            val newList7 = newList5.zip(newList6).map(x => x._1 + x._2)\n   \
    \         val newList8 = newList7.sortWith(_ > _)\n            val newList9 =\
    \ newList8.take(k).toList\n            val newList10 = newList8.drop(k).toList\n\
    \            val newList11 = newList9.zip(newList10).map(x => x._1 + x._2)\n \
    \           val newList12 = newList11.sortWith(_ > _)\n            val newList13\
    \ = newList12.take(k).toList\n            val newList14 = newList12.drop(k).toList\n\
    \            val newList15 = newList13.zip(newList14).map(x => x._1 + x._2)\n\
    \            val newList16 = newList15.sortWith(_ > _)\n            val newList17\
    \ = newList16.take(k).toList\n            val newList18 = newList16.drop(k).toList\n\
    \            val newList19 = newList17.zip(newList18).map(x => x._1 + x._2)\n\
    \            val newList20 = newList19.sortWith(_ > _)\n            val newList21\
    \ = newList20.take(k).toList\n            val newList22 = newList20.drop(k).toList\n\
    \            val newList23 = newList21.zip(newList22).map(x => x._1 + x._2)\n\
    \            val newList24 = newList23.sortWith(_ > _)\n            val newList25\
    \ = newList24.take(k).toList\n            val newList26 = newList24.drop(k).toList\n\
    \            val newList27 = newList25.zip(newList26).map(x => x._1 + x._2)\n\
    \            val newList28 = newList27.sortWith(_ > _)\n            val newList29\
    \ = newList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdle5jv4y.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdle5jv4y.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdle5jv4y.scala:73:1\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpdle5jv4y.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val len = arr.length\n        val maxLen = k\n        val minLen = k\n\
    \        val maxIndex = arr.length - 1\n        val minIndex = arr.length - 1\n\
    \        val maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n\
    \        val maxIndexInt = maxIndex.toInt\n        val minIndexInt = minIndex.toInt\n\
    \        val maxValueInt = maxValue.toInt\n        val minValueInt = minValue.toInt\n\
    \        val maxLenInt = maxLen.toInt\n        val minLenInt = minLen.toInt\n\
    \        val maxIndexLong = maxIndex.toLong\n        val minIndexLong = minIndex.toLong\n\
    \        val maxValueLong = maxValue.toLong\n        val minValueLong = minValue.toLong\n\
    \        val maxLenLong = maxLen.toLong\n        val minLenLong = minLen.toLong\n\
    \        val maxIndexDouble = maxIndex.toDouble\n        val minIndexDouble =\
    \ minIndex.toDouble\n        val maxValueDouble = maxValue.toDouble\n        val\
    \ minValueDouble = minValue.toDouble\n        val maxLenDouble = maxLen.toDouble\n\
    \        val minLenDouble = minLen.toDouble\n        val maxIndexFloat = maxIndex.toFloat\n\
    \        val minIndexFloat = minIndex.toFloat\n        val maxValueFloat = maxValue.toFloat\n\
    \        val minValueFloat = minValue.toFloat\n        val maxLenFloat = maxLen.toFloat\n\
    \        val minLenFloat = minLen.toFloat\n        val maxIndexInt = maxIndex.toInt\n\
    \        val minIndexInt = minIndex.toInt\n        val maxValueInt = maxValue.toInt\n\
    \        val minValueInt = minValue.toInt\n        val maxLenInt = maxLen.toInt\n\
    \        val minLenInt = minLen.toInt\n        val maxIndexLong = maxIndex.toLong\n\
    \        val minIndexLong = minIndex.toLong\n        val maxValueLong = maxValue.toLong\n\
    \        val minValueLong = minValue.toLong\n        val maxLenLong = maxLen.toLong\n\
    \        val minLenLong = minLen.toLong\n        val maxIndexDouble = maxIndex.toDouble\n\
    \        val minIndexDouble = minIndex.toDouble\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppqxzrqzi.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppqxzrqzi.scala:54:12 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInt\e[0m = maxIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndexInt is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInt\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppqxzrqzi.scala:55:12 ---------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndexInt\e[0m = minIndex.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndexInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndexInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppqxzrqzi.scala:56:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueInt\e[0m = maxValue.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValueInt is already defined as \e[33mvalue\e[0m \e[35mmaxValueInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppqxzrqzi.scala:57:12 ---------------------------\e[0m\e[0m\n\e\
    [31m57 |\e[0m        \e[33mval\e[0m \e[36mminValueInt\e[0m = minValue.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mminValueInt is already defined as \e[33mvalue\e[0m \e[35mminValueInt\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp586lb29w.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp586lb29w.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp586lb29w.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.size\n        val max = arr.max\n        val maxIndex = arr.indexWhere(x\
    \ => x == max)\n        val maxIndex = maxIndex.min(k)\n        val maxList =\
    \ arr.take(maxIndex)\n        val maxList2 = arr.drop(maxIndex)\n        val maxList3\
    \ = arr.takeRight(maxIndex)\n        val maxList4 = arr.dropRight(maxIndex)\n\
    \        val maxList5 = arr.take(maxIndex).takeRight(k)\n        val maxList6\
    \ = arr.takeRight(maxIndex).take(k)\n        val maxList7 = arr.takeRight(maxIndex).takeRight(k).take(k)\n\
    \        val maxList8 = arr.takeRight(maxIndex).takeRight(k).takeRight(k)\n  \
    \      val maxList9 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList10 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList11 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList12 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList13 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList14 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList15 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList16 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList17 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList18 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList19 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp76yx516v.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp76yx516v.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.min(k)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp76yx516v.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76yx516v.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n \
    \       val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n   \
    \     val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n  \
    \      val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n   \
    \     val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n     \
    \   val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n    \
    \    val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n     \
    \   val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n       \
    \ val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n      \
    \  val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n       \
    \ val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLength = arr.length\n        val maxIndex =\
    \ arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val maxLength\
    \ = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue =\
    \ arr(maxIndex)\n        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n\
    \        val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n  \
    \      val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n \
    \       val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n  \
    \      val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n    \
    \    val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n   \
    \     val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n      \
    \  val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n     \
    \   val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n      \
    \  val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLength = arr.length\n        val maxIndex =\
    \ arr.indexOfMax\n        val maxValue = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkp1w2pl2.scala:83:22 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpkp1w2pl2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = arr.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkp1w2pl2.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = arr.indexOfMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkp1w2pl2.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkp1w2pl2.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLength\e[0m = arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = 0L\n        var index = 0\n        while\
    \ (index < len) {\n            if (arr(index) > maxValue) {\n                maxValue\
    \ = arr(index)\n                maxIndex = index\n            }\n            index\
    \ += 1\n        }\n        val result = new Array[Long](k)\n        for (i <-\
    \ 0 until k) {\n            result(i) = arr(maxIndex + i)\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz3ilwyzr.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz3ilwyzr.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ilwyzr.scala:33:37\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz3ilwyzr.scala:34:26 --------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ilwyzr.scala:37:8\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available "
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        arr.tail.foreach(x => {\n          \
    \  if (x > maxValue) {\n                maxValue = x\n            }\n        })\n\
    \        val maxListSize = arr.size - k\n        val maxListIndex = (maxListSize\
    \ - 1) / 2\n        val maxListValue = maxList[maxListIndex]\n        val maxListIndex\
    \ = maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n \
    \       val maxListValue = maxList[maxListIndex]\n        val maxListIndex = maxListIndex\
    \ + 1\n        val maxListSize = maxListSize - maxListIndex\n        val maxListValue\
    \ = maxList[maxListIndex]\n        val maxListIndex = maxListIndex + 1\n     \
    \   val maxListSize = maxListSize - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n\
    \        val maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize\
    \ - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n        val\
    \ maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n\
    \        val maxListValue = maxList[maxListIndex]\n        val maxListIndex =\
    \ maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n   \
    \     val maxListValue = maxList[maxListIndex]\n        val maxListIndex = maxListIndex\
    \ + 1\n        val maxListSize = maxListSize - maxListIndex\n        val maxListValue\
    \ = maxList[maxListIndex]\n        val maxListIndex = maxListIndex + 1\n     \
    \   val maxListSize = maxListSize - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n\
    \        val maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize\
    \ - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n        val\
    \ maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n\
    \        val maxListValue = maxList[maxListIndex]\n        val maxListIndex =\
    \ maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n   \
    \     val maxListValue = maxList[maxListIndex]\n        val maxListIndex = maxListIndex\
    \ + 1\n        val maxListSize = maxListSize - maxListIndex\n        val maxListValue\
    \ = maxList[maxListIndex]\n        val maxListIndex = maxListIndex + 1\n     \
    \   val maxListSize = maxListSize - maxListIndex\n        val maxListValue = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq0k4xw6a.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxListIndex\e[0m = maxListIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = maxListSize - maxListIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListSize is already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxListValue\e[0m = maxList[\e[35mmaxListIndex\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListValue is already defined as \e[33mvalue\e[0m \e[35mmaxListValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxListIndex\e[0m = maxListIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = maxListSize - maxListIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = arr(0)\n        for(i <- 0 until len) {\n\
    \            val curVal = arr(i)\n            if(curVal > maxVal) {\n        \
    \        maxVal = curVal\n                maxIndex = i\n            }\n      \
    \  }\n        val res = new Array[Long](k)\n        for(i <- 0 until k) {\n  \
    \          res(i) = arr(maxIndex + i)\n        }\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp93ahyukr.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp93ahyukr.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93ahyukr.scala:32:34\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp93ahyukr.scala:33:25 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93ahyukr.scala:36:8 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-exp"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnd7o4uif.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnd7o4uif.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd7o4uif.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnd7o4uif.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnd7o4uif.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd7o4uif.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            val cur = arr(i)\n            if (max.size < k) {\n\
    \                max += cur\n            } else if (cur > max.head) {\n      \
    \          max += cur\n            }\n        }\n        for (i <- 0 until k)\
    \ {\n            result += max.dequeue()\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jtm2hui.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jtm2hui.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2jtm2hui.scala:30:26 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until len) {\n\
    \            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        val result = new\
    \ Array[Long](k)\n        for(i <- 0 until k) {\n            result(i) = arr(maxIndex\
    \ + i)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4kcexlbv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:31:37\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4kcexlbv.scala:32:25 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:35:8 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList2 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList3 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList4 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList5 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList6 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList7 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList8 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList9 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList10 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList11 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList12 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList13 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList14 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList15 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList16 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList17 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList18 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7kn6xyu8.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7kn6xyu8.scala:20:31 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxList\e[0m = arr.take(k).foldLeft(List[\e[35mLong\e\
    [0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e[31m  \
    \ |\e[0m                               ^\e[0m\n\e[31m   |\e[0m               \
    \                Found:    (k : Long)\n\e[31m   |\e[0m                       \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7kn6xyu8.scala:20:76\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxList\e[0m = arr.take(k).foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e\
    [0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e[31m   |\e[0m             \
    \                                                               ^^^\e[0m\n\e[31m\
    \   |\e[0m                                      \e[33mvalue\e[0m \e[35mmax\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7kn6xyu8.scala:21:32 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e[0m = arr.take(k).foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp7kn6xyu8.scala:21:77 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e[0m = arr.take(k).foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e\
    [31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).toList\n\
    \        val maxNumsSet = maxNums.toSet\n        val maxNumsSetLen = maxNumsSet.size\n\
    \        val maxNumsSetSet = maxNumsSet.toSet\n        val maxNumsSetSetLen =\
    \ maxNumsSetSet.size\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSet = maxNumsSetSet.toSet\n        val maxNumsSetSetSetLen\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen\
    \ * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n     \
    \   val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val\
    \ maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen\
    \ * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n     \
    \   val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val\
    \ maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen\
    \ * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n     \
    \   val maxNumsSetSetSetLen = maxNumsSetSetLen * max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m--"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr.head\n        var maxIndex = -1\n        var i = 0\n\
    \        while (i < arr.length) {\n            if (arr(i) > maxNum) {\n      \
    \          maxNum = arr(i)\n                maxIndex = i\n            }\n    \
    \        i += 1\n        }\n        if (maxIndex == -1) {\n            maxIndex\
    \ = arr.length\n        }\n        val maxList = arr.take(maxIndex - k).reverse.take(k).reverse\n\
    \        maxList.foreach(maxList.append)\n        return maxList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn2hnx7f0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = arr.take(maxIndex\
    \ - k).reverse.take(k).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpn2hnx7f0.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcn1bcjqo.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpcn1bcjqo.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcn1bcjqo.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn1bcjqo.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn1bcjqo.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcn1bcjqo.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(_ > 0)\n        val maxValue = arr(maxIndex)\n        val maxIndexList\
    \ = arr.indexWhere(_ == maxValue)\n        val maxIndexListLength = maxIndexList.length\n\
    \        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:31:12 ---------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        for(i <- 1 until maxLength) {\n            if(arr(i) > maxValue)\
    \ {\n                maxValue = arr(i)\n            }\n        }\n        maxList\
    \ += maxValue\n        for(i <- 1 until maxK) {\n            val value = arr(i)\n\
    \            val index = arr.indexOf(value)\n            val newValue = arr(index\
    \ - 1)\n            if(newValue > maxValue) {\n                maxValue = newValue\n\
    \            }\n            maxList += maxValue\n        }\n        return maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6rt6mdn.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpa6rt6mdn.scala:26:25 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6rt6mdn.scala:30:25\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m until maxK) {\n\e[31m\e[31m   |\e[0m                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (maxK : Long)\n\e[31m \
    \  |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpa6rt6mdn.scala:35:25 -----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                maxValue = newValue\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793951
