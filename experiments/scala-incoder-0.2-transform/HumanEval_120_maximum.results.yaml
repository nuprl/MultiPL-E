language: scala
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i+1)) {\n     \
    \           max(i) = arr(i)\n                i += 1\n            } else {\n  \
    \              max(i) = arr(i+1)\n                i += 1\n            }\n    \
    \    }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ujlvpy3.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0ujlvpy3.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        for (i <- 0 until arr.length) {\n         \
    \   if (arr(i) > arr(maxIndex)) {\n                maxList += arr(i)\n       \
    \         maxIndex = i\n            }\n        }\n        if (maxIndex < k) {\n\
    \            val newList = maxList.take(k - maxIndex)\n            val newList2\
    \ = maxList.drop(k - maxIndex)\n            val newList3 = newList.zip(newList2).map(x\
    \ => x._1 + x._2)\n            val newList4 = newList3.sortWith(_ > _)\n     \
    \       val newList5 = newList4.take(k).toList\n            val newList6 = newList4.drop(k).toList\n\
    \            val newList7 = newList5.zip(newList6).map(x => x._1 + x._2)\n   \
    \         val newList8 = newList7.sortWith(_ > _)\n            val newList9 =\
    \ newList8.take(k).toList\n            val newList10 = newList8.drop(k).toList\n\
    \            val newList11 = newList9.zip(newList10).map(x => x._1 + x._2)\n \
    \           val newList12 = newList11.sortWith(_ > _)\n            val newList13\
    \ = newList12.take(k).toList\n            val newList14 = newList12.drop(k).toList\n\
    \            val newList15 = newList13.zip(newList14).map(x => x._1 + x._2)\n\
    \            val newList16 = newList15.sortWith(_ > _)\n            val newList17\
    \ = newList16.take(k).toList\n            val newList18 = newList16.drop(k).toList\n\
    \            val newList19 = newList17.zip(newList18).map(x => x._1 + x._2)\n\
    \            val newList20 = newList19.sortWith(_ > _)\n            val newList21\
    \ = newList20.take(k).toList\n            val newList22 = newList20.drop(k).toList\n\
    \            val newList23 = newList21.zip(newList22).map(x => x._1 + x._2)\n\
    \            val newList24 = newList23.sortWith(_ > _)\n            val newList25\
    \ = newList24.take(k).toList\n            val newList26 = newList24.drop(k).toList\n\
    \            val newList27 = newList25.zip(newList26).map(x => x._1 + x._2)\n\
    \            val newList28 = newList27.sortWith(_ > _)\n            val newList29\
    \ = newList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdle5jv4y.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdle5jv4y.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdle5jv4y.scala:73:1\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpdle5jv4y.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val len = arr.length\n        val maxLen = k\n        val minLen = k\n\
    \        val maxIndex = arr.length - 1\n        val minIndex = arr.length - 1\n\
    \        val maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n\
    \        val maxIndexInt = maxIndex.toInt\n        val minIndexInt = minIndex.toInt\n\
    \        val maxValueInt = maxValue.toInt\n        val minValueInt = minValue.toInt\n\
    \        val maxLenInt = maxLen.toInt\n        val minLenInt = minLen.toInt\n\
    \        val maxIndexLong = maxIndex.toLong\n        val minIndexLong = minIndex.toLong\n\
    \        val maxValueLong = maxValue.toLong\n        val minValueLong = minValue.toLong\n\
    \        val maxLenLong = maxLen.toLong\n        val minLenLong = minLen.toLong\n\
    \        val maxIndexDouble = maxIndex.toDouble\n        val minIndexDouble =\
    \ minIndex.toDouble\n        val maxValueDouble = maxValue.toDouble\n        val\
    \ minValueDouble = minValue.toDouble\n        val maxLenDouble = maxLen.toDouble\n\
    \        val minLenDouble = minLen.toDouble\n        val maxIndexFloat = maxIndex.toFloat\n\
    \        val minIndexFloat = minIndex.toFloat\n        val maxValueFloat = maxValue.toFloat\n\
    \        val minValueFloat = minValue.toFloat\n        val maxLenFloat = maxLen.toFloat\n\
    \        val minLenFloat = minLen.toFloat\n        val maxIndexInt = maxIndex.toInt\n\
    \        val minIndexInt = minIndex.toInt\n        val maxValueInt = maxValue.toInt\n\
    \        val minValueInt = minValue.toInt\n        val maxLenInt = maxLen.toInt\n\
    \        val minLenInt = minLen.toInt\n        val maxIndexLong = maxIndex.toLong\n\
    \        val minIndexLong = minIndex.toLong\n        val maxValueLong = maxValue.toLong\n\
    \        val minValueLong = minValue.toLong\n        val maxLenLong = maxLen.toLong\n\
    \        val minLenLong = minLen.toLong\n        val maxIndexDouble = maxIndex.toDouble\n\
    \        val minIndexDouble = minIndex.toDouble\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppqxzrqzi.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppqxzrqzi.scala:54:12 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexInt\e[0m = maxIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndexInt is already defined as \e[33mvalue\e[0m \e[35mmaxIndexInt\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppqxzrqzi.scala:55:12 ---------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndexInt\e[0m = minIndex.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndexInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndexInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppqxzrqzi.scala:56:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueInt\e[0m = maxValue.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValueInt is already defined as \e[33mvalue\e[0m \e[35mmaxValueInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppqxzrqzi.scala:57:12 ---------------------------\e[0m\e[0m\n\e\
    [31m57 |\e[0m        \e[33mval\e[0m \e[36mminValueInt\e[0m = minValue.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mminValueInt is already defined as \e[33mvalue\e[0m \e[35mminValueInt\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp586lb29w.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp586lb29w.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp586lb29w.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.size\n        val max = arr.max\n        val maxIndex = arr.indexWhere(x\
    \ => x == max)\n        val maxIndex = maxIndex.min(k)\n        val maxList =\
    \ arr.take(maxIndex)\n        val maxList2 = arr.drop(maxIndex)\n        val maxList3\
    \ = arr.takeRight(maxIndex)\n        val maxList4 = arr.dropRight(maxIndex)\n\
    \        val maxList5 = arr.take(maxIndex).takeRight(k)\n        val maxList6\
    \ = arr.takeRight(maxIndex).take(k)\n        val maxList7 = arr.takeRight(maxIndex).takeRight(k).take(k)\n\
    \        val maxList8 = arr.takeRight(maxIndex).takeRight(k).takeRight(k)\n  \
    \      val maxList9 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList10 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList11 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList12 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList13 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList14 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList15 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList16 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList17 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).take(k)\n\
    \        val maxList18 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k).takeRight(k)\n\
    \        val maxList19 = arr.takeRight(maxIndex).takeRight(k).takeRight(k).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp76yx516v.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp76yx516v.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.min(k)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp76yx516v.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76yx516v.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n \
    \       val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n   \
    \     val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n  \
    \      val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n   \
    \     val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n     \
    \   val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n    \
    \    val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n     \
    \   val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n       \
    \ val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n      \
    \  val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n       \
    \ val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLength = arr.length\n        val maxIndex =\
    \ arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val maxLength\
    \ = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue =\
    \ arr(maxIndex)\n        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n\
    \        val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n  \
    \      val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n \
    \       val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n  \
    \      val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n    \
    \    val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n   \
    \     val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n      \
    \  val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n     \
    \   val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n      \
    \  val maxValue = arr(maxIndex)\n        val maxLength = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLength = arr.length\n        val maxIndex =\
    \ arr.indexOfMax\n        val maxValue = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkp1w2pl2.scala:83:22 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpkp1w2pl2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = arr.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkp1w2pl2.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = arr.indexOfMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkp1w2pl2.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkp1w2pl2.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLength\e[0m = arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = 0L\n        var index = 0\n        while\
    \ (index < len) {\n            if (arr(index) > maxValue) {\n                maxValue\
    \ = arr(index)\n                maxIndex = index\n            }\n            index\
    \ += 1\n        }\n        val result = new Array[Long](k)\n        for (i <-\
    \ 0 until k) {\n            result(i) = arr(maxIndex + i)\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz3ilwyzr.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz3ilwyzr.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ilwyzr.scala:33:37\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz3ilwyzr.scala:34:26 --------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ilwyzr.scala:37:8\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available "
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        arr.tail.foreach(x => {\n          \
    \  if (x > maxValue) {\n                maxValue = x\n            }\n        })\n\
    \        val maxListSize = arr.size - k\n        val maxListIndex = (maxListSize\
    \ - 1) / 2\n        val maxListValue = maxList[maxListIndex]\n        val maxListIndex\
    \ = maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n \
    \       val maxListValue = maxList[maxListIndex]\n        val maxListIndex = maxListIndex\
    \ + 1\n        val maxListSize = maxListSize - maxListIndex\n        val maxListValue\
    \ = maxList[maxListIndex]\n        val maxListIndex = maxListIndex + 1\n     \
    \   val maxListSize = maxListSize - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n\
    \        val maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize\
    \ - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n        val\
    \ maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n\
    \        val maxListValue = maxList[maxListIndex]\n        val maxListIndex =\
    \ maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n   \
    \     val maxListValue = maxList[maxListIndex]\n        val maxListIndex = maxListIndex\
    \ + 1\n        val maxListSize = maxListSize - maxListIndex\n        val maxListValue\
    \ = maxList[maxListIndex]\n        val maxListIndex = maxListIndex + 1\n     \
    \   val maxListSize = maxListSize - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n\
    \        val maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize\
    \ - maxListIndex\n        val maxListValue = maxList[maxListIndex]\n        val\
    \ maxListIndex = maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n\
    \        val maxListValue = maxList[maxListIndex]\n        val maxListIndex =\
    \ maxListIndex + 1\n        val maxListSize = maxListSize - maxListIndex\n   \
    \     val maxListValue = maxList[maxListIndex]\n        val maxListIndex = maxListIndex\
    \ + 1\n        val maxListSize = maxListSize - maxListIndex\n        val maxListValue\
    \ = maxList[maxListIndex]\n        val maxListIndex = maxListIndex + 1\n     \
    \   val maxListSize = maxListSize - maxListIndex\n        val maxListValue = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq0k4xw6a.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxListIndex\e[0m = maxListIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = maxListSize - maxListIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListSize is already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxListValue\e[0m = maxList[\e[35mmaxListIndex\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListValue is already defined as \e[33mvalue\e[0m \e[35mmaxListValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxListIndex\e[0m = maxListIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq0k4xw6a.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = maxListSize - maxListIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = arr(0)\n        for(i <- 0 until len) {\n\
    \            val curVal = arr(i)\n            if(curVal > maxVal) {\n        \
    \        maxVal = curVal\n                maxIndex = i\n            }\n      \
    \  }\n        val res = new Array[Long](k)\n        for(i <- 0 until k) {\n  \
    \          res(i) = arr(maxIndex + i)\n        }\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp93ahyukr.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp93ahyukr.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93ahyukr.scala:32:34\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mres\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp93ahyukr.scala:33:25 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93ahyukr.scala:36:8 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        res\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    (res : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-exp"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnd7o4uif.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnd7o4uif.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd7o4uif.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnd7o4uif.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnd7o4uif.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd7o4uif.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            val cur = arr(i)\n            if (max.size < k) {\n\
    \                max += cur\n            } else if (cur > max.head) {\n      \
    \          max += cur\n            }\n        }\n        for (i <- 0 until k)\
    \ {\n            result += max.dequeue()\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jtm2hui.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jtm2hui.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2jtm2hui.scala:30:26 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                          ^\e[0m\n\e[31m   |\e[0m                         \
    \ Found:    (k : Long)\n\e[31m   |\e[0m                          Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until len) {\n\
    \            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        val result = new\
    \ Array[Long](k)\n        for(i <- 0 until k) {\n            result(i) = arr(maxIndex\
    \ + i)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4kcexlbv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:31:37\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4kcexlbv.scala:32:25 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:35:8 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList2 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList3 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList4 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList5 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList6 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList7 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList8 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList9 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList10 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList11 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList12 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList13 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList14 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList15 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList16 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList17 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val maxList18 = arr.take(k).foldLeft(List[Long]())((acc,\
    \ x) => acc :+ max(acc, x))\n        val max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7kn6xyu8.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7kn6xyu8.scala:20:31 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxList\e[0m = arr.take(k).foldLeft(List[\e[35mLong\e\
    [0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e[31m  \
    \ |\e[0m                               ^\e[0m\n\e[31m   |\e[0m               \
    \                Found:    (k : Long)\n\e[31m   |\e[0m                       \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7kn6xyu8.scala:20:76\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxList\e[0m = arr.take(k).foldLeft(List[\e[35mLong\e[0m]())((\e[36macc\e\
    [0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e[31m   |\e[0m             \
    \                                                               ^^^\e[0m\n\e[31m\
    \   |\e[0m                                      \e[33mvalue\e[0m \e[35mmax\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7kn6xyu8.scala:21:32 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e[0m = arr.take(k).foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp7kn6xyu8.scala:21:77 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e[0m = arr.take(k).foldLeft(List[\e\
    [35mLong\e[0m]())((\e[36macc\e[0m, \e[36mx\e[0m) => acc :+ max(acc, x))\n\e[31m\e\
    [31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).toList\n\
    \        val maxNumsSet = maxNums.toSet\n        val maxNumsSetLen = maxNumsSet.size\n\
    \        val maxNumsSetSet = maxNumsSet.toSet\n        val maxNumsSetSetLen =\
    \ maxNumsSetSet.size\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSet = maxNumsSetSet.toSet\n        val maxNumsSetSetSetLen\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen\
    \ * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n     \
    \   val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val\
    \ maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen\
    \ * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n     \
    \   val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val\
    \ maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen\
    \ * maxNumsSetSetLen\n        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n\
    \        val maxNumsSetSetSetLen = maxNumsSetSetLen * maxNumsSetSetLen\n     \
    \   val maxNumsSetSetSetLen = maxNumsSetSetLen * max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5w29irp9.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsSetSetSetLen\e[0m\
    \ = maxNumsSetSetLen * maxNumsSetSetLen\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsSetSetSetLen is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxNumsSetSetSetLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m--"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr.head\n        var maxIndex = -1\n        var i = 0\n\
    \        while (i < arr.length) {\n            if (arr(i) > maxNum) {\n      \
    \          maxNum = arr(i)\n                maxIndex = i\n            }\n    \
    \        i += 1\n        }\n        if (maxIndex == -1) {\n            maxIndex\
    \ = arr.length\n        }\n        val maxList = arr.take(maxIndex - k).reverse.take(k).reverse\n\
    \        maxList.foreach(maxList.append)\n        return maxList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn2hnx7f0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = arr.take(maxIndex\
    \ - k).reverse.take(k).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpn2hnx7f0.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Long]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap4 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap8 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap12 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap16 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap20 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap24 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap28 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcn1bcjqo.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpcn1bcjqo.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcn1bcjqo.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn1bcjqo.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcn1bcjqo.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcn1bcjqo.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(_ > 0)\n        val maxValue = arr(maxIndex)\n        val maxIndexList\
    \ = arr.indexWhere(_ == maxValue)\n        val maxIndexListLength = maxIndexList.length\n\
    \        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc4wli2nm.scala:31:12 ---------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        for(i <- 1 until maxLength) {\n            if(arr(i) > maxValue)\
    \ {\n                maxValue = arr(i)\n            }\n        }\n        maxList\
    \ += maxValue\n        for(i <- 1 until maxK) {\n            val value = arr(i)\n\
    \            val index = arr.indexOf(value)\n            val newValue = arr(index\
    \ - 1)\n            if(newValue > maxValue) {\n                maxValue = newValue\n\
    \            }\n            maxList += maxValue\n        }\n        return maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6rt6mdn.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpa6rt6mdn.scala:26:25 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6rt6mdn.scala:30:25\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m1\e[0m until maxK) {\n\e[31m\e[31m   |\e[0m                         ^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    (maxK : Long)\n\e[31m \
    \  |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpa6rt6mdn.scala:35:25 -----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                maxValue = newValue\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNums\
    \ = arr.take(maxNumIndex + 1 - k)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNums)\n        val maxNumsIndex = maxNumsIndex - k\n        arr.take(maxNumsIndex\
    \ + 1).sortBy(x => x)\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96vnh2ed.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp96vnh2ed.scala:22:31 --------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e[0m = arr.take(maxNumIndex\
    \ + \e[31m1\e[0m - k)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    Long\n\e[31m   |\e\
    [0m                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp96vnh2ed.scala:23:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = arr.indexWhere(\e\
    [36mx\e[0m => x == maxNums)\n\e[31m\e[31m   |\e[0m                           \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types Long\
    \ and List[Long] cannot be compared with == or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val maxList = arr.take(k)\n        val maxLen\
    \ = maxList.length\n        val maxList = maxList.toList\n        val maxLen =\
    \ maxList.length\n        val maxList = maxList.toList\n        val maxLen = maxList.length\n\
    \        val maxList = maxList.toList\n        val maxLen = maxList.length\n \
    \       val maxList = maxList.toList\n        val maxLen = maxList.length\n  \
    \      val maxList = maxList.toList\n        val maxLen = maxList.length\n   \
    \     val maxList = maxList.toList\n        val maxLen = maxList.length\n    \
    \    val maxList = maxList.toList\n        val maxLen = maxList.length\n     \
    \   val maxList = maxList.toList\n        val maxLen = maxList.length\n      \
    \  val maxList = maxList.toList\n        val maxLen = maxList.length\n       \
    \ val maxList = maxList.toList\n        val maxLen = maxList.length\n        val\
    \ maxList = maxList.toList\n        val maxLen = maxList.length\n        val maxList\
    \ = maxList.toList\n        val maxLen = maxList.length\n        val maxList =\
    \ maxList.toList\n        val maxLen = maxList.length\n        val maxList = maxList.toList\n\
    \        val maxLen = maxList.length\n        val maxList = maxList.toList\n \
    \       val maxLen = maxList.length\n        val maxList = maxList.toList\n  \
    \      val maxLen = maxList.length\n        val maxList = maxList.toList\n   \
    \     val maxLen = maxList.length\n        val maxList = maxList.toList\n    \
    \    val maxLen = maxList.length\n        val maxList = maxList.toList\n     \
    \   val maxLen = maxList.length\n        val maxList = maxList.toList\n      \
    \  val maxLen = maxList.length\n        val maxList = maxList.toList\n       \
    \ val maxLen = maxList.length\n        val maxList = maxList.toList\n        val\
    \ maxLen = maxList.length\n        val maxList = maxList.toList\n        val maxLen\
    \ = maxList.length\n        val maxList = maxList.toList\n        val maxLen =\
    \ maxList.length\n        val maxList = maxList.toList\n        val maxLen = maxList.length\n\
    \        val maxList = maxList.toList\n        val maxLen = maxList.length\n \
    \       val maxList = maxList.toList\n        val maxLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpksqy8l9b.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpksqy8l9b.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxList\e[0m = maxList.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpksqy8l9b.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxLen\e[0m = maxList.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLen is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxLen\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpksqy8l9b.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxList\e[0m = maxList.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpksqy8l9b.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLen\e[0m = maxList.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLen is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxLen\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpksqy8l9b.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxList\e[0m = maxList.toList\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = arr.head\n        var i = 0\n        while (i < arr.length)\
    \ {\n            if (arr(i) > maxNum) {\n                maxNum = arr(i)\n   \
    \         }\n            i += 1\n        }\n        val maxListSize = arr.size\
    \ - 1\n        val maxListIndex = maxListSize - k\n        if (maxListIndex >=\
    \ 0) {\n            maxList += maxNum\n            val maxListIndex = maxListSize\
    \ - k\n            for (i <- 0 until maxListIndex) {\n                maxList\
    \ += arr(i)\n            }\n        }\n        maxList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehgn04ny.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpehgn04ny.scala:34:30 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until maxListIndex)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              Found:    (maxListIndex : Long)\n\e\
    [31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.size\n       \
    \ val m = arr.max\n        val maxList = new Array[Long](k)\n        var i = 0\n\
    \        var j = 0\n        var max = 0\n        while (i < n) {\n           \
    \ if (max < arr(i)) {\n                max = arr(i)\n                maxList(0)\
    \ = arr(i)\n                maxList(1) = arr(i)\n                maxList(2) =\
    \ arr(i)\n                maxList(3) = arr(i)\n                maxList(4) = arr(i)\n\
    \                maxList(5) = arr(i)\n                maxList(6) = arr(i)\n  \
    \              maxList(7) = arr(i)\n                maxList(8) = arr(i)\n    \
    \            maxList(9) = arr(i)\n                maxList(10) = arr(i)\n     \
    \           maxList(11) = arr(i)\n                maxList(12) = arr(i)\n     \
    \           maxList(13) = arr(i)\n                maxList(14) = arr(i)\n     \
    \           maxList(15) = arr(i)\n                maxList(16) = arr(i)\n     \
    \           maxList(17) = arr(i)\n                maxList(18) = arr(i)\n     \
    \           maxList(19) = arr(i)\n                maxList(20) = arr(i)\n     \
    \           maxList(21) = arr(i)\n                maxList(22) = arr(i)\n     \
    \           maxList(23) = arr(i)\n                maxList(24) = arr(i)\n     \
    \           maxList(25) = arr(i)\n                maxList(26) = arr(i)\n     \
    \           maxList(27) = arr(i)\n                maxList(28) = arr(i)\n     \
    \           maxList(29) = arr(i)\n                maxList(30) = arr(i)\n     \
    \           maxList(31) = arr(i)\n                maxList(32) = arr(i)\n     \
    \           maxList(33) = arr(i)\n                maxList(34) = arr(i)\n     \
    \           maxList(35) = arr(i)\n                maxList(36) = arr(i)\n     \
    \           maxList(37) = arr(i)\n                maxList(38) = arr(i)\n     \
    \           maxList(39) = arr(i)\n                maxList(40) = arr(i)\n     \
    \           maxList(41) = arr(i)\n                maxList(42) = arr(i)\n     \
    \           maxList(43) = arr(i)\n                maxList(44) = arr(i)\n     \
    \           maxList(45) = arr(i)\n                maxList(46) = arr(i)\n     \
    \           maxList(47) = arr(i)\n                maxList(48) = arr(i)\n     \
    \           maxList(49) = arr(i)\n                maxList(50) = arr(i)\n     \
    \           maxList(51) = arr(i)\n                maxList(52) = arr(i)\n     \
    \           maxList(53) = arr(i)\n                maxList(54) = arr(i)\n     \
    \           maxList(55) = arr(i)\n                maxList(56) = arr(i)\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1cl316q8.scala:103:0 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1cl316q8.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    (k : Long)\n\e[31m   |\e[0m              \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1cl316q8.scala:28:25 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp1cl316q8.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while(i < len) {\n\
    \            while(j < k) {\n                if(arr(i) > arr(j)) {\n         \
    \           max(i) = arr(i)\n                    maxIndex = i\n              \
    \      j = 0\n                } else {\n                    j += 1\n         \
    \       }\n            }\n            i += 1\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph4cl4f2r.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph4cl4f2r.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        var j = 0\n        while (j < k) {\n \
    \           if (max < arr(j)) {\n                result(j) = max\n           \
    \     max += 1\n            } else {\n                result(j) = arr(j)\n   \
    \         }\n            j += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplas9ddzw.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplas9ddzw.scala:25:25 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplas9ddzw.scala:39:8 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.length\n        val m = arr.max\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppnxnx13t.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmppnxnx13t.scala:20:18 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppnxnx13t.scala:23:22 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppnxnx13t.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppnxnx13t.scala:25:30\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppnxnx13t.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                "
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.size\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var maxIndex = 0\n        var\
    \ maxIndex2 = 0\n        var maxIndex3 = 0\n        var maxIndex4 = 0\n      \
    \  var maxIndex5 = 0\n        var maxIndex6 = 0\n        var maxIndex7 = 0\n \
    \       var maxIndex8 = 0\n        var maxIndex9 = 0\n        var maxIndex10 =\
    \ 0\n        var maxIndex11 = 0\n        var maxIndex12 = 0\n        var maxIndex13\
    \ = 0\n        var maxIndex14 = 0\n        var maxIndex15 = 0\n        var maxIndex16\
    \ = 0\n        var maxIndex17 = 0\n        var maxIndex18 = 0\n        var maxIndex19\
    \ = 0\n        var maxIndex20 = 0\n        var maxIndex21 = 0\n        var maxIndex22\
    \ = 0\n        var maxIndex23 = 0\n        var maxIndex24 = 0\n        var maxIndex25\
    \ = 0\n        var maxIndex26 = 0\n        var maxIndex27 = 0\n        var maxIndex28\
    \ = 0\n        var maxIndex29 = 0\n        var maxIndex30 = 0\n        var maxIndex31\
    \ = 0\n        var maxIndex32 = 0\n        var maxIndex33 = 0\n        var maxIndex34\
    \ = 0\n        var maxIndex35 = 0\n        var maxIndex36 = 0\n        var maxIndex37\
    \ = 0\n        var maxIndex38 = 0\n        var maxIndex39 = 0\n        var maxIndex40\
    \ = 0\n        var maxIndex41 = 0\n        var maxIndex42 = 0\n        var maxIndex43\
    \ = 0\n        var maxIndex44 = 0\n        var maxIndex45 = 0\n        var maxIndex46\
    \ = 0\n        var maxIndex47 = 0\n        var maxIndex48 = 0\n        var maxIndex49\
    \ = 0\n        var maxIndex50 = 0\n        var maxIndex51 = 0\n        var maxIndex52\
    \ = 0\n        var maxIndex53 = 0\n        var maxIndex54 = 0\n        var maxIndex55\
    \ = 0\n        var maxIndex56 = 0\n        var maxIndex57 = 0\n        var maxIndex58\
    \ = 0\n        var maxIndex59 = 0\n        var maxIndex60 = 0\n        var maxIndex61\
    \ = 0\n        var maxIndex62 = 0\n        var maxIndex63 = 0\n        var maxIndex64\
    \ = 0\n        var maxIndex65 = 0\n        var maxIndex66 = 0\n        var maxIndex67\
    \ = 0\n        var maxIndex68 = 0\n        var maxIndex69 = 0\n        var maxIndex70\
    \ = 0\n        var maxIndex71 = 0\n        var maxIndex72 = 0\n        var maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2f83822m.scala:102:4 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2f83822m.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp2f83822m.scala:20:18 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2f83822m.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2f83822m.scala:25:31 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2f83822m.scala:102:5\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ List[Long]\n\e"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxCount =\
    \ mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxCount =\
    \ mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxCount =\
    \ mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxCount =\
    \ mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxCount =\
    \ mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Int]\n        val maxCount =\
    \ mutable.ListBuffer.empty[Long]\n        val maxIndex = mutable.ListBuffer.empty[Int]\n\
    \        val maxCount = mutable.ListBuffer.empty[Long]\n        val maxIndex =\
    \ mutable.ListBuffer.empty[Int]\n        val maxCount = mut\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmposvhf92q.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmposvhf92q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmposvhf92q.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmposvhf92q.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmposvhf92q.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[3"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(_ == maxValue)\n\
    \        val maxLength = maxIndex - k\n        val maxList = arr.take(maxLength)\n\
    \        val maxListLength = maxList.length\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n        val maxListLength = maxListLength - k\n        val maxListLength\
    \ = maxListLength - k\n        val maxListLength = maxListLength - k\n       \
    \ val maxListLength = maxListLength - k\n        val maxListLength = maxListLength\
    \ - k\n\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qgpvf0a.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qgpvf0a.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qgpvf0a.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qgpvf0a.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxListLength is already defined as \e[33mvalue\e[0m \e[35mmaxListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qgpvf0a.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxListLength\e[0m = maxListLength -\
    \ k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   "
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxLength = 0\n        arr.foreach { x =>\n            if (maxLength\
    \ < k) {\n                maxLength += 1\n                maxList += x\n     \
    \       }\n            if (maxLength == k) {\n                maxList += x\n \
    \           }\n        }\n        maxList.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv71a1rmc.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = arr.sortWith(_\
    \ < _)\n        val maxLength = maxList.length\n        val maxList2 = maxList.take(k)\n\
    \        val maxList3 = maxList2.sortWith(_ < _)\n        val maxList4 = maxList3.take(k)\n\
    \        val maxList5 = maxList4.sortWith(_ < _)\n        val maxList6 = maxList5.take(k)\n\
    \        val maxList7 = maxList6.sortWith(_ < _)\n        val maxList8 = maxList7.take(k)\n\
    \        val maxList9 = maxList8.sortWith(_ < _)\n        val maxList10 = maxList9.take(k)\n\
    \        val maxList11 = maxList10.sortWith(_ < _)\n        val maxList12 = maxList11.take(k)\n\
    \        val maxList13 = maxList12.sortWith(_ < _)\n        val maxList14 = maxList13.take(k)\n\
    \        val maxList15 = maxList14.sortWith(_ < _)\n        val maxList16 = maxList15.take(k)\n\
    \        val maxList17 = maxList16.sortWith(_ < _)\n        val maxList18 = maxList17.take(k)\n\
    \        val maxList19 = maxList18.sortWith(_ < _)\n        val maxList20 = maxList19.take(k)\n\
    \        val maxList21 = maxList20.sortWith(_ < _)\n        val maxList22 = maxList21.take(k)\n\
    \        val maxList23 = maxList22.sortWith(_ < _)\n        val maxList24 = maxList23.take(k)\n\
    \        val maxList25 = maxList24.sortWith(_ < _)\n        val maxList26 = maxList25.take(k)\n\
    \        val maxList27 = maxList26.sortWith(_ < _)\n        val maxList28 = maxList27.take(k)\n\
    \        val maxList29 = maxList28.sortWith(_ < _)\n        val maxList30 = maxList29.take(k)\n\
    \        val maxList31 = maxList30.sortWith(_ < _)\n        val maxList32 = maxList31.take(k)\n\
    \        val maxList33 = maxList32.sortWith(_ < _)\n        val maxList34 = maxList33.take(k)\n\
    \        val maxList35 = maxList34.sortWith(_ < _)\n        val maxList36 = maxList35.take(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyoglvlb4.scala:56:39 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mmaxList36\e[0m = maxList35.take(\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyoglvlb4.scala:22:36\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e\
    [0m = maxList.take(k)\n\e[31m\e[31m   |\e[0m                                 \
    \   ^\e[0m\n\e[31m   |\e[0m                                    Found:    (k :\
    \ Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyoglvlb4.scala:24:37\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxList4\e\
    [0m = maxList3.take(k)\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyoglvlb4.scala:26:37\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxList6\e\
    [0m = maxList5.take(k)\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyoglvlb4.scala:28:37\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxList8\e\
    [0m = maxList7.take(k)\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = arr.max\n        val maxList = mutable.ArrayBuffer.empty[Long]\n \
    \       var maxIndex = 0\n        var maxValue = m\n        var i = 0\n      \
    \  while (i < n) {\n            if (arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n            i += 1\n\
    \        }\n        if (k > maxIndex) {\n            val maxList1 = maxList.take(k\
    \ - maxIndex + 1)\n            maxList1 += maxValue\n            maxList ++= maxList1\n\
    \        } else {\n            maxList += maxValue\n        }\n        maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjl8y7ek.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).toList\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_ > maxNums.last)\n        val\
    \ maxNumsIndexInRange = maxNumsIndex >= 0 && maxNumsIndex <= arr.length\n    \
    \    if (maxNumsIndexInRange) {\n            val maxNumsIndexInRangeList = arr.drop(maxNumsIndex).toList\n\
    \            val maxNumsIndexInRangeListIndex = maxNumsIndexInRangeList.lastIndexWhere(_\
    \ > maxNumsIndexInRangeList.last)\n            val maxNumsIndexInRangeListIndexInRange\
    \ = maxNumsIndexInRangeListIndex >= 0 && maxNumsIndexInRangeListIndex <= maxNumsIndexInRangeList.length\n\
    \            if (maxNumsIndexInRangeListIndexInRange) {\n                val maxNumsIndexInRangeListIndexInRangeList\
    \ = maxNumsIndexInRangeList.drop(maxNumsIndexInRangeListIndex).toList\n      \
    \          val maxNumsIndexInRangeListIndexInRangeListIndex = maxNumsIndexInRangeListIndexInRangeList.lastIndexWhere(_\
    \ > maxNumsIndexInRangeListIndexInRangeList.last)\n                val maxNumsIndexInRangeListIndexInRangeListIndexInRange\
    \ = maxNumsIndexInRangeListIndexInRangeListIndex >= 0 && maxNumsIndexInRangeListIndexInRangeListIndex\
    \ <= maxNumsIndexInRangeListIndexInRangeList.length\n                if (maxNumsIndexInRangeListIndexInRangeListIndexInRange)\
    \ {\n                    val maxNumsIndexInRangeListIndexInRangeListIndexInRangeList\
    \ = maxNumsIndexInRangeListIndexInRangeListIndexInRangeList.drop(maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndex).toList\n\
    \                    val maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRange\
    \ = maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeList.lastIndexWhere(_\
    \ > maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeList.last)\n\
    \                    val maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeListIndexInRange\
    \ = maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeListIndexInRange\
    \ >= 0 && maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeListIndexInRange\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm6pk6mq7.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm6pk6mq7.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e\
    [0m = arr.take(k).toList\n\e[31m\e[31m   |\e[0m                              \
    \ ^\e[0m\n\e[31m   |\e[0m                               Found:    (k : Long)\n\
    \e[31m   |\e[0m                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm6pk6mq7.scala:32:82 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    \e[33mval\e[0m \e[36mmaxNumsIndexInRangeListIndexInRangeListIndexInRangeList\e\
    [0m = maxNumsIndexInRangeListIndexInRangeListIndexInRangeList.drop(maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndex).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mmaxNumsIndexInRangeListIndexInRangeListIndexInRangeList\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm6pk6mq7.scala:33:94\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    \e[33mval\e\
    [0m \e[36mmaxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRange\e\
    [0m = maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeList.lastIndexWhere(_\
    \ > maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeList.last)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxNumsIndexInRangeListIndexInRangeListIndexInRangeListIndexInRangeList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxArr : List[Long] = new Array[Long](k)\n        var i = 0\n   \
    \     while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n              \
    \  maxArr(i) = arr(i + 1)\n                i += 1\n            } else {\n    \
    \            maxArr(i) = arr(i)\n                i += 1\n            }\n     \
    \   }\n        maxArr\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpym8ekcxq.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpym8ekcxq.scala:21:50 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxArr\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e\
    [31m\e[31m   |\e[0m                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                                  Found:    (k :\
    \ Long)\n\e[31m   |\e[0m                                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpym8ekcxq.scala:25:16\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxArr(i)\
    \ = arr(i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue update is not a member of List[Long] - did you mean maxArr.updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpym8ekcxq.scala:28:16 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                maxArr(i) = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of\
    \ List[Long] - did you mean maxArr.updated?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5bcnzxxs.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bcnzxxs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5bcnzxxs.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = arr(0)\n        var i = 0\n        while\
    \ (i < len) {\n            if (arr(i) > maxVal) {\n                maxIndex =\
    \ i\n                maxVal = arr(i)\n            }\n            i += 1\n    \
    \    }\n        val newArr = new Array[Long](maxIndex + 1)\n        var j = 0\n\
    \        while (j < maxIndex) {\n            newArr(j) = arr(j)\n            j\
    \ += 1\n        }\n        newArr(0) = maxVal\n        newArr\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5kedte24.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5kedte24.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5kedte24.scala:40:8\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m        newArr\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (newArr : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxNum = arr.max\n        val maxNumIndex = arr.indexWhere(x => x\
    \ == maxNum)\n        val maxNumIndex = maxNumIndex + 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = maxNumIndex - 1\n        val maxNumIndex = maxNumIndex - 1\n        val maxNumIndex\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa4537wjr.scala:70:25 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpa4537wjr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa4537wjr.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa4537wjr.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpa4537wjr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum : Long = -1\n        for(i <- 0 until arr.length) {\n    \
    \        if(arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \        }\n        for(i <- 0 until arr.length) {\n            if(arr(i) == maxNum)\
    \ {\n                maxList += arr(i)\n            }\n        }\n        if(maxList.size\
    \ < k) {\n            val newList = maxList.take(k - maxList.size)\n         \
    \   for(i <- 0 until newList.length) {\n                maxList += newList(i)\n\
    \            }\n        }\n        maxList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26u3t6yi.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = arr(k - 1)\n        val maxIndex = arr.indexWhere(_ == max)\n\
    \        val maxList = arr.take(maxIndex + 1)\n        val maxListWithMax = maxList.take(k\
    \ - 1).reverse\n        val maxListWithoutMax = maxList.drop(maxIndex + 1)\n \
    \       val maxListWithMaxAndMaxListWithoutMax = maxListWithMax.zip(maxListWithoutMax)\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSorted = maxListWithMaxAndMaxListWithoutMax.sortBy(-_._1)\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversed = maxListWithMaxAndMaxListWithoutMaxSorted.reverse\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMax = maxListWithMaxAndMaxListWithoutMaxSortedReversed.take(k).reverse\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMax\
    \ = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMax.zip(maxListWithoutMax)\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted\
    \ = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMax.sortBy(-_._1)\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversed\
    \ = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted.reverse\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMax\
    \ = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversed.take(k).reverse\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMax\
    \ = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMax.zip(maxListWithoutMax)\n\
    \        val maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted\
    \ = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted.reverse\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvxuos51.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbvxuos51.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbvxuos51.scala:35:137\
    \ --------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted\e\
    [0m = maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  maxListWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSortedReversedWithMaxAndMaxListWithoutMaxSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbvxuos51.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxElement = arr.max\n      \
    \  val maxElementIndex = arr.indexWhere(x => x == maxElement)\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = maxElementIndex.max\n        val maxElementIndex = maxElementIndex.min\n \
    \       val maxElementIndex = maxElementIndex.max\n        val maxElementIndex\
    \ = maxElementIndex.min\n        val maxElementIndex = maxElementIndex.max\n \
    \       val maxElementIndex = maxElementIndex.min\n        val maxElementIndex\
    \ = max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgil9x76y.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgil9x76y.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.min\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgil9x76y.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgil9x76y.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.min\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxElementIndex is already defined as \e[33mvalue\e[0m \e[35mmaxElementIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgil9x76y.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxElementIndex\e[0m = maxElementIndex.max\n\
    \e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val index = new Array[Int](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphmhjalr7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphmhjalr7.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (k : Long)\n\
    \e[31m   |\e[0m                                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmhjalr7.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmhjalr7.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mindex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphmhjalr7.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            val max = arr(i).max(arr(i+1))\n\
    \            if (max > max(i)) {\n                max(i) = max\n            }\n\
    \            i += 1\n        }\n        max.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzumsjzj1.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzumsjzj1.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = arr.length\n        val minIndex = 0\n        val maxValue\
    \ = arr(0)\n        val minValue = arr(0)\n        val maxCount = 1\n        val\
    \ minCount = 1\n        val maxIndex = arr.length\n        val minIndex = 0\n\
    \        val maxValue = arr(0)\n        val minValue = arr(0)\n        val maxCount\
    \ = 1\n        val minCount = 1\n        val maxIndex = arr.length\n        val\
    \ minIndex = 0\n        val maxValue = arr(0)\n        val minValue = arr(0)\n\
    \        val maxCount = 1\n        val minCount = 1\n        val maxIndex = arr.length\n\
    \        val minIndex = 0\n        val maxValue = arr(0)\n        val minValue\
    \ = arr(0)\n        val maxCount = 1\n        val minCount = 1\n        val maxIndex\
    \ = arr.length\n        val minIndex = 0\n        val maxValue = arr(0)\n    \
    \    val minValue = arr(0)\n        val maxCount = 1\n        val minCount = 1\n\
    \        val maxIndex = arr.length\n        val minIndex = 0\n        val maxValue\
    \ = arr(0)\n        val minValue = arr(0)\n        val maxCount = 1\n        val\
    \ minCount = 1\n        val maxIndex = arr.length\n        val minIndex = 0\n\
    \        val maxValue = arr(0)\n        val minValue = arr(0)\n        val maxCount\
    \ = 1\n        val minCount = 1\n        val maxIndex = arr.length\n        val\
    \ minIndex = 0\n        val maxValue = arr(0)\n        val minValue = arr(0)\n\
    \        val maxCount = 1\n        val minCount = 1\n        val maxIndex = arr.length\n\
    \        val minIndex = 0\n        val maxValue = arr(0)\n        val minValue\
    \ = arr(0)\n        val maxCount = 1\n        val minCount = 1\n        val maxIndex\
    \ = arr.length\n        val minIndex = 0\n        val maxValue = arr(0)\n    \
    \    val minValue = arr(0)\n        val maxCount = 1\n        val minCount = 1\n\
    \        val maxIndex = arr.length\n        val minIndex = 0\n        val maxValue\
    \ = arr(0)\n        val minValue = arr(0)\n        val maxCount = 1\n        val\
    \ minCount = 1\n        val maxIndex = arr.length\n        val minIndex = 0\n\
    \        val maxValue = arr(0)\n        val minValue = arr(0)\n        val maxCount\
    \ = 1\n        val minCount = 1\n        val maxIndex = arr.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40zn72kw.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp40zn72kw.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp40zn72kw.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp40zn72kw.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp40zn72kw.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValue\e[0m = arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValue is already defined as \e[33mvalue\e[0m \e[35mminValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp40zn72kw.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxIndex = arr.indexWhere(x => x == maxNum)\n        val maxList = arr.take(maxIndex\
    \ - k).sortWith(_ < _)\n        val newList = arr.take(maxIndex + k).sortWith(_\
    \ < _)\n        val newMaxList = newList.maxBy(x => x)\n        val newMaxIndex\
    \ = newList.indexWhere(x => x == newMaxList)\n        newMaxList.take(newMaxIndex\
    \ - k).sortWith(_ < _) ++ maxList.take(newMaxIndex + k).sortWith(_ < _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi662kyrq.scala:22:31\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e\
    [0m = arr.take(maxIndex - k).sortWith(_ < _)\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi662kyrq.scala:23:31\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = arr.take(maxIndex + k).sortWith(_ < _)\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi662kyrq.scala:26:19\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        newMaxList.take(newMaxIndex\
    \ - k).sortWith(_ < _) ++ maxList.take(newMaxIndex + k).sortWith(_ < _)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value take is\
    \ not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxVal = -1000\n        var maxIndex = 0\n        var i = 0\n   \
    \     while (i < len) {\n            if (arr(i) > maxVal) {\n                maxVal\
    \ = arr(i)\n                maxIndex = i\n            }\n            i += 1\n\
    \        }\n        val maxList2 = maxList.take(k).toList\n        val maxList3\
    \ = maxList2.reverse\n        val maxList4 = maxList3.reverse\n        val maxList5\
    \ = maxList4.reverse\n        val maxList6 = maxList5.reverse\n        val maxList7\
    \ = maxList6.reverse\n        val maxList8 = maxList7.reverse\n        val maxList9\
    \ = maxList8.reverse\n        val maxList10 = maxList9.reverse\n        val maxList11\
    \ = maxList10.reverse\n        val maxList12 = maxList11.reverse\n        val\
    \ maxList13 = maxList12.reverse\n        val maxList14 = maxList13.reverse\n \
    \       val maxList15 = maxList14.reverse\n        val maxList16 = maxList15.reverse\n\
    \        val maxList17 = maxList16.reverse\n        val maxList18 = maxList17.reverse\n\
    \        val maxList19 = maxList18.reverse\n        val maxList20 = maxList19.reverse\n\
    \        val maxList21 = maxList20.reverse\n        val maxList22 = maxList21.reverse\n\
    \        val maxList23 = maxList22.reverse\n        val maxList24 = maxList23.reverse\n\
    \        val maxList25 = maxList24.reverse\n        val maxList26 = maxList25.reverse\n\
    \        val maxList27 = maxList26.reverse\n        val maxList28 = maxList27.reverse\n\
    \        val maxList29 = maxList28.reverse\n        val maxList30 = maxList29.reverse\n\
    \        val maxList31 = maxList30.reverse\n        val maxList32 = maxList31.reverse\n\
    \        val maxList33 = maxList32.reverse\n        val maxList34 = maxList33.reverse\n\
    \        val maxList35 = maxList34.reverse\n        val maxList36 = maxList35.reverse\n\
    \        val maxList37 = maxList36.reverse\n        val maxList38 = maxList37.reverse\n\
    \        val maxList39 = maxList38.reverse\n        val maxList40 = maxList39.reverse\n\
    \        val maxList41 = maxList40.reverse\n        val maxList42 = maxList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd6s5mb_g.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd6s5mb_g.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpd6s5mb_g.scala:74:5 ---------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLen = arr.length\n        val maxNum = arr.max\n        val maxNumIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumIndex = maxNumIndex.min(k)\n\
    \        val maxNum = arr(maxNumIndex)\n        val maxNumIndex = maxNumIndex.max(k)\n\
    \        for (i <- 0 until maxNumIndex) {\n            if (arr(i) > maxNum) {\n\
    \                maxList += arr(i)\n            }\n        }\n        return maxList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptzk6zl85.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptzk6zl85.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxNum\e[0m = arr(maxNumIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxNum\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxNum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptzk6zl85.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumIndex\e[0m = maxNumIndex.max(k)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmptzk6zl85.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.length\n        val m = arr.max\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        var i = 0\n\
    \        while (i < n) {\n            if (arr(i) > m) {\n                max.enqueue(arr(i))\n\
    \                maxIndex.enqueue(i)\n            }\n            i += 1\n    \
    \    }\n        var j = 0\n        while (j < k) {\n            if (max.isEmpty)\
    \ {\n                j += k\n            } else {\n                val maxIndex\
    \ = maxIndex.dequeue()\n                val max = max.dequeue()\n            \
    \    arr(maxIndex) = max\n                j += 1\n            }\n        }\n \
    \       arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7i3eql4z.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7i3eql4z.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7i3eql4z.scala:24:27\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7i3eql4z.scala:36:18 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                j += k\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member of\
    \ Int - did you mean Int.!=?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7i3eql4z.scala:38:31\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                \e[33mval\e\
    [0m \e[36mmaxIndex\e[0m = maxIndex.dequeue()\n\e[31m\e[31m   |\e[0m          \
    \                     ^\e[0m\n\e[31m   |\e[0m                               Recursive\
    \ \e[33mvalue\e[0m \e[35mmaxIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp7i3eql4z.scala:39:26 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                \e[33mval\e[0m \e[36mmax\e[0m = max.dequeue()\n\
    \e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        while (i < len) {\n            while (j <\
    \ k) {\n                if (arr(i) > arr(j)) {\n                    max(i) = arr(i)\n\
    \                    i += 1\n                } else {\n                    max(i)\
    \ = arr(j)\n                    j += 1\n                }\n            }\n   \
    \     }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptmwb7zvn.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptmwb7zvn.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5bcnzxxs.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bcnzxxs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5bcnzxxs.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.size\n       \
    \ val m = arr.max\n        val max = new Array[Long](k)\n        var i = 0\n \
    \       var j = 0\n        var k = 0\n        while (i < n) {\n            if\
    \ (arr(i) > m) {\n                max(k) = arr(i)\n                k += 1\n  \
    \          }\n            i += 1\n        }\n        while (j < k) {\n       \
    \     if (max(i) < max(i + 1)) {\n                max(i) = max(i + 1)\n      \
    \          i += 1\n            }\n            j += 1\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmpuf0540h7.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m           k is a forward reference\
    \ extending over the definition of max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxNum = arr.max\n        val\
    \ maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumIndex = maxNumIndex.min(k)\n\
    \        val maxNums = arr.take(maxNumIndex)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNums)\n        val maxNumsIndex = maxNumsIndex.min(k)\n        val\
    \ maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(k)\n        val maxNumsIndex = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjonbyeou.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjonbyeou.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjonbyeou.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.max(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjonbyeou.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjonbyeou.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.max(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        val len = arr.length\n        while (i\
    \ < len) {\n            if (arr(i) > max) {\n                max = arr(i)\n  \
    \          }\n            i += 1\n        }\n        val result2 = new mutable.ListBuffer[Long]()\n\
    \        while (i < len) {\n            if (arr(i) > max) {\n                result2.append(max)\n\
    \                max = arr(i)\n            }\n            i += 1\n        }\n\
    \        result.append(max)\n        result2.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphl1ktaew.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphl1ktaew.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphl1ktaew.scala:32:25\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphl1ktaew.scala:36:26\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mresult2\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmphl1ktaew.scala:40:25 --------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        var i = 0\n\
    \        while (i < len) {\n            if (max.size < arr.length) {\n       \
    \         max.enqueue(arr(i))\n                maxIndex.enqueue(i)\n         \
    \       i += 1\n            } else {\n                if (arr(i) > max.peek())\
    \ {\n                    max.dequeue()\n                    maxIndex.dequeue()\n\
    \                    max.enqueue(arr(i))\n                    maxIndex.enqueue(i)\n\
    \                    i += 1\n                }\n            }\n        }\n   \
    \     val res = new mutable.PriorityQueue[Long]()\n        var j = 0\n       \
    \ while (j < k) {\n            if (maxIndex.size > 0) {\n                res.enqueue(max.dequeue())\n\
    \                maxIndex.dequeue()\n                j += 1\n            } else\
    \ {\n                res.enqueue(arr(j))\n                j += 1\n           \
    \ }\n        }\n        res.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp335hgiwv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp335hgiwv.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp335hgiwv.scala:23:27\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp335hgiwv.scala:40:22 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        var i = 0\n        while\
    \ (i < len) {\n            if (arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n            i += 1\n\
    \        }\n        val result = new Array[Long](k)\n        var j = 0\n     \
    \   while (j < k) {\n            result(j) = arr(maxIndex)\n            j += 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnaka3zp5.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnaka3zp5.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnaka3zp5.scala:33:37\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnaka3zp5.scala:39:8 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxValue\n        for(i <- 0 until arr.length - maxIndex) {\n           \
    \ val value = arr(i + maxIndex)\n            if(value < maxValue) {\n        \
    \        maxValue = value\n                maxIndex = i + 1\n            }\n \
    \       }\n        if(maxIndex < arr.length) {\n            val value = arr(maxIndex)\n\
    \            if(value < maxValue) {\n                maxValue = value\n      \
    \          maxIndex = arr.length\n            }\n        }\n        if(maxIndex\
    \ < arr.length) {\n            val value = arr(maxIndex)\n            if(value\
    \ < maxValue) {\n                maxValue = value\n                maxIndex =\
    \ arr.length\n            }\n        }\n        if(maxIndex < arr.length) {\n\
    \            val value = arr(maxIndex)\n            if(value < maxValue) {\n \
    \               maxValue = value\n                maxIndex = arr.length\n    \
    \        }\n        }\n        if(maxIndex < arr.length) {\n            val value\
    \ = arr(maxIndex)\n            if(value < maxValue) {\n                maxValue\
    \ = value\n                maxIndex = arr.length\n            }\n        }\n \
    \       if(maxIndex < arr.length) {\n            val value = arr(maxIndex)\n \
    \           if(value < maxValue) {\n                maxValue = value\n       \
    \         maxIndex = arr.length\n            }\n        }\n        if(maxIndex\
    \ < arr.length) {\n            val value = arr(maxIndex)\n            if(value\
    \ < maxValue) {\n                maxValue = value\n                maxIndex =\
    \ arr.length\n            }\n        }\n        if(maxIndex < arr.length) {\n\
    \            val value = arr(maxIndex)\n            if(value < maxValue) {\n \
    \               maxValue = value\n                maxIndex = arr.length\n    \
    \        }\n        }\n        if(maxIndex < arr.length) {\n            val value\
    \ = arr(maxIndex)\n            if(value < maxValue) {\n                maxValue\
    \ = value\n                maxIndex = arr.length\n            }\n        }\n \
    \       if(maxIndex < arr.length) {\n            val value = arr(maxIndex)\n \
    \           if(value < maxValue) {\n                maxValue = value\n       \
    \         maxIndex = arr.length\n            }\n        }\n        if(maxIndex\
    \ < arr.length) {\n            val value = arr(maxIndex)\n            if(value\
    \ < maxValue) {\n                maxValue = value\n                maxIndex =\
    \ arr.length\n            }\n        }\n        if(maxIndex < arr.length) {\n\
    \            val value = arr(maxIndex)\n            if(value < maxValue) {\n \
    \               maxValue = value\n                maxIndex = arr.length\n    \
    \        }\n        }\n        if(maxIndex < arr.length) {\n            val value\
    \ = arr(maxIndex)\n            if(value < maxValue) {\n                maxValue\
    \ = value\n                max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnzjuqr6k.scala:135:0 ---------------------------\e\
    [0m\e[0m\n\e[31m135 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzjuqr6k.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpnzjuqr6k.scala:118:16\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m118 |\e[0m       \
    \         max\n\e[31m\e[31m    |\e[0m                ^^^\e[0m\n\e[31m    |\e[0m\
    \                missing arguments for value of type (Int, Int) => Int\n\e[33m\e\
    [33m-- Warning: /tmp/tmpnzjuqr6k.scala:120:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m120 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5bcnzxxs.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bcnzxxs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5bcnzxxs.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLen = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexLenLenLen = new mutable.PriorityQueue[Int]()\n        val\
    \ maxIndexLenLenLenLen = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLen =\
    \ new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_c2bkwzr.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_c2bkwzr.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_c2bkwzr.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_c2bkwzr.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defini"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxNum = arr.max\n        val maxIndex = arr.indexWhere(_ == maxNum)\n\
    \        val maxNums = arr.take(maxIndex + 1)\n        result.addAll(maxNums)\n\
    \        val newArr = arr.drop(maxIndex + 1)\n        result.addAll(maximum(newArr,\
    \ k - 1))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2zpjlxp.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(_.toLong)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             val tmp = arr(i)\n                arr(i) = arr(i + 1)\n        \
    \        arr(i + 1) = tmp\n            }\n            i += 1\n        }\n    \
    \    arr.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5wo7kc4y.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5wo7kc4y.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxValue = arr(maxIndex)\n        val maxLen = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n\
    \        val maxValue = arr(maxIndex)\n        val maxLen = arr.length\n     \
    \   val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n    \
    \    val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n        val\
    \ maxValue = arr(maxIndex)\n        val maxLen = arr.length\n        val maxIndex\
    \ = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val maxLen =\
    \ arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxValue = arr(maxIndex)\n        val maxLen = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n\
    \        val maxValue = arr(maxIndex)\n        val maxLen = arr.length\n     \
    \   val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n    \
    \    val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n        val\
    \ maxValue = arr(maxIndex)\n        val maxLen = arr.length\n        val maxIndex\
    \ = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val maxLen =\
    \ arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n\
    \        val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxValue = arr(maxIndex)\n        val maxLen = arr.length\n        val\
    \ maxIndex = arr.indexOfMax\n        val maxValue = arr(maxIndex)\n        val\
    \ maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n        val maxValue\
    \ = arr(maxIndex)\n        val maxLen = arr.length\n        val maxIndex = arr.indexOfMax\n\
    \        val maxValue = arr(maxIndex)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0smju9iq.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLen\e[0m = arr.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxLen\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxLen\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0smju9iq.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = arr.indexOfMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0smju9iq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0smju9iq.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLen\e[0m = arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLen is already defined as \e[33mvalue\e[0m \e[35mmaxLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0smju9iq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the sa"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        if (len > k) {\n            val newArr = new Array[Long](len\
    \ - k)\n            i = 0\n            while (i < k) {\n                newArr(i)\
    \ = arr(i + k)\n                i += 1\n            }\n            max = newArr\n\
    \        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3fpw4yvo.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3fpw4yvo.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp3fpw4yvo.scala:40:16 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            max = newArr\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val max\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3fpw4yvo.scala:42:8\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m        max\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (max : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxNum = arr.max\n        val maxNumIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumIndex = maxNumIndex.min(k)\n\
    \        val maxNums = arr.take(maxNumIndex)\n        val maxNumsIndex = arr.indexWhere(x\
    \ => x == maxNums.max)\n        val maxNumsIndex = maxNumsIndex.min(k)\n     \
    \   val maxNumsIndex = maxNumsIndex.max(len)\n        val maxNumsIndex = maxNumsIndex.min(k)\n\
    \        val maxNumsIndex = maxNumsIndex.max(len)\n        val maxNumsIndex =\
    \ maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n    \
    \    val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = maxNumsIndex.min(k)\n        val maxNumsIndex = maxNumsIndex.max(len)\n\
    \        val maxNumsIndex = max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxno65g54.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxno65g54.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxno65g54.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.max(len)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxno65g54.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.min(k)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxNumsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxno65g54.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsIndex\e[0m = maxNumsIndex.max(len)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = arr.max\n        val maxList = mutable.ArrayBuffer(m)\n        val\
    \ maxIndex = mutable.ArrayBuffer(0)\n        val maxCount = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.ArrayBuffer(0)\n        val maxCountIndex\
    \ = mutable.ArrayBuffer(0)\n        val maxCountIndex = mutable.ArrayBuffer(0)\n\
    \        val maxCountIndex = mutable.Array\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi2hpo3bd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi2hpo3bd.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi2hpo3bd.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi2hpo3bd.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCountIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCountIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi2hpo3bd.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxCountIndex\e[0m = mutable.ArrayBuffe"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap4 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Long]()\n     \
    \   val maxIndexMap8 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap12 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap16 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap20 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap24 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Long]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Long]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Long]()\n    \
    \    val maxIndexMap28 = new mutable.HashMap[Int, Long]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3x2n4cb4.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp3x2n4cb4.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3x2n4cb4.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x2n4cb4.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3x2n4cb4.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3x2n4cb4.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumList\
    \ = arr.take(maxNumIndex + 1)\n        val maxNumListIndex = arr.indexWhere(x\
    \ => x == maxNumList)\n        val maxNumListIndex = maxNumListIndex + 1\n   \
    \     val maxNumListLength = maxNumListIndex - maxNumIndex\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n        val maxNumListLength\
    \ = maxNumListLength - 1\n        val maxNumListLength = maxNumListLength - 1\n\
    \        val maxNumListLength = maxNumListLength - 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5vq_jmju.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumListIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5vq_jmju.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLength\e[0m =\
    \ maxNumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5vq_jmju.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLength\e[0m =\
    \ maxNumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5vq_jmju.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLength\e[0m =\
    \ maxNumListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5vq_jmju.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLe"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(x =>\
    \ x)\n        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n\
    \        val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwr6xzcyd.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwr6xzcyd.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(\e[36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m      \
    \            ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwr6xzcyd.scala:66:5 ---------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until\
    \ arr.length) {\n            if(arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxValue\n        for(i <- 0 until arr.length - maxIndex) {\n           \
    \ val value = arr(i + maxIndex)\n            if(value > maxValue) {\n        \
    \        maxValue = value\n                maxIndex = i\n            }\n     \
    \   }\n        maxList += maxValue\n        if(maxIndex < k) {\n            val\
    \ newList = mutable.ListBuffer.empty[Long]\n            for(i <- 0 until k - maxIndex)\
    \ {\n                newList += arr(i)\n            }\n            newList +=\
    \ arr(k - maxIndex)\n            maximum(newList, k)\n        } else {\n     \
    \       maxList\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsg23c_f.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnsg23c_f.scala:39:26 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnsg23c_f.scala:40:29 --------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33mfor\e[0m(i <- \e[31m0\e[0m until k\
    \ - maxIndex) {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Long\n\e[31m   |\e\
    [0m                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxLength = 0\n        for(i <- 0 until arr.length) {\n         \
    \   if(maxLength < k) {\n                maxLength += 1\n                maxList\
    \ += arr(i)\n            }\n            else if(arr(i) > maxList(0)) {\n     \
    \           maxLength += 1\n                maxList += arr(i)\n            }\n\
    \            else {\n                maxList += arr(i)\n            }\n      \
    \  }\n        maxList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbtepyqmf.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i < len)\
    \ {\n            if (arr(i) > arr(maxIndex)) {\n                maxIndex = i\n\
    \            }\n            i += 1\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n    \
    \        val maxListLen = k\n        }\n        for (i <- 0 until maxListLen)\
    \ {\n            if (maxList(i) > maxList(maxIndex)) {\n                maxIndex\
    \ = i\n            }\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n    \
    \        val maxListLen = k\n        }\n        for (i <- 0 until maxListLen)\
    \ {\n            if (maxList(i) > maxList(maxIndex)) {\n                maxIndex\
    \ = i\n            }\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n    \
    \        val maxListLen = k\n        }\n        for (i <- 0 until maxListLen)\
    \ {\n            if (maxList(i) > maxList(maxIndex)) {\n                maxIndex\
    \ = i\n            }\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n    \
    \        val maxListLen = k\n        }\n        for (i <- 0 until maxListLen)\
    \ {\n            if (maxList(i) > maxList(maxIndex)) {\n                maxIndex\
    \ = i\n            }\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n    \
    \        val maxListLen = k\n        }\n        for (i <- 0 until maxListLen)\
    \ {\n            if (maxList(i) > maxList(maxIndex)) {\n                maxIndex\
    \ = i\n            }\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n    \
    \        val maxListLen = k\n        }\n        for (i <- 0 until maxListLen)\
    \ {\n            if (maxList(i) > maxList(maxIndex)) {\n                maxIndex\
    \ = i\n            }\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxListLen = maxList.length\n        if (maxListLen < k) {\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuw8454q3.scala:112:0 ---------------------------\e\
    [0m\e[0m\n\e[31m112 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw8454q3.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxList\e[0m = arr.take(maxIndex).toList\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxList is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw8454q3.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListLen\e[0m = maxList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListLen is already defined as \e[33mvalue\e[0m \e[35mmaxListLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuw8454q3.scala:52:12 ---------------------------\e[0m\e[0m\n\e\
    [31m52 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = arr.take(maxIndex).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxList is already defined as \e[33mvalue\e[0m \e[35mmaxList\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuw8454q3.scala:53:12 ---------------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxListLen\e[0m = maxList.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListLen\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxListLen\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw8454q3.scala:62:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m62 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       maxIndex = i\n            }\n        }\n        result ++= arr.take(maxIndex\
    \ - k + 1)\n        result ++= arr.drop(maxIndex + k + 1)\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix84qaxw.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpix84qaxw.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        val len = arr.length\n        val max =\
    \ arr.max\n        val min = arr.min\n        val mid = len / 2\n        val midVal\
    \ = arr(mid)\n        val midVal2 = arr(mid-1)\n        val midVal3 = arr(mid+1)\n\
    \        val midVal4 = arr(mid+2)\n        val midVal5 = arr(mid+3)\n        val\
    \ midVal6 = arr(mid+4)\n        val midVal7 = arr(mid+5)\n        val midVal8\
    \ = arr(mid+6)\n        val midVal9 = arr(mid+7)\n        val midVal10 = arr(mid+8)\n\
    \        val midVal11 = arr(mid+9)\n        val midVal12 = arr(mid+10)\n     \
    \   val midVal13 = arr(mid+11)\n        val midVal14 = arr(mid+12)\n        val\
    \ midVal15 = arr(mid+13)\n        val midVal16 = arr(mid+14)\n        val midVal17\
    \ = arr(mid+15)\n        val midVal18 = arr(mid+16)\n        val midVal19 = arr(mid+17)\n\
    \        val midVal20 = arr(mid+18)\n        val midVal21 = arr(mid+19)\n    \
    \    val midVal22 = arr(mid+20)\n        val midVal23 = arr(mid+21)\n        val\
    \ midVal24 = arr(mid+22)\n        val midVal25 = arr(mid+23)\n        val midVal26\
    \ = arr(mid+24)\n        val midVal27 = arr(mid+25)\n        val midVal28 = arr(mid+26)\n\
    \        val midVal29 = arr(mid+27)\n        val midVal30 = arr(mid+28)\n    \
    \    val midVal31 = arr(mid+29)\n        val midVal32 = arr(mid+30)\n        val\
    \ midVal33 = arr(mid+31)\n        val midVal34 = arr(mid+32)\n        val midVal35\
    \ = arr(mid+33)\n        val midVal36 = arr(mid+34)\n        val midVal37 = arr(mid+35)\n\
    \        val midVal38 = arr(mid+36)\n        val midVal39 = arr(mid+37)\n    \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34qn3lzb.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp34qn3lzb.scala:21:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34qn3lzb.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5bcnzxxs.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bcnzxxs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5bcnzxxs.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).maxBy(_)\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_ == maxNums)\n        val maxNumsIndexInRange\
    \ = maxNumsIndex >= 0 && maxNumsIndex <= arr.length\n        if (maxNumsIndexInRange)\
    \ {\n            arr.drop(maxNumsIndex).sortBy(_).take(k)\n        } else {\n\
    \            arr.sortBy(_).take(k)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp4jfhwrsa.scala:20:40 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e[0m = arr.take(k).maxBy(_)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => arr.take(k).maxBy(_$1).\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4jfhwrsa.scala:20:31 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxNums\e[0m = arr.take(k).maxBy(_)\n\e[31m\e[31m\
    \   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m             \
    \                  Found:    (k : Long)\n\e[31m   |\e[0m                     \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp4jfhwrsa.scala:20:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxNums\e[0m = arr.take(k).maxBy(_)\n\e[31m\e[31m   |\e\
    [0m                                          ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter cmp of \e[33mmethod\e\
    [0m \e[35mmaxBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp4jfhwrsa.scala:24:42 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            arr.drop(maxNumsIndex).sortBy(_).take(k)\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$3 of expanded function:\n\e[31m   |\e\
    [0m   _$3 => arr.drop(maxNumsIndex).sortBy(_$3).take(k).\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp4jfhwrsa.scala:24:44 -----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            arr.drop(maxNumsIndex).sortBy(_).take(k)\n\e[31m\e\
    [31m   |\e[0m                           "
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        var i = 0\n        var j = 0\n       \
    \ var maxIndex = 0\n        var maxValue = 0\n        while(i < len) {\n     \
    \       val value = arr(i)\n            val index = i\n            while(j < k)\
    \ {\n                if(arr(j) < value) {\n                    j++\n         \
    \       } else {\n                    maxIndex(i) = j\n                    maxValue(j)\
    \ = arr(j)\n                    j = 0\n                }\n            }\n    \
    \        i += 1\n        }\n        val result = new Array[Long](k)\n        var\
    \ i = 0\n        while(i < k) {\n            result(i) = maxValue(maxIndex(i))\n\
    \            i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4veweuot.scala:33:23 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4veweuot.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mvar\e[0m \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4veweuot.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4veweuot.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4veweuot.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4veweuot.scala:23:38\
    \ ---"
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = arr.max\n        val max = new Array[Long](k)\n        var i = 0\n\
    \        while (i < k) {\n            if (arr(i) < m) {\n                max(i)\
    \ = arr(i)\n                i += 1\n            } else {\n                max(i)\
    \ = m\n                i += 1\n            }\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphu4xnm6w.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var index = 0\n        while(index < arr.length)\
    \ {\n            if(arr(index) > max) {\n                max = arr(index)\n  \
    \          }\n            index += 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.length) {\n            if(arr(index) > max) {\n                max -=\
    \ 1\n            }\n            index += 1\n        }\n        while(max > 0 &&\
    \ index > 0) {\n            if(arr(index) > max) {\n                max -= 1\n\
    \            }\n            index -= 1\n        }\n        while(max > 0 && index\
    \ < arr.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpty1177d9.scala:126:4 ---------------------------\e\
    [0m\e[0m\n\e[31m126 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpty1177d9.scala:20:25 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpty1177d9.scala:25:25 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                max = arr(index)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \  Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = arr.sortWith(_\
    \ > _)\n        val maxLength = maxList.length\n        val maxList2 = maxList.take(k)\n\
    \        val maxList3 = maxList2.sortWith(_ > _)\n        val maxList4 = maxList3.take(k)\n\
    \        val maxList5 = maxList4.sortWith(_ > _)\n        val maxList6 = maxList5.take(k)\n\
    \        val maxList7 = maxList6.sortWith(_ > _)\n        val maxList8 = maxList7.take(k)\n\
    \        val maxList9 = maxList8.sortWith(_ > _)\n        val maxList10 = maxList9.take(k)\n\
    \        val maxList11 = maxList10.sortWith(_ > _)\n        val maxList12 = maxList11.take(k)\n\
    \        val maxList13 = maxList12.sortWith(_ > _)\n        val maxList14 = maxList13.take(k)\n\
    \        val maxList15 = maxList14.sortWith(_ > _)\n        val maxList16 = maxList15.take(k)\n\
    \        val maxList17 = maxList16.sortWith(_ > _)\n        val maxList18 = maxList17.take(k)\n\
    \        val maxList19 = maxList18.sortWith(_ > _)\n        val maxList20 = maxList19.take(k)\n\
    \        val maxList21 = maxList20.sortWith(_ > _)\n        val maxList22 = maxList21.take(k)\n\
    \        val maxList23 = maxList22.sortWith(_ > _)\n        val maxList24 = maxList23.take(k)\n\
    \        val maxList25 = maxList24.sortWith(_ > _)\n        val maxList26 = maxList25.take(k)\n\
    \        val maxList27 = maxList26.sortWith(_ > _)\n        val maxList28 = maxList27.take(k)\n\
    \        val maxList29 = maxList28.sortWith(_ > _)\n        val maxList30 = maxList29.take(k)\n\
    \        val maxList31 = maxList30.sortWith(_ > _)\n        val maxList32 = maxList31.take(k)\n\
    \        val maxList33 = maxList32.sortWith(_ > _)\n        val maxList34 = maxList33.take(k)\n\
    \        val maxList35 = maxList34.sortWith(_ > _)\n        val maxList36 = maxList35.take(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6xkvyvl_.scala:56:39 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mmaxList36\e[0m = maxList35.take(\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xkvyvl_.scala:22:36\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList2\e\
    [0m = maxList.take(k)\n\e[31m\e[31m   |\e[0m                                 \
    \   ^\e[0m\n\e[31m   |\e[0m                                    Found:    (k :\
    \ Long)\n\e[31m   |\e[0m                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xkvyvl_.scala:24:37\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxList4\e\
    [0m = maxList3.take(k)\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xkvyvl_.scala:26:37\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxList6\e\
    [0m = maxList5.take(k)\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                                     Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                                     Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xkvyvl_.scala:28:37\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxList8\e\
    [0m = maxList7.take(k)\n\e[31m\e[31m   |\e[0m                                \
    \     ^\e[0m\n\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = -1000\n        var i = 0\n        while (i\
    \ < k) {\n            if (arr(i) > maxVal) {\n                maxVal = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxList = arr.take(maxIndex).sorted\n        val maxList2 = arr.drop(maxIndex).sorted\n\
    \        val maxList3 = arr.take(maxIndex).sorted\n        val maxList4 = arr.drop(maxIndex).sorted\n\
    \        val maxList5 = arr.take(maxIndex).sorted\n        val maxList6 = arr.drop(maxIndex).sorted\n\
    \        val maxList7 = arr.take(maxIndex).sorted\n        val maxList8 = arr.drop(maxIndex).sorted\n\
    \        val maxList9 = arr.take(maxIndex).sorted\n        val maxList10 = arr.drop(maxIndex).sorted\n\
    \        val maxList11 = arr.take(maxIndex).sorted\n        val maxList12 = arr.drop(maxIndex).sorted\n\
    \        val maxList13 = arr.take(maxIndex).sorted\n        val maxList14 = arr.drop(maxIndex).sorted\n\
    \        val maxList15 = arr.take(maxIndex).sorted\n        val maxList16 = arr.drop(maxIndex).sorted\n\
    \        val maxList17 = arr.take(maxIndex).sorted\n        val maxList18 = arr.drop(maxIndex).sorted\n\
    \        val maxList19 = arr.take(maxIndex).sorted\n        val maxList20 = arr.drop(maxIndex).sorted\n\
    \        val maxList21 = arr.take(maxIndex).sorted\n        val maxList22 = arr.drop(maxIndex).sorted\n\
    \        val maxList23 = arr.take(maxIndex).sorted\n        val maxList24 = arr.drop(maxIndex).sorted\n\
    \        val maxList25 = arr.take(maxIndex).sorted\n        val maxList26 = arr.drop(maxIndex).sorted\n\
    \        val maxList27 = arr.take(maxIndex).sorted\n        val maxList28 = arr.drop(maxIndex).sorted\n\
    \        val maxList29 = arr.take(maxIndex).sorted\n        val maxList30 = arr.drop(maxIndex).sorted\n\
    \        val maxList31 = arr.take(maxIndex).sorted\n        val maxList32 = arr.drop(maxIndex).sorted\n\
    \        val maxList33 = arr.take\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppqracng8.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppqracng8.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppqracng8.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.size\n       \
    \ val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n   \
    \     var i = 0\n        var j = 0\n        var maxIndex = 0\n        var maxValue\
    \ = 0\n        while (i < n) {\n            if (maxIndex[j] < arr(i)) {\n    \
    \            maxIndex[j] = i\n                maxValue = arr(i)\n            }\n\
    \            i += 1\n        }\n        var i = 0\n        while (i < n) {\n \
    \           if (maxIndex[j] == i) {\n                maxIndex[j] += 1\n      \
    \          maxValue += arr(i)\n            }\n            i += 1\n        }\n\
    \        var i = 0\n        while (i < n) {\n            if (maxIndex[j] == i)\
    \ {\n                maxIndex[j] += 1\n                maxValue += arr(i)\n  \
    \          }\n            i += 1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            if (maxIndex[j] == i) {\n                maxIndex[j]\
    \ += 1\n                maxValue += arr(i)\n            }\n            i += 1\n\
    \        }\n        var i = 0\n        while (i < n) {\n            if (maxIndex[j]\
    \ == i) {\n                maxIndex[j] += 1\n                maxValue += arr(i)\n\
    \            }\n            i += 1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            if (maxIndex[j] == i) {\n                maxIndex[j]\
    \ += 1\n                maxValue += arr(i)\n            }\n            i += 1\n\
    \        }\n        var i = 0\n        while (i < n) {\n            if (maxIndex[j]\
    \ == i) {\n                maxIndex[j] += 1\n                maxValue += arr(i)\n\
    \            }\n            i += 1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            if (maxIndex[j] == i) {\n                maxIndex[j]\
    \ += 1\n                maxValue += arr(i)\n            }\n            i += 1\n\
    \        }\n        var i = 0\n        while (i < n) {\n            if (maxIndex[j]\
    \ == i) {\n                maxIndex[j] += 1\n                maxValue += arr(i)\n\
    \            }\n            i += 1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            if (maxIndex[j] == i) {\n                maxIndex[j]\
    \ += 1\n                maxValue += arr(i)\n            }\n            i += 1\n\
    \        }\n        var i = 0\n        while (i < n) {\n            if (maxIndex[j]\
    \ == i) {\n                maxIndex[j] += 1\n                maxValue += arr(i)\n\
    \            }\n            i += 1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            if (maxIndex[j] == i) {\n                maxIndex[j]\
    \ += 1\n                maxValue += arr(i)\n            }\n            i += 1\n\
    \        }\n        var i = 0\n        while (i < n) {\n            if (maxIndex[j]\
    \ == i) {\n                maxIndex[j] += 1\n                maxValue += arr(i)\n\
    \            }\n            i += 1\n        }\n        var i = 0\n        while\
    \ (i < n) {\n            if (maxIndex[j] == i) {\n                maxIndex[j]\
    \ += 1\n                maxValue += arr(i)\n            }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfab0xrcl.scala:29:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                maxIndex[\e[35mj\e[0m] = i\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               end of statement expected but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpfab0xrcl.scala:152:0 ---------------------------\e[0m\e\
    [0m\n\e[31m152 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfab0xrcl.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfab0xrcl.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined as \e[33mvariable\e\
    [0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpfab0xrcl.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfab0xrcl.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5bcnzxxs.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bcnzxxs.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5bcnzxxs.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp5bcnzxxs.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexSet = new HashSet[Int]()\n\
    \        var i = 0\n        var j = 0\n        var maxIndex = 0\n        var maxValue\
    \ = 0\n        var maxIndexSetSize = 0\n        while (i < len) {\n          \
    \  if (maxIndexSet.contains(i)) {\n                maxIndexSetSize += 1\n    \
    \            if (maxIndexSetSize == k) {\n                    maxIndexSet.remove(i)\n\
    \                    maxIndexSetSize -= 1\n                }\n            } else\
    \ {\n                maxIndexSet.add(i)\n                maxIndexSetSize += 1\n\
    \            }\n            if (maxIndexSetSize == k) {\n                maxIndexSet.remove(i)\n\
    \                maxIndexSetSize -= 1\n            }\n            if (maxIndexSetSize\
    \ == k) {\n                maxIndexSet.remove(i)\n                maxIndexSetSize\
    \ -= 1\n            }\n            if (maxIndexSetSize == k) {\n             \
    \   maxIndexSet.remove(i)\n                maxIndexSetSize -= 1\n            }\n\
    \            if (maxIndexSetSize == k) {\n                maxIndexSet.remove(i)\n\
    \                maxIndexSetSize -= 1\n            }\n            if (maxIndexSetSize\
    \ == k) {\n                maxIndexSet.remove(i)\n                maxIndexSetSize\
    \ -= 1\n            }\n            if (maxIndexSetSize == k) {\n             \
    \   maxIndexSet.remove(i)\n                maxIndexSetSize -= 1\n            }\n\
    \            if (maxIndexSetSize == k) {\n                maxIndexSet.remove(i)\n\
    \                maxIndexSetSize -= 1\n            }\n            if (maxIndexSetSize\
    \ == k) {\n                maxIndexSet.remove(i)\n                maxIndexSetSize\
    \ -= 1\n            }\n            if (maxIndexSetSize == k) {\n             \
    \   maxIndexSet.remove(i)\n                maxIndexSetSize -= 1\n            }\n\
    \            if (maxIndexSetSize == k) {\n                maxIndexSet.remove(i)\n\
    \                maxIndexSetSize -= 1\n            }\n            if (maxIndexSetSize\
    \ == k) {\n                maxIndexSet.remove(i)\n                maxIndexSetSize\
    \ -= 1\n            }\n            if (maxIndexSetSize == k) {\n             \
    \   maxIndexSet.remove(i)\n                maxIndexSetSize -= 1\n            }\n\
    \            if (maxIndexSetSize == k) {\n                maxIndexSet.remove(i)\n\
    \                maxIndexSetSize -= 1\n            }\n            if (maxIndexSetSize\
    \ == k) {\n                maxIndexSet.remove(i)\n                maxIndexSetSize\
    \ -= 1\n            }\n            if (maxIndexSetSize == k) {\n             \
    \   maxIndexSet.remove(i)\n                maxIndexSetSize -= 1\n            }\n\
    \            if (maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcvwi55zj.scala:102:4 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcvwi55zj.scala:118:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m118 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpcvwi55zj.scala:27:12 ---------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcvwi55zj.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvwi55zj.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcvwi55zj.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m long"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i < len)\
    \ {\n            if (arr(i) > arr(maxIndex)) {\n                maxIndex = i\n\
    \            }\n            i += 1\n        }\n        val maxList = arr.take(maxIndex).sorted\n\
    \        val maxList2 = arr.drop(maxIndex).sorted\n        val maxList3 = arr.take(maxIndex).sorted\n\
    \        val maxList4 = arr.drop(maxIndex).sorted\n        val maxList5 = arr.take(maxIndex).sorted\n\
    \        val maxList6 = arr.drop(maxIndex).sorted\n        val maxList7 = arr.take(maxIndex).sorted\n\
    \        val maxList8 = arr.drop(maxIndex).sorted\n        val maxList9 = arr.take(maxIndex).sorted\n\
    \        val maxList10 = arr.drop(maxIndex).sorted\n        val maxList11 = arr.take(maxIndex).sorted\n\
    \        val maxList12 = arr.drop(maxIndex).sorted\n        val maxList13 = arr.take(maxIndex).sorted\n\
    \        val maxList14 = arr.drop(maxIndex).sorted\n        val maxList15 = arr.take(maxIndex).sorted\n\
    \        val maxList16 = arr.drop(maxIndex).sorted\n        val maxList17 = arr.take(maxIndex).sorted\n\
    \        val maxList18 = arr.drop(maxIndex).sorted\n        val maxList19 = arr.take(maxIndex).sorted\n\
    \        val maxList20 = arr.drop(maxIndex).sorted\n        val maxList21 = arr.take(maxIndex).sorted\n\
    \        val maxList22 = arr.drop(maxIndex).sorted\n        val maxList23 = arr.take(maxIndex).sorted\n\
    \        val maxList24 = arr.drop(maxIndex).sorted\n        val maxList25 = arr.take(maxIndex).sorted\n\
    \        val maxList26 = arr.drop(maxIndex).sorted\n        val maxList27 = arr.take(maxIndex).sorted\n\
    \        val maxList28 = arr.drop(maxIndex).sorted\n        val maxList29 = arr.take(maxIndex).sorted\n\
    \        val maxList30 = arr.drop(maxIndex).sorted\n        val maxList31 = arr.take(maxIndex).sorted\n\
    \        val maxList32 = arr.drop(maxIndex).sorted\n        val maxList33 = arr.take(maxIndex).sorted\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8jrde4po.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8jrde4po.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8jrde4po.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val minIndex\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndex2 = new mutable.PriorityQueue[Int]()\n\
    \        val minIndex2 = new mutable.PriorityQueue[Int]()\n        val maxIndex3\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndex3 = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndex4 = new mutable.PriorityQueue[Int]()\n        val minIndex4\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndex5 = new mutable.PriorityQueue[Int]()\n\
    \        val minIndex5 = new mutable.PriorityQueue[Int]()\n        val maxIndex6\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndex6 = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndex7 = new mutable.PriorityQueue[Int]()\n        val minIndex7\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndex8 = new mutable.PriorityQueue[Int]()\n\
    \        val minIndex8 = new mutable.PriorityQueue[Int]()\n        val maxIndex9\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndex9 = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndex10 = new mutable.PriorityQueue[Int]()\n        val minIndex10\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndex11 = new mutable.PriorityQueue[Int]()\n\
    \        val minIndex11 = new mutable.PriorityQueue[Int]()\n        val maxIndex12\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndex12 = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndex13 = new mutable.PriorityQueue[Int]()\n        val minIndex13\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndex14 = new mutable.PriorityQueue[Int]()\n\
    \        val minIndex14 = new mutable.PriorityQueue[Int]()\n        val maxIndex15\
    \ = new mutable.PriorityQueue[Int]()\n        val minIndex15 = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndex16 = new mutable.PriorityQueue[Int]()\n        val minIndex16\
    \ = new mutable.PriorityQueue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdydvhvmk.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdydvhvmk.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdydvhvmk.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdydvhvmk.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdydvhvmk.scala:24:27\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tm"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val max = arr.max\n        val min = arr.min\n\
    \        val mid = len / 2\n        val midVal = arr(mid)\n        val midVal2\
    \ = arr(mid-1)\n        val midVal3 = arr(mid+1)\n        val midVal4 = arr(mid+2)\n\
    \        val midVal5 = arr(mid+3)\n        val midVal6 = arr(mid+4)\n        val\
    \ midVal7 = arr(mid+5)\n        val midVal8 = arr(mid+6)\n        val midVal9\
    \ = arr(mid+7)\n        val midVal10 = arr(mid+8)\n        val midVal11 = arr(mid+9)\n\
    \        val midVal12 = arr(mid+10)\n        val midVal13 = arr(mid+11)\n    \
    \    val midVal14 = arr(mid+12)\n        val midVal15 = arr(mid+13)\n        val\
    \ midVal16 = arr(mid+14)\n        val midVal17 = arr(mid+15)\n        val midVal18\
    \ = arr(mid+16)\n        val midVal19 = arr(mid+17)\n        val midVal20 = arr(mid+18)\n\
    \        val midVal21 = arr(mid+19)\n        val midVal22 = arr(mid+20)\n    \
    \    val midVal23 = arr(mid+21)\n        val midVal24 = arr(mid+22)\n        val\
    \ midVal25 = arr(mid+23)\n        val midVal26 = arr(mid+24)\n        val midVal27\
    \ = arr(mid+25)\n        val midVal28 = arr(mid+26)\n        val midVal29 = arr(mid+27)\n\
    \        val midVal30 = arr(mid+28)\n        val midVal31 = arr(mid+29)\n    \
    \    val midVal32 = arr(mid+30)\n        val midVal33 = arr(mid+31)\n        val\
    \ midVal34 = arr(mid+32)\n        val midVal35 = arr(mid+33)\n        val midVal36\
    \ = arr(mid+34)\n        val midVal37 = arr(mid+35)\n        val midVal38 = arr(mid+36)\n\
    \        val midVal39 = arr(mid+37)\n        val midVal40 = arr(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa8podfgc.scala:64:27 ---------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m        \e[33mval\e[0m \e[36mmidVal40\e[0m = arr(\n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa8podfgc.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa8podfgc.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978884
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = arr.length\n        val maxValue = arr(0)\n        val\
    \ maxIndexList = mutable.ListBuffer.empty[Long]\n        val maxIndexValue = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndexValueSize = arr(0)\n\
    \        val maxIndexListSize = arr.length\n        val maxIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprpr600lk.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprpr600lk.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexListSize\e[0m = arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprpr600lk.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexValueSize\e[0m =\
    \ arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexValueSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexValueSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprpr600lk.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprpr600lk.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexValueSize\e[0m =\
    \ arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexValueSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexValueSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprpr600lk.scala:31"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxValue = arr(0)\n        val\
    \ maxIndex = arr.indexWhere(x => x > maxValue)\n        val maxLength = maxIndex\
    \ - k + 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x\
    \ => x > maxValue)\n        val maxLength = maxIndex - k + 1\n        val maxValue\
    \ = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x => x > maxValue)\n\
    \        val maxLength = maxIndex - k + 1\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexWhere(x => x > maxValue)\n        val maxLength\
    \ = maxIndex - k + 1\n        val maxValue = arr(maxIndex)\n        val maxIndex\
    \ = arr.indexWhere(x => x > maxValue)\n        val maxLength = maxIndex - k +\
    \ 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x\
    \ => x > maxValue)\n        val maxLength = maxIndex - k + 1\n        val maxValue\
    \ = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x => x > maxValue)\n\
    \        val maxLength = maxIndex - k + 1\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexWhere(x => x > maxValue)\n        val maxLength\
    \ = maxIndex - k + 1\n        val maxValue = arr(maxIndex)\n        val maxIndex\
    \ = arr.indexWhere(x => x > maxValue)\n        val maxLength = maxIndex - k +\
    \ 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x\
    \ => x > maxValue)\n        val maxLength = maxIndex - k + 1\n        val maxValue\
    \ = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x => x > maxValue)\n\
    \        val maxLength = maxIndex - k + 1\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = arr.indexWhere(x => x > maxValue)\n        val maxLength\
    \ = maxIndex - k + 1\n        val maxValue = arr(maxIndex)\n        val maxIndex\
    \ = arr.indexWhere(x => x > maxValue)\n        val maxLength = maxIndex - k +\
    \ 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x\
    \ => x > maxValue)\n        val maxLength = maxIndex - k + 1\n        val maxValue\
    \ = arr(maxIndex)\n        val maxIndex = arr.indexWhere(x => x > maxValue)\n\
    \        val maxLength = maxIndex - k + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ahktm_j.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxIndex\
    \ - k + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ahktm_j.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ahktm_j.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = arr.indexWhere(\e[36mx\e[0m => x > maxValue)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ahktm_j.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxIndex - k + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9ahktm_j.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue is\
    \ already defined as \e[33mva"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum : Long = -1\n        for(i <- 0 until arr.length) {\n    \
    \        if(arr(i) > maxNum) {\n                maxNum = arr(i)\n            }\n\
    \        }\n        for(i <- 0 until arr.length) {\n            if(arr(i) == maxNum)\
    \ {\n                maxList += arr(i)\n            }\n        }\n        if(maxList.size\
    \ < k) {\n            for(i <- 0 until k - maxList.size) {\n                maxList\
    \ += maxNum\n            }\n        }\n        maxList.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ej7dyaa.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).maxBy(_.toLong)\n\
    \        val maxNumsIndex = arr.lastIndexWhere(_.toLong == maxNums)\n        val\
    \ maxNumsIndexInRange = maxNumsIndex >= 0 && maxNumsIndex < arr.length\n     \
    \   if (maxNumsIndexInRange) {\n            arr.drop(maxNumsIndex).take(k).sortBy(_.toLong)\n\
    \        } else {\n            arr.take(k).sortBy(_.toLong)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8aerowdv.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxNums\e\
    [0m = arr.take(k).maxBy(_.toLong)\n\e[31m\e[31m   |\e[0m                     \
    \          ^\e[0m\n\e[31m   |\e[0m                               Found:    (k\
    \ : Long)\n\e[31m   |\e[0m                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8aerowdv.scala:24:40 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            arr.drop(maxNumsIndex).take(k).sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        Found:    (k : Long)\n\e[31m \
    \  |\e[0m                                        Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8aerowdv.scala:26:21 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            arr.take(k).sortBy(_.toLong)\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (k : Long)\n\e[31m   |\e[0m                     Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.size\n       \
    \ val m = arr.max\n        val max = new Array[Long](k)\n        var i = 0\n \
    \       while (i < k) {\n            if (arr(i) < m) {\n                max(i)\
    \ = arr(i)\n                i += 1\n            } else {\n                max(i)\
    \ = m\n                i += 1\n            }\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd8l3c4sz.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = math.min(k, n)\n        val result = new Array[Long](m)\n        var\
    \ i = 0\n        var j = 0\n        var max = 0\n        while (i < m && j < n)\
    \ {\n            if (arr(i) > arr(j)) {\n                max = arr(i)\n      \
    \          i += 1\n            } else {\n                max = arr(j)\n      \
    \          j += 1\n            }\n            result(i) = max\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8ua48g_.scala:22:37\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](m)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (m : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_8ua48g_.scala:28:25 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_8ua48g_.scala:31:25 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                max = arr(j)\n\e[31m\e[31m   |\e[0m \
    \                     ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_8ua48g_.scala:36:8 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumList\
    \ = arr.take(maxNumIndex + 1)\n        val maxNumListIndex = maxNumList.indexWhere(x\
    \ => x == maxNum)\n        val maxNumListIndex = maxNumListIndex + 1\n       \
    \ val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex\
    \ - 1\n        val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n        val maxNumListIndex = maxNumListIndex - 1\n \
    \       val maxNumListIndex = maxNumListIndex - 1\n        val maxNumListIndex\
    \ = maxNumListIndex - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lxtwt46.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumListIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0lxtwt46.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumListIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0lxtwt46.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumListIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0lxtwt46.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumListIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0lxtwt46.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumLi"
  stdout: ''
  timestamp: 1659978885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while(i < k) {\n            val max = arr(i)\n            val\
    \ j = i\n            while(j < len) {\n                if(arr(j) > max) {\n  \
    \                  max = arr(j)\n                }\n                j += 1\n \
    \           }\n            i += 1\n            for(j <- 0 until i) {\n       \
    \         arr(j) = max\n            }\n        }\n        arr.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphz_x_f6x.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmphz_x_f6x.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmphz_x_f6x.scala:29:24 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    max = arr(j)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphz_x_f6x.scala:31:18\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean j.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxIndex = 0\n        var maxValue = arr(0)\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) > maxValue) {\n                maxValue\
    \ = arr(i)\n                maxIndex = i\n            }\n        }\n        maxList\
    \ += maxValue\n        for (i <- 0 until arr.length - maxIndex + 1) {\n      \
    \      if (arr(i) > maxValue) {\n                maxValue += arr(i)\n        \
    \        maxIndex += 1\n            }\n        }\n        if (maxIndex < k) {\n\
    \            val newList = arr.take(maxIndex).reverse\n            val newList2\
    \ = arr.drop(maxIndex).reverse\n            newList ++= newList2\n           \
    \ maximum(newList, k)\n        } else {\n            maxList\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvix2774y.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvix2774y.scala:39:20 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            newList ++= newList2\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value ++= is not a member\
    \ of List[Long] - did you mean newList.++?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortWith(_ <\
    \ _)\n        val max = new Array[Long](k)\n        var i = 0\n        var j =\
    \ 0\n        var maxIndex = 0\n        while (i < arr.length) {\n            if\
    \ (j == k) {\n                maxIndex = i\n                while (j < k) {\n\
    \                    max(i) = arr(j)\n                    j++\n              \
    \  }\n                break\n            }\n            if (arr(i) > arr(j)) {\n\
    \                max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(j)\n                j += 1\n            }\n    \
    \    }\n        max.reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpw7bdglm1.scala:30:23 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpw7bdglm1.scala:20:18 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortWith(_ < _)\n\e[31m\e\
    [31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpw7bdglm1.scala:21:34 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw7bdglm1.scala:32:16\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7bdglm1.scala:42:12\
    \ --------------------\e[0m\e[0m\n\e[31m42 |\e[0m        max.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mArray\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until len) {\n\
    \            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        val result = new\
    \ Array[Long](k)\n        for(i <- 0 until k) {\n            result(i) = arr(maxIndex\
    \ + i)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4kcexlbv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:31:37\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4kcexlbv.scala:32:25 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:35:8 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        if (maxIndex == arr.length) {\n            result.addAll(arr.take(maxIndex))\n\
    \        } else {\n            result.addAll(arr.take(maxIndex - k + 1))\n   \
    \         result.addAll(arr.drop(maxIndex))\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgy90o_rz.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgy90o_rz.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.size\n        val m = arr.max\n        val maxList = mutable.ListBuffer[Long]()\n\
    \        var maxIndex = 0\n        var maxVal = 0\n        var index = 0\n   \
    \     var val = 0\n        while (index < n) {\n            val curVal = arr(index)\n\
    \            if (curVal > maxVal) {\n                maxVal = curVal\n       \
    \         maxIndex = index\n            }\n            index += 1\n        }\n\
    \        maxIndex -= 1\n        while (maxIndex >= 0) {\n            val curVal\
    \ = arr(maxIndex)\n            if (curVal > maxVal) {\n                maxVal\
    \ = curVal\n                maxIndex = maxIndex - 1\n            }\n         \
    \   maxIndex -= 1\n        }\n        maxIndex += 1\n        while (maxIndex <\
    \ n) {\n            val curVal = arr(maxIndex)\n            if (curVal > maxVal)\
    \ {\n                maxVal = curVal\n                maxIndex = maxIndex + 1\n\
    \            }\n            maxIndex += 1\n        }\n        maxIndex -= 1\n\
    \        while (maxIndex >= 0) {\n            val curVal = arr(maxIndex)\n   \
    \         if (curVal > maxVal) {\n                maxVal = curVal\n          \
    \      maxIndex = maxIndex - 1\n            }\n            maxIndex -= 1\n   \
    \     }\n        maxIndex += 1\n        while (maxIndex < n) {\n            val\
    \ curVal = arr(maxIndex)\n            if (curVal > maxVal) {\n               \
    \ maxVal = curVal\n                maxIndex = maxIndex + 1\n            }\n  \
    \          maxIndex += 1\n        }\n        maxIndex -= 1\n        while (maxIndex\
    \ >= 0) {\n            val curVal = arr(maxIndex)\n            if (curVal > maxVal)\
    \ {\n                maxVal = curVal\n                maxIndex = maxIndex - 1\n\
    \            }\n            maxIndex -= 1\n        }\n        maxIndex += 1\n\
    \        while (maxIndex < n) {\n            val curVal = arr(maxIndex)\n    \
    \        if (curVal > maxVal) {\n                maxVal = curVal\n           \
    \     maxIndex = maxIndex + 1\n            }\n            maxIndex += 1\n    \
    \    }\n        maxIndex -= 1\n        while (maxIndex >= 0) {\n            val\
    \ curVal = arr(maxIndex)\n            if (curVal > maxVal) {\n               \
    \ maxVal = curVal\n                maxIndex = maxIndex - 1\n            }\n  \
    \          maxIndex -= 1\n        }\n        maxIndex += 1\n        while (maxIndex\
    \ < n) {\n            val curVal = arr(maxIndex)\n            if (curVal > maxVal)\
    \ {\n                maxVal = curVal\n                maxIndex = maxIndex + 1\n\
    \            }\n            maxIndex += 1\n        }\n        maxIndex -= 1\n\
    \        while (maxIndex >= 0) {\n            val curVal = arr(maxIndex)\n   \
    \         if (\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk7_kpyl3.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[33mval\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk7_kpyl3.scala:111:16\
    \ --------------------------\e[0m\e[0m\n\e[31m111 |\e[0m            \e[33mif\e\
    [0m (\n\e[31m\e[31m    |\e[0m                ^\e[0m\n\e[31m    |\e[0m        \
    \        expression expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m\
    \    |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpk7_kpyl3.scala:128:0 ---------------------------\e\
    [0m\e[0m\n\e[31m128 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk7_kpyl3.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk7_kpyl3.scala:23:22\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7_kpyl3.scala:127:1\
    \ --------------------\e[0m\e[0m\n\e[31m127 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: List[Long]\n\e\
    [31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpk7_kpyl3.scala:113:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m113 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36m"
  stdout: ''
  timestamp: 1659978895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLen = arr.length\n        val maxK = k\n        val maxValue =\
    \ arr(0)\n        val maxIndex = arr.indexOf(0)\n        val maxIndex2 = arr.indexOf(0)\n\
    \        val maxIndex3 = arr.indexOf(0)\n        val maxIndex4 = arr.indexOf(0)\n\
    \        val maxIndex5 = arr.indexOf(0)\n        val maxIndex6 = arr.indexOf(0)\n\
    \        val maxIndex7 = arr.indexOf(0)\n        val maxIndex8 = arr.indexOf(0)\n\
    \        val maxIndex9 = arr.indexOf(0)\n        val maxIndex10 = arr.indexOf(0)\n\
    \        val maxIndex11 = arr.indexOf(0)\n        val maxIndex12 = arr.indexOf(0)\n\
    \        val maxIndex13 = arr.indexOf(0)\n        val maxIndex14 = arr.indexOf(0)\n\
    \        val maxIndex15 = arr.indexOf(0)\n        val maxIndex16 = arr.indexOf(0)\n\
    \        val maxIndex17 = arr.indexOf(0)\n        val maxIndex18 = arr.indexOf(0)\n\
    \        val maxIndex19 = arr.indexOf(0)\n        val maxIndex20 = arr.indexOf(0)\n\
    \        val maxIndex21 = arr.indexOf(0)\n        val maxIndex22 = arr.indexOf(0)\n\
    \        val maxIndex23 = arr.indexOf(0)\n        val maxIndex24 = arr.indexOf(0)\n\
    \        val maxIndex25 = arr.indexOf(0)\n        val maxIndex26 = arr.indexOf(0)\n\
    \        val maxIndex27 = arr.indexOf(0)\n        val maxIndex28 = arr.indexOf(0)\n\
    \        val maxIndex29 = arr.indexOf(0)\n        val maxIndex30 = arr.indexOf(0)\n\
    \        val maxIndex31 = arr.indexOf(0)\n        val maxIndex32 = arr.indexOf(0)\n\
    \        val maxIndex33 = arr.indexOf(0)\n        val maxIndex34 = arr.indexOf(0)\n\
    \        val maxIndex35 = arr.indexOf(0)\n        val maxIndex36 = arr.indexOf(0)\n\
    \        val maxIndex37 = arr.indexOf(0)\n        val maxIndex38 = arr.indexOf(0)\n\
    \        val maxIndex39 = arr.indexOf(0)\n        val maxIndex40 = arr.indexOf(0)\n\
    \        val maxIndex41 = arr.indexOf(0)\n        val maxIndex42 = arr.indexOf(0)\n\
    \        val maxIndex43 = arr.indexOf(0)\n        val maxIndex44 = arr.indexOf(0)\n\
    \        val maxIndex45 = arr.indexOf(0)\n        val maxIndex46 = arr.indexOf(0)\n\
    \        val maxIndex47 = arr.indexOf(0)\n        val maxIndex48 = arr.indexOf(0)\n\
    \        val maxIndex49 = arr.indexOf(0)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9n5k1bpi.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9n5k1bpi.scala:74:5 ---------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoq9iky7h.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoq9iky7h.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoq9iky7h.scala:22:22\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoq9iky7h.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoq9iky7h.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoq9iky7h.scala:25:31 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659978895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxLength = arr.length - maxIndex\n        if (maxLength > k) {\n\
    \            while (maxLength > k) {\n                result.add(arr(maxIndex))\n\
    \                maxLength -= 1\n            }\n        } else {\n           \
    \ while (maxLength < k) {\n                result.add(arr(maxIndex))\n       \
    \         maxLength += 1\n            }\n        }\n        result.sortWith(_\
    \ < _)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpskhaxenj.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpskhaxenj.scala:26:25\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpskhaxenj.scala:35:26\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                maxLength\
    \ -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value -= is not a member of Int - did you mean maxLength.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpskhaxenj.scala:40:26 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                maxLength += \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean maxLength.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = arr.max\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmo98ai70.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmo98ai70.scala:22:34 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e\
    [0m](k)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (k : Long)\n\e[31m   |\e\
    [0m                                  Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmo98ai70.scala:23:38 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m               \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    (k : Long)\n\e[31m   |\e[0m                               \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmo98ai70.scala:24:30\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmo98ai70.scala:25:31 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmo9"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val arr = arr.toList\n        val len = arr.size\n        val max = arr.max\n\
    \        val min = arr.min\n        val mid = len / 2\n        val midVal = arr(mid)\n\
    \        val maxVal = arr(len - mid)\n        val minVal = arr(mid)\n        val\
    \ midValIndex = arr.indexOf(midVal)\n        val maxValIndex = arr.indexOf(maxVal)\n\
    \        val minValIndex = arr.indexOf(minVal)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n\
    \        val midIndex = arr.indexOf(mid)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        val midIndex = arr.indexOf(mid)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minIndex = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpimr8cxah.scala:78:22 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpimr8cxah.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOf(max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpimr8cxah.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = arr.indexOf(min)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpimr8cxah.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmidIndex\e[0m = arr.indexOf(mid)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmidIndex is already defined as \e[33mvalue\e[0m \e[35mmidIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpimr8cxah.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOf(max)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same grou"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxLength = arr.length\n        val maxValue = arr(0)\n        val\
    \ maxIndex = arr.indexOf(0)\n        val maxLength2 = maxLength - k\n        val\
    \ maxValue2 = arr(maxIndex)\n        val maxIndex2 = maxIndex + 1\n        val\
    \ maxLength3 = maxLength2 - k\n        val maxValue3 = arr(maxIndex2)\n      \
    \  val maxIndex3 = maxIndex2 + 1\n        val maxLength4 = maxLength3 - k\n  \
    \      val maxValue4 = arr(maxIndex3)\n        val maxIndex4 = maxIndex3 + 1\n\
    \        val maxLength5 = maxLength4 - k\n        val maxValue5 = arr(maxIndex4)\n\
    \        val maxIndex5 = maxIndex4 + 1\n        val maxLength6 = maxLength5 -\
    \ k\n        val maxValue6 = arr(maxIndex5)\n        val maxIndex6 = maxIndex5\
    \ + 1\n        val maxLength7 = maxLength6 - k\n        val maxValue7 = arr(maxIndex6)\n\
    \        val maxIndex7 = maxIndex6 + 1\n        val maxLength8 = maxLength7 -\
    \ k\n        val maxValue8 = arr(maxIndex7)\n        val maxIndex8 = maxIndex7\
    \ + 1\n        val maxLength9 = maxLength8 - k\n        val maxValue9 = arr(maxIndex8)\n\
    \        val maxIndex9 = maxIndex8 + 1\n        val maxLength10 = maxLength9 -\
    \ k\n        val maxValue10 = arr(maxIndex9)\n        val maxIndex10 = maxIndex9\
    \ + 1\n        val maxLength11 = maxLength10 - k\n        val maxValue11 = arr(maxIndex10)\n\
    \        val maxIndex11 = maxIndex10 + 1\n        val maxLength12 = maxLength11\
    \ - k\n        val maxValue12 = arr(maxIndex11)\n        val maxIndex12 = maxIndex11\
    \ + 1\n        val maxLength13 = maxLength12 - k\n        val maxValue13 = arr(maxIndex12)\n\
    \        val maxIndex13 = maxIndex12 + 1\n        val maxLength14 = maxLength13\
    \ - k\n        val maxValue14 = arr(maxIndex13)\n        val maxIndex14 = maxIndex13\
    \ + 1\n        val maxLength15 = maxLength14 - k\n        val maxValue15 = arr(maxIndex14)\n\
    \        val maxIndex15 = maxIndex14 + 1\n        val maxLength16 = maxLength15\
    \ - k\n        val maxValue16 = arr(maxIndex15)\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp47jkj38c.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp47jkj38c.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp47jkj38c.scala:69:5\
    \ ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.max\n        val maxIndex = arr.indexWhere(x => x\
    \ == maxValue)\n        val maxIndex = maxIndex + 1\n        val maxLength = arr.length\n\
    \        val maxIndex = maxIndex - k\n        val maxLength = maxLength - k\n\
    \        val maxIndex = maxIndex % maxLength\n        val maxLength = maxLength\
    \ % maxLength\n        val maxIndex = maxIndex / maxLength\n        val maxLength\
    \ = maxLength / maxLength\n        val maxIndex = maxIndex.toInt\n        val\
    \ maxLength = maxLength.toInt\n        val maxIndex = maxIndex.toLong\n      \
    \  val maxLength = maxLength.toLong\n        val maxIndex = maxIndex - k\n   \
    \     val maxLength = maxLength - k\n        val maxIndex = maxIndex % maxLength\n\
    \        val maxLength = maxLength % maxLength\n        val maxIndex = maxIndex\
    \ / maxLength\n        val maxLength = maxLength / maxLength\n        val maxIndex\
    \ = maxIndex.toInt\n        val maxLength = maxLength.toInt\n        val maxIndex\
    \ = maxIndex.toLong\n        val maxLength = maxLength.toLong\n        val maxIndex\
    \ = maxIndex - k\n        val maxLength = maxLength - k\n        val maxIndex\
    \ = maxIndex % maxLength\n        val maxLength = maxLength % maxLength\n    \
    \    val maxIndex = maxIndex / maxLength\n        val maxLength = maxLength /\
    \ maxLength\n        val maxIndex = maxIndex.toInt\n        val maxLength = maxLength.toInt\n\
    \        val maxIndex = maxIndex.toLong\n        val maxLength = maxLength.toLong\n\
    \        val maxIndex = maxIndex - k\n        val maxLength = maxLength - k\n\
    \        val maxIndex = maxIndex % maxLength\n        val maxLength = maxLength\
    \ % maxLength\n        val maxIndex = maxIndex / maxLength\n        val maxLength\
    \ = maxLength / maxLength\n        val maxIndex = maxIndex.toInt\n        val\
    \ maxLength = maxLength.toInt\n        val maxIndex = maxIndex.toLong\n      \
    \  val maxLength = maxLength.toLong\n        val maxIndex = maxIndex - k\n   \
    \     val maxLength = maxLength - k\n        val maxIndex = maxIndex % maxLength\n\
    \        val maxLength = maxLength % maxLength\n        val maxIndex = maxIndex\
    \ / maxLength\n        val maxLength = maxLength / maxLength\n        val maxIndex\
    \ = maxIndex.toInt\n        val maxLength = maxLength.toInt\n        val maxIndex\
    \ = maxIndex.toLong\n        val \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpstx5pveo.scala:74:11 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpstx5pveo.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpstx5pveo.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - k\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpstx5pveo.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLength\e[0m = maxLength - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpstx5pveo.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex % maxLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps"
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = arr.indexOf(0)\n        val maxIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexLength = maxIndex + 1\n\
    \        val maxIndexK = maxIndex + 1\n        val maxIndexValue = arr(0)\n  \
    \      val maxIndexIndex = arr.indexOf(0)\n        val maxIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexLength = maxIndexIndex + 1\n        val maxIndexIndexK\
    \ = maxIndexIndex + 1\n        val maxIndexIndexValue = arr(0)\n        val maxIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexLength = maxIndexIndexIndex + 1\n        val maxIndexIndexIndexK\
    \ = maxIndexIndexIndex + 1\n        val maxIndexIndexIndexValue = arr(0)\n   \
    \     val maxIndexIndexIndexIndex = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexIndexLength\
    \ = maxIndexIndexIndexIndex + 1\n        val maxIndexIndexIndexIndexK = maxIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndex + 1\n\
    \        val maxIndexIndexIndexIndexIndexK = maxIndexIndexIndexIndex + 1\n   \
    \     val maxIndexIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexIndexK = maxIndexIndexIndexIndex + 1\n\
    \        val maxIndexIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexIndexLength = maxIndexIndexIndexIndexIndex\
    \ + 1\n        val maxIndexIndexIndexIndexIndexK = maxIndexIndexIndexIndex + 1\n\
    \        val maxIndexIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgyrnocbf.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgyrnocbf.scala:52:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexIndexK\e[0m = maxIndexIndexIndexIndex + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexK is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexIndexK\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgyrnocbf.scala:53:12 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexIndexValue\e\
    [0m = arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexValue is already defined as \e\
    [33mvalue\e[0m \e[35mmaxIndexIndexIndexIndexIndexValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgyrnocbf.scala:54:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexIndexIndex\e[0m = arr.indexOf(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxIndexIndexIndexIndexIndexIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgyrnocbf.scala:55:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexIndexIndexList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoq9iky7h.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoq9iky7h.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoq9iky7h.scala:22:22\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoq9iky7h.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoq9iky7h.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoq9iky7h.scala:25:31 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \    "
  stdout: ''
  timestamp: 1659978895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9f8sbghd.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9f8sbghd.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9f8sbghd.scala:22:22\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9f8sbghd.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9f8sbghd.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9f8sbghd.scala:25:31 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \   "
  stdout: ''
  timestamp: 1659978897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = arr.indexWhere(x => x > maxValue)\n       \
    \ val maxIndexList = arr.take(maxIndex)\n        val maxIndexListLength = maxIndexList.length\n\
    \        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc7236x0l.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc7236x0l.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc7236x0l.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc7236x0l.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc7236x0l.scala:31:12 ---------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp586lb29w.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp586lb29w.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp586lb29w.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxListSize = arr.length\n        val maxListIndex = arr.length\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n        val\
    \ maxListIndex = k\n        val maxListSize = k\n        val maxListIndex = k\n\
    \        val maxListSize = k\n        val maxListIndex = k\n        val maxListSize\
    \ = k\n        val maxListIndex = k\n        val maxListSize = k\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt2u67vub.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = k\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt2u67vub.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListIndex\e[0m = k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt2u67vub.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = k\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt2u67vub.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListIndex\e[0m = k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt2u67vub.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxListSize\e[0m = k\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definit"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val max = arr.sortWith(_ < _)\n        val len = arr.length\n        val\
    \ maxLen = max.length\n        val maxK = len - k\n        val maxKList = maxK\
    \ until maxLen\n        val maxKList = maxKList.map(x => max(x).toLong)\n    \
    \    val maxKList = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x\
    \ => max(x).toLong)\n        val maxKList = maxKList.sortWith(_ < _)\n       \
    \ val maxKList = maxKList.map(x => max(x).toLong)\n        val maxKList = maxKList.sortWith(_\
    \ < _)\n        val maxKList = maxKList.map(x => max(x).toLong)\n        val maxKList\
    \ = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x => max(x).toLong)\n\
    \        val maxKList = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x\
    \ => max(x).toLong)\n        val maxKList = maxKList.sortWith(_ < _)\n       \
    \ val maxKList = maxKList.map(x => max(x).toLong)\n        val maxKList = maxKList.sortWith(_\
    \ < _)\n        val maxKList = maxKList.map(x => max(x).toLong)\n        val maxKList\
    \ = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x => max(x).toLong)\n\
    \        val maxKList = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x\
    \ => max(x).toLong)\n        val maxKList = maxKList.sortWith(_ < _)\n       \
    \ val maxKList = maxKList.map(x => max(x).toLong)\n        val maxKList = maxKList.sortWith(_\
    \ < _)\n        val maxKList = maxKList.map(x => max(x).toLong)\n        val maxKList\
    \ = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x => max(x).toLong)\n\
    \        val maxKList = maxKList.sortWith(_ < _)\n        val maxKList = maxKList.map(x\
    \ => max(x).toLong)\n        val maxKList = maxKList.sortWith(_ < _)\n       \
    \ val maxKList = maxKList.map(x => max(x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppb3w6zjh.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppb3w6zjh.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxKList\e[0m = maxKList.map(\e[36mx\e[0m => max(x).toLong)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxKList is already defined as \e[33mvalue\e[0m \e[35mmaxKList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppb3w6zjh.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxKList\e[0m = maxKList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKList is already defined as \e[33mvalue\e[0m \e[35mmaxKList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppb3w6zjh.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxKList\e[0m = maxKList.map(\e[36mx\e\
    [0m => max(x).toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKList is already defined as \e[33mvalue\e[0m \e[35mmaxKList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppb3w6zjh.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxKList\e[0m = maxKList.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKList is already defined as \e[33mvalue\e[0m \e[35mmaxKList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexOfMax\n \
    \       val maxValue = arr(maxIndex)\n        val maxIndexList = arr.filter(_\
    \ != maxValue)\n        val maxIndexListLength = maxIndexList.length\n       \
    \ val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzmvyj35i.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzmvyj35i.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzmvyj35i.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzmvyj35i.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzmvyj35i.scala:30:12 ---------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        var maxIndex2 = 0\n   \
    \     var maxValue2 = arr(0)\n        for(i <- 0 until len) {\n            if(arr(i)\
    \ > maxValue) {\n                maxValue = arr(i)\n                maxIndex =\
    \ i\n            }\n            if(arr(i) > maxValue2) {\n                maxValue2\
    \ = arr(i)\n                maxIndex2 = i\n            }\n        }\n        if(maxIndex\
    \ == maxIndex2) {\n            max += maxValue\n        }\n        else {\n  \
    \          max += maxValue2\n            max += maxValue\n        }\n        max.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpor6io460.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpor6io460.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpor6io460.scala:38:16\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            max += maxValue\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m          value +=\
    \ is not a member of Array[Long] - did you mean max.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpor6io460.scala:41:16 ------------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m            max += maxValue2\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m          value += is not a member of Array[Long]\
    \ - did you mean max.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpor6io460.scala:42:16\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            max += maxValue\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m          value +=\
    \ is not a member of Array[Long] - did you mean max.!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxNum = arr.max\n        val maxNumIndex\
    \ = arr.indexWhere(x => x == maxNum)\n        val maxNumIndex = maxNumIndex.max\n\
    \        val maxNum = arr(maxNumIndex)\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNumIndex.min\n\
    \        val maxNumIndex = maxNumIndex.max\n        val maxNumIndex = maxNum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_po7t_jd.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_po7t_jd.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxNum\e[0m = arr(maxNumIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxNum\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxNum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_po7t_jd.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumIndex\e[0m = maxNumIndex.min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_po7t_jd.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_po7t_jd.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.min\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val maxList = mutable.ArrayBuffer(arr.take(k))\n\
    \        val maxLen = maxList.length\n        val maxIndex = maxList.indexWhere(_\
    \ > 0)\n        val maxValue = maxList[maxIndex]\n        val maxIndexList = maxList.indexWhere(_\
    \ == maxValue)\n        val maxIndexListLen = maxIndexList.length\n        val\
    \ maxIndexListIndex = maxIndexList.indexWhere(_ < 0)\n        val maxIndexListValue\
    \ = maxIndexList[maxIndexListIndex]\n        val maxIndexListValueLen = maxIndexListValue.length\n\
    \        val maxIndexListValueIndex = maxIndexListValue.indexWhere(_ < 0)\n  \
    \      val maxIndexListValueValue = maxIndexListValue[maxIndexListValueIndex]\n\
    \        val maxIndexListValueValueLen = maxIndexListValueValue.length\n     \
    \   val maxIndexListValueValueIndex = maxIndexListValueValue.indexWhere(_ < 0)\n\
    \        val maxIndexListValueValueValue = maxIndexListValueValue[maxIndexListValueValueIndex]\n\
    \        val maxIndexListValueValueValueLen = maxIndexListValueValueValue.length\n\
    \        val maxIndexListValueValueIndex = maxIndexListValueValue.indexWhere(_\
    \ < 0)\n        val maxIndexListValueValueValue = maxIndexListValueValue[maxIndexListValueValueIndex]\n\
    \        val maxIndexListValueValueValueLen = maxIndexListValueValueValue.length\n\
    \        val maxIndexListValueValueIndex = maxIndexListValueValue.indexWhere(_\
    \ < 0)\n        val maxIndexListValueValueValue = maxIndexListValueValue[maxIndexListValueValueIndex]\n\
    \        val maxIndexListValueValueValueLen = maxIndexListValueValueValue.length\n\
    \        val maxIndexListValueValueIndex = maxIndexListValueValue.indexWhere(_\
    \ < 0)\n        val maxIndexListValueValueValue = maxIndexListValueValue[maxIndexListValueValueIndex]\n\
    \        val maxIndexListValueValueValueLen = maxIndexListValueValueValue.length\n\
    \        val maxIndexListValueValueIndex = maxIndexListValueValue.indexWhere(_\
    \ < 0)\n        val maxIndexListValueValueValue = maxIndexListValueValue[maxIndexListValueValueIndex]\n\
    \        val maxIndexListValueValueValueLen = maxIndexListValueValueValue.length\n\
    \        val maxIndexListValueValueIndex = maxIndexListValueValue.indexWhere(_\
    \ < 0)\n        val maxIndexListValueValueValue = maxIndexListValueValue[maxIndexListValueValueIndex]\n\
    \        val maxIndexListValue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi938khyr.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi938khyr.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexListValueValueIndex\e[0m = maxIndexListValueValue.indexWhere(_\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListValueValueIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexListValueValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi938khyr.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListValueValueValue\e\
    [0m = maxIndexListValueValue[\e[35mmaxIndexListValueValueIndex\e[0m]\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListValueValueValue is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexListValueValueValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi938khyr.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListValueValueValueLen\e\
    [0m = maxIndexListValueValueValue.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListValueValueValueLen is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexListValueValueValueLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi938khyr.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListValueValueInde"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = arr.max\n        val maxIndex =\
    \ arr.indexWhere(x => x == max)\n        val maxList = arr.take(maxIndex).sortWith(_\
    \ > _)\n        val maxK = maxList.take(k)\n        val maxKList = maxK.sortWith(_\
    \ > _)\n        val maxKList2 = maxKList.take(k)\n        val maxKList3 = maxKList2.sortWith(_\
    \ > _)\n        val maxKList4 = maxKList3.take(k)\n        val maxKList5 = maxKList4.sortWith(_\
    \ > _)\n        val maxKList6 = maxKList5.take(k)\n        val maxKList7 = maxKList6.sortWith(_\
    \ > _)\n        val maxKList8 = maxKList7.take(k)\n        val maxKList9 = maxKList8.sortWith(_\
    \ > _)\n        val maxKList10 = maxKList9.take(k)\n        val maxKList11 = maxKList10.sortWith(_\
    \ > _)\n        val maxKList12 = maxKList11.take(k)\n        val maxKList13 =\
    \ maxKList12.sortWith(_ > _)\n        val maxKList14 = maxKList13.take(k)\n  \
    \      val maxKList15 = maxKList14.sortWith(_ > _)\n        val maxKList16 = maxKList15.take(k)\n\
    \        val maxKList17 = maxKList16.sortWith(_ > _)\n        val maxKList18 =\
    \ maxKList17.take(k)\n        val maxKList19 = maxKList18.sortWith(_ > _)\n  \
    \      val maxKList20 = maxKList19.take(k)\n        val maxKList21 = maxKList20.sortWith(_\
    \ > _)\n        val maxKList22 = maxKList21.take(k)\n        val maxKList23 =\
    \ maxKList22.sortWith(_ > _)\n        val maxKList24 = maxKList23.take(k)\n  \
    \      val maxKList25 = maxKList24.sortWith(_ > _)\n        val maxKList26 = maxKList25.take(k)\n\
    \        val maxKList27 = maxKList26.sortWith(_ > _)\n        val maxKList28 =\
    \ maxKList27.take(k)\n        val maxKList29\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1erv64b6.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1erv64b6.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1erv64b6.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxNum : Long = 0\n        var index : Long = 0\n        var maxIndex\
    \ : Long = 0\n        var maxLength : Long = 0\n        var maxLengthIndex : Long\
    \ = 0\n        var maxLengthIndex2 : Long = 0\n        var maxLengthIndex3 : Long\
    \ = 0\n        var maxLengthIndex4 : Long = 0\n        var maxLengthIndex5 : Long\
    \ = 0\n        var maxLengthIndex6 : Long = 0\n        var maxLengthIndex7 : Long\
    \ = 0\n        var maxLengthIndex8 : Long = 0\n        var maxLengthIndex9 : Long\
    \ = 0\n        var maxLengthIndex10 : Long = 0\n        var maxLengthIndex11 :\
    \ Long = 0\n        var maxLengthIndex12 : Long = 0\n        var maxLengthIndex13\
    \ : Long = 0\n        var maxLengthIndex14 : Long = 0\n        var maxLengthIndex15\
    \ : Long = 0\n        var maxLengthIndex16 : Long = 0\n        var maxLengthIndex17\
    \ : Long = 0\n        var maxLengthIndex18 : Long = 0\n        var maxLengthIndex19\
    \ : Long = 0\n        var maxLengthIndex20 : Long = 0\n        var maxLengthIndex21\
    \ : Long = 0\n        var maxLengthIndex22 : Long = 0\n        var maxLengthIndex23\
    \ : Long = 0\n        var maxLengthIndex24 : Long = 0\n        var maxLengthIndex25\
    \ : Long = 0\n        var maxLengthIndex26 : Long = 0\n        var maxLengthIndex27\
    \ : Long = 0\n        var maxLengthIndex28 : Long = 0\n        var maxLengthIndex29\
    \ : Long = 0\n        var maxLengthIndex30 : Long = 0\n        var maxLengthIndex31\
    \ : Long = 0\n        var maxLengthIndex32 : Long = 0\n        var maxLengthIndex33\
    \ : Long = 0\n        var maxLengthIndex34 : Long = 0\n        var maxLengthIndex35\
    \ : Long = 0\n        var maxLengthIndex36 : Long = 0\n        var maxLengthIndex37\
    \ : Long = 0\n        var maxLengthIndex38 : Long = 0\n        var maxLengthIndex39\
    \ : Long = 0\n        var maxLengthIndex40 : Long = 0\n        var maxLengthIndex41\
    \ : Long = 0\n        var maxLengthIndex42 : Long = 0\n        var maxLengthIndex43\
    \ : Long = 0\n        var maxLengthIndex44 : Long = 0\n        var maxLengthIndex45\
    \ : Long = 0\n        var maxLengthIndex46 : Long = 0\n        var maxLengthIndex47\
    \ : Long = 0\n        var maxLengthIndex48 : Long = 0\n        var maxLengthIndex49\
    \ : Long = 0\n        var maxLengthIndex50 : Long = 0\n        var maxLengthIndex51\
    \ : Long = 0\n        var maxLengthIndex52 : Long = 0\n        var maxLengthIndex53\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpea_ur59e.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpea_ur59e.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpea_ur59e.scala:78:5\
    \ ---------------------\e[0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val max = arr.max\n        val min = arr.min\n\
    \        val mid = len / 2\n        val mid2 = len / 2\n        val mid3 = len\
    \ / 2\n        val mid4 = len / 2\n        val mid5 = len / 2\n        val mid6\
    \ = len / 2\n        val mid7 = len / 2\n        val mid8 = len / 2\n        val\
    \ mid9 = len / 2\n        val mid10 = len / 2\n        val mid11 = len / 2\n \
    \       val mid12 = len / 2\n        val mid13 = len / 2\n        val mid14 =\
    \ len / 2\n        val mid15 = len / 2\n        val mid16 = len / 2\n        val\
    \ mid17 = len / 2\n        val mid18 = len / 2\n        val mid19 = len / 2\n\
    \        val mid20 = len / 2\n        val mid21 = len / 2\n        val mid22 =\
    \ len / 2\n        val mid23 = len / 2\n        val mid24 = len / 2\n        val\
    \ mid25 = len / 2\n        val mid26 = len / 2\n        val mid27 = len / 2\n\
    \        val mid28 = len / 2\n        val mid29 = len / 2\n        val mid30 =\
    \ len / 2\n        val mid31 = len / 2\n        val mid32 = len / 2\n        val\
    \ mid33 = len / 2\n        val mid34 = len / 2\n        val mid35 = len / 2\n\
    \        val mid36 = len / 2\n        val mid37 = len / 2\n        val mid38 =\
    \ len / 2\n        val mid39 = len / 2\n        val mid40 = len / 2\n        val\
    \ mid41 = len / 2\n        val mid42 = len / 2\n        val mid43 = len / 2\n\
    \        val mid44 = len / 2\n        val mid45 = len / 2\n        val mid46 =\
    \ len / 2\n        val mid47 = len / 2\n        val mid48 = len / 2\n        val\
    \ mid49 = len / 2\n        val mid50 = len / 2\n        val mid51 = len / 2\n\
    \        val mid52 = len / 2\n        val mid53 = len / 2\n        val mid54 =\
    \ len / 2\n        val mid55 = len / \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6gawlz5u.scala:78:25 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        \e[33mval\e[0m \e[36mmid55\e[0m = len / \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6gawlz5u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6gawlz5u.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val max = arr.sortWith(_ > _)\n        val maxList = max.take(k)\n     \
    \   val maxList2 = max.drop(k)\n        val maxList3 = maxList2.sortWith(_ > _)\n\
    \        val maxList4 = maxList3.take(k)\n        val maxList5 = maxList4.drop(k)\n\
    \        val maxList6 = maxList5.sortWith(_ > _)\n        val maxList7 = maxList6.take(k)\n\
    \        val maxList8 = maxList7.drop(k)\n        val maxList9 = maxList8.sortWith(_\
    \ > _)\n        val maxList10 = maxList9.take(k)\n        val maxList11 = maxList10.drop(k)\n\
    \        val maxList12 = maxList11.sortWith(_ > _)\n        val maxList13 = maxList12.take(k)\n\
    \        val maxList14 = maxList13.drop(k)\n        val maxList15 = maxList14.sortWith(_\
    \ > _)\n        val maxList16 = maxList15.take(k)\n        val maxList17 = maxList16.drop(k)\n\
    \        val maxList18 = maxList17.sortWith(_ > _)\n        val maxList19 = maxList18.take(k)\n\
    \        val maxList20 = maxList19.drop(k)\n        val maxList21 = maxList20.sortWith(_\
    \ > _)\n        val maxList22 = maxList21.take(k)\n        val maxList23 = maxList22.drop(k)\n\
    \        val maxList24 = maxList23.sortWith(_ > _)\n        val maxList25 = maxList24.take(k)\n\
    \        val maxList26 = maxList25.drop(k)\n        val maxList27 = maxList26.sortWith(_\
    \ > _)\n        val maxList28 = maxList27.take(k)\n        val maxList29 = maxList28.drop(k)\n\
    \        val maxList30 = maxList29.sortWith(_ > _)\n        val maxList31 = maxList30.take(k)\n\
    \        val maxList32 = maxList31.drop(k)\n        val maxList33 = maxList32.sortWith(_\
    \ > _)\n        val maxList34 = maxList33.take(k)\n        val maxList35 = maxList34.drop(k)\n\
    \        val maxList36 = maxList35.sortWith(_ > _)\n        val maxList37 = max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf9n6r098.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpf9n6r098.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.size\n        val max = new Array[Long](k)\n        var i\
    \ = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n     \
    \           max(i) = arr(i)\n                i += 1\n            } else {\n  \
    \              max(i) = arr(i + 1)\n                i += 1\n            }\n  \
    \      }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprzx1xlwr.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprzx1xlwr.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978905
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(_.toLong)\n\
    \        val max = arr.take(k).toList\n        val rest = arr.drop(k)\n      \
    \  rest match {\n            case Nil => max\n            case head :: tail =>\
    \ maximum(tail, k)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmup8ykpm.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmup8ykpm.scala:25:41 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m head :: tail => maximum(tail,\
    \ k)\n\e[31m\e[31m   |\e[0m                                         ^^^^\e[0m\n\
    \e[31m   |\e[0m                                         Not found: tail\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxLength = 0\n        var maxIndex = 0\n        for(i <- 0 until\
    \ arr.length) {\n            if(maxLength < k) {\n                maxLength +=\
    \ 1\n                maxList += arr(i)\n            }\n            if(maxLength\
    \ == k) {\n                if(arr(i) > maxList(0)) {\n                    maxList\
    \ += arr(i)\n                }\n            }\n            if(maxLength > k) {\n\
    \                maxLength -= 1\n                maxList -= arr(i)\n         \
    \   }\n        }\n        return maxList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppijwgg0m.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap4 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap5 = new HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap7 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap8 = new HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap10 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap11 = new HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap13 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap14 = new HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap16 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap17 = new HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap19 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap20 = new HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap22 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap23 = new HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap25 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap26 = new HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap28 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap29 = new HashMap[Long, Int]()\n        val maxIndexMap30\
    \ = new HashMap[Long, Int]()\n        val maxIndexMap31 = new HashMap[Long, Int]()\n\
    \        val maxIndexMap32 = new HashMap[Long, Int\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6xuymt2w.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6xuymt2w.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xuymt2w.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6xuymt2w.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xuymt2w.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        var maxVal = arr(0)\n\
    \        while (i < len) {\n            if (arr(i) > maxVal) {\n             \
    \   maxIndex = i\n                maxVal = arr(i)\n            }\n           \
    \ i += 1\n        }\n        var i = 0\n        while (i < k) {\n            if\
    \ (maxIndex == i) {\n                maxIndex = 0\n                maxVal = arr(maxIndex)\n\
    \            }\n            i += 1\n        }\n        val maxList = arr.take(maxIndex).toList\n\
    \        val maxList2 = arr.drop(maxIndex).toList\n        val maxList3 = arr.take(maxIndex\
    \ + 1).toList\n        val maxList4 = arr.drop(maxIndex + 1).toList\n        val\
    \ maxList5 = arr.take(maxIndex + 2).toList\n        val maxList6 = arr.drop(maxIndex\
    \ + 2).toList\n        val maxList7 = arr.take(maxIndex + 3).toList\n        val\
    \ maxList8 = arr.drop(maxIndex + 3).toList\n        val maxList9 = arr.take(maxIndex\
    \ + 4).toList\n        val maxList10 = arr.drop(maxIndex + 4).toList\n       \
    \ val maxList11 = arr.take(maxIndex + 5).toList\n        val maxList12 = arr.drop(maxIndex\
    \ + 5).toList\n        val maxList13 = arr.take(maxIndex + 6).toList\n       \
    \ val maxList14 = arr.drop(maxIndex + 6).toList\n        val maxList15 = arr.take(maxIndex\
    \ + 7).toList\n        val maxList16 = arr.drop(maxIndex + 7).toList\n       \
    \ val maxList17 = arr.take(maxIndex + 8).toList\n        val maxList18 = arr.drop(maxIndex\
    \ + 8).toList\n        val maxList19 = arr.take(maxIndex + 9).toList\n       \
    \ val maxList20 = arr.drop(maxIndex + 9).toList\n        val maxList21 = arr.take(maxIndex\
    \ + 10).toList\n        val maxList22 = arr.drop(maxIndex + 10).toList\n     \
    \   val maxList23 = arr.take(maxIndex + 11).toList\n        val maxList24 = arr.drop(maxIndex\
    \ + 11).toList\n        val maxList25 = arr.take(maxIndex + 12).toList\n     \
    \   val maxList26 = arr.drop(maxIndex + 12).toList\n        val maxList27 = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo6a5ty5m.scala:68:23 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mmaxList27\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpo6a5ty5m.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo6a5ty5m.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpo6a5ty5m.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo6a5ty5m.scala:69:5\
    \ ---------------------\e[0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLen = arr.length\n        val maxK = k\n        val maxNum = arr.max\n\
    \        val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumIndex\
    \ = maxNumIndex.min(maxK - maxNumIndex.toInt)\n        val maxNumIndex = maxNumIndex.max(0)\n\
    \        val maxNumIndex = maxNumIndex.min(maxLen)\n        val maxNumIndex =\
    \ maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n    \
    \    val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen)\n\
    \        val maxNumIndex = maxNumIndex.max(0)\n        val maxNumIndex = maxNumIndex.min(maxLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4drgqg8.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4drgqg8.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumIndex\e[0m = maxNumIndex.min(maxK - maxNumIndex.toInt)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4drgqg8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.max(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4drgqg8.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.min(maxLen)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq4drgqg8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumIndex\e[0m = maxNumIndex.max(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndex is already defined as \e[33mvalue\e[0m \e[35mmaxNumIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        var maxIndexMapIndex = 0\n        var maxIndexMapValue = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \        var maxIndexMapValueIndex = 0\n        var maxIndexMapValueIndex = 0\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphsnci5cg.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexMapValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexMapValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexMapValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphsnci5cg.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexMapValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexMapValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexMapValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphsnci5cg.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexMapValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexMapValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexMapValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphsnci5cg.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexMapValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexMapValueIndex is already defined as \e[33mvariable\e\
    [0m \e[35mmaxIndexMapValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphsnci5cg.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndexMapValueIndex\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexWhere(_ >\
    \ 0)\n        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex -\
    \ 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n\
    \        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n \
    \       val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n  \
    \      val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n   \
    \     val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n    \
    \    val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n     \
    \   val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n      \
    \  val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n       \
    \ val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n        val\
    \ maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n        val maxValue\
    \ = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n        val maxValue =\
    \ arr(maxIndex)\n        val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n\
    \        val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n \
    \       val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n  \
    \      val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n   \
    \     val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n    \
    \    val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n     \
    \   val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n      \
    \  val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n       \
    \ val maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n        val\
    \ maxIndex = maxIndex - 1\n        val maxValue = arr(maxIndex)\n        val maxIndex\
    \ = maxIndex - 1\n        val maxValue = arr(maxIndex)\n        val maxIndex =\
    \ maxIndex - 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex\
    \ - 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex -\
    \ 1\n        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n\
    \        val maxValue = arr(maxIndex)\n        val maxIndex = maxIndex - 1\n \
    \       val maxValue = arr\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppx4i_v6e.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppx4i_v6e.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppx4i_v6e.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppx4i_v6e.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = arr(maxIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppx4i_v6e.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that ove"
  stdout: ''
  timestamp: 1659978908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxLength = arr.length - maxIndex\n        if (maxLength <= k) {\n\
    \            result.addAll(arr.take(maxLength))\n        }\n        else {\n \
    \           val maxLength = k\n            val maxIndex = arr.length - maxLength\n\
    \            val maxValue = arr(maxIndex)\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n            val maxIndex = arr.length\
    \ - maxLength\n            val maxIndex = arr.length - maxLength\n           \
    \ val maxIndex = arr.length - maxLength\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqkhfjvv9.scala:100:0 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqkhfjvv9.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqkhfjvv9.scala:26:25 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpqkhfjvv9.scala:39:16 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.length\
    \ - maxLength\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqkhfjvv9.scala:40:16 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m            \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.length - maxLength\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqkhfjvv9.scala:41:16 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m            \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.length - maxLength\n\
    \e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659978911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.size\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        var i = 0\n        var j = 0\n        var maxIndex\
    \ = 0\n        var maxValue = 0\n        while(i < len) {\n            while(j\
    \ < k) {\n                if(arr(i) > arr(j)) {\n                    maxValue\
    \ = arr(i)\n                    maxIndex = i\n                    maxIndex(0)\
    \ = j\n                    maxIndex(1) = j\n                    j = 0\n      \
    \          } else {\n                    maxValue = arr(j)\n                 \
    \   maxIndex = j\n                    maxIndex(0) = i\n                    maxIndex(1)\
    \ = i\n                    i = 0\n                }\n                j++\n   \
    \         }\n            i += 1\n        }\n        val result = new Array[Long](k)\n\
    \        for(i <- 0 until k) {\n            result(i) = arr(maxIndex(0))\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphptaf2x1.scala:43:19 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphptaf2x1.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmphptaf2x1.scala:20:18 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphptaf2x1.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphptaf2x1.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compili"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = mutable.ListBuffer.empty[Long]\n        val maxValue =\
    \ mutable.ListBuffer.empty[Long]\n        val maxLength = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValue\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLength = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueIndex = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueValue\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueLength = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueValue = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueValue = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueValue = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueValue = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long]\n\
    \        val maxLengthValueValue = mutable.ListBuffer.empty[Long]\n        val\
    \ maxLengthLengthIndex = mutable.ListBuffer.empty[Long]\n        val maxLengthValueIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val maxLengthLengthValue = mutable.ListBuffer.empty[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmporfd4ppd.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmporfd4ppd.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxLengthLengthIndex\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLengthLengthIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmporfd4ppd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthValueIndex\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthValueIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLengthValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmporfd4ppd.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthLengthValue\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthLengthValue is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxLengthLengthValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmporfd4ppd.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxLengthValueValue\e[0m\
    \ = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxLengthValueValue i"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgx4nfdbr.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgx4nfdbr.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgx4nfdbr.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgx4nfdbr.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgx4nfdbr.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006"
  stdout: ''
  timestamp: 1659978909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.size\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var maxIndex = 0\n        var\
    \ maxIndex2 = 0\n        var maxIndex3 = 0\n        var maxIndex4 = 0\n      \
    \  var maxIndex5 = 0\n        var maxIndex6 = 0\n        var maxIndex7 = 0\n \
    \       var maxIndex8 = 0\n        var maxIndex9 = 0\n        var maxIndex10 =\
    \ 0\n        var maxIndex11 = 0\n        var maxIndex12 = 0\n        var maxIndex13\
    \ = 0\n        var maxIndex14 = 0\n        var maxIndex15 = 0\n        var maxIndex16\
    \ = 0\n        var maxIndex17 = 0\n        var maxIndex18 = 0\n        var maxIndex19\
    \ = 0\n        var maxIndex20 = 0\n        var maxIndex21 = 0\n        var maxIndex22\
    \ = 0\n        var maxIndex23 = 0\n        var maxIndex24 = 0\n        var maxIndex25\
    \ = 0\n        var maxIndex26 = 0\n        var maxIndex27 = 0\n        var maxIndex28\
    \ = 0\n        var maxIndex29 = 0\n        var maxIndex30 = 0\n        var maxIndex31\
    \ = 0\n        var maxIndex32 = 0\n        var maxIndex33 = 0\n        var maxIndex34\
    \ = 0\n        var maxIndex35 = 0\n        var maxIndex36 = 0\n        var maxIndex37\
    \ = 0\n        var maxIndex38 = 0\n        var maxIndex39 = 0\n        var maxIndex40\
    \ = 0\n        var maxIndex41 = 0\n        var maxIndex42 = 0\n        var maxIndex43\
    \ = 0\n        var maxIndex44 = 0\n        var maxIndex45 = 0\n        var maxIndex46\
    \ = 0\n        var maxIndex47 = 0\n        var maxIndex48 = 0\n        var maxIndex49\
    \ = 0\n        var maxIndex50 = 0\n        var maxIndex51 = 0\n        var maxIndex52\
    \ = 0\n        var maxIndex53 = 0\n        var maxIndex54 = 0\n        var maxIndex55\
    \ = 0\n        var maxIndex56 = 0\n        var maxIndex57 = 0\n        var maxIndex58\
    \ = 0\n        var maxIndex59 = 0\n        var maxIndex60 = 0\n        var maxIndex61\
    \ = 0\n        var maxIndex62 = 0\n        var maxIndex63 = 0\n        var maxIndex64\
    \ = 0\n        var maxIndex65 = 0\n        var maxIndex66 = 0\n        var maxIndex67\
    \ = 0\n        var maxIndex68 = 0\n        var maxIndex69 = 0\n        var maxIndex70\
    \ = 0\n        var maxIndex71 = 0\n        var maxIndex72 = 0\n        var maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2f83822m.scala:102:4 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2f83822m.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mmaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp2f83822m.scala:20:18 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive\
    \ \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2f83822m.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2f83822m.scala:25:31 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2f83822m.scala:102:5\
    \ --------------------\e[0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ List[Long]\n\e"
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until len) {\n\
    \            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        val result = new\
    \ Array[Long](k)\n        for(i <- 0 until k) {\n            result(i) = arr(maxIndex\
    \ + i)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4kcexlbv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:31:37\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4kcexlbv.scala:32:25 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:35:8 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNum = arr.max\n   \
    \     val maxNumIndex = arr.indexWhere(x => x == maxNum)\n        val maxNumList\
    \ = arr.take(maxNumIndex + 1)\n        val maxNumListIndex = maxNumList.indexWhere(x\
    \ => x == maxNum)\n        val maxNumListIndex = maxNumListIndex + 1\n       \
    \ val maxNumListLength = maxNumListIndex - maxNumIndex\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumListLength + 1\n        val maxNumListLength\
    \ = maxNumListLength + 1\n        val maxNumListLength = maxNumListLength + 1\n\
    \        val maxNumListLength = maxNumList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgmbygolr.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListIndex\e[0m = maxNumListIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgmbygolr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLength\e[0m =\
    \ maxNumListLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgmbygolr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLength\e[0m =\
    \ maxNumListLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgmbygolr.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLength\e[0m =\
    \ maxNumListLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumListLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxNumListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgmbygolr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxNumListLe"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(x =>\
    \ x)\n        val maxK = arr.take(k).toList\n        val maxKIndex = arr.lastIndexWhere(x\
    \ => x == maxK(0))\n        val maxKList = maxK.drop(maxKIndex).toList\n     \
    \   val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(maxKList.length\
    \ - 1))\n        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n\
    \        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n     \
    \   val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val\
    \ maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val maxKListIndex\
    \ = arr.lastIndexWhere(x => x == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x\
    \ => x == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x => x\
    \ == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n\
    \        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n     \
    \   val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val\
    \ maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val maxKListIndex\
    \ = arr.lastIndexWhere(x => x == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x\
    \ => x == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x => x\
    \ == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n\
    \        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n     \
    \   val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val\
    \ maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val maxKListIndex\
    \ = arr.lastIndexWhere(x => x == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x\
    \ => x == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x => x\
    \ == maxKList(0))\n        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n\
    \        val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n     \
    \   val maxKListIndex = arr.lastIndexWhere(x => x == maxKList(0))\n        val\
    \ maxKListIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz6m1l8gk.scala:49:27 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mmaxKListIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz6m1l8gk.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxKListIndex\e[0m = arr.lastIndexWhere(\e\
    [36mx\e[0m => x == maxKList(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxKListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz6m1l8gk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxKListIndex\e[0m = arr.lastIndexWhere(\e\
    [36mx\e[0m => x == maxKList(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxKListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz6m1l8gk.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxKListIndex\e[0m = arr.lastIndexWhere(\e\
    [36mx\e[0m => x == maxKList(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxKListIndex is already defined as \e[33mvalue\e[0m \e[35mmaxKListIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz6m1l8gk.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e["
  stdout: ''
  timestamp: 1659978911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new Array[Long](k)\n\
    \        var maxIndex = 0\n        var maxValue = 0\n        var index = 0\n \
    \       for (i <- 0 until arr.length) {\n            if (arr(i) > maxValue) {\n\
    \                maxValue = arr(i)\n                maxIndex = i\n           \
    \ }\n        }\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ == maxValue) {\n                max(i) = arr(i)\n            }\n        }\n\
    \        val result = new Array[Long](k)\n        for (i <- 0 until k) {\n   \
    \         result(i) = arr(maxIndex)\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4uhr9n98.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4uhr9n98.scala:26:30 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e[0m             \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                           Found: \
    \   Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4uhr9n98.scala:35:37 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m              \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \       Found:    (k : Long)\n\e[31m   |\e[0m                                \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4uhr9n98.scala:36:26\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (k : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4uhr9n98.scala:39:8 ---------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m     \
    \   Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659978912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[(Long,\
    \ Long)](len * 2 - 1)\n        val maxIndex = new mutable.PriorityQueue[Int](len)\n\
    \        val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc4g6bl5_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpc4g6bl5_.scala:20:18 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc4g6bl5_.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[(\e\
    [35mLong\e[0m, \e[35mLong\e[0m)](len * \e[31m2\e[0m - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc4g6bl5_.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mInt\e[0m](len)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc4g6bl5_.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc4g6bl5_.scala:25:31 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, "
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp586lb29w.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp586lb29w.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp586lb29w.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp586lb29w.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLen = arr.length\n        val maxK = k\n        val maxIndex =\
    \ arr.length\n        val maxValue = arr(0)\n        val maxIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexLen = arr.length\n        val maxIndexK = k\n        val\
    \ maxIndexValue = arr(0)\n        val maxIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexLen = arr.length\n        val maxIndexIndexK = k\n \
    \       val maxIndexIndexValue = arr(0)\n        val maxIndexIndexIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexLen = arr.length\n\
    \        val maxIndexIndexIndexK = k\n        val maxIndexIndexIndexValue = arr(0)\n\
    \        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n \
    \       val maxIndexIndexIndexIndexLen = arr.length\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexIndexLen =\
    \ arr.length\n        val maxIndexIndexIndexIndexK = k\n        val maxIndexIndexIndexIndexValue\
    \ = arr(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLen = arr.length\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexIndexLen =\
    \ arr.length\n        val maxIndexIndexIndexIndexK = k\n        val maxIndexIndexIndexIndexValue\
    \ = arr(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLen = arr.length\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexIndexLen =\
    \ arr.length\n        val maxIndexIndexIndexIndexK = k\n        val maxIndexIndexIndexIndexValue\
    \ = arr(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLen = arr.length\n        val maxIndexIndexIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqu33sjb7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqu33sjb7.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexList\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexList is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqu33sjb7.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexLen\e\
    [0m = arr.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexLen is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexLen\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqu33sjb7.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexK\e\
    [0m = k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndexIndexIndexIndexK is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexIndexIndexIndexK\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqu33sjb7.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexValue\e\
    [0m = arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexValue is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexInde"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxValue\
    \ = arr(0)\n        val maxIndex = arr.indexOf(0)\n        val maxIndexList =\
    \ mutable.ArrayBuffer.empty[Long]\n        val maxIndexLength = arr.indexOf(0)\n\
    \        val maxIndexK = k\n        val maxIndexValue = arr(0)\n        val maxIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexK\
    \ = k\n        val maxIndexIndexValue = arr(0)\n        val maxIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexList = new mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = arr.indexOf(0)\n        val\
    \ maxIndexIndexIndexIndexK = k\n        val maxIndexIndexIndexIndexValue = arr(0)\n\
    \        val maxIndexIndexIndexIndexIndex = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexList\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxIndexIndexIndexIndexIndexLength\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexK = k\n        val\
    \ maxIndexIndexIndexIndexIndexValue = arr(0)\n        val maxIndexIndexIndexIndexIndex\
    \ = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxIndexIndexIndexIndexIndexLength = arr.indexOf(0)\n        val\
    \ maxIndexIndexIndexIndexIndexK = k\n        val maxIndexIndexIndexIndexIndexValue\
    \ = arr(0)\n        val maxIndexIndexIndexIndexIndex = arr.indexOf(0)\n      \
    \  val maxIndexIndexIndexIndexIndexList = mutable.ArrayBuffer.empty[Long]\n  \
    \      val maxIndexIndexIndexIndexIndexLength = arr.indexOf(0)\n        val maxIndexIndexIndexIndexIndexK\
    \ = k\n        val maxIndexIndexIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyuho7hg_.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyuho7hg_.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexList\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexList is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyuho7hg_.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexK\e\
    [0m = k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndexIndexIndexIndexK is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexIndexIndexIndexK\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyuho7hg_.scala:48:12 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexValue\e\
    [0m = arr(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexValue is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIndexIndexIndexIndexValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyuho7hg_.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexIndexIndexIndexIndex\e\
    [0m = arr.indexOf(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndex is already defined as "
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.length\n        val m = arr.take(k).max\n        val maxList\
    \ = arr.take(k).filter(_ == m).toList\n        val maxList2 = arr.filter(_ ==\
    \ m).toList\n        val maxList3 = arr.filter(_ == m).take(k).toList\n      \
    \  val maxList4 = arr.filter(_ == m).take(k).filter(_ == m).toList\n        val\
    \ maxList5 = arr.filter(_ == m).take(k).filter(_ == m).take(k).toList\n      \
    \  val maxList6 = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_ ==\
    \ m).toList\n        val maxList7 = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_\
    \ == m).take(k).toList\n        val maxList8 = arr.filter(_ == m).take(k).filter(_\
    \ == m).take(k).filter(_ == m).take(k).filter(_ == m).toList\n        val maxList9\
    \ = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).filter(_\
    \ == m).take(k).toList\n        val maxList10 = arr.filter(_ == m).take(k).filter(_\
    \ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).filter(_ == m).toList\n\
    \        val maxList11 = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_\
    \ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).toList\n       \
    \ val maxList12 = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_ ==\
    \ m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).filter(_ == m).toList\n\
    \        val maxList13 = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_\
    \ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).toList\n\
    \        val maxList14 = arr.filter(_ == m).take(k).filter(_ == m).take(k).filter(_\
    \ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).filter(_ == m).take(k).filter(_\
    \ == m).\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ujc4a13.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6ujc4a13.scala:20:18 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e\
    [0m                  ^\e[0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e\
    [0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6ujc4a13.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = arr.max\n        val result = new Array[Long](k)\n        var i =\
    \ 0\n        while (i < k) {\n            result(i) = arr(i)\n            i +=\
    \ 1\n        }\n        var j = 0\n        while (j < n) {\n            if (arr(j)\
    \ > m) {\n                result(k) = arr(j)\n                k += 1\n       \
    \     }\n            j += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdxsiimz.scala:22:37\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprdxsiimz.scala:31:23 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m                result(k) = arr(j)\n\e[31m\e[31m   |\e[0m            \
    \           ^\e[0m\n\e[31m   |\e[0m                       Found:    (k : Long)\n\
    \e[31m   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprdxsiimz.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                k += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean k.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprdxsiimz.scala:36:8 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        var max = 0\n        var index = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) > max) {\n                max = arr(i)\n         \
    \       index = i\n            }\n        }\n        for (i <- 0 until k) {\n\
    \            result(i) = arr(index)\n            index++\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph500aiy0.scala:31:19 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            index++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph500aiy0.scala:20:37\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph500aiy0.scala:25:25 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmph500aiy0.scala:29:26 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until k) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph500aiy0.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var i = 0\n        while (i < arr.length) {\n  \
    \          if (arr(i) > max) {\n                max = arr(i)\n            }\n\
    \            i += 1\n        }\n        val maxIndex = arr.length - 1\n      \
    \  while (k >= maxIndex) {\n            if (arr(k) > max) {\n                max\
    \ += arr(k)\n            }\n            k -= 1\n        }\n        result ++=\
    \ arr.take(k).reverse\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklrx6i0n.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklrx6i0n.scala:25:25\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                max = arr(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                Found:    Long\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklrx6i0n.scala:31:20\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (arr(k)\
    \ > max) {\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m \
    \                   Found:    (k : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklrx6i0n.scala:32:20\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                max += arr(k)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpklrx6i0n.scala:32:27 --------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                max += arr(k)\n\e[31m\e[31m   |\e[0m     \
    \                      ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (k : Long)\n\e[31m   |\e[0m                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklrx6i0n.scala:34:14 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            k -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is "
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while(i < len) {\n\
    \            while(j < len && arr(j) < arr(i)) {\n                j += 1\n   \
    \         }\n            if(j < len) {\n                max(i) = arr(i)\n    \
    \            i += 1\n                j += 1\n            } else {\n          \
    \      max(i) = arr(j)\n                i += 1\n                j = 0\n      \
    \      }\n        }\n        while(j < len) {\n            max(i) = arr(j)\n \
    \           i += 1\n            j += 1\n        }\n        max.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy0vi3pdb.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpy0vi3pdb.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new Array[Long](k)\n\
    \        val max = new Array[Long](k)\n        val min = new Array[Long](k)\n\
    \        val maxIndex = new Array[Int](k)\n        val minIndex = new Array[Int](k)\n\
    \        val maxCount = new Array[Int](k)\n        val minCount = new Array[Int](k)\n\
    \        val maxCountIndex = new Array[Int](k)\n        val minCountIndex = new\
    \ Array[Int](k)\n        val maxCountIndex2 = new Array[Int](k)\n        val minCountIndex2\
    \ = new Array[Int](k)\n        val maxCountIndex3 = new Array[Int](k)\n      \
    \  val minCountIndex3 = new Array[Int](k)\n        val maxCountIndex4 = new Array[Int](k)\n\
    \        val minCountIndex4 = new Array[Int](k)\n        val maxCountIndex5 =\
    \ new Array[Int](k)\n        val minCountIndex5 = new Array[Int](k)\n        val\
    \ maxCountIndex6 = new Array[Int](k)\n        val minCountIndex6 = new Array[Int](k)\n\
    \        val maxCountIndex7 = new Array[Int](k)\n        val minCountIndex7 =\
    \ new Array[Int](k)\n        val maxCountIndex8 = new Array[Int](k)\n        val\
    \ minCountIndex8 = new Array[Int](k)\n        val maxCountIndex9 = new Array[Int](k)\n\
    \        val minCountIndex9 = new Array[Int](k)\n        val maxCountIndex10 =\
    \ new Array[Int](k)\n        val minCountIndex10 = new Array[Int](k)\n       \
    \ val maxCountIndex11 = new Array[Int](k)\n        val minCountIndex11 = new Array[Int](k)\n\
    \        val maxCountIndex12 = new Array[Int](k)\n        val minCountIndex12\
    \ = new Array[Int](k)\n        val maxCountIndex13 = new Array[Int](k)\n     \
    \   val minCountIndex13 = new Array[Int](k)\n        val maxCountIndex14 = new\
    \ Array[Int](k)\n        val minCountIndex14 = new Array[Int](k)\n        val\
    \ maxCountIndex15 = new Array[Int](k)\n        val minCountIndex15 = new Array[Int](k)\n\
    \        val maxCountIndex16 = new Array[Int](k)\n        val minCountIndex16\
    \ = new Array[Int](k)\n        val maxCountIndex17 = new Array[Int](k)\n     \
    \   val minCountIndex17 = new Array[Int](\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjof6c5p5.scala:60:45 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mminCountIndex17\e[0m = \e\
    [33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](\n\e[31m\e[31m   |\e[0m        \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    exception occurred while parser /tmp/tmpjof6c5p5.scala\nexception occurred while\
    \ compiling /tmp/tmpjof6c5p5.scala\nException in thread \"main\" java.lang.AssertionError:\
    \ assertion failed: position error, parent span does not contain child span\n\
    parent      = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](\e[31mnull\e[0m)\
    \ # -1,\nparent span = <2778..2793>,\nchild       = \e[31mnull\e[0m # -1,\nchild\
    \ span  = [2793..2798..2798]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1"
  stdout: "error while checking \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](\e\
    [31mnull\e[0m)\nerror while checking \e[33mval\e[0m \e[36mminCountIndex17\e[0m\
    \ = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](\e[31mnull\e[0m)\nerror while\
    \ checking {\n  \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew \e[0m\e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n  \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew \e[0m\e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n  \e[33mval\e[0m \e[36mmin\e[0m = \e[33mnew \e[0m\e[35mArray\e\
    [0m[\e[35mLong\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew \e[0m\e\
    [35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mminIndex\e[0m = \e[33mnew\
    \ \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxCount\e\
    [0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e\
    [36mminCount\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e\
    [0m \e[36mmaxCountIndex\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\
    \  \e[33mval\e[0m \e[36mminCountIndex\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e\
    [35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxCountIndex2\e[0m = \e[33mnew \e[0m\e\
    [35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mminCountIndex2\e[0m\
    \ = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxCountIndex3\e\
    [0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e\
    [36mminCountIndex3\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\
    \  \e[33mval\e[0m \e[36mmaxCountIndex4\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e\
    [35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mminCountIndex4\e[0m = \e[33mnew \e[0m\e\
    [35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxCountIndex5\e[0m\
    \ = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mminCountIndex5\e\
    [0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e\
    [36mmaxCountIndex6\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\
    \  \e[33mval\e[0m \e[36mminCountIndex6\e[0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e\
    [35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxCountIndex7\e[0m = \e[33mnew \e[0m\e\
    [35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mminCountIndex7\e[0m\
    \ = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mInt\e[0m](k)\n  \e[33mval\e[0m \e[36mmaxCountIndex8\e\
    [0m = \e[33mnew \e[0m\e[35mArray\e[0m[\e[35mIn"
  timestamp: 1659978910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxNum = 0\n        var maxIndex = 0\n        for(i <- 0 until arr.length)\
    \ {\n            if(arr(i) > maxNum) {\n                maxNum = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        if(maxNum > k) {\n\
    \            for(i <- 0 until arr.length) {\n                if(arr(i) > maxNum)\
    \ {\n                    maxNum = arr(i)\n                    maxIndex = i\n \
    \               }\n            }\n        }\n        if(maxNum > k) {\n      \
    \      for(i <- 0 until arr.length) {\n                if(arr(i) > maxNum) {\n\
    \                    maxNum = arr(i)\n                    maxIndex = i\n     \
    \           }\n            }\n        }\n        if(maxNum > k) {\n          \
    \  for(i <- 0 until arr.length) {\n                if(arr(i) > maxNum) {\n   \
    \                 maxNum = arr(i)\n                    maxIndex = i\n        \
    \        }\n            }\n        }\n        if(maxNum > k) {\n            for(i\
    \ <- 0 until arr.length) {\n                if(arr(i) > maxNum) {\n          \
    \          maxNum = arr(i)\n                    maxIndex = i\n               \
    \ }\n            }\n        }\n        if(maxNum > k) {\n            for(i <-\
    \ 0 until arr.length) {\n                if(arr(i) > maxNum) {\n             \
    \       maxNum = arr(i)\n                    maxIndex = i\n                }\n\
    \            }\n        }\n        if(maxNum > k) {\n            for(i <- 0 until\
    \ arr.length) {\n                if(arr(i) > maxNum) {\n                    maxNum\
    \ = arr(i)\n                    maxIndex = i\n                }\n            }\n\
    \        }\n        if(maxNum > k) {\n            for(i <- 0 until arr.length)\
    \ {\n                if(arr(i) > maxNum) {\n                    maxNum = arr(i)\n\
    \                    maxIndex = i\n                }\n            }\n        }\n\
    \        if(maxNum > k) {\n            for(i <- 0 until arr.length) {\n      \
    \          if(arr(i) > maxNum) {\n                    maxNum = arr(i)\n      \
    \              maxIndex = i\n                }\n            }\n        }\n   \
    \     if(maxNum > k) {\n            for(i <- 0 until arr.length) {\n         \
    \       if(arr(i) > maxNum) {\n                    maxNum = arr(i)\n         \
    \           maxIndex = i\n                }\n            }\n        }\n      \
    \  if(maxNum > k) {\n            for(i <- 0 until arr.length) {\n            \
    \    if(arr(i) > maxNum) {\n                    maxNum = arr(i)\n            \
    \        maxIndex = i\n                }\n            }\n        }\n        if(maxNum\
    \ > k) {\n            for(i <- 0 until arr.length) {\n                if(arr(i)\
    \ > maxNum) {\n                    maxNum = arr(i)\n                    maxIndex\
    \ = i\n\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm1ryaywc.scala:131:0 ---------------------------\e\
    [0m\e[0m\n\e[31m131 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1ryaywc.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1ryaywc.scala:25:28\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxNum = arr(i)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1ryaywc.scala:32:32\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                    maxNum =\
    \ arr(i)\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Found:    Long\n\e[31m   |\e[0m       \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpm1ryaywc.scala:40:32 --------------------\e[0m\e\
    [0m\n\e[31m40 |\e[0m                    maxNum = arr(i)\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \          Found:    Long\n\e[31m   |\e[0m                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1ryaywc.scala:48:32\
    \ --------------------\e[0m\e[0m\n\e[31m48 |\e[0m                    maxNum =\
    \ arr(i)\n\e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Found:    Long\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = arr(0)\n        for(i <- 0 until len) {\n\
    \            val curVal = arr(i)\n            if(curVal > maxVal) {\n        \
    \        maxVal = curVal\n                maxIndex = i\n            }\n      \
    \  }\n        val result = new Array[Long](k)\n        for(i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex + i)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpglgueul2.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpglgueul2.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglgueul2.scala:32:37\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpglgueul2.scala:33:25 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglgueul2.scala:36:8 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexMap\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap4 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap8 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap12 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap16 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap20 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap24 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap28 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap29\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp131wj0b4.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp131wj0b4.scala:20:22 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp131wj0b4.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp131wj0b4.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp131wj0b4.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp131wj0b4.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mI"
  stdout: ''
  timestamp: 1659978921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxIndex = arr.length\n        val maxValue = arr(0)\n        for(i\
    \ <- 0 until arr.length) {\n            if(arr(i) > maxValue) {\n            \
    \    maxValue = arr(i)\n            }\n            if(maxIndex - i <= k) {\n \
    \               maxList += maxValue\n            }\n        }\n        maxList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xu76r4h.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp9xu76r4h.scala:25:25 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxValue = arr(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxVal = arr(0)\n        for(i <- 0 until len) {\n\
    \            val curVal = arr(i)\n            if(curVal > maxVal) {\n        \
    \        maxVal = curVal\n                maxIndex = i\n            }\n      \
    \  }\n        val result = new Array[Long](k)\n        for(i <- 0 until k) {\n\
    \            result(i) = arr(maxIndex + i)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpglgueul2.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpglgueul2.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglgueul2.scala:32:37\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpglgueul2.scala:33:25 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpglgueul2.scala:36:8 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.size\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmph09m97n6.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmph09m97n6.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph09m97n6.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph09m97n6.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph09m97n6.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            val max = arr(i)\n            val\
    \ j = i\n            while (j < len) {\n                if (arr(j) > max) {\n\
    \                    max = arr(j)\n                }\n                j += 1\n\
    \            }\n            i += 1\n            max(i) = max\n        }\n    \
    \    max.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmfq8att.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqmfq8att.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpqmfq8att.scala:29:24 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    max = arr(j)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val max\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqmfq8att.scala:31:18\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                j += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m         \
    \       value += is not a member of Int - did you mean j.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.length\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpz_yggn87.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz_yggn87.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz_yggn87.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz_yggn87.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpz_yggn87.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxK = k\n        val maxLength = arr.length\n        val maxArray\
    \ = arr.toArray\n        val maxArrayLength = maxArray.length\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n        val maxArrayLength\
    \ = maxArrayLength\n        val maxArrayLength = maxArrayLength\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong,\
    \ 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgo29r11g.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxArrayLength\e[0m = maxArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxArrayLength is already defined as \e[33mvalue\e[0m \e[35mmaxArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgo29r11g.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxArrayLength\e[0m = maxArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxArrayLength is already defined as \e[33mvalue\e[0m \e[35mmaxArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgo29r11g.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxArrayLength\e[0m = maxArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxArrayLength is already defined as \e[33mvalue\e[0m \e[35mmaxArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgo29r11g.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxArrayLength\e[0m = maxArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxArrayLength is already defined as \e[33mvalue\e[0m \e[35mmaxArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgo29r11g.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxArrayLength\e[0m = maxArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxArra"
  stdout: ''
  timestamp: 1659978921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < arr.length) {\n            max = arr(i)\n        \
    \    maxIndex = i\n            while (j < arr.length && arr(j) < max) {\n    \
    \            max += arr(j)\n                j += 1\n            }\n          \
    \  result.add(max)\n            i += 1\n        }\n        result.sortWith((x,\
    \ y) => x.compareTo(y) == 1)\n        result.take(k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukquq_rh.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpukquq_rh.scala:26:21\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            max = arr(i)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Found:    Long\n\e[31m   |\e[0m                  Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpukquq_rh.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                max += arr(j)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        arr.tail.foreach { x =>\n          \
    \  if (x > maxValue) {\n                maxValue = x\n            }\n        \
    \    if (x == maxValue) {\n                maxList += x\n            }\n     \
    \   }\n        if (maxList.length < k) {\n            val newList = maxList.take(k\
    \ - maxList.length)\n            val newMax = maxList.last\n            newList\
    \ += newMax\n            newList\n        } else {\n            maxList\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm51d5yho.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpm51d5yho.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                maxValue = x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxValue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n        val\
    \ maxValue = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n       \
    \ val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n        val maxValue\
    \ = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n        val maxIndex\
    \ = if (maxIndex == -1) arr.length else maxIndex\n        val maxValue = if (maxIndex\
    \ == arr.length) arr.head else arr[maxIndex]\n        val maxIndex = if (maxIndex\
    \ == -1) arr.length else maxIndex\n        val maxValue = if (maxIndex == arr.length)\
    \ arr.head else arr[maxIndex]\n        val maxIndex = if (maxIndex == -1) arr.length\
    \ else maxIndex\n        val maxValue = if (maxIndex == arr.length) arr.head else\
    \ arr[maxIndex]\n        val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n\
    \        val maxValue = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n\
    \        val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n       \
    \ val maxValue = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n   \
    \     val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n        val\
    \ maxValue = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n       \
    \ val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n        val maxValue\
    \ = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n        val maxIndex\
    \ = if (maxIndex == -1) arr.length else maxIndex\n        val maxValue = if (maxIndex\
    \ == arr.length) arr.head else arr[maxIndex]\n        val maxIndex = if (maxIndex\
    \ == -1) arr.length else maxIndex\n        val maxValue = if (maxIndex == arr.length)\
    \ arr.head else arr[maxIndex]\n        val maxIndex = if (maxIndex == -1) arr.length\
    \ else maxIndex\n        val maxValue = if (maxIndex == arr.length) arr.head else\
    \ arr[maxIndex]\n        val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n\
    \        val maxValue = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n\
    \        val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n       \
    \ val maxValue = if (maxIndex == arr.length) arr.head else arr[maxIndex]\n   \
    \     val maxIndex = if (maxIndex == -1) arr.length else maxIndex\n        val\
    \ maxValue = if (maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5dv3_pul.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5dv3_pul.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = \e[33mif\e[0m (maxIndex == -\e[31m1\e[0m) arr.length \e\
    [33melse\e[0m maxIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5dv3_pul.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = \e[33mif\e[0m (maxIndex\
    \ == arr.length) arr.head \e[33melse\e[0m arr[\e[35mmaxIndex\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5dv3_pul.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mif\e[0m (maxIndex\
    \ == -\e[31m1\e[0m) arr.length \e[33melse\e[0m maxIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5dv3_pul.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = \e[33mif\e[0m (maxIndex\
    \ == arr.length) arr.head \e[33melse\e[0m arr[\e[35mmaxIndex\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val min = new mutable.PriorityQueue[Long]()\n\
    \        val len = arr.length\n        val maxIndex = arr.length - 1\n       \
    \ val minIndex = 0\n        val maxValue = arr(maxIndex)\n        val minValue\
    \ = arr(minIndex)\n        val maxIndex = arr.length - 1\n        val minIndex\
    \ = 0\n        val maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n\
    \        val maxIndex = arr.length - 1\n        val minIndex = 0\n        val\
    \ maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n        val\
    \ maxIndex = arr.length - 1\n        val minIndex = 0\n        val maxValue =\
    \ arr(maxIndex)\n        val minValue = arr(minIndex)\n        val maxIndex =\
    \ arr.length - 1\n        val minIndex = 0\n        val maxValue = arr(maxIndex)\n\
    \        val minValue = arr(minIndex)\n        val maxIndex = arr.length - 1\n\
    \        val minIndex = 0\n        val maxValue = arr(maxIndex)\n        val minValue\
    \ = arr(minIndex)\n        val maxIndex = arr.length - 1\n        val minIndex\
    \ = 0\n        val maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n\
    \        val maxIndex = arr.length - 1\n        val minIndex = 0\n        val\
    \ maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n        val\
    \ maxIndex = arr.length - 1\n        val minIndex = 0\n        val maxValue =\
    \ arr(maxIndex)\n        val minValue = arr(minIndex)\n        val maxIndex =\
    \ arr.length - 1\n        val minIndex = 0\n        val maxValue = arr(maxIndex)\n\
    \        val minValue = arr(minIndex)\n        val maxIndex = arr.length - 1\n\
    \        val minIndex = 0\n        val maxValue = arr(maxIndex)\n        val minValue\
    \ = arr(minIndex)\n        val maxIndex = arr.length - 1\n        val minIndex\
    \ = 0\n        val maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n\
    \        val maxIndex = arr.length - 1\n        val minIndex = 0\n        val\
    \ maxValue = arr(maxIndex)\n        val minValue = arr(minIndex)\n        val\
    \ maxIndex = arr.length - 1\n        val minIndex = 0\n        val maxValue =\
    \ arr(maxIndex)\n        val minValue = arr(minIndex)\n        val maxIndex =\
    \ arr.length - 1\n        val minIndex = 0\n        val maxValue = arr(maxIndex)\n\
    \        val minValue = arr(minIndex)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprcb3_lrw.scala:84:11 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmprcb3_lrw.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcb3_lrw.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndex is already\
    \ defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcb3_lrw.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValue\e[0m = arr(maxIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcb3_lrw.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = arr(minIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcb3_lrw.scala:32:12\
    \ -------"
  stdout: ''
  timestamp: 1659978923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.size\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long,\
    \ Int]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpowiufky9.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpowiufky9.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpowiufky9.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpowiufky9.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpowiufky9.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ maxIndex = 0\n        var maxValue = arr(0)\n        for(i <- 0 until len) {\n\
    \            if(arr(i) > maxValue) {\n                maxValue = arr(i)\n    \
    \            maxIndex = i\n            }\n        }\n        val result = new\
    \ Array[Long](k)\n        for(i <- 0 until k) {\n            result(i) = arr(maxIndex\
    \ + i)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4kcexlbv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:31:37\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                     ^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4kcexlbv.scala:32:25 --------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until k) {\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (k : Long)\n\e[31m   |\e[0m                         Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4kcexlbv.scala:35:8 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        var maxVal = -1000\n        var maxIndex = 0\n        var i = 0\n   \
    \     while (i < len) {\n            val curVal = arr(i)\n            if (curVal\
    \ > maxVal) {\n                maxVal = curVal\n                maxIndex = i\n\
    \            }\n            i += 1\n        }\n        if (maxIndex == k) {\n\
    \            maxList += maxVal\n        }\n        else {\n            val maxList1\
    \ = maximum.tail(maxIndex).reverse\n            val maxList2 = maximum.tail(maxIndex\
    \ + 1).reverse\n            val maxList3 = maximum.tail(maxIndex + 2).reverse\n\
    \            val maxList4 = maximum.tail(maxIndex + 3).reverse\n            val\
    \ maxList5 = maximum.tail(maxIndex + 4).reverse\n            val maxList6 = maximum.tail(maxIndex\
    \ + 5).reverse\n            val maxList7 = maximum.tail(maxIndex + 6).reverse\n\
    \            val maxList8 = maximum.tail(maxIndex + 7).reverse\n            val\
    \ maxList9 = maximum.tail(maxIndex + 8).reverse\n            val maxList10 = maximum.tail(maxIndex\
    \ + 9).reverse\n            val maxList11 = maximum.tail(maxIndex + 10).reverse\n\
    \            val maxList12 = maximum.tail(maxIndex + 11).reverse\n           \
    \ val maxList13 = maximum.tail(maxIndex + 12).reverse\n            val maxList14\
    \ = maximum.tail(maxIndex + 13).reverse\n            val maxList15 = maximum.tail(maxIndex\
    \ + 14).reverse\n            val maxList16 = maximum.tail(maxIndex + 15).reverse\n\
    \            val maxList17 = maximum.tail(maxIndex + 16).reverse\n           \
    \ val maxList18 = maximum.tail(maxIndex + 17).reverse\n            val maxList19\
    \ = maximum.tail(maxIndex + 18).reverse\n            val maxList20 = maximum.tail(maxIndex\
    \ + 19).reverse\n            val maxList21 = maximum.tail(maxIndex + 20).reverse\n\
    \            val maxList22 = maximum.tail(maxIndex + 21).reverse\n           \
    \ val maxList23 = maximum.tail(maxIndex + 22).reverse\n            val maxList24\
    \ = maximum.tail(maxIndex + 23).reverse\n            val maxList25 = maximum.tail(maxIndex\
    \ + 24).reverse\n            val maxList26 = maximum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe0s6n4e4.scala:80:0 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe0s6n4e4.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0s6n4e4.scala:22:22\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxList\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe0s6n4e4.scala:38:35\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmaxList1\e[0m = maximum.tail(maxIndex).reverse\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue tail is not\
    \ a member of (List[Long], Long) => List[Long] - did you mean (List[Long], Long)\
    \ => List[Long].wait?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe0s6n4e4.scala:39:35\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmaxList2\e[0m = maximum.tail(maxIndex + \e[31m1\e[0m).reverse\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ tail is not a member of (List[Long], Long) => List[Long] - did you mean (List[Long],\
    \ Long) => List[Long].wait?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe0s6n4e4.scala:40:35\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmaxList3\e[0m = maximum.tail(maxIndex + \e[31m2\e[0m).reverse\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ tail is not a member of (List[Long], Long) => List[Long] - d"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxIndex = arr.indexWhere(_ >\
    \ 0)\n        val maxValue = arr(maxIndex)\n        val maxIndexList = arr.indexWhere(_\
    \ == maxValue)\n        val maxIndexListLength = maxIndexList.length\n       \
    \ val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpebeklv9b.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpebeklv9b.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexListLength\e[0m = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m \e[35mmaxIndexListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebeklv9b.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m = maxIndexListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpebeklv9b.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpebeklv9b.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        val maxIndex = new mutable.PriorityQueue[Int]()\n        val maxIndexLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLen = new mutable.PriorityQueue[Int]()\n\
    \        val maxIndexLenLenLen = new mutable.PriorityQueue[Int]()\n        val\
    \ maxIndexLenLenLenLen = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLen =\
    \ new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val maxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = new mutable.PriorityQueue[Int]()\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4hhq4fl3.scala:44:11 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4hhq4fl3.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4hhq4fl3.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndexLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4hhq4fl3.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxIndexLenLenLenLenLenLenLenLenLenLenLenLenLenLenL"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.take(arr.size - k)\n        val maxList4 = arr.drop(arr.size\
    \ - k)\n        val maxList5 = arr.take(arr.size - k)\n        val maxList6 =\
    \ arr.drop(arr.size - k)\n        val maxList7 = arr.take(arr.size - k)\n    \
    \    val maxList8 = arr.drop(arr.size - k)\n        val maxList9 = arr.take(arr.size\
    \ - k)\n        val maxList10 = arr.drop(arr.size - k)\n        val maxList11\
    \ = arr.take(arr.size - k)\n        val maxList12 = arr.drop(arr.size - k)\n \
    \       val maxList13 = arr.take(arr.size - k)\n        val maxList14 = arr.drop(arr.size\
    \ - k)\n        val maxList15 = arr.take(arr.size - k)\n        val maxList16\
    \ = arr.drop(arr.size - k)\n        val maxList17 = arr.take(arr.size - k)\n \
    \       val maxList18 = arr.drop(arr.size - k)\n        val maxList19 = arr.take(arr.size\
    \ - k)\n        val maxList20 = arr.drop(arr.size - k)\n        val maxList21\
    \ = arr.take(arr.size - k)\n        val maxList22 = arr.drop(arr.size - k)\n \
    \       val maxList23 = arr.take(arr.size - k)\n        val maxList24 = arr.drop(arr.size\
    \ - k)\n        val maxList25 = arr.take(arr.size - k)\n        val maxList26\
    \ = arr.drop(arr.size - k)\n        val maxList27 = arr.take(arr.size - k)\n \
    \       val maxList28 = arr.drop(arr.size - k)\n        val maxList29 = arr.take(arr.size\
    \ - k)\n        val maxList30 = arr.drop(arr.size - k)\n        val maxList31\
    \ = arr.take(arr.size - k)\n        val maxList32 = arr.drop(arr.size - k)\n \
    \       val maxList33 = arr.take(arr.size - k)\n        val maxList34 = arr.drop(arr.size\
    \ - k)\n        val maxList35 = arr.take(arr.size - k)\n        val maxList36\
    \ = arr.drop(arr.size - k)\n        val maxList37 = arr.take(arr.size - k)\n \
    \       val maxList38 = arr.drop(arr.size - k)\n        val maxList39 = arr.take(arr.size\
    \ - k)\n        val maxList40 = arr.drop(arr.size - k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx20qsygv.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx20qsygv.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            if (max.size < k) {\n                max += arr(i)\n\
    \            } else {\n                if (arr(i) > max.head) {\n            \
    \        max += arr(i)\n                }\n            }\n        }\n        result\
    \ ++= max.toList\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgcaj9a75.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgcaj9a75.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var max = 0\n        var maxIndex = 0\n        var i = 0\n        while\
    \ (i < arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n            i += 1\n        }\n\
    \        val maxIndex = maxIndex - k\n        val maxValue = arr(maxIndex)\n \
    \       val maxIndex = maxIndex + k\n        while (i < arr.length) {\n      \
    \      if (arr(i) > maxValue) {\n                result.add(arr(i))\n        \
    \    }\n            i += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxpeit90o.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex\
    \ - k\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmaxIndex is already defined as \e[33mvariable\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxpeit90o.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex + k\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is\
    \ already defined as \e[33mvariable\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxpeit90o.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxpeit90o.scala:26:25 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m                  \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\e[31m\
    \   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        var i = 0\n        while (i < k) {\n            val curMax =\
    \ arr(i)\n            if (maxIndexMap.contains(curMax)) {\n                maxIndexMap(curMax)\
    \ = maxIndexMap(curMax) + 1\n            } else {\n                maxIndexMap(curMax)\
    \ = 1\n            }\n            val curIndex = maxIndexMap(curMax)\n       \
    \     if (curIndex > maxIndex(i)) {\n                maxIndex(i) = curIndex\n\
    \                max(i) = curMax\n            }\n            i += 1\n        }\n\
    \        max.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0_6oc_a6.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0_6oc_a6.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_6oc_a6.scala:23:38\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       Found:    (k : Long)\n\e[31m   |\e[0m                \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp0_6oc_a6.scala:24:30 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxK = k\n        val arrSize = arr.size\n        val arrMin = arr.min\n\
    \        val arrMax = arr.max\n        val arrRange = arrMax - arrMin\n      \
    \  val arrRangeK = arrRange / maxK\n        val arrRangeK2 = arrRangeK * arrRangeK\n\
    \        val arrRangeK3 = arrRangeK2 * arrRangeK\n        val arrRangeK4 = arrRangeK3\
    \ * arrRangeK\n        val arrRangeK5 = arrRangeK4 * arrRangeK\n        val arrRangeK6\
    \ = arrRangeK5 * arrRangeK\n        val arrRangeK7 = arrRangeK6 * arrRangeK\n\
    \        val arrRangeK8 = arrRangeK7 * arrRangeK\n        val arrRangeK9 = arrRangeK8\
    \ * arrRangeK\n        val arrRangeK10 = arrRangeK9 * arrRangeK\n        val arrRangeK11\
    \ = arrRangeK10 * arrRangeK\n        val arrRangeK12 = arrRangeK11 * arrRangeK\n\
    \        val arrRangeK13 = arrRangeK12 * arrRangeK\n        val arrRangeK14 =\
    \ arrRangeK13 * arrRangeK\n        val arrRangeK15 = arrRangeK14 * arrRangeK\n\
    \        val arrRangeK16 = arrRangeK15 * arrRangeK\n        val arrRangeK17 =\
    \ arrRangeK16 * arrRangeK\n        val arrRangeK18 = arrRangeK17 * arrRangeK\n\
    \        val arrRangeK19 = arrRangeK18 * arrRangeK\n        val arrRangeK20 =\
    \ arrRangeK19 * arrRangeK\n        val arrRangeK21 = arrRangeK20 * arrRangeK\n\
    \        val arrRangeK22 = arrRangeK21 * arrRangeK\n        val arrRangeK23 =\
    \ arrRangeK22 * arrRangeK\n        val arrRangeK24 = arrRangeK23 * arrRangeK\n\
    \        val arrRangeK25 = arrRangeK24 * arrRangeK\n        val arrRangeK26 =\
    \ arrRangeK25 * arrRangeK\n        val arrRangeK27 = arrRangeK26 * arrRangeK\n\
    \        val arrRangeK28 = arrRangeK27 * arrRangeK\n        val arrRangeK29 =\
    \ arrRangeK28 * arrRangeK\n        val arrRangeK30 = arrRangeK29 * arrRangeK\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4y9luh7.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpu4y9luh7.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        for (i <- 0 until\
    \ arr.length) {\n            if (max.size < k) {\n                max += arr(i)\n\
    \            }\n            else if (arr(i) > max.head) {\n                max\
    \ += arr(i)\n            }\n        }\n        result ++= max\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9g5ja13u.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9g5ja13u.scala:21:22\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  var i = 0\n        var j = 0\n        var maxIndex = 0\n        var maxIndex2\
    \ = 0\n        var maxIndex3 = 0\n        var maxIndex4 = 0\n        var maxIndex5\
    \ = 0\n        var maxIndex6 = 0\n        var maxIndex7 = 0\n        var maxIndex8\
    \ = 0\n        var maxIndex9 = 0\n        var maxIndex10 = 0\n        var maxIndex11\
    \ = 0\n        var maxIndex12 = 0\n        var maxIndex13 = 0\n        var maxIndex14\
    \ = 0\n        var maxIndex15 = 0\n        var maxIndex16 = 0\n        var maxIndex17\
    \ = 0\n        var maxIndex18 = 0\n        var maxIndex19 = 0\n        var maxIndex20\
    \ = 0\n        var maxIndex21 = 0\n        var maxIndex22 = 0\n        var maxIndex23\
    \ = 0\n        var maxIndex24 = 0\n        var maxIndex25 = 0\n        var maxIndex26\
    \ = 0\n        var maxIndex27 = 0\n        var maxIndex28 = 0\n        var maxIndex29\
    \ = 0\n        var maxIndex30 = 0\n        var maxIndex31 = 0\n        var maxIndex32\
    \ = 0\n        var maxIndex33 = 0\n        var maxIndex34 = 0\n        var maxIndex35\
    \ = 0\n        var maxIndex36 = 0\n        var maxIndex37 = 0\n        var maxIndex38\
    \ = 0\n        var maxIndex39 = 0\n        var maxIndex40 = 0\n        var maxIndex41\
    \ = 0\n        var maxIndex42 = 0\n        var maxIndex43 = 0\n        var maxIndex44\
    \ = 0\n        var maxIndex45 = 0\n        var maxIndex46 = 0\n        var maxIndex47\
    \ = 0\n        var maxIndex48 = 0\n        var maxIndex49 = 0\n        var maxIndex50\
    \ = 0\n        var maxIndex51 = 0\n        var maxIndex52 = 0\n        var maxIndex53\
    \ = 0\n        var maxIndex54 = 0\n        var maxIndex55 = 0\n        var maxIndex56\
    \ = 0\n        var maxIndex57 = 0\n        var maxIndex58 = 0\n        var maxIndex59\
    \ = 0\n        var maxIndex60 = 0\n        var maxIndex61 = 0\n        var maxIndex62\
    \ = 0\n        var maxIndex63 = 0\n        var maxIndex64 = 0\n        var maxIndex65\
    \ = 0\n        var maxIndex66 = 0\n        var maxIndex67 = 0\n        var maxIndex68\
    \ = 0\n        var maxIndex69 = 0\n        var maxIndex70 = 0\n        var maxIndex71\
    \ = 0\n        var maxIndex72 = 0\n        var maxIndex73 = 0\n        var \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8dhj610p.scala:101:11 --------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8dhj610p.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8dhj610p.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dhj610p.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8dhj610p.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E0"
  stdout: ''
  timestamp: 1659978927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnd7o4uif.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnd7o4uif.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd7o4uif.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val maxList = arr.take(k)\n        val maxList2 = arr.drop(k)\n     \
    \   val maxList3 = arr.takeRight(k)\n        val maxList4 = arr.dropRight(k)\n\
    \        val maxList5 = arr.take(k)\n        val maxList6 = arr.drop(k)\n    \
    \    val maxList7 = arr.takeRight(k)\n        val maxList8 = arr.dropRight(k)\n\
    \        val maxList9 = arr.take(k)\n        val maxList10 = arr.drop(k)\n   \
    \     val maxList11 = arr.takeRight(k)\n        val maxList12 = arr.dropRight(k)\n\
    \        val maxList13 = arr.take(k)\n        val maxList14 = arr.drop(k)\n  \
    \      val maxList15 = arr.takeRight(k)\n        val maxList16 = arr.dropRight(k)\n\
    \        val maxList17 = arr.take(k)\n        val maxList18 = arr.drop(k)\n  \
    \      val maxList19 = arr.takeRight(k)\n        val maxList20 = arr.dropRight(k)\n\
    \        val maxList21 = arr.take(k)\n        val maxList22 = arr.drop(k)\n  \
    \      val maxList23 = arr.takeRight(k)\n        val maxList24 = arr.dropRight(k)\n\
    \        val maxList25 = arr.take(k)\n        val maxList26 = arr.drop(k)\n  \
    \      val maxList27 = arr.takeRight(k)\n        val maxList28 = arr.dropRight(k)\n\
    \        val maxList29 = arr.take(k)\n        val maxList30 = arr.drop(k)\n  \
    \      val maxList31 = arr.takeRight(k)\n        val maxList32 = arr.dropRight(k)\n\
    \        val maxList33 = arr.take(k)\n        val maxList34 = arr.drop(k)\n  \
    \      val maxList35 = arr.takeRight(k)\n        val maxList36 = arr.dropRight(k)\n\
    \        val maxList37 = arr.take(k)\n        val maxList38 = arr.drop(k)\n  \
    \      val maxList39 = arr.takeRight(k)\n        val maxList40 = arr.dropRight(k)\n\
    \        val maxList41 = arr.take(k)\n        val maxList42 = arr.drop(k)\n  \
    \      val maxList43 = arr.takeRight(k)\n        val maxList44 = arr.dropRight(k)\n\
    \        val maxList45 = arr.take(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnd7o4uif.scala:65:33 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \e[36mmaxList45\e[0m = arr.take(\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnd7o4uif.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.sortBy(-_)\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd7o4uif.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxValue = arr.max\n        val\
    \ maxIndex = arr.indexWhere(x => x == maxValue)\n        val maxIndexList = arr.take(maxIndex).toList\n\
    \        val maxIndexListLength = maxIndexList.length\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val maxIndexListLength = maxIndexListLength\
    \ - 1\n        val maxIndexListLength = maxIndexListLength - 1\n        val maxIndexListLength\
    \ = maxIndexListLength - 1\n        val max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgninyfld.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgninyfld.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexListLength\e[0m = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m \e[35mmaxIndexListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgninyfld.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m = maxIndexListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgninyfld.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgninyfld.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListLength\e[0m\
    \ = maxIndexListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxIndexListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659978930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxLength = arr.length\n        val maxK = k\n        val maxIndex\
    \ = arr.indexWhere(x => x > 0)\n        val maxValue = arr(maxIndex)\n       \
    \ val maxLength = maxIndex - maxK\n        val maxKValue = arr(maxK - maxLength)\n\
    \        val maxKLength = maxK - maxLength\n        val maxKValue = maxKValue\
    \ - maxKLength\n        val maxKLength = maxKLength - maxKValue\n        val maxKValue\
    \ = maxKValue - maxKLength\n        val maxKLength = maxKLength - maxKValue\n\
    \        val maxKValue = maxKValue - maxKLength\n        val maxKLength = maxKLength\
    \ - maxKValue\n        val maxKValue = maxKValue - maxKLength\n        val maxKLength\
    \ = maxKLength - maxKValue\n        val maxKValue = maxKValue - maxKLength\n \
    \       val maxKLength = maxKLength - maxKValue\n        val maxKValue = maxKValue\
    \ - maxKLength\n        val maxKLength = maxKLength - maxKValue\n        val maxKValue\
    \ = maxKValue - maxKLength\n        val maxKLength = maxKLength - maxKValue\n\
    \        val maxKValue = maxKValue - maxKLength\n        val maxKLength = maxKLength\
    \ - maxKValue\n        val maxKValue = maxKValue - maxKLength\n        val maxKLength\
    \ = maxKLength - maxKValue\n        val maxKValue = maxKValue - maxKLength\n \
    \       val maxKLength = maxKLength - maxKValue\n        val maxKValue = maxKValue\
    \ - maxKLength\n        val maxKLength = maxKLength - maxKValue\n        val maxKValue\
    \ = maxKValue - maxKLength\n        val maxKLength = maxKLength - maxKValue\n\
    \        val maxKValue = maxKValue - maxKLength\n        val maxKLength = maxKLength\
    \ - maxKValue\n        val maxKValue = maxKValue - maxKLength\n        val maxKLength\
    \ = maxKLength - maxKValue\n        val maxKValue = maxKValue - maxKLength\n \
    \       val maxKLength = maxKLength - maxKValue\n        val maxKValue = maxKValue\
    \ - maxKLength\n        val maxKLength = maxKLength - maxKValue\n        val maxKValue\
    \ = maxKValue - maxKLength\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf2uj5ma0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxLength\e[0m = maxIndex\
    \ - maxK\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxLength is already defined as \e[33mvalue\e[0m \e[35mmaxLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf2uj5ma0.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxKValue\e[0m = maxKValue - maxKLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKValue is already defined as \e[33mvalue\e[0m \e[35mmaxKValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf2uj5ma0.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxKLength\e[0m = maxKLength - maxKValue\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxKLength is already defined as \e[33mvalue\e[0m \e[35mmaxKLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf2uj5ma0.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxKValue\e[0m = maxKValue - maxKLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxKValue is already defined as \e[33mvalue\e[0m \e[35mmaxKValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf2uj5ma0.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxKLength\e[0m = maxKLength - maxKValue\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxKLength is already def"
  stdout: ''
  timestamp: 1659978932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            var maxIndex = 0\n            var\
    \ maxValue = arr(0)\n            for (i <- 0 until len) {\n                if\
    \ (arr(i) > maxValue) {\n                    maxValue = arr(i)\n             \
    \       maxIndex = i\n                }\n            }\n            max += maxValue\n\
    \            i += 1\n        }\n        max.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ilwo2tx.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0ilwo2tx.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ilwo2tx.scala:33:16\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            max += maxValue\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m          value +=\
    \ is not a member of Array[Long] - did you mean max.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Long]()\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap3 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Long]()\n    \
    \    val maxIndexMap7 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap11 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap15 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap19 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap23 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Long]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Long]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Long]()\n   \
    \     val maxIndexMap27 = new mutable.HashMap[Long, Long]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Long]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9ng4e10a.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ng4e10a.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ng4e10a.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndex\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9ng4e10a.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9ng4e10a.scala:24:31 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659978932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = math.min(k, n)\n        val max = new mutable.PriorityQueue[Long]()\n\
    \        for (i <- 0 until m) {\n            max += arr(i)\n        }\n      \
    \  max.toList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjx5sy3vr.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ mutable.PriorityQueue[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjx5sy3vr.scala:23:26\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until m) {\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (m : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val max = new Array[Long](k)\n        val maxIndex = new Array[Int](k)\n \
    \       val maxIndexMap = new mutable.HashMap[Long, Int]()\n        val maxIndexMap2\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap3 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap4 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap5 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap6\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap7 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap8 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap9 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap10\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap11 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap12 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap13 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap14\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap15 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap16 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap17 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap18\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap19 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap20 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap21 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap22\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap23 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap24 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap25 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap26\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap27 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap28 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap29 = new mutable.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjuw99ip.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptjuw99ip.scala:21:34 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (k : Long)\n\e\
    [31m   |\e[0m                                  Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptjuw99ip.scala:22:38 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m               \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    (k : Long)\n\e[31m   |\e[0m                               \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjuw99ip.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjuw99ip.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /"
  stdout: ''
  timestamp: 1659978934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ListBuffer.empty[Long]\n\
    \        val maxValue = arr.head\n        val maxIndex = arr.indexOfMax\n    \
    \    for(i <- 0 until arr.length){\n            if(arr(i) > maxValue){\n     \
    \           maxValue <- arr(i)\n                maxIndex <- i\n            }\n\
    \        }\n        maxList += maxValue\n        arr.drop(maxIndex).take(k - 1).foreach(maxList\
    \ += _)\n        return maxList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk_bmfvhi.scala:25:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                maxValue <- arr(i)\n\e[31m\e[31m   |\e\
    [0m                         ^^\e[0m\n\e[31m   |\e[0m                         end\
    \ of statement expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpk_bmfvhi.scala:26:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \         maxIndex <- i\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\
    \e[31m   |\e[0m                         end of statement expected but '<-' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_bmfvhi.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk_bmfvhi.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = arr.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Long] - did you mean arr.indexOf?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk_bmfvhi.scala:30:32 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        arr.drop(maxIndex).take(k - \e[31m1\e[0m).foreach(maxList\
    \ += _)\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    Long\n\e[31m   |\e[0m    \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmpk_bmfvhi.scala:25:16 ----------------\e[0m\e\
    [0m\n\e[33m25 |\e[0m                maxValue <- arr(i)\n\e[33m\e[33m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation "
  stdout: ''
  timestamp: 1659978935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxNum = arr.max\n        val minNum\
    \ = arr.min\n        val maxIndex = arr.lastIndexWhere(_ == maxNum)\n        val\
    \ minIndex = arr.lastIndexWhere(_ == minNum)\n        val maxNumIndex = arr.lastIndexWhere(_\
    \ == maxNum)\n        val minNumIndex = arr.lastIndexWhere(_ == minNum)\n    \
    \    val maxIndexIndex = arr.lastIndexWhere(_ == maxIndex)\n        val minIndexIndex\
    \ = arr.lastIndexWhere(_ == minIndex)\n        val maxNumIndexIndex = arr.lastIndexWhere(_\
    \ == maxNumIndex)\n        val minNumIndexIndex = arr.lastIndexWhere(_ == minNumIndex)\n\
    \        val maxIndexIndexIndex = arr.lastIndexWhere(_ == maxIndexIndex)\n   \
    \     val minIndexIndexIndex = arr.lastIndexWhere(_ == minIndexIndex)\n      \
    \  val maxNumIndexIndexIndex = arr.lastIndexWhere(_ == maxNumIndexIndex)\n   \
    \     val minNumIndexIndexIndex = arr.lastIndexWhere(_ == minNumIndexIndex)\n\
    \        val maxIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxIndexIndexIndex)\n\
    \        val minIndexIndexIndexIndex = arr.lastIndexWhere(_ == minIndexIndexIndex)\n\
    \        val maxNumIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxNumIndexIndexIndex)\n\
    \        val minNumIndexIndexIndexIndex = arr.lastIndexWhere(_ == minNumIndexIndexIndex)\n\
    \        val maxIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxIndexIndexIndexIndex)\n\
    \        val minIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == minIndexIndexIndexIndex)\n\
    \        val maxNumIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxNumIndexIndexIndexIndex)\n\
    \        val minNumIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == minNumIndexIndexIndexIndex)\n\
    \        val maxIndexIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxIndexIndexIndexIndexIndex)\n\
    \        val minIndexIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == minIndexIndexIndexIndexIndex)\n\
    \        val maxNumIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxNumIndexIndexIndexIndex)\n\
    \        val minNumIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == minNumIndexIndexIndexIndex)\n\
    \        val maxIndexIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxIndexIndexIndexIndexIndex)\n\
    \        val minIndexIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == minIndexIndexIndexIndexIndex)\n\
    \        val maxNumIndexIndexIndexIndexIndex = arr.lastIndexWhere(_ == maxNumIndexIndexIndexIndex)\n\
    \        val minNum\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm0cimiw4.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0cimiw4.scala:46:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxNumIndexIndexIndexIndexIndex\e[0m = arr.lastIndexWhere(_ == maxNumIndexIndexIndexIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumIndexIndexIndexIndexIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxNumIndexIndexIndexIndexIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0cimiw4.scala:47:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminNumIndexIndexIndexIndexIndex\e[0m = arr.lastIndexWhere(_ == minNumIndexIndexIndexIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminNumIndexIndexIndexIndexIndex is already defined as \e[33mvalue\e\
    [0m \e[35mminNumIndexIndexIndexIndexIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0cimiw4.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndexIndexIndexIndexIndex\e[0m = arr.lastIndexWhere(_ == maxIndexIndexIndexIndexIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndexIndexIndexIndexIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxIndexIndexIndexIndexIndexIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0cimiw4.scala:49:12\
    \ ---------------"
  stdout: ''
  timestamp: 1659978934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = arr.max\n        val maxList = new Array[Long](k)\n        var i =\
    \ 0\n        var j = 0\n        var max = 0\n        while (i < n) {\n       \
    \     if (max < arr(i)) {\n                max = arr(i)\n                maxList(i)\
    \ = max\n            }\n            i += 1\n        }\n        while (j < k) {\n\
    \            if (max < maxList(j)) {\n                max = maxList(j)\n     \
    \           maxList(j) = max\n            }\n            j += 1\n        }\n \
    \       maxList\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpes_b705l.scala:22:38\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                      ^\e[0m\n\e[31m   |\e[0m             \
    \                         Found:    (k : Long)\n\e[31m   |\e[0m              \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpes_b705l.scala:28:25 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m                max = arr(i)\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpes_b705l.scala:35:29 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                max = maxList(j)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \  Found:    Long\n\e[31m   |\e[0m                      Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpes_b705l.scala:40:8 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        maxList\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (maxList : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxNums = arr.take(k).toList\n\
    \        val maxNumsLen = maxNums.length\n        val maxNumsSet = maxNums.toSet\n\
    \        val maxNumsLenSet = maxNumsSet.size\n        val maxNumsLenSetSet = maxNumsLenSet.toSet\n\
    \        val maxNumsLenSetSetSet = maxNumsLenSetSet.toSet\n        val maxNumsLenSetSetSetSet\
    \ = maxNumsLenSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSet = maxNumsLenSetSetSetSet.toSet\n\
    \        val maxNumsLenSetSetSetSetSet = maxNumsLenSetSetSetSet.toSet\n      \
    \  val maxNumsLenSetSetSetSetSetSet = maxNumsLenSetSetSetSet.toSet\n        val\
    \ maxNumsLenSetSetSetSetSetSet = maxNumsLenSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSetSet\
    \ = maxNumsLenSetSetSetSetSetSet.toSet\n        val maxNumsLenSetSetSetSetSetSetSetSet\
    \ = maxNums\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnd5kyk13.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsLenSetSetSetSetSet\e\
    [0m = maxNumsLenSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsLenSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxNumsLenSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnd5kyk13.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsLenSetSetSetSetSetSet\e\
    [0m = maxNumsLenSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsLenSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxNumsLenSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnd5kyk13.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsLenSetSetSetSetSetSet\e\
    [0m = maxNumsLenSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsLenSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxNumsLenSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnd5kyk13.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmaxNumsLenSetSetSetSetSetSetSet\e\
    [0m = maxNumsLenSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxNumsLenSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mmaxNumsLenSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that"
  stdout: ''
  timestamp: 1659978935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.sortBy(-_)\n\
    \        val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        while (i < k) {\n            if (arr(i) > arr(i + 1)) {\n   \
    \             max(i) = arr(i)\n                i += 1\n            } else {\n\
    \                max(i) = arr(i + 1)\n                i += 1\n            }\n\
    \        }\n        max.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkt_cl7je.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.sortBy(-_)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt_cl7je.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.size\n       \
    \ val m = arr.max\n        val maxList = mutable.ArrayBuffer(m)\n        val maxIndex\
    \ = arr.indexWhere(x => x == m)\n        val maxValue = arr(maxIndex)\n      \
    \  val maxIndexList = arr.take(maxIndex).reverse\n        val maxIndexListSize\
    \ = maxIndexList.size\n        val maxIndexListSize = maxIndexListSize.toLong\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \        val maxIndexListSize = maxIndexListSize - 1\n        val maxIndexListSize\
    \ = maxIndexListSize - 1\n        val maxIndexListSize = maxIndexListSize - 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkftc805c.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkftc805c.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkftc805c.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkftc805c.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexListSize\e[0m =\
    \ maxIndexListSize - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexListSize is already defined as \e[33mvalue\e[0m \e\
    [35mmaxIndexListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkftc805c.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexL"
  stdout: ''
  timestamp: 1659978934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.size\n        val max = new Array[Long](k)\n        var maxIndex\
    \ = 0\n        var maxValue = 0L\n        var i = 0\n        while (i < n) {\n\
    \            if (arr(i) > maxValue) {\n                maxValue = arr(i)\n   \
    \             maxIndex = i\n            }\n            i += 1\n        }\n   \
    \     val maxList = arr.take(maxIndex).reverse\n        val maxList2 = arr.drop(maxIndex).reverse\n\
    \        val maxList3 = arr.take(maxIndex).reverse\n        val maxList4 = arr.drop(maxIndex).reverse\n\
    \        val maxList5 = arr.take(maxIndex).reverse\n        val maxList6 = arr.drop(maxIndex).reverse\n\
    \        val maxList7 = arr.take(maxIndex).reverse\n        val maxList8 = arr.drop(maxIndex).reverse\n\
    \        val maxList9 = arr.take(maxIndex).reverse\n        val maxList10 = arr.drop(maxIndex).reverse\n\
    \        val maxList11 = arr.take(maxIndex).reverse\n        val maxList12 = arr.drop(maxIndex).reverse\n\
    \        val maxList13 = arr.take(maxIndex).reverse\n        val maxList14 = arr.drop(maxIndex).reverse\n\
    \        val maxList15 = arr.take(maxIndex).reverse\n        val maxList16 = arr.drop(maxIndex).reverse\n\
    \        val maxList17 = arr.take(maxIndex).reverse\n        val maxList18 = arr.drop(maxIndex).reverse\n\
    \        val maxList19 = arr.take(maxIndex).reverse\n        val maxList20 = arr.drop(maxIndex).reverse\n\
    \        val maxList21 = arr.take(maxIndex).reverse\n        val maxList22 = arr.drop(maxIndex).reverse\n\
    \        val maxList23 = arr.take(maxIndex).reverse\n        val maxList24 = arr.drop(maxIndex).reverse\n\
    \        val maxList25 = arr.take(maxIndex).reverse\n        val maxList26 = arr.drop(maxIndex).reverse\n\
    \        val maxList27 = arr.take(maxIndex).reverse\n        val maxList28 = arr.drop(maxIndex).reverse\n\
    \        val maxList29 = arr.take(maxIndex).reverse\n        val maxList30 = arr.drop(maxIndex).reverse\n\
    \        val maxList31 = arr.take(maxIndex).reverse\n        val maxList32 = arr.drop(maxIndex).reverse\n\
    \        val maxList33 = arr.take(maxIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpln3uwe22.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpln3uwe22.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpln3uwe22.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpln3uwe22.scala:66:5 ---------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val n = arr.length\n     \
    \   val m = math.min(k, n)\n        val max = new Array[Long](m)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i < n) {\n\
    \            if (arr(i) > arr(maxIndex)) {\n                maxIndex += 1\n  \
    \              max(i) = arr(maxIndex)\n            }\n            i += 1\n   \
    \     }\n        val maxList = new Array[Long](maxIndex + 1)\n        var k =\
    \ 0\n        while (j < maxIndex) {\n            maxList(k) = arr(j)\n       \
    \     j += 1\n            k += 1\n        }\n        maxList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
    \ -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n\
    \    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong,\
    \ -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n    assert(maximum((List[Long](123l.toLong,\
    \ -123l.toLong, 20l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong,\
    \ 20l.toLong, 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong,\
    \ 0l.toLong, 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong,\
    \ 1l.toLong, 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong,\
    \ 15l.toLong, 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1z4h0l9.scala:40:8\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m        maxList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (maxList : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.length\n        val m = arr.take(k).max\n        val max = arr.take(k).max\n\
    \        val maxList = arr.take(k).sortWith(_ > _).take(k).toList\n        val\
    \ maxList2 = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList3\
    \ = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList4 = arr.take(k).sortWith(_\
    \ > _).take(k).toList\n        val maxList5 = arr.take(k).sortWith(_ > _).take(k).toList\n\
    \        val maxList6 = arr.take(k).sortWith(_ > _).take(k).toList\n        val\
    \ maxList7 = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList8\
    \ = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList9 = arr.take(k).sortWith(_\
    \ > _).take(k).toList\n        val maxList10 = arr.take(k).sortWith(_ > _).take(k).toList\n\
    \        val maxList11 = arr.take(k).sortWith(_ > _).take(k).toList\n        val\
    \ maxList12 = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList13\
    \ = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList14 = arr.take(k).sortWith(_\
    \ > _).take(k).toList\n        val maxList15 = arr.take(k).sortWith(_ > _).take(k).toList\n\
    \        val maxList16 = arr.take(k).sortWith(_ > _).take(k).toList\n        val\
    \ maxList17 = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList18\
    \ = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList19 = arr.take(k).sortWith(_\
    \ > _).take(k).toList\n        val maxList20 = arr.take(k).sortWith(_ > _).take(k).toList\n\
    \        val maxList21 = arr.take(k).sortWith(_ > _).take(k).toList\n        val\
    \ maxList22 = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList23\
    \ = arr.take(k).sortWith(_ > _).take(k).toList\n        val maxList24 = arr.take(k).sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcmkomrqg.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcmkomrqg.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        var max = 0\n        var i = 0\n        while(i < arr.length) {\n   \
    \         val current = arr(i)\n            if(current > max) {\n            \
    \    maxList.clear()\n                max = 0\n            }\n            if(current\
    \ > max) {\n                maxList += current\n                max += current\n\
    \            }\n            i += 1\n        }\n        if(maxList.size < k) {\n\
    \            val newList = maxList.take(k - maxList.size)\n            val newMax\
    \ = maxList.last\n            val newMaxList = maxList.drop(maxList.size - k)\n\
    \            val newMaxListSize = newMaxList.size\n            val newMaxListLast\
    \ = newMaxList.last\n            val newMaxListLastSize = newMaxListLast.size\n\
    \            val newMaxListLastLast = newMaxListLast.last\n            val newMaxListLastLastSize\
    \ = newMaxListLastLast.size\n            val newMaxListLastLastLast = newMaxListLastLast.last\n\
    \            val newMaxListLastLastLastSize = newMaxListLastLastLast.size\n  \
    \          val newMaxListLastLastLastLast = newMaxListLastLastLast.last\n    \
    \        val newMaxListLastLastLastLastSize = newMaxListLastLastLastLast.size\n\
    \            val newMaxListLastLastLastLastLast = newMaxListLastLastLastLast.last\n\
    \            val newMaxListLastLastLastLastLastSize = newMaxListLastLastLastLastLast.size\n\
    \            val newMaxListLastLastLastLastLastLast = newMaxListLastLastLastLastLast.last\n\
    \            val newMaxListLastLastLastLastLastLastSize = newMaxListLastLastLastLastLastLast.size\n\
    \            val newMaxListLastLastLastLastLastLastLast = newMaxListLastLastLastLastLastLastLast.last\n\
    \            val newMaxListLastLastLastLastLastLastLastSize = newMaxListLastLastLastLastLastLastLastLast.size\n\
    \            val newMaxListLastLastLastLastLastLastLastLast = newMaxListLastLastLastLastLastLastLastLastLast.last\n\
    \            val newMaxListLastLastLastLastLastLastLastLastSize = newMaxListLastLastLastLastLastLastLastLastLast.size\n\
    \            val newMaxListLastLastLastLastLastLastLastLastLast = newMaxListLastLastLastLastLastLastLastLastLastLast.last\n\
    \            val newMaxListLastLastLastLastLastLastLastLastLastSize = newMaxListLastLastLastLastLastLastLastLastLastLast.size\n\
    \            val newMaxListLastLastLast\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdi7h4bma.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdi7h4bma.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdi7h4bma.scala:20:22 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdi7h4bma.scala:31:20 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                max += current\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdi7h4bma.scala:52:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m52 |\e[0m            \e[33mval\e\
    [0m \e[36mnewMaxListLastLastLastLastLastLastLast\e[0m = newMaxListLastLastLastLastLastLastLast.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m       Recursive \e[33mvalue\e[0m \e[35mnewMaxListLastLastLastLastLastLastLast\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdi7h4bma.scala:56:65\
    \ ------------------------\e[0m\e[0m\n\e[31m56 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewMaxListLastLastLastLastLastLastLastLastLast\e[0m = newMaxListLastLastLastLastLastLastLastLastLastLast.last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m           Not found: newMaxListLastLastLastLastLastLastLastLastLastLast\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explan"
  stdout: ''
  timestamp: 1659978935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        var\
    \ i = 0\n        var j = 0\n        var maxIndex = 0\n        while (i < len)\
    \ {\n            while (j < k && arr(j) < arr(i)) {\n                j += 1\n\
    \            }\n            if (j == k) {\n                max(i) = arr(i)\n \
    \               i += 1\n                maxIndex += 1\n                j = 0\n\
    \            } else {\n                max(i) = arr(j)\n                j += 1\n\
    \            }\n        }\n        max.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk31mdu7d.scala:20:18 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk31mdu7d.scala:22:34 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (k : Long)\n\e[31m   |\e[0m                                  Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk31mdu7d.scala:40:12\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m        max.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mArray\e[0m[Long]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val len = arr.length\n        val max = new Array[Long](k)\n        val\
    \ maxIndex = new Array[Int](k)\n        val maxIndexMap = new HashMap[Long, Int]()\n\
    \        val maxIndexMap2 = new HashMap[Int, Int]()\n        val maxIndexMap3\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap4 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap5 = new HashMap[Int, Int]()\n        val maxIndexMap6\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap7 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap8 = new HashMap[Int, Int]()\n        val maxIndexMap9\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap10 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap11 = new HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap13 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap14 = new HashMap[Int, Int]()\n        val maxIndexMap15\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap16 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap17 = new HashMap[Int, Int]()\n        val maxIndexMap18\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap19 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap20 = new HashMap[Int, Int]()\n        val maxIndexMap21\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap22 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap23 = new HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap25 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap26 = new HashMap[Int, Int]()\n        val maxIndexMap27\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap28 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap29 = new HashMap[Int, Int]()\n        val maxIndexMap30\
    \ = new HashMap[Int, Int]()\n        val maxIndexMap31 = new HashMap[Int, Int]()\n\
    \        val maxIndexMap32 = new HashMap[Int, Int\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpffkljl8x.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpffkljl8x.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpffkljl8x.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpffkljl8x.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpffkljl8x.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.length\n        val m = k\n        val max = new Array[Long](m)\n\
    \        val maxIndex = new Array[Int](m)\n        val maxIndexMap = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap3 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Long, Int]()\n      \
    \  val maxIndexMap7 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap11 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap15 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap19 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap23 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Long, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Long,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Long, Int]()\n     \
    \   val maxIndexMap27 = new mutable.HashMap[Long, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Long, Int\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ky8kyz_.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6ky8kyz_.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ky8kyz_.scala:23:34\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](m)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (m : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6ky8kyz_.scala:24:38 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](m)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (m : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ky8kyz_.scala:25:30\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ky8kyz_.scala:26:31 ------------------------\e\
    [0m\e[0m\n\e[31m26 |"
  stdout: ''
  timestamp: 1659978936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val arr = arr.toList\n   \
    \     val n = arr.size\n        val max = new Array[Long](k)\n        val maxIndex\
    \ = new Array[Int](k)\n        var i = 0\n        var j = 0\n        var maxIndex\
    \ = 0\n        var maxValue = arr(0)\n        while (i < n) {\n            if\
    \ (arr(i) > maxValue) {\n                maxValue = arr(i)\n                maxIndex\
    \ = i\n            }\n            i += 1\n        }\n        val maxList = arr.take(maxIndex).sortWith(_\
    \ > _)\n        val maxListIndex = maxList.indexWhere(_ == maxValue)\n       \
    \ val maxListValue = maxList(maxListIndex)\n        val maxListIndex = maxListIndex\
    \ + 1\n        while (j < k) {\n            if (maxListIndex < maxList.length)\
    \ {\n                maxIndex(j) = maxListIndex\n                maxValue(j) =\
    \ maxListValue\n                j += 1\n            }\n            val maxListIndex\
    \ = maxList.indexWhere(_ == maxValue)\n            val maxListValue = maxList(maxListIndex)\n\
    \            val maxListIndex = maxListIndex + 1\n        }\n        return maxList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3vocxlnj.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mmaxIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3vocxlnj.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListIndex\e[0m = maxListIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxListIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3vocxlnj.scala:20:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3vocxlnj.scala:22:34\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e[0m](k)\n\e[31m\e[31m   |\e\
    [0m                                  ^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (k : Long)\n\e[31m   |\e[0m                      \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3vocxlnj.scala:23:38 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e[0m \e[35mArray\e\
    [0m[\e[35mInt\e[0m](k)\n\e[31m\e[31m   |\e[0m                                \
    \      ^\e[0m\n\e[31m   |\e[0m                                      Found:   \
    \ (k : Long)\n\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1659978936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val max = new mutable.PriorityQueue[Long]()\n        val maxIndex = new\
    \ mutable.PriorityQueue[Int]()\n        val maxIndexMap = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap2 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap3 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap4\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap5 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap6 = new mutable.HashMap[Int, Int]()\n       \
    \ val maxIndexMap7 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap8\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap9 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap10 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap11 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap12\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap13 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap14 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap15 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap16\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap17 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap18 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap19 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap20\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap21 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap22 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap23 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap24\
    \ = new mutable.HashMap[Int, Int]()\n        val maxIndexMap25 = new mutable.HashMap[Int,\
    \ Int]()\n        val maxIndexMap26 = new mutable.HashMap[Int, Int]()\n      \
    \  val maxIndexMap27 = new mutable.HashMap[Int, Int]()\n        val maxIndexMap28\
    \ = new mutable.HashMap[Int, \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong,\
    \ -3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](4l.toLong, -4l.toLong,\
    \ 4l.toLong)), (2l)).equals((List[Long](4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt5coh7lg.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5coh7lg.scala:20:25\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt5coh7lg.scala:21:22 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmax\e[0m = \e[33mnew\e[0m mutable.PriorityQueue[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpt5coh7lg.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = \e[33mnew\e\
    [0m mutable.PriorityQueue[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5coh7lg.scala:23:30\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxIndexMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5coh7lg.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxIndexMap2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |"
  stdout: ''
  timestamp: 1659978936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
    \ Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)),\
    \ (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example\
    \ 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n\
    \    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n\
    \    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the array\
    \ will be in the range of [1, 1000].\n    // 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr\
    \ : List[Long], k : Long) : List[Long] = {\n        val maxList = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxLen = arr.length\n        val maxK = k\n        val maxSum = arr.foldLeft(0l){\
    \ (sum, elem) => sum + elem }\n        val maxSumLen = maxSum / maxK\n       \
    \ val maxSumK = maxSum - maxSumLen * maxK\n        val maxSumKLen = maxSumK /\
    \ maxK\n        val maxSumKK = maxSumK - maxSumKLen * maxK\n        val maxSumKKLen\
    \ = maxSumKK / maxK\n        val maxSumKKK = maxSumKK - maxSumKKLen * maxK\n \
    \       val maxSumKKKLen = maxSumKKK / maxK\n        val maxSumKKKK = maxSumKKK\
    \ - maxSumKKKLen * maxK\n        val maxSumKKKKLen = maxSumKKKK / maxK\n     \
    \   val maxSumKKKKK = maxSumKKKK - maxSumKKKKLen * maxK\n        val maxSumKKKKKLen\
    \ = maxSumKKKKK / maxK\n        val maxSumKKKKKK = maxSumKKKKK - maxSumKKKKKLen\
    \ * maxK\n        val maxSumKKKKKKLen = maxSumKKKKKK / maxK\n        val maxSumKKKKKKK\
    \ = maxSumKKKKKK - maxSumKKKKKKLen * maxK\n        val maxSumKKKKKKKLen = maxSumKKKKKKK\
    \ / maxK\n        val maxSumKKKKKKKK = maxSumKKKKKKK - maxSumKKKKKKKLen * maxK\n\
    \        val maxSumKKKKKKKKLen = maxSumKKKKKKKK / maxK\n        val maxSumKKKKKKKKK\
    \ = maxSumKKKKKKKKK - maxSumKKKKKKKKLen * maxK\n        val maxSumKKKKKKKKKLen\
    \ = maxSumKKKKKKKKK / max\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
    \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
    \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
    \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
    \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
    \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
    \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
    \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n  \
    \  assert(maximum((List[Long](-1l.toLong, 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong,\
    \ -10l.toLong)), (2l)).equals((List[Long](3l.toLong, 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
    \ 0l.toLong, 5l.toLong, -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n\
    \    assert(maximum((List[Long](4l.toLong, -4l.toLong)), (2l)).equals((List[Long](-4l.toLong,\
    \ 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong, 10l.toLong)), (2l)).equals((List[Long](-10l.toLong,\
    \ 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzj01pm0g.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxList\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpzj01pm0g.scala:41:30 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxSumKKKKKKKKK\e[0m = maxSumKKKKKKKKK\
    \ - maxSumKKKKKKKKLen * maxK\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Recursive \e[33mvalue\e\
    [0m \e[35mmaxSumKKKKKKKKK\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzj01pm0g.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978936
