language: scala
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                s = 2l\n       \
    \     } else {\n                s = s * i\n            }\n            i += 1\n\
    \        }\n        if (s == n) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0bc4nb2a.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = \e[31m2l\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0bc4nb2a.scala:26:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                s =\
    \ s * i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0bc4nb2a.scala:28:14 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isNotPrime = (2l) until (n) contains n + 1\n        val isNotPrime2 =\
    \ (n) until (n) contains n + 1\n        val isNotPrime3 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime4 = (n) until (n) contains n + 1\n        val isNotPrime5\
    \ = (n) until (n) contains n + 1\n        val isNotPrime6 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime7 = (n) until (n) contains n + 1\n        val isNotPrime8\
    \ = (n) until (n) contains n + 1\n        val isNotPrime9 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime10 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime11 = (n) until (n) contains n + 1\n        val isNotPrime12 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime13 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime14 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime15 = (n) until (n) contains n + 1\n        val isNotPrime16 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime17 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime18 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime19 = (n) until (n) contains n + 1\n        val isNotPrime20 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime21 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime22 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime23 = (n) until (n) contains n + 1\n        val isNotPrime24 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime25 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime26 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime27 = (n) until (n) contains n + 1\n        val isNotPrime28 = (n)\
    \ until\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptb0jrqw4.scala:48:36 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36misNotPrime28\e[0m = (n)\
    \ until\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptb0jrqw4.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if(isPrime)\n  \
    \          return true\n        val sqrtN = math.sqrt(n)\n        for(i <- 2l\
    \ to sqrtN) {\n            if(n % i == 0)\n                return false\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwg7awea8.scala:24:23\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m2l\e[0m to sqrtN) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (sqrtN : Double)\n\e[31m   |\e\
    [0m                       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isPrime2 = isPrime filter (_ % 2l == 0l)\n        val isPrime3 = isPrime\
    \ filter (_ % 3l == 0l)\n        val isPrime4 = isPrime filter (_ % 4l == 0l)\n\
    \        val isPrime5 = isPrime filter (_ % 5l == 0l)\n        val isPrime6 =\
    \ isPrime filter (_ % 6l == 0l)\n        val isPrime7 = isPrime filter (_ % 7l\
    \ == 0l)\n        val isPrime8 = isPrime filter (_ % 8l == 0l)\n        val isPrime9\
    \ = isPrime filter (_ % 9l == 0l)\n        val isPrime10 = isPrime filter (_ %\
    \ 10l == 0l)\n        val isPrime11 = isPrime filter (_ % 11l == 0l)\n       \
    \ val isPrime12 = isPrime filter (_ % 12l == 0l)\n        val isPrime13 = isPrime\
    \ filter (_ % 13l == 0l)\n        val isPrime14 = isPrime filter (_ % 14l == 0l)\n\
    \        val isPrime15 = isPrime filter (_ % 15l == 0l)\n        val isPrime16\
    \ = isPrime filter (_ % 16l == 0l)\n        val isPrime17 = isPrime filter (_\
    \ % 17l == 0l)\n        val isPrime18 = isPrime filter (_ % 18l == 0l)\n     \
    \   val isPrime19 = isPrime filter (_ % 19l == 0l)\n        val isPrime20 = isPrime\
    \ filter (_ % 20l == 0l)\n        val isPrime21 = isPrime filter (_ % 21l == 0l)\n\
    \        val isPrime22 = isPrime filter (_ % 22l == 0l)\n        val isPrime23\
    \ = isPrime filter (_ % 23l == 0l)\n        val isPrime24 = isPrime filter (_\
    \ % 24l == 0l)\n        val isPrime25 = isPrime filter (_ % 25l == 0l)\n     \
    \   val isPrime26 = isPrime filter (_ % 26l == 0l)\n        val isPrime27 = isPrime\
    \ filter (_ % 27l == 0l)\n        \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8321z3oe.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = isPrime\
    \ filter (_ % \e[31m2l\e[0m == \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ filter is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8321z3oe.scala:22:31\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime3\e[0m = isPrime filter (_ % \e[31m3l\e[0m == \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  value filter is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8321z3oe.scala:23:31 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrime4\e[0m = isPrime filter\
    \ (_ % \e[31m4l\e[0m == \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8321z3oe.scala:24:31\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime5\e[0m = isPrime filter (_ % \e[31m5l\e[0m == \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  value filter is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8321z3oe.scala:25:31 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misPrime6\e[0m = isPrime filter\
    \ (_ % \e[31m6l\e[0m == \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8321z3oe.scala:26:31\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime7\e[0m = isPrime filter (_ % \e[31m7l\e[0m == \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  value filter is not a member of Boolean\n\e[31m\e[31m-- [E008]\
    \ Not Fo"
  stdout: ''
  timestamp: 1659793114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        val isPrime =\
    \ mutable.ArrayBuffer.empty[Boolean]\n        val isDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeAndDivisor = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeAndDivisorAndNotDivisor = mutable.ArrayBuffer.empty[Boolean]\n      \
    \  val isPrimeAndDivisorAndNotDivisorAndNotDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeAndDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNotDivisorAndNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ltncnjz.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ltncnjz.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ltncnjz.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m \
    \  |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0ltncnjz.scala:22:22 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer.empty[\e[35mBoolean\e\
    [0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp0ltncnjz.scala:23:24 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misDivisor\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ltncnjz.scala:24:32 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeAndDivisor\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mBoolean\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        val isPrime2 = isPrime\
    \ && (n % 2l) == 0l\n        val isPrime3 = isPrime2 && (n % 3l) == 0l\n     \
    \   val isPrime4 = isPrime3 && (n % 4l) == 0l\n        val isPrime5 = isPrime4\
    \ && (n % 5l) == 0l\n        val isPrime6 = isPrime5 && (n % 6l) == 0l\n     \
    \   val isPrime7 = isPrime6 && (n % 7l) == 0l\n        val isPrime8 = isPrime7\
    \ && (n % 8l) == 0l\n        val isPrime9 = isPrime8 && (n % 9l) == 0l\n     \
    \   val isPrime10 = isPrime9 && (n % 10l) == 0l\n        val isPrime11 = isPrime10\
    \ && (n % 11l) == 0l\n        val isPrime12 = isPrime11 && (n % 12l) == 0l\n \
    \       val isPrime13 = isPrime12 && (n % 13l) == 0l\n        val isPrime14 =\
    \ isPrime13 && (n % 14l) == 0l\n        val isPrime15 = isPrime14 && (n % 15l)\
    \ == 0l\n        val isPrime16 = isPrime15 && (n % 16l) == 0l\n        val isPrime17\
    \ = isPrime16 && (n % 17l) == 0l\n        val isPrime18 = isPrime17 && (n % 18l)\
    \ == 0l\n        val isPrime19 = isPrime18 && (n % 19l) == 0l\n        val isPrime20\
    \ = isPrime19 && (n % 20l) == 0l\n        val isPrime21 = isPrime20 && (n % 21l)\
    \ == 0l\n        val isPrime22 = isPrime21 && (n % 22l) == 0l\n        val isPrime23\
    \ = isPrime22 && (n % 23l) == 0l\n        val isPrime24 = isPrime23 && (n % 24l)\
    \ == 0l\n        val isPrime25 = isPrime24 && (n % 25l) == 0l\n        val isPrime26\
    \ = isPrime25 && (n % 26l) == 0l\n        val isPrime27 = isPrime26 && (n % 27l)\
    \ == 0l\n        val isPrime28 = isPrime27 && (n % 28l) == 0l\n        val isPrime29\
    \ = isPrime28 && (n % 29l) == 0l\n        val isPrime30 = isPrime29 && (n % 30l)\
    \ == 0l\n        val isPrime31 = is\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparzbpisa.scala:50:24 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36misPrime31\e[0m = is\n\e\
    [31m\e[31m   |\e[0m                        ^^\e[0m\n\e[31m   |\e[0m          \
    \              Not found: is\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmparzbpisa.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ isPrime = mutable.ArrayBuffer(true)\n        val isNotPrime = mutable.ArrayBuffer(false)\n\
    \        for (i <- 2l until n by 2l) {\n            if (n % i == 0) {\n      \
    \          primes += i\n                isPrime += false\n            } else {\n\
    \                isNotPrime += true\n            }\n        }\n        isPrime\
    \ == primes\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6nlw5i3n.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6nlw5i3n.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6nlw5i3n.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misNotPrime\e[0m = mutable.ArrayBuffer(\e\
    [31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (1l*Math.sqrt(n).toInt).toLong\n   \
    \     val primes = mutable.ArrayBuffer.empty[Long]\n        val primesCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeCount = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquare\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSquareCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeSquareRoot = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeSquareRootCount = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainder\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeSquareRootRemainderCount\
    \ = mutable.ArrayBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcf9vk18a.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcf9vk18a.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36misPrimeSquareRootRemainderCount\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeSquareRootRemainderCount is already defined as \e[33mvalue\e\
    [0m \e[35misPrimeSquareRootRemainderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcf9vk18a.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeSquareRootRemainderCount\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeSquareRootRemainderCount is already defined as \e[33mvalue\e\
    [0m \e[35misPrimeSquareRootRemainderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcf9vk18a.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeSquareRootRemainderCount\e[0m = mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrimeSquareRootRemainderCount is already defined as \e[33mvalue\e\
    [0m \e[35misPrimeSquareRootRemainderCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcf9vk18a.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36misPrimeSquareRootRemainderCount\e[0m = mut"
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ListBuffer[Long]()\n     \
    \   val divisors = mutable.ListBuffer[Long]()\n        divisors += 2l\n      \
    \  divisors += 3l\n        divisors += 5l\n        divisors += 7l\n        divisors\
    \ += 11l\n        divisors += 13l\n        divisors += 17l\n        divisors +=\
    \ 19l\n        divisors += 23l\n        divisors += 29l\n        divisors += 31l\n\
    \        divisors += 37l\n        divisors += 41l\n        divisors += 43l\n \
    \       divisors += 47l\n        divisors += 53l\n        divisors += 59l\n  \
    \      divisors += 61l\n        divisors += 67l\n        divisors += 71l\n   \
    \     divisors += 73l\n        divisors += 79l\n        divisors += 83l\n    \
    \    divisors += 89l\n        divisors += 97l\n        divisors += 101l\n    \
    \    divisors += 103l\n        divisors += 107l\n        divisors += 109l\n  \
    \      divisors += 113l\n        divisors += 127l\n        divisors += 131l\n\
    \        divisors += 137l\n        divisors += 139l\n        divisors += 147l\n\
    \        divisors += 151l\n        divisors += 157l\n        divisors += 163l\n\
    \        divisors += 167l\n        divisors += 173l\n        divisors += 179l\n\
    \        divisors += 181l\n        divisors += 191l\n        divisors += 197l\n\
    \        divisors += 199l\n        divisors += 211l\n        divisors += 223l\n\
    \        divisors += 229l\n        divisors += 233l\n        divisors += 239l\n\
    \        divisors += 241l\n        divisors += 247l\n        divisors += 251l\n\
    \        divisors += 257l\n        divisors += 263l\n        divisors += 269l\n\
    \        divisors += 271l\n        divisors += 277l\n        divisors += 281l\n\
    \        divisors += 283l\n        divisors += 293l\n        divisors += 307l\n\
    \        divisors += 311l\n        divisors += 313l\n        divisors += 317l\n\
    \        divisors += 323l\n        divisors += 329l\n        divisors += 331l\n\
    \        divisors += 337l\n        divisors += 347l\n        divisors += 351l\n\
    \        divisors += 359l\n        divisors += 367l\n        divisors += 373l\n\
    \        divisors += 379l\n        divisors += 383l\n        divisors += 389l\n\
    \        divisors += 397l\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvvtmyqy.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprvvtmyqy.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= Math.sqrt(n)) {\n            if (n % i\
    \ == 0) {\n                primes += i\n            }\n            i += 1\n  \
    \      }\n        primes.contains(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6x56_bif.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall { x =>\n    \
    \        val y = math.floor(x * Math.sqrt(x).toLong)\n            x % y == 0\n\
    \        }\n        n <= 2l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpisiwdplf.scala:28)\n\tat Problem.main(tmpisiwdplf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val i\
    \ = 2l\n        while (i <= n / i) {\n            if (n % i == 0l) {\n       \
    \         primes += i\n            }\n            i += 1\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5exkthqp.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5exkthqp.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val primesSet\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  val isPrimeSet = mutable.Set[Boolean]()\n        val isPrimeSet2 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet3 = mutable.Set[Boolean]()\n        val isPrimeSet4 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet5 = mutable.Set[Boolean]()\n        val isPrimeSet6 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet7 = mutable.Set[Boolean]()\n        val isPrimeSet8 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet9 = mutable.Set[Boolean]()\n        val isPrimeSet10 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet11 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet12 = mutable.Set[Boolean]()\n        val isPrimeSet13 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet14 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet15 = mutable.Set[Boolean]()\n        val isPrimeSet16 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet17 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet18 = mutable.Set[Boolean]()\n        val isPrimeSet19 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet20 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet21 = mutable.Set[Boolean]()\n        val isPrimeSet22 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet23 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet24 = mutable.Set[Boolean]()\n        val isPrimeSet25 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet26 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet27 = mutable.Set[Boolean]()\n        val isPrimeSet28 =\
    \ mutable.Set[Boolean]()\n        val isPrimeSet29 = mutable.Set[Boolean]()\n\
    \        val isPrimeSet30 = mutable.Set[Boolean]()\n        val isPri\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprdgs8s66.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdgs8s66.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdgs8s66.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdgs8s66.scala:22:22\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = mutable.Set[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdgs8s66.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misPrimeSet\e[0m = mutable.Set[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdgs8s66.scala:24:26\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misPrimeSet2\e[0m = mutable.Set[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659793113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => true\n            case _ => isPrime\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9vfk9ru.scala:28)\n\tat Problem.main(tmpt9vfk9ru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isNotPrime = (2l) until (n) contains !n\n        val isPrimeAndNotPrime\
    \ = n match {\n            case n if isPrime && isNotPrime => true\n         \
    \   case n if isNotPrime && isPrime => false\n            case _ => false\n  \
    \      }\n        isPrimeAndNotPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6zuegzst.scala:21:49 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotPrime\e[0m = (\e[31m2l\e\
    [0m) until (n) contains !n\n\e[31m\e[31m   |\e[0m                            \
    \                     ^^\e[0m\n\e[31m   |\e[0m         value unary_! is not a\
    \ member of Long - did you mean n.unary_+?\n1 error found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrt = (1l to n).map(n => math.pow(n, 0.5l))\n            val\
    \ primes = mutable.Set[Long]()\n            val isPrime = sqrt.toList.forall(n\
    \ => primes.contains(n))\n            primes += n\n            isPrime\n     \
    \   } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzxkg_6xm.scala:22:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msqrt\e[0m = (\e[31m1l\e\
    [0m to n).map(\e[36mn\e[0m => math.pow(n, 0.5l))\n\e[31m\e[31m   |\e[0m      \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                             Invalid literal number\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzxkg_6xm.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => false\n            case 1 => true\n     \
    \       case _ => isPrime\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1u8rxcai.scala:29)\n\tat Problem.main(tmp1u8rxcai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0l) false\n            else i = i + 1l\n        }\n    \
    \    true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpeaycxvjt.scala:23:19 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m i = i + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpeaycxvjt.scala:22:29 ----------------\e[0m\e[0m\n\e[33m22 |\e\
    [0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e\
    [33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659792949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (1l*Math.sqrt(n).toInt).toLong\n   \
    \     val primes = mutable.Set[Long]()\n        for (i <- 2l to sqrt) {\n    \
    \        if (n % i == 0) {\n                primes.add(i)\n            }\n   \
    \     }\n        primes.size == n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5bs238su.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val isPrime =\
    \ true\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \        return isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbmtfe0.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtN) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtN : Double)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_jbmtfe0.scala:24:24 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbmtfe0.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val primes = mutable.Set[Long]()\n        for (i <- 2l until n by 2l) {\n\
    \            if (isPrime.contains(i)) {\n                primes += i\n       \
    \     }\n        }\n        primes.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5xa1qgo3.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5xa1qgo3.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime.contains(i)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            value contains is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) forall {\n       \
    \     i => n % i != 0\n        }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_7mo09j.scala:32)\n\tat Problem.main(tmpz_7mo09j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        for (i\
    \ <- 2 to Math.sqrt(n)) {\n            if (n % i == 0) {\n                primes\
    \ += i\n            }\n        }\n        primes.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuo_p_gql.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuo_p_gql.scala:21:32 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to Math.sqrt(n))\
    \ {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Double\n\e[31m   |\e[0m                  \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 | 1 => true\n            case _ => isPrime\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpotv68ti7.scala:28)\n\tat Problem.main(tmpotv68ti7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                s = i * s\n        \
    \    }\n            i += 1\n        }\n        if (s == n) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpgilfhtbv.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i * s\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgilfhtbv.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0l) false\n            else i += 1\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkmkhpbh9.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m i += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ += is not a member of Long - did you mean i.!=?\n\e[33m\e[33m-- [E129] Potential\
    \ Issue Warning: /tmp/tmpkmkhpbh9.scala:22:29 ----------------\e[0m\e[0m\n\e[33m22\
    \ |\e[0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e\
    [33m\e[33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (math.sqrt(n).toInt).toLong\n      \
    \  val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6y3d8524.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6y3d8524.scala:21:21\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6y3d8524.scala:22:24\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6y3d8524.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet2\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6y3d8524.scala:24:25\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet3\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6y3d8524.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mprimesSet4\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall { x =>\n    \
    \        val y = math.floor(x * Math.sqrt(x).toInt)\n            x % y == 0\n\
    \        }\n        isPrime\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnck5_b9.scala:28)\n\tat Problem.main(tmppnck5_b9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val i\
    \ = 2l\n        while (i <= n && primes.contains(i)) {\n            if (n % i\
    \ == 0) {\n                primes.add(i)\n            }\n            i += 1\n\
    \        }\n        primes.contains(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8ip9crv.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx8ip9crv.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2l\n        while (i <= n && primes.contains(i)) {\n        \
    \    if (n % i == 0l) {\n                primes += i\n            }\n        \
    \    i += 1\n        }\n        primes.contains(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mnxulkc.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5mnxulkc.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val primes =\
    \ mutable.Set[Long]()\n        for (i <- 2 to sqrtN) {\n            if (n % i\
    \ == 0) {\n                primes.add(i)\n            }\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7oaan_6.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy7oaan_6.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to sqrtN) {\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Found:    (sqrtN : Double)\n\e[31m   |\e[0m                \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) forall {\n       \
    \     i => n % i == 0\n        }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp78w537b_.scala:27)\n\tat Problem.main(tmp78w537b_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val limit = (2l*n)\n        for(i <- 2l to limit) {\n            if(n\
    \ % i == 0) {\n                primes += i\n            }\n        }\n       \
    \ primes.forall(n => n % n == 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7c9lf15y.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i < n) {\n         \
    \   if (n % i == 0l) \n                return false\n            i += 1\n    \
    \    }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwb1o2_io.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val l = n.toInt\n        while\
    \ (i <= l) {\n            if (n % i == 0) {\n                return false\n  \
    \          }\n            i += 1\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgmbu564d.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ forall { _ == false }\n        !isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpm4q86ibe.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) forall { _ == \e[31mfalse\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$1 of expanded function:\n\e\
    [31m   |\e[0m   _$1 => n % _$1 == 0.\n1 error found\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isNotPrime = (2l) until (n) contains n + 1\n        val isNotPrime2 =\
    \ (n) until (n) contains n + 1\n        val isNotPrime3 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime4 = (n) until (n) contains n + 1\n        val isNotPrime5\
    \ = (n) until (n) contains n + 1\n        val isNotPrime6 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime7 = (n) until (n) contains n + 1\n        val isNotPrime8\
    \ = (n) until (n) contains n + 1\n        val isNotPrime9 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime10 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime11 = (n) until (n) contains n + 1\n        val isNotPrime12 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime13 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime14 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime15 = (n) until (n) contains n + 1\n        val isNotPrime16 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime17 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime18 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime19 = (n) until (n) contains n + 1\n        val isNotPrime20 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime21 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime22 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime23 = (n) until (n) contains n + 1\n        val isNotPrime24 = (n)\
    \ until (n) contains n + 1\n        val isNotPrime25 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime26 = (n) until (n) contains n + 1\n        val\
    \ isNotPrime27 = (n) until (n) contains n + 1\n        val isNotPrime28 = (n)\
    \ until\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptb0jrqw4.scala:48:36 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36misNotPrime28\e[0m = (n)\
    \ until\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptb0jrqw4.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0l) false\n            else i = i + 1l\n        }\n    \
    \    true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpeaycxvjt.scala:23:19 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m i = i + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpeaycxvjt.scala:22:29 ----------------\e[0m\e[0m\n\e[33m22 |\e\
    [0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e\
    [33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659792949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        var\
    \ i = 2l\n        while (i < n) {\n            if (n % i == 0l) {\n          \
    \      primes += i\n            }\n            i += 1\n        }\n        primes.contains(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwet5b4a7.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        val p =\
    \ 2l\n        while (i <= n) {\n            if (n % i == 0) {\n              \
    \  s = 2l\n                p = 2l\n            }\n            else {\n       \
    \         p = p * 2l\n                s = s * 2l\n            }\n            i\
    \ = i + 1l\n        }\n        if (s == n) true\n        else false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpc2y_5e7q.scala:25:18 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                s = \e[31m2l\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpc2y_5e7q.scala:26:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                p =\
    \ \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val p\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpc2y_5e7q.scala:29:18 -----------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                p = p * \e[31m2l\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val p\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpc2y_5e7q.scala:30:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                s =\
    \ s * \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val s\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpc2y_5e7q.scala:32:14 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            i = i + \e[31m1l\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val primes = mutable.Set[Long]()\n        primes.updated(2l)\n        primes.updated(3l)\n\
    \        primes.updated(5l)\n        primes.updated(7l)\n        primes.updated(11l)\n\
    \        primes.updated(13l)\n        primes.updated(17l)\n        primes.updated(19l)\n\
    \        primes.updated(23l)\n        primes.updated(29l)\n        primes.updated(31l)\n\
    \        primes.updated(37l)\n        primes.updated(41l)\n        primes.updated(43l)\n\
    \        primes.updated(47l)\n        primes.updated(53l)\n        primes.updated(59l)\n\
    \        primes.updated(61l)\n        primes.updated(67l)\n        primes.updated(71l)\n\
    \        primes.updated(73l)\n        primes.updated(79l)\n        primes.updated(83l)\n\
    \        primes.updated(89l)\n        primes.updated(97l)\n        primes.updated(101l)\n\
    \        primes.updated(103l)\n        primes.updated(107l)\n        primes.updated(109l)\n\
    \        primes.updated(113l)\n        primes.updated(127l)\n        primes.updated(131l)\n\
    \        primes.updated(137l)\n        primes.updated(139l)\n        primes.updated(149l)\n\
    \        primes.updated(151l)\n        primes.updated(157l)\n        primes.updated(163l)\n\
    \        primes.updated(167l)\n        primes.updated(173l)\n        primes.updated(179l)\n\
    \        primes.updated(181l)\n        primes.updated(191l)\n        primes.updated(193l)\n\
    \        primes.updated(197l)\n        primes.updated(199l)\n        primes.updated(201l)\n\
    \        primes.updated(207l)\n        primes.updated(209l)\n        primes.updated(211l)\n\
    \        primes.updated(213l)\n        primes.updated(217l)\n        primes.updated(223l)\n\
    \        primes.updated(227l)\n        primes.updated(229l)\n        primes.updated(233l)\n\
    \        primes.updated(239l)\n        primes.updated(241l)\n        primes.updated(251l)\n\
    \        prime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgklk32ou.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgklk32ou.scala:81:8 -------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        prime\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isPrime2 = isPrime filter (_ % 2) == 0\n        val isPrime3 = isPrime\
    \ filter (_ % 3) == 0\n        val isPrime4 = isPrime filter (_ % 4) == 0\n  \
    \      val isPrime5 = isPrime filter (_ % 5) == 0\n        val isPrime6 = isPrime\
    \ filter (_ % 6) == 0\n        val isPrime7 = isPrime filter (_ % 7) == 0\n  \
    \      val isPrime8 = isPrime filter (_ % 8) == 0\n        val isPrime9 = isPrime\
    \ filter (_ % 9) == 0\n        val isPrime10 = isPrime filter (_ % 10) == 0\n\
    \        val isPrime11 = isPrime filter (_ % 11) == 0\n        val isPrime12 =\
    \ isPrime filter (_ % 12) == 0\n        val isPrime13 = isPrime filter (_ % 13)\
    \ == 0\n        val isPrime14 = isPrime filter (_ % 14) == 0\n        val isPrime15\
    \ = isPrime filter (_ % 15) == 0\n        val isPrime16 = isPrime filter (_ %\
    \ 16) == 0\n        val isPrime17 = isPrime filter (_ % 17) == 0\n        val\
    \ isPrime18 = isPrime filter (_ % 18) == 0\n        val isPrime19 = isPrime filter\
    \ (_ % 19) == 0\n        val isPrime20 = isPrime filter (_ % 20) == 0\n      \
    \  val isPrime21 = isPrime filter (_ % 21) == 0\n        val isPrime22 = isPrime\
    \ filter (_ % 22) == 0\n        val isPrime23 = isPrime filter (_ % 23) == 0\n\
    \        val isPrime24 = isPrime filter (_ % 24) == 0\n        val isPrime25 =\
    \ isPrime filter (_ % 25) == 0\n        val isPrime26 = isPrime filter (_ % 26)\
    \ == 0\n        val isPrime27 = isPrime filter (_ % 27) == 0\n        val isPrime28\
    \ = isPrime filter (_ % 28) == 0\n        val isPrime29 = isPrime filter (_ %\
    \ 29) == 0\n        val isPrime30 = isPrime filter (_ % 30) == 0\n        val\
    \ isPrime31 = isPrime filter (_ % 31) == 0\n        val isPrime32 = isPrime filter\
    \ (_ % 32\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj1rgijv4.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj1rgijv4.scala:21:31\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime2\e[0m = isPrime filter (_ % \e[31m2\e[0m) == \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  value filter is not a member of Boolean\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpj1rgijv4.scala:21:39 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = isPrime filter\
    \ (_ % \e[31m2\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1\
    \ of expanded function:\n\e[31m   |\e[0m   _$1 => _$1 % 2.\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpj1rgijv4.scala:22:31 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime3\e[0m = isPrime filter\
    \ (_ % \e[31m3\e[0m) == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Boolean\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpj1rgijv4.scala:22:39\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e\
    [0m \e[36misPrime3\e[0m = isPrime filter (_ % \e[31m3\e[0m) == \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   _$2 =>\
    \ _$2 % 3.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj1rgijv4.scala:23:31\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime4\e[0m = isPrime filter (_ % \e[31m4\e[0m) == \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                  value filter is not a memb"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzapsnfqx.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzapsnfqx.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        var isPrime = true\n      \
    \  while (i <= n / i) {\n            if (n % i == 0) {\n                isPrime\
    \ = false\n                break\n            }\n            i += 1\n        }\n\
    \        isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dd8lwsa.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2dd8lwsa.scala:27:14 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => true\n            case _ => isPrime\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9vfk9ru.scala:28)\n\tat Problem.main(tmpt9vfk9ru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        var\
    \ i = 2l\n        while (i < n) {\n            if (n % i == 0l) {\n          \
    \      primes += i\n            }\n            i += 1\n        }\n        primes.forall(n\
    \ => n % n == 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ghifl8e.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n)) yield\
    \ {\n            if (n % i == 0) false\n            else true\n        }\n   \
    \     !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp716nn0f2.scala:20:46\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m2\e[0m to Math.sqrt(n)) \e[33myield\e[0m {\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    Double\n\e[31m   |\e\
    [0m                                     Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n.toInt\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrimes = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) until n.toInt\n\
    \        val isPrime = (2l) until n.toInt\n        val isPrime = (2l) \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt40084lp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misPrime is already defined as \e[33mvalue\e[0m \e[35misPrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt40084lp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e[0m) until\
    \ n.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misPrime is already defined as \e[33mvalue\e[0m \e[35misPrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt40084lp.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e[0m) until\
    \ n.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misPrime is already defined as \e[33mvalue\e[0m \e[35misPrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt40084lp.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e[0m) until\
    \ n.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misPrime is already defined as \e[33mvalue\e[0m \e[35misPrime\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt40084lp.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e[0m) until\
    \ n.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misPrime is already defined as \e[33mvalue\e[0m \e[3"
  stdout: ''
  timestamp: 1659978617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val limit = n.toInt\n     \
    \   while (i <= limit) {\n            if (n % i == 0l) false\n            else\
    \ i += 1\n        }\n        true\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltdxy0ow.scala:24:19 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m i += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 value\
    \ += is not a member of Long - did you mean i.!=?\n\e[33m\e[33m-- [E129] Potential\
    \ Issue Warning: /tmp/tmpltdxy0ow.scala:23:29 ----------------\e[0m\e[0m\n\e[33m23\
    \ |\e[0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e\
    [33m\e[33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659978615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrtN = math.sqrt(n)\n            val isPrime2 = sqrtN.toInt\
    \ <= n\n            if (isPrime2) {\n                val isPrime3 = n % 2l ==\
    \ 1l\n                if (isPrime3) {\n                    true\n            \
    \    } else {\n                    false\n                }\n            } else\
    \ {\n                false\n            }\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1s67tcfn.scala:40)\n\tat Problem.main(tmp1s67tcfn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val limit\
    \ = (2l*n)\n        for (i <- 2l until limit) {\n            if (n % i == 0) {\n\
    \                primes.add(i)\n            }\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7c7p3w8g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            true\n        } else {\n            val sqrt = (1l*Math.sqrt(n).toInt).toLong\n\
    \            val primes = mutable.ArrayBuffer.empty[Long]\n            val isPrime\
    \ = n <= 1l\n            val isPrime2 = n <= 1l\n            val isPrime3 = n\
    \ <= 1l\n            val isPrime4 = n <= 1l\n            val isPrime5 = n <= 1l\n\
    \            val isPrime6 = n <= 1l\n            val isPrime7 = n <= 1l\n    \
    \        val isPrime8 = n <= 1l\n            val isPrime9 = n <= 1l\n        \
    \    val isPrime10 = n <= 1l\n            val isPrime11 = n <= 1l\n          \
    \  val isPrime12 = n <= 1l\n            val isPrime13 = n <= 1l\n            val\
    \ isPrime14 = n <= 1l\n            val isPrime15 = n <= 1l\n            val isPrime16\
    \ = n <= 1l\n            val isPrime17 = n <= 1l\n            val isPrime18 =\
    \ n <= 1l\n            val isPrime19 = n <= 1l\n            val isPrime20 = n\
    \ <= 1l\n            val isPrime21 = n <= 1l\n            val isPrime22 = n <=\
    \ 1l\n            val isPrime23 = n <= 1l\n            val isPrime24 = n <= 1l\n\
    \            val isPrime25 = n <= 1l\n            val isPrime26 = n <= 1l\n  \
    \          val isPrime27 = n <= 1l\n            val isPrime28 = n <= 1l\n    \
    \        val isPrime29 = n <= 1l\n            val isPrime30 = n <= 1l\n      \
    \      val isPrime31 = n <= 1l\n            val isPrime32 = n <= 1l\n        \
    \    val isPrime33 = n <= 1l\n            val isPrime34 = n <= 1l\n          \
    \  val isPrime35 = n <= 1l\n            val isPrime36 = n <= 1l\n            val\
    \ isPrime37 = n <= 1l\n            val isPrime38 = n <= 1l\n            val isPrime39\
    \ = n <= 1l\n            val isPrime40 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpiystjx02.scala:65:27 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m            \e[33mval\e[0m \e[36misPrime40\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiystjx02.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiystjx02.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpiystjx02.scala:68:11 -----------------------------\e[0m\e[0m\n\e[31m68\
    \ |\e[0m    assert(isPrime((\e[31m6l\e[0m)) == (\e[31mfalse\e[0m));\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvalue\e\
    [0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpiystjx02.scala:69:11 -----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    assert(isPrime((\e[31m101l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpiystjx02.scala:70:11 -----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    assert(isPrime((\e[31m11l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation"
  stdout: ''
  timestamp: 1659978619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ isPrime = mutable.ArrayBuffer(true)\n        val isNotPrime = mutable.ArrayBuffer(false)\n\
    \        val isPrime2 = mutable.ArrayBuffer(true)\n        val isNotPrime2 = mutable.ArrayBuffer(false)\n\
    \        val isPrime3 = mutable.ArrayBuffer(true)\n        val isNotPrime3 = mutable.ArrayBuffer(false)\n\
    \        val isPrime4 = mutable.ArrayBuffer(true)\n        val isNotPrime4 = mutable.ArrayBuffer(false)\n\
    \        val isPrime5 = mutable.ArrayBuffer(true)\n        val isNotPrime5 = mutable.ArrayBuffer(false)\n\
    \        val isPrime6 = mutable.ArrayBuffer(true)\n        val isNotPrime6 = mutable.ArrayBuffer(false)\n\
    \        val isPrime7 = mutable.ArrayBuffer(true)\n        val isNotPrime7 = mutable.ArrayBuffer(false)\n\
    \        val isPrime8 = mutable.ArrayBuffer(true)\n        val isNotPrime8 = mutable.ArrayBuffer(false)\n\
    \        val isPrime9 = mutable.ArrayBuffer(true)\n        val isNotPrime9 = mutable.ArrayBuffer(false)\n\
    \        val isPrime10 = mutable.ArrayBuffer(true)\n        val isNotPrime10 =\
    \ mutable.ArrayBuffer(false)\n        val isPrime11 = mutable.ArrayBuffer(true)\n\
    \        val isNotPrime11 = mutable.ArrayBuffer(false)\n        val isPrime12\
    \ = mutable.ArrayBuffer(true)\n        val isNotPrime12 = mutable.ArrayBuffer(false)\n\
    \        val isPrime13 = mutable.ArrayBuffer(true)\n        val isNotPrime13 =\
    \ mutable.ArrayBuffer(false)\n        val isPrime14 = mutable.ArrayBuffer(true)\n\
    \        val isNotPrime14 = mutable.ArrayBuffer(false)\n        val isPrime15\
    \ = mutable.ArrayBuffer(true)\n        val isNotPrime15 = mutable.ArrayBuffer(false)\n\
    \        val isPrime16 = mutable.ArrayBuffer(true)\n        val isNotPrime16 =\
    \ mutable.ArrayBuffer(false)\n        val isPrime17 = mutable.ArrayBuffer(true)\n\
    \        val isNotPrime17 = mutable.ArrayBuffer(false)\n        val isPrime18\
    \ = mutable.ArrayBuffer(true)\n        val isNotPrime18 = mutable.ArrayBuffer(false)\n\
    \        val isPrime19 = mutable.ArrayBuffer(true)\n        val isNotPrime19 =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) ==\
    \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps_jxkxav.scala:58:26 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36misNotPrime19\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps_jxkxav.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmps_jxkxav.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps_jxkxav.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misNotPrime\e[0m = mutable.ArrayBuffer(\e\
    [31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps_jxkxav.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = mutable.ArrayBuffer(\e\
    [31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps_jxkxav.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36m"
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall {\n         \
    \   x => n % x == 0\n        }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ry1vpjb.scala:27)\n\tat Problem.main(tmp7ry1vpjb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val isPrime =\
    \ true\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \        return isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbmtfe0.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtN) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtN : Double)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_jbmtfe0.scala:24:24 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbmtfe0.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2l\n        while (i <= n && primes.contains(i)) {\n        \
    \    if (n % i == 0l) {\n                primes += i\n            }\n        \
    \    i += 1\n        }\n        primes.contains(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mnxulkc.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5mnxulkc.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime)\n \
    \           true\n        else {\n            val sqrt = (1l to n).foldLeft(1l)\
    \ { (x, y) => math.pow(x, y) / y }\n            val isPrime2 = sqrt % 1l == 0l\n\
    \            isPrime2\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxfny9b_e.scala:24:58\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36msqrt\e[0m = (\e[31m1l\e[0m to n).foldLeft(\e[31m1l\e[0m) { (\e[36mx\e[0m,\
    \ \e[36my\e[0m) => math.pow(x, y) / y }\n\e[31m\e[31m   |\e[0m               \
    \                                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                        Found:    Double\n\
    \e[31m   |\e[0m                                                        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrt = (1l+n)/2l\n            val isPrime = sqrt <= 1l\n    \
    \    }\n        isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm2pjetq0.scala:29)\n\tat Problem.main(tmpm2pjetq0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall { x =>\n    \
    \        val y = math.floor(x * Math.sqrt(x).toInt)\n            x % y == 0\n\
    \        }\n        isPrime\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnck5_b9.scala:28)\n\tat Problem.main(tmppnck5_b9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ListBuffer[Long]()\n     \
    \   val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime3 = mutable.ListBuffer[Boolean]()\n        val isPrime4 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime6 = mutable.ListBuffer[Boolean]()\n        val isPrime7 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime9 = mutable.ListBuffer[Boolean]()\n        val isPrime10 =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime12 = mutable.ListBuffer[Boolean]()\n        val isPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime15 = mutable.ListBuffer[Boolean]()\n        val isPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime18 = mutable.ListBuffer[Boolean]()\n        val isPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime21 = mutable.ListBuffer[Boolean]()\n        val isPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime24 = mutable.ListBuffer[Boolean]()\n        val isPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime27 = mutable.ListBuffer[Boolean]()\n        val isPrime28\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime29 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrime30 = mutable.ListBuffer[Boolean]()\n        val isPrime31\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrime32 = mutable.ListBuffer[Boolean]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0t47_dbu.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0t47_dbu.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0t47_dbu.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0t47_dbu.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrime3\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0t47_dbu.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrime4\e[0m = mutable.ListBuffer[\e\
    [35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0t47_dbu.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        "
  stdout: ''
  timestamp: 1659978619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val divisors = mutable.ArrayBuffer.empty[Long]\n        divisors += 2l\n\
    \        divisors += 3l\n        divisors += 5l\n        divisors += 7l\n    \
    \    divisors += 11l\n        divisors += 13l\n        divisors += 17l\n     \
    \   divisors += 19l\n        divisors += 23l\n        divisors += 29l\n      \
    \  divisors += 31l\n        divisors += 37l\n        divisors += 41l\n       \
    \ divisors += 43l\n        divisors += 47l\n        divisors += 53l\n        divisors\
    \ += 59l\n        divisors += 61l\n        divisors += 67l\n        divisors +=\
    \ 71l\n        divisors += 73l\n        divisors += 79l\n        divisors += 83l\n\
    \        divisors += 89l\n        divisors += 97l\n        divisors += 101l\n\
    \        divisors += 103l\n        divisors += 107l\n        divisors += 109l\n\
    \        divisors += 113l\n        divisors += 127l\n        divisors += 131l\n\
    \        divisors += 137l\n        divisors += 139l\n        divisors += 147l\n\
    \        divisors += 151l\n        divisors += 157l\n        divisors += 163l\n\
    \        divisors += 167l\n        divisors += 173l\n        divisors += 179l\n\
    \        divisors += 181l\n        divisors += 191l\n        divisors += 197l\n\
    \        divisors += 199l\n        divisors += 211l\n        divisors += 223l\n\
    \        divisors += 229l\n        divisors += 233l\n        divisors += 239l\n\
    \        divisors += 241l\n        divisors += 251l\n        divisors += 257l\n\
    \        divisors += 263l\n        divisors += 269l\n        divisors += 271l\n\
    \        divisors += 277l\n        divisors += 281l\n        divisors += 283l\n\
    \        divisors += 293l\n        divisors += 307l\n        divisors += 311l\n\
    \        divisors += 313l\n        divisors += 317l\n        divisors += 323l\n\
    \        divisors += 329l\n        divisors += 331l\n        divisors += 337l\n\
    \        divisors += 347l\n        divisors += 349l\n        divisors += 353l\n\
    \        divisors += 359l\n        divisors += 367l\n        divisors += 373l\n\
    \        divisors += 379l\n        divisors += 383l\n        divisors += 389l\n\
    \        divisors += 397l\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp99k13q7r.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp99k13q7r.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdivisors\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            true\n        } else {\n            val sqrt = (1l to n).foldLeft(1l)\
    \ { (x, y) => math.sqrt (x * x + y * y) }\n            val isPrime = sqrt % n\
    \ == 0\n            isPrime\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprhwvr3s_.scala:24:68\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e\
    [36msqrt\e[0m = (\e[31m1l\e[0m to n).foldLeft(\e[31m1l\e[0m) { (\e[36mx\e[0m,\
    \ \e[36my\e[0m) => math.sqrt (x * x + y * y) }\n\e[31m\e[31m   |\e[0m        \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val primes = mutable.ArrayBuffer.empty[Long]\n        primes += 2l\n     \
    \   primes += 3l\n        primes += 5l\n        primes += 7l\n        primes +=\
    \ 11l\n        primes += 13l\n        primes += 17l\n        primes += 19l\n \
    \       primes += 23l\n        primes += 29l\n        primes += 31l\n        primes\
    \ += 37l\n        primes += 41l\n        primes += 43l\n        primes += 47l\n\
    \        primes += 53l\n        primes += 59l\n        primes += 61l\n       \
    \ primes += 67l\n        primes += 71l\n        primes += 73l\n        primes\
    \ += 79l\n        primes += 83l\n        primes += 89l\n        primes += 97l\n\
    \        primes += 101l\n        primes += 103l\n        primes += 107l\n    \
    \    primes += 109l\n        primes += 113l\n        primes += 127l\n        primes\
    \ += 131l\n        primes += 137l\n        primes += 139l\n        primes += 147l\n\
    \        primes += 151l\n        primes += 157l\n        primes += 163l\n    \
    \    primes += 167l\n        primes += 173l\n        primes += 179l\n        primes\
    \ += 181l\n        primes += 191l\n        primes += 193l\n        primes += 197l\n\
    \        primes += 199l\n        primes += 211l\n        primes += 223l\n    \
    \    primes += 227l\n        primes += 229l\n        primes += 233l\n        primes\
    \ += 239l\n        primes += 241l\n        primes += 247l\n        primes += 249l\n\
    \        primes += 251l\n        primes += 253l\n        primes += 257l\n    \
    \    primes += 263l\n        primes += 269l\n        primes += 271l\n        primes\
    \ += 277l\n        primes += 281l\n        primes += 283l\n        primes += 293l\n\
    \        primes += 307l\n        primes += 311l\n        primes += 313l\n    \
    \    primes += 317l\n        primes += 323l\n        primes += 329l\n        primes\
    \ += 331l\n        primes += 337l\n        primes += 347l\n        primes += 349l\n\
    \        primes += 353l\n        primes += 359l\n        prime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsowpl64f.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsowpl64f.scala:99:8 -------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m        prime\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0m        Not found: prime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrtN = math.sqrt((n).toDouble)\n            val isPrime2 = sqrtN.toInt\
    \ <= n\n            if (isPrime2) {\n                val isPrime3 = true\n   \
    \             for (i <- 2l until sqrtN) {\n                    if (n % i == 0)\
    \ {\n                        isPrime3 = false\n                        break\n\
    \                    }\n                }\n                if (isPrime3) {\n \
    \                   true\n                } else {\n                    false\n\
    \                }\n            } else {\n                false\n            }\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzqp0ectm.scala:26:35\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mfor\e[0m\
    \ (i <- \e[31m2l\e[0m until sqrtN) {\n\e[31m\e[31m   |\e[0m                  \
    \                 ^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \   Found:    (sqrtN : Double)\n\e[31m   |\e[0m                              \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpzqp0ectm.scala:28:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                   \
    \     isPrime3 = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Reassignment\
    \ to val isPrime3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzqp0ectm.scala:29:24\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = mutable.Set[Long]()\n        val\
    \ isPrime2 = mutable.Set[Long]()\n        val isPrime3 = mutable.Set[Long]()\n\
    \        val isPrime4 = mutable.Set[Long]()\n        val isPrime5 = mutable.Set[Long]()\n\
    \        val isPrime6 = mutable.Set[Long]()\n        val isPrime7 = mutable.Set[Long]()\n\
    \        val isPrime8 = mutable.Set[Long]()\n        val isPrime9 = mutable.Set[Long]()\n\
    \        val isPrime10 = mutable.Set[Long]()\n        val isPrime11 = mutable.Set[Long]()\n\
    \        val isPrime12 = mutable.Set[Long]()\n        val isPrime13 = mutable.Set[Long]()\n\
    \        val isPrime14 = mutable.Set[Long]()\n        val isPrime15 = mutable.Set[Long]()\n\
    \        val isPrime16 = mutable.Set[Long]()\n        val isPrime17 = mutable.Set[Long]()\n\
    \        val isPrime18 = mutable.Set[Long]()\n        val isPrime19 = mutable.Set[Long]()\n\
    \        val isPrime20 = mutable.Set[Long]()\n        val isPrime21 = mutable.Set[Long]()\n\
    \        val isPrime22 = mutable.Set[Long]()\n        val isPrime23 = mutable.Set[Long]()\n\
    \        val isPrime24 = mutable.Set[Long]()\n        val isPrime25 = mutable.Set[Long]()\n\
    \        val isPrime26 = mutable.Set[Long]()\n        val isPrime27 = mutable.Set[Long]()\n\
    \        val isPrime28 = mutable.Set[Long]()\n        val isPrime29 = mutable.Set[Long]()\n\
    \        val isPrime30 = mutable.Set[Long]()\n        val isPrime31 = mutable.Set[Long]()\n\
    \        val isPrime32 = mutable.Set[Long]()\n        val isPrime33 = mutable.Set[Long]()\n\
    \        val isPrime34 = mutable.Set[Long]()\n        val isPrime35 = mutable.Set[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxtl4b263.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxtl4b263.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxtl4b263.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxtl4b263.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrime4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxtl4b263.scala:24:23 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrime5\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxtl4b263.scala:25:23 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misPrime6\e[0m = mutable."
  stdout: ''
  timestamp: 1659978620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = (n : Long) => {\n            if (primes.contains(n)) {\n                primes\
    \ += n\n                true\n            } else {\n                val isPrime\
    \ = (n : Long) => {\n                    if (primes.contains(n)) {\n         \
    \               primes += n\n                        true\n                  \
    \  } else {\n                        val isPrime = (n : Long) => {\n         \
    \                   if (primes.contains(n)) {\n                              \
    \  primes += n\n                                true\n                       \
    \     } else {\n                                val isPrime = (n : Long) => {\n\
    \                                    if (primes.contains(n)) {\n             \
    \                           primes += n\n                                    \
    \    true\n                                    } else {\n                    \
    \                    val isPrime = (n : Long) => {\n                         \
    \                   if (primes.contains(n)) {\n                              \
    \                  primes += n\n                                             \
    \   true\n                                            } else {\n             \
    \                                   val isPrime = (n : Long) => {\n          \
    \                                          if (primes.contains(n)) {\n       \
    \                                                 primes += n\n              \
    \                                          true\n                            \
    \                        } else {\n                                          \
    \              val isPrime = (n : Long) => {\n                               \
    \                             if (primes.contains(n)) {\n                    \
    \                                            primes += n\n                   \
    \                                             true\n                         \
    \                                   } else {\n                               \
    \                                 val isPrime = (n : Long) => {\n            \
    \                                                        if (primes.contains(n))\
    \ {\n                                                                        primes\
    \ += n\n                                                                     \
    \   true\n                                                                   \
    \ } else {\n                                                                 \
    \       val isPrime = (n : Long) => {\n                                      \
    \                                      if (primes.contains(n)) {\n           \
    \                                                                     primes +=\
    \ n\n                                                                        \
    \        true\n                                                              \
    \              } else {\n                                                    \
    \                            val isPrime = (n : Long) => {\n                 \
    \                                                                   if (primes.contains(n))\
    \ {\n                                                                        \
    \                primes += n\n                                               \
    \                                         true\n                             \
    \                                                       } else {\n           \
    \                                                                            \
    \ val isPrime = (n : Long) => {\n                                            \
    \                                                if (primes.contains(n)) {\n \
    \                                                                            \
    \                   primes += n\n                                            \
    \                                                    true\n                  \
    \                                                                          } else\
    \ {\n                                                                        \
    \                        val isPrime = (n : Long) => {\n                     \
    \                                                                            \
    \   if (primes.contains(n)) {\n                                              \
    \                                                          primes += n\n     \
    \                                                                            \
    \                       true\n                                               \
    \                                                     } else {\n             \
    \                                                                            \
    \               val isPrime = (n : Long) => {\n                              \
    \                                                                            \
    \  if (primes.contains(n)) {\n                                               \
    \                                                                 primes += n\n\
    \                                                                            \
    \                                    true\n                                  \
    \                                                                          } else\
    \ {\n                                                                        \
    \                                        val isPrime = (n : Long) => {\n     \
    \                                                                            \
    \                                   if (primes.contains(n)) {\n              \
    \                                                                            \
    \                              primes += n\n                                 \
    \                                                                            \
    \           true\n                                                           \
    \                                                         } else {\n         \
    \                                                                            \
    \                                   val isPrime = (n : Long) => {\n          \
    \                                                                            \
    \                                      if (primes.contains(n)) {\n           \
    \                                                                            \
    \                                         primes += n\n                      \
    \                                                                            \
    \                              true\n                                        \
    \                                                                            \
    \        } else {\n                                                          \
    \                                                                      val isPrime\
    \ = (n : Long) => {\n                                                        \
    \                                                                            if\
    \ (prime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9zmcdxfx.scala:98:4 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9zmcdxfx.scala:116:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m116 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9zmcdxfx.scala:20:21 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9zmcdxfx.scala:97:136 -----------------------\e\
    [0m\e[0m\n\e[31m97 |\e[0m                                                    \
    \                                                                            \
    \    \e[33mif\e[0m (prime\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                               ^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                      Not found: prime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp9zmcdxfx.scala:100:11 ----------------------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m    assert(isPrime((\e[31m6l\e[0m)) == (\e[31mfalse\e\
    [0m));\n\e[31m\e[31m    |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \    |\e[0m     Values of types Unit and Boolean cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp9zmcdxfx.scala:101:11 ----------------------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    assert(isPrime((\e[31m101l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m    |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \    |\e[0m     Values of types Unit and Boolean cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp9zmcdxfx.scala:102:11 ---------------------------"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (1l*Math.sqrt(n).toInt).toLong\n   \
    \     val primes = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to sqrt)\
    \ {\n            if (n % i == 0) {\n                primes += i\n            }\n\
    \        }\n        primes.forall(n => n % n == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpux82sv.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfpux82sv.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to sqrt) {\n\
    \e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                Found:    (sqrt : Long)\n\e[31m   |\e[0m                    \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ forall { x => x == 0 }\n        !isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpc2p0tuhv.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) forall { \e[36mx\e[0m\
    \ => x == \e[31m0\e[0m }\n\e[31m\e[31m   |\e[0m                              \
    \                   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$1 of\
    \ expanded function:\n\e[31m   |\e[0m   _$1 => n % _$1 == 0.\n1 error found\n"
  stdout: ''
  timestamp: 1659978617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = (n : Long) => {\n            if (primes.contains(n)) {\n                return\
    \ true\n            }\n            if (n % 2 == 0) {\n                primes +=\
    \ n\n                return true\n            }\n            val upper = math.ceil(n/3)\n\
    \            val lower = 3l\n            while (lower < upper) {\n           \
    \     if (n % lower == 0) {\n                    primes += n\n               \
    \     return true\n                }\n                lower += 2\n           \
    \ }\n            primes += n\n            return false\n        }\n        val\
    \ isPrime2 = n => {\n            if (primes.contains(n)) {\n                return\
    \ true\n            }\n            if (n % 2 == 0) {\n                primes +=\
    \ n\n                return true\n            }\n            val upper = math.ceil(n/3)\n\
    \            val lower = 3l\n            while (lower < upper) {\n           \
    \     if (n % lower == 0) {\n                    primes += n\n               \
    \     return true\n                }\n                lower += 2\n           \
    \ }\n            primes += n\n            return false\n        }\n        val\
    \ isPrime3 = n => {\n            if (primes.contains(n)) {\n                return\
    \ true\n            }\n            if (n % 2 == 0) {\n                primes +=\
    \ n\n                return true\n            }\n            val upper = math.ceil(n/3)\n\
    \            val lower = 3l\n            while (lower < upper) {\n           \
    \     if (n % lower == 0) {\n                    primes += n\n               \
    \     return true\n                }\n                lower += 2\n           \
    \ }\n            primes += n\n            return false\n        }\n        val\
    \ isPrime4 = n => {\n            if (primes.contains(n)) {\n                return\
    \ true\n            }\n            if (n % 2 == 0) {\n                primes +=\
    \ n\n                return true\n            }\n            val upper = math.ceil(n/3)\n\
    \            val lower = 3l\n            while (lower < upper) {\n           \
    \     if (n % lower == 0) {\n                    primes += n\n               \
    \     return true\n                }\n                lower += 2\n           \
    \ }\n            primes += n\n            return false\n        }\n        val\
    \ isPrime5 = n => {\n            if (primes.contains(n)) {\n                return\
    \ true\n            }\n            if (n % 2 == 0) {\n                primes +=\
    \ n\n                return true\n            }\n            val upper = math.ceil(n/3)\n\
    \            val lower = 3l\n            while (lower < upper) {\n           \
    \     if (n % lower == 0) {\n                    primes += n\n               \
    \     return true\n                }\n                lower += 2\n           \
    \ }\n            primes += n\n            return false\n        }\n        val\
    \ isPrime6 = n => {\n            if (primes.contains(n)) {\n                return\
    \ true\n            }\n            if (n % 2 == 0) {\n                primes +=\
    \ n\n                return true\n            }\n            val \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpconbu300.scala:129:15 --------------------------\e\
    [0m\e[0m\n\e[31m129 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m    |\e[0m\
    \               ^\e[0m\n\e[31m    |\e[0m               pattern expected\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpconbu300.scala:148:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m148 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpconbu300.scala:20:21 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpconbu300.scala:36:22 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                lower += \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Long - did you mean lower.!=?\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpconbu300.scala:41:23 -----------------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = \e[36mn\e[0m => {\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \             Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \                I could not infer the type of the parameter n.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpconbu300.scala:56:22 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m                lower += \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of Long - did you mean lower.!=?\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpconbu300.scala:61:23 -----------------------------\e[0m\e[0m\n\
    \e[31m61 |\e[0m        \e[33mval\e[0m \e[36misPrime3\e[0m = \e[36mn\e[0m => {\n\
    \e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m          \
    \       "
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0) {\n                return false\n            }\n    \
    \        i += 1\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwqct873w.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val limit\
    \ = (2l*n)\n        for (i <- 2l until limit) {\n            if (n % i == 0) {\n\
    \                primes.add(i)\n            }\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7c7p3w8g.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) true\n\
    \        else {\n            val sqrt = (1l to n).foldLeft(1l) { (x, y) => math.pow(x,\
    \ y) / math.pow(y, y) }\n            val isPrime2 = sqrt.toDouble <= n\n     \
    \       if (isPrime2) true\n            else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnfc6smfh.scala:23:58\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e\
    [36msqrt\e[0m = (\e[31m1l\e[0m to n).foldLeft(\e[31m1l\e[0m) { (\e[36mx\e[0m,\
    \ \e[36my\e[0m) => math.pow(x, y) / math.pow(y, y) }\n\e[31m\e[31m   |\e[0m  \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Double\n\e[31m   |\e[0m                                                 \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt((n).toDouble)\n        val\
    \ sqrtN2 = math.sqrt((sqrtN).toDouble)\n        val sqrtN3 = math.sqrt((sqrtN2).toDouble)\n\
    \        val sqrtN4 = math.sqrt((sqrtN3).toDouble)\n        val sqrtN5 = math.sqrt((sqrtN4).toDouble)\n\
    \        val sqrtN6 = math.sqrt((sqrtN5).toDouble)\n        val sqrtN7 = math.sqrt((sqrtN6).toDouble)\n\
    \        val sqrtN8 = math.sqrt((sqrtN7).toDouble)\n        val sqrtN9 = math.sqrt((sqrtN8).toDouble)\n\
    \        val sqrtN10 = math.sqrt((sqrtN9).toDouble)\n        val sqrtN11 = math.sqrt((sqrtN10).toDouble)\n\
    \        val sqrtN12 = math.sqrt((sqrtN11).toDouble)\n        val sqrtN13 = math.sqrt((sqrtN12).toDouble)\n\
    \        val sqrtN14 = math.sqrt((sqrtN13).toDouble)\n        val sqrtN15 = math.sqrt((sqrtN14).toDouble)\n\
    \        val sqrtN16 = math.sqrt((sqrtN15).toDouble)\n        val sqrtN17 = math.sqrt((sqrtN16).toDouble)\n\
    \        val sqrtN18 = math.sqrt((sqrtN17).toDouble)\n        val sqrtN19 = math.sqrt((sqrtN18).toDouble)\n\
    \        val sqrtN20 = math.sqrt((sqrtN19).toDouble)\n        val sqrtN21 = math.sqrt((sqrtN20).toDouble)\n\
    \        val sqrtN22 = math.sqrt((sqrtN21).toDouble)\n        val sqrtN23 = math.sqrt((sqrtN22).toDouble)\n\
    \        val sqrtN24 = math.sqrt((sqrtN23).toDouble)\n        val sqrtN25 = math.sqrt((sqrtN24).toDouble)\n\
    \        val sqrtN26 = math.sqrt((sqrtN25).toDouble)\n        val sqrtN27 = math.sqrt((sqrtN26).toDouble)\n\
    \        val sqrtN28 = math.sqrt((sqrtN27).toDouble)\n        val sqrtN29 = math.sqrt((sqrtN28).toDouble)\n\
    \        val sqrtN30 = math.sqrt((sqrtN29).toDouble)\n        val sqrtN31 = math.sqrt((sqrtN30).toDouble)\n\
    \        val sqrtN32 = math.sqrt((sqrtN31).toDouble)\n        val sqrtN33 = math.sqrt((sqrtN32).toDouble)\n\
    \        val sqrtN34 = math.sqrt((sqrtN33).toDouble)\n        val sqrtN35 = math.sqrt((sqrtN34).toDouble)\n\
    \        val sqrt\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbipnnt2w.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbipnnt2w.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzapsnfqx.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzapsnfqx.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (math.sqrt(n).toInt).toLong\n      \
    \  val primes = mutable.ArrayBuffer.empty[Long]\n        val primesSet = mutable.HashSet.empty[Long]\n\
    \        primes ++= 2 to sqrt by 2\n        primesSet ++= 2 to sqrt by 2\n   \
    \     primes.foreach { p =>\n            if (n % p == 0) return false\n      \
    \      primesSet -= p\n        }\n        primesSet.nonEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqnucsq4u.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqnucsq4u.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val isPrime =\
    \ true\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \        return isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbmtfe0.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtN) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtN : Double)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_jbmtfe0.scala:24:24 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbmtfe0.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val factors = mutable.ListBuffer[Long]()\n            while (n >\
    \ 1l) {\n                val next = n / 2l\n                if (next % 2l == 0l)\
    \ {\n                    factors += next\n                }\n                n\
    \ = next\n            }\n            factors.forall(f => n % f == 0l)\n      \
    \  }\n        return isPrime\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0turv2j6.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mfactors\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp0turv2j6.scala:28:18 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                n = next\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall { x =>\n    \
    \        val y = math.floor(x * Math.sqrt(x).toLong)\n            x % y == 0\n\
    \        }\n        isPrime\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfjvsnu3.scala:28)\n\tat Problem.main(tmpjfjvsnu3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val i = 1\n \
    \       val primes = mutable.ArrayBuffer.empty[Long]\n        while(i <= sqrtN)\
    \ {\n            val isPrime = n % i == 0\n            if(isPrime) {\n       \
    \         primes += i\n            }\n            i += 1\n        }\n        primes.forall(x\
    \ => n == x)\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps307on6u.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps307on6u.scala:28:14 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val isPrime = n <= 1l\n        }\n        return isPrime\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpovbqnjnf.scala:28)\n\tat Problem.main(tmpovbqnjnf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l) ++\n     \
    \       mutable.ArrayBuffer(3l) ++\n            mutable.ArrayBuffer(5l) ++\n \
    \           mutable.ArrayBuffer(7l) ++\n            mutable.ArrayBuffer(11l) ++\n\
    \            mutable.ArrayBuffer(13l) ++\n            mutable.ArrayBuffer(17l)\
    \ ++\n            mutable.ArrayBuffer(19l) ++\n            mutable.ArrayBuffer(23l)\
    \ ++\n            mutable.ArrayBuffer(29l) ++\n            mutable.ArrayBuffer(31l)\
    \ ++\n            mutable.ArrayBuffer(37l) ++\n            mutable.ArrayBuffer(41l)\
    \ ++\n            mutable.ArrayBuffer(43l) ++\n            mutable.ArrayBuffer(47l)\
    \ ++\n            mutable.ArrayBuffer(53l) ++\n            mutable.ArrayBuffer(59l)\
    \ ++\n            mutable.ArrayBuffer(61l) ++\n            mutable.ArrayBuffer(67l)\
    \ ++\n            mutable.ArrayBuffer(71l) ++\n            mutable.ArrayBuffer(73l)\
    \ ++\n            mutable.ArrayBuffer(79l) ++\n            mutable.ArrayBuffer(83l)\
    \ ++\n            mutable.ArrayBuffer(89l) ++\n            mutable.ArrayBuffer(97l)\
    \ ++\n            mutable.ArrayBuffer(101l) ++\n            mutable.ArrayBuffer(103l)\
    \ ++\n            mutable.ArrayBuffer(107l) ++\n            mutable.ArrayBuffer(109l)\
    \ ++\n            mutable.ArrayBuffer(113l) ++\n            mutable.ArrayBuffer(127l)\
    \ ++\n            mutable.ArrayBuffer(131l) ++\n            mutable.ArrayBuffer(137l)\
    \ ++\n            mutable.ArrayBuffer(139l) ++\n            mutable.ArrayBuffer(149l)\
    \ ++\n            mutable.ArrayBuffer(151l) ++\n            mutable.ArrayBuffer(157l)\
    \ ++\n            mutable.ArrayBuffer(163l) ++\n            mutable.ArrayBuffer(167l)\
    \ ++\n            mutable.ArrayBuffer(173l) ++\n            mutable.ArrayBuffer(179l)\
    \ ++\n            mutable.ArrayBuffer(181l) ++\n            mutable.ArrayBuffer(191l)\
    \ ++\n            mutable.ArrayBuffer(193l) ++\n            mutable.ArrayBuffer(197l)\
    \ ++\n            mutable.ArrayBuffer(199l) ++\n            mutable.ArrayBuffer(211l)\
    \ ++\n            mutable.ArrayBuffer(223l) ++\n            mutable.ArrayBuffer(227l)\
    \ ++\n            mutable.ArrayBuffer(229l) ++\n            \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplqx2j4fi.scala:69:40 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m            mutable.ArrayBuffer(\e[31m229l\e[0m) ++\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqx2j4fi.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mprimes\e[0m = mutable.ArrayBuffer(\e[31m2l\e[0m) ++\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplqx2j4fi.scala:71:5\
    \ ---------------------\e[0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n).toInt)\
    \ yield {\n            if (n % i == 0) false\n            else true\n        }\n\
    \        !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mvsq7p9.scala:27)\n\tat Problem.main(tmp3mvsq7p9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val primes = mutable.Set[Long]()\n\
    \        while (i <= n / i) {\n            if (n % i == 0) {\n               \
    \ primes += i\n            }\n            i += 1\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvx1qq7ob.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvx1qq7ob.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0) {\n                return false\n            }\n    \
    \        i += 1\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwqct873w.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n)) yield\
    \ {\n            if (n % i == 0) false\n            else true\n        }\n   \
    \     !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp716nn0f2.scala:20:46\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m2\e[0m to Math.sqrt(n)) \e[33myield\e[0m {\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    Double\n\e[31m   |\e\
    [0m                                     Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case x if isPrime => true\n            case _ => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzhjm4lpc.scala:28)\n\tat Problem.main(tmpzhjm4lpc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val primes = mutable.Set[Long]()\n        primes ++= isPrime\n        primes.forall(n\
    \ => n % n == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcc74i5pf.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        for (i\
    \ <- 2 to Math.sqrt(n)) {\n            if (n % i == 0) {\n                primes.add(i)\n\
    \            }\n        }\n        primes.size == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdgk9g__8.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdgk9g__8.scala:21:32 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to Math.sqrt(n))\
    \ {\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    Double\n\e[31m   |\e[0m                  \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val d = 2l\n        while (i\
    \ <= n / d) {\n            if (n % i == 0) {\n                return false\n \
    \           }\n            d += 2l\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyo5f7tm6.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            d += \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean d.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ primesCount = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount = mutable.ArrayBuffer(2l)\n        val isPrimeCount2\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount3 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount4 = mutable.ArrayBuffer(2l)\n        val isPrimeCount5\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount6 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount7 = mutable.ArrayBuffer(2l)\n        val isPrimeCount8\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount9 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount10 = mutable.ArrayBuffer(2l)\n        val isPrimeCount11\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount12 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount13 = mutable.ArrayBuffer(2l)\n        val isPrimeCount14\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount15 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount16 = mutable.ArrayBuffer(2l)\n        val isPrimeCount17\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount18 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount19 = mutable.ArrayBuffer(2l)\n        val isPrimeCount20\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount21 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount22 = mutable.ArrayBuffer(2l)\n        val isPrimeCount23\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount24 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount25 = mutable.ArrayBuffer(2l)\n        val isPrimeCount26\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount27 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount28 = mutable.ArrayBuffer(2l)\n        val isPrimeCount29\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount30 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount31 = mutable.ArrayBuffer(2l)\n        val isPrimeCount32\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount33 = mut\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isNotPrime = (2l) until (n) contains n + 1\n        val isPrime2 = isPrime.toSet\n\
    \        val isNotPrime2 = isNotPrime.toSet\n        isPrime2 union isNotPrime2\
    \ contains n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkdyf4fho.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = isPrime.toSet\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value toSet is not a member of Boolean\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkdyf4fho.scala:23:37 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misNotPrime2\e[0m = isNotPrime.toSet\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value toSet is not a member of Boolean\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n match {\n          \
    \  case _ if n % _ == 0 => false\n            case _ if n % _ == 1 => false\n\
    \            case _ => true\n        }\n        n match {\n            case _\
    \ if isPrime => true\n            case _ => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7ghhro40.scala:21:26 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m n % _ ==\
    \ \e[31m0\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => \n\e[31m   |\e[0m     (\e[31m2L\e[0m) until n\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m_\e[33m if \e[0mn % _$1 == 0 => \n\e[31m   |\e[0m           \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m         \e[33mcase \e[0m_\e[33m if \e[0mn % _$2 == 1 => \n\
    \e[31m   |\e[0m           \e[31mfalse\e[0m\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m_ => \n\e[31m   |\e[0m           \e[31mtrue\e[0m\n\e[31m   |\e[0m     \
    \  }.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7ghhro40.scala:22:26 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m _ \e[33mif\e[0m n % _ ==\
    \ \e[31m1\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => \n\e[31m   |\e[0m     (\e[31m2L\e[0m) until n\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m_\e[33m if \e[0mn % _$1 == 0 => \n\e[31m   |\e[0m           \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m         \e[33mcase \e[0m_\e[33m if \e[0mn % _$2 == 1 => \n\
    \e[31m   |\e[0m           \e[31mfalse\e[0m\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0m_ => \n\e[31m   |\e[0m           \e[31mtrue\e[0m\n\e[31m   |\e[0m     \
    \  }.\n2 errors found\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until Math.sqrt(n).toInt\n \
    \       val primes = mutable.ArrayBuffer(2l)\n        for (i <- isPrime) {\n \
    \           if (n % i == 0) {\n                primes += i\n            }\n  \
    \      }\n        primes.forall(n => n % n == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yrayox6.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val primes =\
    \ mutable.Set[Long]()\n        for (i <- 2 to sqrtN) {\n            if (n % i\
    \ == 0) {\n                primes.add(i)\n            }\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7oaan_6.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy7oaan_6.scala:22:23 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to sqrtN) {\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Found:    (sqrtN : Double)\n\e[31m   |\e[0m                \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ forall { _ % n != 0 }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp5mskti27.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) forall { _ % n != \e\
    [31m0\e[0m }\n\e[31m\e[31m   |\e[0m                                          \
    \       ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5mskti27.scala:20:68 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e\
    [36mn\e[0m => n % _ == \e[31m0\e[0m) forall { _ % n != \e[31m0\e[0m }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of Any, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following\
    \ import might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val primes = mutable.ArrayBuffer.empty[Long]\n        for (i <- isPrime) {\n\
    \            primes += i\n        }\n        primes.forall(n => n % n == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgl1gebf.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqgl1gebf.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- isPrime) {\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ foreach is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1659978632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => false\n            case _ => isPrime\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigajp05e.scala:28)\n\tat Problem.main(tmpigajp05e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n).toInt)\
    \ yield {\n            if (n % i == 0) false\n            else true\n        }\n\
    \        !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mvsq7p9.scala:27)\n\tat Problem.main(tmp3mvsq7p9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => false\n            case 1 => true\n     \
    \       case _ => isPrime\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1u8rxcai.scala:29)\n\tat Problem.main(tmp1u8rxcai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = BigInt(n).isPrime\n        if (isPrime)\n\
    \            return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxc2y5_kz.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = BigInt(n).isPrime\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      value isPrime is not a member of BigInt\n1 error found\n"
  stdout: ''
  timestamp: 1659978634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val m = 2l\n        val i = 2l\n        while (i\
    \ <= n / m) {\n            if (n % i == 0l) false\n            else i = i + 1l\n\
    \        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpp9sexo73.scala:24:19 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m i = i + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpp9sexo73.scala:23:29 ----------------\e[0m\e[0m\n\e[33m23 |\e\
    [0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e\
    [33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l) ++ (2l..n).filter(_\
    \ % _ == 0)\n        primes.forall(n => n % _ == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2at1fi0u.scala:20:52 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m) ++ (\e[31m2l\e[0m..n).filter(_ % _ == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                    ^\e[0m\n\e[31m \
    \  |\e[0m                                   an identifier expected, but '.' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2at1fi0u.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m) ++ (\e[31m2l\e[0m..n).filter(_ % _ == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) true\n\
    \        else {\n            val sqrt = (1l to n).foldLeft(1l) { (x, y) => math.sqrt\
    \ (x * y) }\n            val isPrime2 = sqrt.toSet.subsetOf(2l*3l*5l*7l*11l*13l*17l*19l*23l*29l*31l*37l*41l*43l*47l*53l*59l*61l*67l*71l*73l*79l*83l*89l*97l*101l*103l*107l*109l*113l*127l*131l*137l*139l*149l*151l*157l*163l*167l*173l*179l*181l*191l*193l*197l*199l*211l*223l*227l*229l*233l*239l*241l*251l*257l*263l*269l*271l*277l*281l*283l*293l*307l*311l*313l*317l*331l*337l*347l*349l*353l*359l*367l*373l*379l*383l*389l*397l*401l*409l*419l*421l*431l*433l*439l*443l*449l*457l*461l*463l*467l*479l*487l*491l*499l*503l*509l*521l*523l*529l*531l*533l*537l*539l*541l*547l*549l*551l*557l*561l*563l*567l*569l*573l*577l*587l*589l*593l*599l*601l*607l*613l*619l*623l*631l*637l*639l*643l*647l*651l*653l*657l*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0ww9tnj2.scala:24:678 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36misPrime2\e[0m = sqrt.toSet.subsetOf(\e\
    [31m2l\e[0m*\e[31m3l\e[0m*\e[31m5l\e[0m*\e[31m7l\e[0m*\e[31m11l\e[0m*\e[31m13l\e\
    [0m*\e[31m17l\e[0m*\e[31m19l\e[0m*\e[31m23l\e[0m*\e[31m29l\e[0m*\e[31m31l\e[0m*\e\
    [31m37l\e[0m*\e[31m41l\e[0m*\e[31m43l\e[0m*\e[31m47l\e[0m*\e[31m53l\e[0m*\e[31m59l\e\
    [0m*\e[31m61l\e[0m*\e[31m67l\e[0m*\e[31m71l\e[0m*\e[31m73l\e[0m*\e[31m79l\e[0m*\e\
    [31m83l\e[0m*\e[31m89l\e[0m*\e[31m97l\e[0m*\e[31m101l\e[0m*\e[31m103l\e[0m*\e\
    [31m107l\e[0m*\e[31m109l\e[0m*\e[31m113l\e[0m*\e[31m127l\e[0m*\e[31m131l\e[0m*\e\
    [31m137l\e[0m*\e[31m139l\e[0m*\e[31m149l\e[0m*\e[31m151l\e[0m*\e[31m157l\e[0m*\e\
    [31m163l\e[0m*\e[31m167l\e[0m*\e[31m173l\e[0m*\e[31m179l\e[0m*\e[31m181l\e[0m*\e\
    [31m191l\e[0m*\e[31m193l\e[0m*\e[31m197l\e[0m*\e[31m199l\e[0m*\e[31m211l\e[0m*\e\
    [31m223l\e[0m*\e[31m227l\e[0m*\e[31m229l\e[0m*\e[31m233l\e[0m*\e[31m239l\e[0m*\e\
    [31m241l\e[0m*\e[31m251l\e[0m*\e[31m257l\e[0m*\e[31m263l\e[0m*\e[31m269l\e[0m*\e\
    [31m271l\e[0m*\e[31m277l\e[0m*\e[31m281l\e[0m*\e[31m283l\e[0m*\e[31m293l\e[0m*\e\
    [31m307l\e[0m*\e[31m311l\e[0m*\e[31m313l\e[0m*\e[31m317l\e[0m*\e[31m331l\e[0m*\e\
    [31m337l\e[0m*\e[31m347l\e[0m*\e[31m349l\e[0m*\e[31m353l\e[0m*\e[31m359l\e[0m*\e\
    [31m367l\e[0m*\e[31m373l\e[0m*\e[31m379l\e[0m*\e[31m383l\e[0m*\e[31m389l\e[0m*\e\
    [31m397l\e[0m*\e[31m401l\e[0m*\e[31m409l\e[0m*\e[31m419l\e[0m*\e[31m421l\e[0m*\e\
    [31m431l\e[0m*\e[31m433l\e[0m*\e[31m439l\e[0m*\e[31m443l\e[0m*\e[31m449l\e[0m*\e\
    [31m457l\e[0m*\e[31m461l\e[0m*\e[31m463l\e[0m*\e[31m467l\e[0m*\e[31m479l\e[0m*\e\
    [31m487l\e[0m*\e[31m491l\e[0m*\e[31m499l\e[0m*\e[31m503l\e[0m*\e[31m509l\e[0m*\e\
    [31m521l\e[0m*\e[31m523l\e[0m*\e[31m529l\e[0m*\e[31m531l\e[0m*\e[31m533l\e[0m*\e\
    [31m537l\e[0m*\e[31m539l\e[0m*\e[31m541l\e[0m*\e[31m547l\e[0m*\e[31m549l\e[0m*\e\
    [31m551l\e[0m*\e[31m557l\e[0m*\e[31m561l\e[0m*\e[31m563l\e[0m*\e[31m567l\e[0m*\e\
    [31m569l\e[0m*\e[31m573l\e[0m*\e[31m577l\e[0m*\e[31m587l\e[0m*\e[31m589l\e[0m*\e\
    [31m593l\e[0m*\e[31m599l\e[0m*\e[31m601l\e[0m*\e[31m607l\e[0m*\e[31m613l\e[0m*\e\
    [31m619l\e[0m*\e[31m623l\e[0m*\e[31m631l\e[0m*\e[31m637l\e[0m*\e[31m639l\e[0m*\e\
    [31m643l\e[0m*\e[31m647l\e[0m*\e[31m651l\e[0m*\e[31m653l\e[0m*\e[31m657l\e[0m*\n\
    \e[31m\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until Math.sqrt(n).toInt\n \
    \       val primes = mutable.ArrayBuffer(2l)\n        for (i <- isPrime) {\n \
    \           if (n % i == 0) {\n                primes += i\n            }\n  \
    \      }\n        primes.forall(n => n % n == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yrayox6.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0)\n                return false\n            i += 1\n \
    \       }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi3pxu3ut.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            true\n        } else {\n            val sqrt = (1l to n).foldLeft(1l)\
    \ {\n                case (acc, i) => if (n % i == 0) acc + i else acc\n     \
    \       }\n            if (sqrt > n) false\n            else isPrime(sqrt)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmph34dlsub.scala:28:17 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33melse\e[0m isPrime(sqrt)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mvalue\e\
    [0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzapsnfqx.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzapsnfqx.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        var isPrime = true\n      \
    \  while (i <= n / i) {\n            if (n % i == 0) {\n                isPrime\
    \ = false\n                break\n            }\n            i += 1\n        }\n\
    \        isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2dd8lwsa.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2dd8lwsa.scala:27:14 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzapsnfqx.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzapsnfqx.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                s = i\n        \
    \    }\n            i += 1\n        }\n        if (s == 2l) {\n            true\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu9p99rvj.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu9p99rvj.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ primesCount = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount = mutable.ArrayBuffer(2l)\n        val isPrimeCount2\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount3 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount4 = mutable.ArrayBuffer(2l)\n        val isPrimeCount5\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount6 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount7 = mutable.ArrayBuffer(2l)\n        val isPrimeCount8\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount9 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount10 = mutable.ArrayBuffer(2l)\n        val isPrimeCount11\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount12 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount13 = mutable.ArrayBuffer(2l)\n        val isPrimeCount14\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount15 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount16 = mutable.ArrayBuffer(2l)\n        val isPrimeCount17\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount18 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount19 = mutable.ArrayBuffer(2l)\n        val isPrimeCount20\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount21 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount22 = mutable.ArrayBuffer(2l)\n        val isPrimeCount23\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount24 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount25 = mutable.ArrayBuffer(2l)\n        val isPrimeCount26\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount27 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount28 = mutable.ArrayBuffer(2l)\n        val isPrimeCount29\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount30 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount31 = mutable.ArrayBuffer(2l)\n        val isPrimeCount32\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount33 = mut\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isPrime2 = isPrime filter { x => n % x == 0 }\n        val isPrime3 =\
    \ isPrime2 filter { x => x % 2 == 0 }\n        val isPrime4 = isPrime3 filter\
    \ { x => x % 3 == 0 }\n        val isPrime5 = isPrime4 filter { x => x % 5 ==\
    \ 0 }\n        val isPrime6 = isPrime5 filter { x => x % 7 == 0 }\n        val\
    \ isPrime7 = isPrime6 filter { x => x % 11 == 0 }\n        val isPrime8 = isPrime7\
    \ filter { x => x % 13 == 0 }\n        val isPrime9 = isPrime8 filter { x => x\
    \ % 17 == 0 }\n        val isPrime10 = isPrime9 filter { x => x % 19 == 0 }\n\
    \        val isPrime11 = isPrime10 filter { x => x % 23 == 0 }\n        val isPrime12\
    \ = isPrime11 filter { x => x % 29 == 0 }\n        val isPrime13 = isPrime12 filter\
    \ { x => x % 31 == 0 }\n        val isPrime14 = isPrime13 filter { x => x % 37\
    \ == 0 }\n        val isPrime15 = isPrime14 filter { x => x % 41 == 0 }\n    \
    \    val isPrime16 = isPrime15 filter { x => x % 43 == 0 }\n        val isPrime17\
    \ = isPrime16 filter { x => x % 47 == 0 }\n        val isPrime18 = isPrime17 filter\
    \ { x => x % 53 == 0 }\n        val isPrime19 = isPrime18 filter { x => x % 59\
    \ == 0 }\n        val isPrime20 = isPrime19 filter { x => x % 61 == 0 }\n    \
    \    val isPrime21 = isPrime20 filter { x => x % 67 == 0 }\n        val isPrime22\
    \ = isPrime21 filter { x => x % 71 == 0 }\n        val isPrime23 = isPrime22 filter\
    \ { x => x % 73 == 0 }\n        val isPrime24 = isPrime23 filter { x => x % 79\
    \ == 0 }\n        val isPrime25 = isPrime24 filter { x => x % 83\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmponq072ja.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmponq072ja.scala:21:31\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime2\e[0m = isPrime filter { \e[36mx\e[0m => n % x == \e[31m0\e[0m }\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value filter is not a member of Boolean\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmponq072ja.scala:47:11 -----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    assert(isPrime((\e[31m6l\e[0m)) == (\e[31mfalse\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmponq072ja.scala:48:11 -----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    assert(isPrime((\e[31m101l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmponq072ja.scala:49:11 -----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    assert(isPrime((\e[31m11l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmponq072ja.scala:50:11 -----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    assert(isPrime((\e[31m13441l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m--"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => true\n            case _ => isPrime\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9vfk9ru.scala:28)\n\tat Problem.main(tmpt9vfk9ru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0)\n                return false\n            i += 1\n \
    \       }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd8458k8f.scala:24:14 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (sqrt(n).toInt).toLong\n        val\
    \ primes = mutable.ArrayBuffer(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).+:(2l).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3o926k6x.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp3o926k6x.scala:20:20 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = (sqrt(n).toInt).toLong\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Recursive\
    \ \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3o926k6x.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e\
    [31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e\
    [0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e[0m).+:(\e[31m2l\e["
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val m = 2l\n        var i = 2l\n        while (i\
    \ <= n / m) {\n            if (n % i == 0l) {\n                return false\n\
    \            }\n            i += 1\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwcomcu_0.scala:37)\n\tat Problem.main(tmpwcomcu_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val primes = mutable.ListBuffer[Long]()\n        for (i <- 2l until isPrime)\
    \ {\n            if (isPrime % i == 0) {\n                primes += i\n      \
    \      }\n        }\n        primes.forall(n => n % n == 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2fa0y5vx.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2fa0y5vx.scala:22:27 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2l\e[0m until isPrime)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (isPrime : Boolean)\n\e[31m   |\e[0m \
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2fa0y5vx.scala:23:24 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime % i == \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is\
    \ not a member of Boolean, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        n <= 2l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp24ppv7dl.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp24ppv7dl.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n2 errors found\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzapsnfqx.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzapsnfqx.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        val i\
    \ = 2l\n        while (i <= n && primes.contains(i)) {\n            if (n % i\
    \ == 0)\n                primes.add(i)\n            i += 1\n        }\n      \
    \  primes.contains(n)\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdx4nypd.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppdx4nypd.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrt = (1l*Math.sqrt(n).toInt).toLong\n            val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n            val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \            val isPrime = true\n            for (i <- 2l until sqrt) {\n    \
    \            if (n % i == 0) {\n                    primes += i\n            \
    \        primeFactors += i\n                }\n            }\n            if (primes.size\
    \ == primeFactors.size) {\n                for (i <- primes zip primeFactors)\
    \ {\n                    if (i._1 != i._2) {\n                        isPrime\
    \ = false\n                        break\n                    }\n            \
    \    }\n            }\n        }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzc3tvbo.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprzc3tvbo.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mprimeFactors\e[0m =\
    \ mutable.ArrayBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n match {\n          \
    \  case n if n % _ == 0 => false\n            case n if n % _ == 1 => true\n \
    \           case n => false\n        }\n        isPrime\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpwvylxhvi.scala:21:26 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m n \e[33mif\e[0m n % _ ==\
    \ \e[31m0\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => \n\e[31m   |\e[0m     (\e[31m2L\e[0m) until n\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn\e[33m if \e[0mn % _$1 == 0 => \n\e[31m   |\e[0m           \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m         \e[33mcase \e[0mn\e[33m if \e[0mn % _$2 == 1 => \n\
    \e[31m   |\e[0m           \e[31mtrue\e[0m\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn => \n\e[31m   |\e[0m           \e[31mfalse\e[0m\n\e[31m   |\e[0m    \
    \   }.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpwvylxhvi.scala:22:26 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m n \e[33mif\e[0m n % _ ==\
    \ \e[31m1\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => \n\e[31m   |\e[0m     (\e[31m2L\e[0m) until n\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn\e[33m if \e[0mn % _$1 == 0 => \n\e[31m   |\e[0m           \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m         \e[33mcase \e[0mn\e[33m if \e[0mn % _$2 == 1 => \n\
    \e[31m   |\e[0m           \e[31mtrue\e[0m\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn => \n\e[31m   |\e[0m           \e[31mfalse\e[0m\n\e[31m   |\e[0m    \
    \   }.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvylxhvi.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m n \e[33mif\e[0m n % _ ==\
    \ \e[31m0\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of scala.collection.immutable.NumericRange.Exclusive[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might ma"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                s = i\n        \
    \    }\n            i += 1\n        }\n        if (s == 2l) {\n            return\
    \ true\n        } else {\n            return false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpp5_yjufn.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp5_yjufn.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case x if isPrime => true\n            case _ => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzhjm4lpc.scala:28)\n\tat Problem.main(tmpzhjm4lpc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrt = (1l to n).foldLeft(1l) { (x, y) => math.sqrt((x * x) +\
    \ y).toInt }\n            val isPrime = sqrt <= n\n        }\n        isPrime\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8p_ould.scala:29)\n\tat Problem.main(tmpf8p_ould.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            true\n        } else {\n            val sqrt = (1l+n).toInt\n   \
    \         val isPrime2 = sqrt <= 1l\n            if (isPrime2) {\n           \
    \     true\n            } else {\n                val sqrt2 = sqrt.toInt\n   \
    \             val isPrime3 = sqrt2 <= 1l\n                if (isPrime3) {\n  \
    \                  true\n                } else {\n                    val sqrt3\
    \ = sqrt2.toInt\n                    val isPrime4 = sqrt3 <= 1l\n            \
    \        if (isPrime4) {\n                        true\n                    }\
    \ else {\n                        val sqrt4 = sqrt3.toInt\n                  \
    \      val isPrime5 = sqrt4 <= 1l\n                        if (isPrime5) {\n \
    \                           true\n                        } else {\n         \
    \                   val sqrt5 = sqrt4.toInt\n                            val isPrime6\
    \ = sqrt5 <= 1l\n                            if (isPrime6) {\n               \
    \                 true\n                            } else {\n               \
    \                 val sqrt6 = sqrt5.toInt\n                                val\
    \ isPrime7 = sqrt6 <= 1l\n                                if (isPrime7) {\n  \
    \                                  true\n                                } else\
    \ {\n                                    val sqrt7 = sqrt6.toInt\n           \
    \                         val isPrime8 = sqrt7 <= 1l\n                       \
    \             if (isPrime8) {\n                                        true\n\
    \                                    } else {\n                              \
    \          val sqrt8 = sqrt7.toInt\n                                        val\
    \ isPrime9 = sqrt8 <= 1l\n                                        if (isPrime9)\
    \ {\n                                            true\n                      \
    \                  } else {\n                                            val sqrt9\
    \ = sqrt8.toInt\n                                            val isPrime10 = sqrt9\
    \ <= 1l\n                                            if (isPrime10) {\n      \
    \                                          true\n                            \
    \                } else {\n                                                val\
    \ sqrt10 = sqrt9.toInt\n                                                val isPrime11\
    \ = sqrt10 <= 1l\n                                                if (isPrime11)\
    \ {\n                                                    true\n              \
    \                                  } else {\n                                \
    \                    val sqrt11 = sqrt10.toInt\n                             \
    \                       val isPrime12 = sqrt11 <= 1l\n                       \
    \                             if (isPrime12) {\n                             \
    \                           true\n                                           \
    \         } else {\n                                                        val\
    \ sqrt12 = sqrt11.toInt\n                                                    \
    \    val isPrime13 = sqrt12 <= 1l\n                                          \
    \              if (isPrime13) {\n                                            \
    \                true\n                                                      \
    \  } else {\n                                                            val sqrt13\
    \ = sqrt12.toInt\n                                                           \
    \ val isPrime14 = sqrt13 <= 1l\n                                             \
    \               if (isPrime14) {\n                                           \
    \                     true\n                                                 \
    \           } else {\n                                                       \
    \         val sqrt14 = sqrt13.toInt\n                                        \
    \                        val isPrime15 = sqrt14 <= 1l\n                      \
    \                                          if (isPrime15) {\n                \
    \                                                    true\n                  \
    \                                              } else {\n                    \
    \                                                val sqrt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpptwhsito.scala:95:4 ----------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpptwhsito.scala:113:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m113 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmpptwhsito.scala:97:11 -----------------------------\e[0m\e\
    [0m\n\e[31m97 |\e[0m    assert(isPrime((\e[31m6l\e[0m)) == (\e[31mfalse\e[0m));\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \e[33mvalue\e\
    [0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpptwhsito.scala:98:11 -----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m    assert(isPrime((\e[31m101l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpptwhsito.scala:99:11 -----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m    assert(isPrime((\e[31m11l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m   |\e[0m           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpptwhsito.scala:100:11 ----------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m    assert(isPrime((\e[31m13441l\e[0m)) == (\e[31mtrue\e\
    [0m));\n\e[31m\e[31m    |\e[0m           ^^^^^^^\e[0m\n\e[31m    |\e[0m      \
    \     \e[33mvalue\e[0m \e[35misPrime\e[0m does not take parameters\n\e[31m   \
    \ |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpptwhsito.scala:101:11 ----------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m    assert(isPrime((\e[31m61l\e[0m)) == (\e[3"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n).toInt)\
    \ yield {\n            if (n % i == 0) false\n            else true\n        }\n\
    \        !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mvsq7p9.scala:27)\n\tat Problem.main(tmp3mvsq7p9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n).toInt)\
    \ yield {\n            if (n % i == 0) false\n            else true\n        }\n\
    \        !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mvsq7p9.scala:27)\n\tat Problem.main(tmp3mvsq7p9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val i = 2l\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        while (i < sqrtN)\
    \ {\n            if (n % i == 0l) primes += i\n            i += 2l\n        }\n\
    \        primes.forall(n => n % n == 0l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o47qwqa.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3o47qwqa.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i += \e[31m2l\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2l) false\n        else if (n % 2l == 0l)\
    \ false\n        else if (n % 3l == 0l) false\n        else if (n % 5l == 0l)\
    \ false\n        else if (n % 7l == 0l) false\n        else if (n % 11l == 0l)\
    \ false\n        else if (n % 13l == 0l) false\n        else if (n % 17l == 0l)\
    \ false\n        else if (n % 19l == 0l) false\n        else if (n % 23l == 0l)\
    \ false\n        else if (n % 29l == 0l) false\n        else if (n % 31l == 0l)\
    \ false\n        else if (n % 37l == 0l) false\n        else if (n % 41l == 0l)\
    \ false\n        else if (n % 43l == 0l) false\n        else if (n % 47l == 0l)\
    \ false\n        else if (n % 53l == 0l) false\n        else if (n % 59l == 0l)\
    \ false\n        else if (n % 61l == 0l) false\n        else if (n % 67l == 0l)\
    \ false\n        else if (n % 71l == 0l) false\n        else if (n % 73l == 0l)\
    \ false\n        else if (n % 79l == 0l) false\n        else if (n % 83l == 0l)\
    \ false\n        else if (n % 89l == 0l) false\n        else if (n % 97l == 0l)\
    \ false\n        else true\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppl6cj9zn.scala:51)\n\tat Problem.main(tmppl6cj9zn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l) \n       \
    \ for (i <- 3l to Math.sqrt(n).toInt) {\n            if (n % i == 0) {\n     \
    \           primes += i\n            }\n        }\n        primes.contains(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9w2zfo2j.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m) \n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isNotPrime = (2l) until (n) contains n + 1\n        val isNotPrime2 =\
    \ isPrime filter (_ != n)\n        val isNotPrime3 = isNotPrime filter (_ != n\
    \ + 1)\n        val isNotPrime4 = isNotPrime2 filter (_ != n + 1)\n        val\
    \ isNotPrime5 = isNotPrime3 filter (_ != n + 1)\n        val isNotPrime6 = isNotPrime4\
    \ filter (_ != n + 1)\n        val isNotPrime7 = isNotPrime5 filter (_ != n +\
    \ 1)\n        val isNotPrime8 = isNotPrime6 filter (_ != n + 1)\n        val isNotPrime9\
    \ = isNotPrime7 filter (_ != n + 1)\n        val isNotPrime10 = isNotPrime8 filter\
    \ (_ != n + 1)\n        val isNotPrime11 = isNotPrime9 filter (_ != n + 1)\n \
    \       val isNotPrime12 = isNotPrime10 filter (_ != n + 1)\n        val isNotPrime13\
    \ = isNotPrime11 filter (_ != n + 1)\n        val isNotPrime14 = isNotPrime12\
    \ filter (_ != n + 1)\n        val isNotPrime15 = isNotPrime13 filter (_ != n\
    \ + 1)\n        val isNotPrime16 = isNotPrime14 filter (_ != n + 1)\n        val\
    \ isNotPrime17 = isNotPrime15 filter (_ != n + 1)\n        val isNotPrime18 =\
    \ isNotPrime16 filter (_ != n + 1)\n        val isNotPrime19 = isNotPrime17 filter\
    \ (_ != n + 1)\n        val isNotPrime20 = isNotPrime18 filter (_ != n + 1)\n\
    \        val isNotPrime21 = isNotPrime19 filter (_ != n + 1)\n        val isNotPrime22\
    \ = isNotPrime20 filter (_ != n + 1)\n        val isNotPrime23 = isNotPrime21\
    \ filter (_ != n + 1)\n        val isNotPrime24 = isNotPrime22 filter (_ != n\
    \ + 1)\n        val isNotPrime25 = isNotPrime23 filter (_ != n + 1)\n        val\
    \ isNotPrime26 = isNotPrime24 filter (_ != n + 1)\n        val isNotPrime\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_846a0z3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_846a0z3.scala:22:34\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misNotPrime2\e[0m = isPrime filter (_ != n)\n\e[31m\e[31m   |\e[0m        \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \    value filter is not a member of Boolean\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_846a0z3.scala:23:37 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36misNotPrime3\e[0m = isNotPrime filter (_ !=\
    \ n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value filter is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_846a0z3.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                s = i\n            }\n\
    \            i += 1\n        }\n        if (s == 2l) {\n            true\n   \
    \     } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmphg6l9ix3.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphg6l9ix3.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ primesCount = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount = mutable.ArrayBuffer(2l)\n        val isPrimeCount2\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount3 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount4 = mutable.ArrayBuffer(2l)\n        val isPrimeCount5\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount6 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount7 = mutable.ArrayBuffer(2l)\n        val isPrimeCount8\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount9 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount10 = mutable.ArrayBuffer(2l)\n        val isPrimeCount11\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount12 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount13 = mutable.ArrayBuffer(2l)\n        val isPrimeCount14\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount15 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount16 = mutable.ArrayBuffer(2l)\n        val isPrimeCount17\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount18 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount19 = mutable.ArrayBuffer(2l)\n        val isPrimeCount20\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount21 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount22 = mutable.ArrayBuffer(2l)\n        val isPrimeCount23\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount24 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount25 = mutable.ArrayBuffer(2l)\n        val isPrimeCount26\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount27 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount28 = mutable.ArrayBuffer(2l)\n        val isPrimeCount29\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount30 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount31 = mutable.ArrayBuffer(2l)\n        val isPrimeCount32\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount33 = mut\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l*2l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzapsnfqx.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzapsnfqx.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to math.sqrt(n)) yield\
    \ {\n            if (n % i == 0) false\n            else true\n        }\n   \
    \     !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmhrzobu.scala:20:46\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e\
    [0m = \e[33mfor\e[0m (i <- \e[31m2\e[0m to math.sqrt(n)) \e[33myield\e[0m {\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     Found:    Double\n\e[31m   |\e\
    [0m                                     Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) forall {\n       \
    \     n => n % _ == 0\n        }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpf8xjuxdd.scala:21:21 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[36mn\e[0m => n % _ == \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => n % _$1 == 0.\n1 error found\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        val m =\
    \ 2l\n        val p = (2l) :: Nil\n        while (i<=n){\n            if (n%i==0){\n\
    \                s = i\n                m = n\n            }\n            i +=\
    \ s\n        }\n        if (m==n){\n            p.append(n)\n        }\n     \
    \   p != Nil\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0msl77od.scala:26:18 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                s = i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp0msl77od.scala:27:18 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                m = n\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0msl77od.scala:29:14\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            i += s\n\e[31m\e\
    [31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0msl77od.scala:32:14 ------------------------\e[0m\e[0m\n\e[31m32 |\e\
    [0m            p.append(n)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m   value append is not a member of List[Long] - did you mean p.appended?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            return false\n        }\n        val sqrt = (1l to n).foldLeft(1l)\
    \ { (x, y) => math.pow(x, y) / y }\n        val isPrime2 = sqrt.toSet.forall(x\
    \ => n % x == 0)\n        return isPrime2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgb5voe_c.scala:24:54\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36msqrt\e\
    [0m = (\e[31m1l\e[0m to n).foldLeft(\e[31m1l\e[0m) { (\e[36mx\e[0m, \e[36my\e\
    [0m) => math.pow(x, y) / y }\n\e[31m\e[31m   |\e[0m                          \
    \                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                              Found:    Double\n\e[31m   |\e\
    [0m                                                      Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgb5voe_c.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misPrime2\e[0m = sqrt.toSet.forall(\e\
    [36mx\e[0m => n % x == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value toSet is not a member of\
    \ Long - did you mean sqrt.toInt?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (1l+n).toInt\n        val i = 2l\n \
    \       val primes = mutable.ListBuffer[Long]()\n        while(i <= sqrt) {\n\
    \            val isPrime = n % i == 0\n            if(isPrime) {\n           \
    \     primes += i\n            }\n            i += 2\n        }\n        primes.size\
    \ == n\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt8bnq8qz.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt8bnq8qz.scala:28:14 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            i += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l*2l).asInstanceOf[Long]\n    \
    \    val isNotPrime = (2l*2l+1).asInstanceOf[Long]\n        val isNotPrime2 =\
    \ (2l*2l+2).asInstanceOf[Long]\n        val isNotPrime3 = (2l*2l+3).asInstanceOf[Long]\n\
    \        val isNotPrime4 = (2l*2l+4).asInstanceOf[Long]\n        val isNotPrime5\
    \ = (2l*2l+5).asInstanceOf[Long]\n        val isNotPrime6 = (2l*2l+6).asInstanceOf[Long]\n\
    \        val isNotPrime7 = (2l*2l+7).asInstanceOf[Long]\n        val isNotPrime8\
    \ = (2l*2l+8).asInstanceOf[Long]\n        val isNotPrime9 = (2l*2l+9).asInstanceOf[Long]\n\
    \        val isNotPrime10 = (2l*2l+10).asInstanceOf[Long]\n        val isNotPrime11\
    \ = (2l*2l+11).asInstanceOf[Long]\n        val isNotPrime12 = (2l*2l+12).asInstanceOf[Long]\n\
    \        val isNotPrime13 = (2l*2l+13).asInstanceOf[Long]\n        val isNotPrime14\
    \ = (2l*2l+14).asInstanceOf[Long]\n        val isNotPrime15 = (2l*2l+15).asInstanceOf[Long]\n\
    \        val isNotPrime16 = (2l*2l+16).asInstanceOf[Long]\n        val isNotPrime17\
    \ = (2l*2l+17).asInstanceOf[Long]\n        val isNotPrime18 = (2l*2l+18).asInstanceOf[Long]\n\
    \        val isNotPrime19 = (2l*2l+19).asInstanceOf[Long]\n        val isNotPrime20\
    \ = (2l*2l+20).asInstanceOf[Long]\n        val isNotPrime21 = (2l*2l+21).asInstanceOf[Long]\n\
    \        val isNotPrime22 = (2l*2l+\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpej2psd1f.scala:42:34 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36misNotPrime22\e[0m = (\e\
    [31m2l\e[0m*\e[31m2l\e[0m+\n\e[31m\e[31m   |\e[0m                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                  expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpej2psd1f.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case 0 => true\n            case _ => isPrime\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9vfk9ru.scala:28)\n\tat Problem.main(tmpt9vfk9ru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ < n) {\n            if (n % i == 0) {\n                s = i\n            }\n\
    \            i += 1\n        }\n        if (s == 2l) {\n            true\n   \
    \     } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp822mm5h_.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp822mm5h_.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall {\n         \
    \   i => n % i == 0\n        }\n        !isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi7nfc9or.scala:26)\n\tat Problem.main(tmpi7nfc9or.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n match {\n          \
    \  case n if n % _ == 0 => false\n            case n if n % _ == 1 => true\n \
    \           case n => false\n        }\n        n match {\n            case n\
    \ if isPrime => true\n            case n => false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpa6t74keg.scala:21:26 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m n \e[33mif\e[0m n % _ ==\
    \ \e[31m0\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \      ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => \n\e[31m   |\e[0m     (\e[31m2L\e[0m) until n\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn\e[33m if \e[0mn % _$1 == 0 => \n\e[31m   |\e[0m           \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m         \e[33mcase \e[0mn\e[33m if \e[0mn % _$2 == 1 => \n\
    \e[31m   |\e[0m           \e[31mtrue\e[0m\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn => \n\e[31m   |\e[0m           \e[31mfalse\e[0m\n\e[31m   |\e[0m    \
    \   }.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpa6t74keg.scala:22:26 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m n \e[33mif\e[0m n % _ ==\
    \ \e[31m1\e[0m => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m   (_$1, _$2) => \n\e[31m   |\e[0m     (\e[31m2L\e[0m) until n\e\
    [33m match \e[0m\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn\e[33m if \e[0mn % _$1 == 0 => \n\e[31m   |\e[0m           \e[31mfalse\e\
    [0m\n\e[31m   |\e[0m         \e[33mcase \e[0mn\e[33m if \e[0mn % _$2 == 1 => \n\
    \e[31m   |\e[0m           \e[31mtrue\e[0m\n\e[31m   |\e[0m         \e[33mcase\
    \ \e[0mn => \n\e[31m   |\e[0m           \e[31mfalse\e[0m\n\e[31m   |\e[0m    \
    \   }.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa6t74keg.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m n \e[33mif\e[0m n % _ ==\
    \ \e[31m0\e[0m => \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of scala.collection.immutable.NumericRange.Exclusive[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might ma"
  stdout: ''
  timestamp: 1659978652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        var\
    \ i = 2l\n        while (i < n) {\n            if (n % i == 0) {\n           \
    \     primes += i\n            }\n            i += 1\n        }\n        primes.contains(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr4fvr3_l.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ isPrime = mutable.ArrayBuffer(true)\n        for (i <- 2l until n by 2)\n  \
    \          if (n % i == 0)\n                primes += i\n        for (i <- primes.indices)\
    \ {\n            if (primes(i) == n)\n                isPrime += false\n     \
    \   }\n        isPrime(0)\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcgjw7z16.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpcgjw7z16.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31mtrue\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if(isPrime)\n  \
    \          return true\n        val sqrt = (1l to n).toList\n        for(i <-\
    \ 0 until sqrt.size) {\n            val x = sqrt(i)\n            if(n % x == 0)\n\
    \                return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc9euynbh.scala:33)\n\tat Problem.main(tmpc9euynbh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = for (i <- 2 to Math.sqrt(n).toInt)\
    \ yield {\n            if (n % i == 0) false\n            else true\n        }\n\
    \        !isPrime.last\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3mvsq7p9.scala:27)\n\tat Problem.main(tmp3mvsq7p9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1l) false\n        else if (n % 2 == 0)\
    \ false\n        else if (n % 3 == 0) false\n        else if (n % 5 == 0) false\n\
    \        else { \n            val primes = mutable.ArrayBuffer(2l, 3l, 5l)\n \
    \           while (primes.size < n) primes += primes.last\n            primes.takeWhile(p\
    \ => p < n).forall(p => n % p == 0)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbxrikycr.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m, \e[31m3l\e[0m, \e[31m5l\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            true\n        } else {\n            val sqrt = (1l*Math.sqrt(n).toInt).toLong\n\
    \            val primes = mutable.Set[Long]()\n            primes.add(1l)\n  \
    \          primes.add(2l)\n            primes.add(3l)\n            primes.add(5l)\n\
    \            primes.add(7l)\n            primes.add(11l)\n            primes.add(13l)\n\
    \            primes.add(17l)\n            primes.add(19l)\n            primes.add(23l)\n\
    \            primes.add(29l)\n            primes.add(31l)\n            primes.add(37l)\n\
    \            primes.add(41l)\n            primes.add(43l)\n            primes.add(47l)\n\
    \            primes.add(53l)\n            primes.add(59l)\n            primes.add(61l)\n\
    \            primes.add(67l)\n            primes.add(71l)\n            primes.add(73l)\n\
    \            primes.add(79l)\n            primes.add(83l)\n            primes.add(89l)\n\
    \            primes.add(97l)\n            primes.add(101l)\n            primes.add(103l)\n\
    \            primes.add(107l)\n            primes.add(109l)\n            primes.add(113l)\n\
    \            primes.add(127l)\n            primes.add(131l)\n            primes.add(137l)\n\
    \            primes.add(139l)\n            primes.add(149l)\n            primes.add(151l)\n\
    \            primes.add(157l)\n            primes.add(163l)\n            primes.add(167l)\n\
    \            primes.add(173l)\n            primes.add(179l)\n            primes.add(181l)\n\
    \            primes.add(191l)\n            primes.add(193l)\n            primes.add(197l)\n\
    \            primes.add(199l)\n            primes.add(211l)\n            primes.add(223l)\n\
    \            primes.add(227l)\n            primes.add(229l)\n            primes.add(233l)\n\
    \            primes.add(239l)\n            primes.add(241l)\n            primes.add(251l)\n\
    \            primes.add(257l)\n            primes.add(263l)\n            primes.add(269l)\n\
    \            primes.add(271l)\n            primes.add(277l)\n            primes.add(281l)\n\
    \            primes.add(283l)\n            primes.add(293l)\n            primes.add(307l)\n\
    \            primes.add(311l)\n            primes.add(313l)\n            primes.add(317l)\n\
    \            primes.add(331l)\n            primes.add(337l)\n            primes.add(347l)\n\
    \            primes.add(349l)\n            primes.add(353l)\n            primes.add(359l)\n\
    \            primes.add(367l)\n            primes.add(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpq7z5tnin.scala:100:23 --------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m            primes.add(\n\e[31m\e[31m    |\e[0m    \
    \                   ^\e[0m\n\e[31m    |\e[0m                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpq7z5tnin.scala:119:0 ---------------------------\e[0m\e\
    [0m\n\e[31m119 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7z5tnin.scala:25:25\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36mprimes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpq7z5tnin.scala:103:11\
    \ ----------------------------\e[0m\e[0m\n\e[31m103 |\e[0m    assert(isPrime((\e\
    [31m6l\e[0m)) == (\e[31mfalse\e[0m));\n\e[31m\e[31m    |\e[0m           ^^^^^^^\e\
    [0m\n\e[31m    |\e[0m           \e[33mvalue\e[0m \e[35misPrime\e[0m does not take\
    \ parameters\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpq7z5tnin.scala:104:11\
    \ ----------------------------\e[0m\e[0m\n\e[31m104 |\e[0m    assert(isPrime((\e\
    [31m101l\e[0m)) == (\e[31mtrue\e[0m));\n\e[31m\e[31m    |\e[0m           ^^^^^^^\e\
    [0m\n\e[31m    |\e[0m           \e[33mvalue\e[0m \e[35misPrime\e[0m does not take\
    \ parameters\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpq7z5tnin.scala:105:11\
    \ ----------------------------\e[0m\e[0m\n\e[31m105 |\e[0m    assert(isPrime((\e\
    [31m11l\e[0m)) == (\e[31mtrue\e[0m));\n\e[31m\e[31m    |\e[0m           ^^^^^^^\e\
    [0m\n\e[31m    |\e[0m           \e[33mvalue\e[0m \e[35misPrime\e[0m does not take\
    \ parameters\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when comp"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2l) false\n        else if (n % 2l == 0l)\
    \ false\n        else {\n            var i = 2l\n            while (i < n) if\
    \ (n % i == 0l) false\n            i = 2l\n            while (i < n) if (n % i\
    \ == 0l) true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp49umws4p.scala:26:12\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mwhile\e[0m\
    \ (i < n) \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Unit\n\e[31m   |\e[0m            Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp49umws4p.scala:24:43\
    \ ----------------\e[0m\e[0m\n\e[33m24 |\e[0m            \e[33mwhile\e[0m (i <\
    \ n) \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e\
    [0m                                           ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0) {\n                return false\n            }\n    \
    \        i += 1\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyxidbde7.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n / 2l) {\n            if (n % i == 0l) {\n                s = 2l\n     \
    \       }\n            else {\n                s = s * i\n            }\n    \
    \        i = i + 1l\n        }\n        if (s == n) { true } else { false }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbns1xi61.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = \e[31m2l\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to\
    \ val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbns1xi61.scala:27:18\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                s =\
    \ s * i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpbns1xi61.scala:29:14 -----------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            i = i + \e[31m1l\e[0m\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (n => n % _ == 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp3aw__hj4.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = (\e[31m2l\e\
    [0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e[0m) reduceLeft (_ || _)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => n % _$1 == 0.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3aw__hj4.scala:20:71\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misPrime\e[0m = (\e[31m2l\e[0m) until n map (\e[36mn\e[0m => n % _ == \e[31m0\e\
    [0m) reduceLeft (_ || _)\n\e[31m\e[31m   |\e[0m                              \
    \                                       ^^^^\e[0m\n\e[31m   |\e[0m           \
    \                              value || is not a member of Any\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3aw__hj4.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        isPrime\n\e[31m\e[31m   |\e[0m        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (isPrime : Any)\n\e[31m   |\e[0m       \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) forall { x =>\n  \
    \          val y = math.floor(x * Math.sqrt(x).toInt)\n            x % y == 0\n\
    \        }\n        isPrime\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5f4jt97t.scala:28)\n\tat Problem.main(tmp5f4jt97t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ isPrime = true\n        for(i <- 2l until n by 2){\n            if(!primes.contains(i)){\n\
    \                primes += i\n                if(!isPrime){\n                \
    \    isPrime = false\n                    break\n                }\n         \
    \   }\n        }\n        isPrime\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54tr6q6i.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp54tr6q6i.scala:26:28 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp54tr6q6i.scala:27:20 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0l) false\n            else i = i + 1l\n        }\n    \
    \    true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpeaycxvjt.scala:23:19 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m i = i + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpeaycxvjt.scala:22:29 ----------------\e[0m\e[0m\n\e[33m22 |\e\
    [0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e\
    [33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659792949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val isPrime =\
    \ true\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \        return isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_jbmtfe0.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtN) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtN : Double)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_jbmtfe0.scala:24:24 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_jbmtfe0.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n.toInt\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- isPrime) {\n          \
    \  if (n % i == 0) {\n                primes += i\n            }\n        }\n\
    \        primes.forall(n => n % n == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy41wynag.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                return false\n     \
    \       }\n            s += i\n            i += 1\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8fh_54sz.scala:26:14 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            s += i\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long - did\
    \ you mean s.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8fh_54sz.scala:27:14\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = n <= 1l\n        if (isPrime) {\n\
    \            val sqrt = (1l to n).toList.map(n => math.pow(n, 0.5l)).sum\n   \
    \         sqrt % n == 0\n        } else {\n            val sqrt = (1l to n).toList.map(n\
    \ => math.pow(n, 0.5l)).sum\n            sqrt % n != 0\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptutgtrvl.scala:22:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msqrt\e[0m = (\e[31m1l\e\
    [0m to n).toList.map(\e[36mn\e[0m => math.pow(n, 0.5l)).sum\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                                  Invalid literal number\n\
    \e[31m\e[31m-- Error: /tmp/tmptutgtrvl.scala:25:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36msqrt\e[0m = (\e[31m1l\e\
    [0m to n).toList.map(\e[36mn\e[0m => math.pow(n, 0.5l)).sum\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                                  Invalid literal number\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrtN = math.sqrt(n)\n        val isPrime =\
    \ true\n        for (i <- 2 to sqrtN) {\n            if (n % i == 0) {\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \        isPrime\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuk7bnmu6.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to sqrtN) {\n\e[31m\e[31m   |\e[0m                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    (sqrtN : Double)\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpuk7bnmu6.scala:24:24 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                isPrime = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpuk7bnmu6.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall {\n         \
    \   x => n % x == 0\n        }\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ry1vpjb.scala:27)\n\tat Problem.main(tmp7ry1vpjb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   val isNotPrime = (2l) until (n) contains n + 1\n        val isPrime2 = (n)\
    \ until (n) contains n\n        val isNotPrime2 = (n) until (n) contains n + 1\n\
    \        val isPrime3 = (n) until (n) contains n + 1\n        val isNotPrime3\
    \ = (n) until (n) contains n + 1\n        val isPrime4 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime4 = (n) until (n) contains n + 1\n        val isPrime5\
    \ = (n) until (n) contains n + 1\n        val isNotPrime5 = (n) until (n) contains\
    \ n + 1\n        val isPrime6 = (n) until (n) contains n + 1\n        val isNotPrime6\
    \ = (n) until (n) contains n + 1\n        val isPrime7 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime7 = (n) until (n) contains n + 1\n        val isPrime8\
    \ = (n) until (n) contains n + 1\n        val isNotPrime8 = (n) until (n) contains\
    \ n + 1\n        val isPrime9 = (n) until (n) contains n + 1\n        val isNotPrime9\
    \ = (n) until (n) contains n + 1\n        val isPrime10 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime10 = (n) until (n) contains n + 1\n        val\
    \ isPrime11 = (n) until (n) contains n + 1\n        val isNotPrime11 = (n) until\
    \ (n) contains n + 1\n        val isPrime12 = (n) until (n) contains n + 1\n \
    \       val isNotPrime12 = (n) until (n) contains n + 1\n        val isPrime13\
    \ = (n) until (n) contains n + 1\n        val isNotPrime13 = (n) until (n) contains\
    \ n + 1\n        val isPrime14 = (n) until (n) contains n + 1\n        val isNotPrime14\
    \ = (n) until (n) contains n + 1\n        val isPrime15 = (n) until (n) contains\
    \ n + 1\n        val isNotPrime15 = (n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv7g1lyeu.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv7g1lyeu.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until (n) contains n\n     \
    \   n match {\n            case x if isPrime => true\n            case x => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpb65hc9.scala:28)\n\tat Problem.main(tmpbpb65hc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                s = i * i\n    \
    \        }\n            i += 1\n        }\n        if (s == n) true\n        else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpr8q_vphs.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i * i\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr8q_vphs.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0l) false\n            else i = i + 1l\n        }\n    \
    \    true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpeaycxvjt.scala:23:19 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m i = i + \e[31m1l\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpeaycxvjt.scala:22:29 ----------------\e[0m\e[0m\n\e[33m22 |\e\
    [0m            \e[33mif\e[0m (n % i == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e\
    [33m   |\e[0m                             ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n1 error found\n"
  stdout: ''
  timestamp: 1659792949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        val s = 2l\n        while (i\
    \ <= n / 2) {\n            if (n % i == 0) {\n                s = i\n        \
    \    }\n            i += 1\n        }\n        if (s == 2l) {\n            true\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpu9p99rvj.scala:24:18 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                s = i\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val s\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu9p99rvj.scala:26:14\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            i += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ primesCount = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount = mutable.ArrayBuffer(2l)\n        val isPrimeCount2\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount3 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount4 = mutable.ArrayBuffer(2l)\n        val isPrimeCount5\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount6 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount7 = mutable.ArrayBuffer(2l)\n        val isPrimeCount8\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount9 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount10 = mutable.ArrayBuffer(2l)\n        val isPrimeCount11\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount12 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount13 = mutable.ArrayBuffer(2l)\n        val isPrimeCount14\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount15 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount16 = mutable.ArrayBuffer(2l)\n        val isPrimeCount17\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount18 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount19 = mutable.ArrayBuffer(2l)\n        val isPrimeCount20\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount21 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount22 = mutable.ArrayBuffer(2l)\n        val isPrimeCount23\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount24 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount25 = mutable.ArrayBuffer(2l)\n        val isPrimeCount26\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount27 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount28 = mutable.ArrayBuffer(2l)\n        val isPrimeCount29\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount30 = mutable.ArrayBuffer(2l)\n\
    \        val isPrimeCount31 = mutable.ArrayBuffer(2l)\n        val isPrimeCount32\
    \ = mutable.ArrayBuffer(2l)\n        val isPrimeCount33 = mut\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:23:27 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misPrimeCount2\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2d5mzw9q.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0"
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall { x =>\n    \
    \        val y = math.floor(x * Math.sqrt(x).toInt)\n            x % y == 0\n\
    \        }\n        isPrime\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnck5_b9.scala:28)\n\tat Problem.main(tmppnck5_b9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val sqrt = (1l*Math.sqrt(n).toInt).toLong\n   \
    \     val primes = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2l to sqrt)\
    \ {\n            if (n % i == 0) {\n                primes += i\n            }\n\
    \        }\n        primes.nonEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6lrkil91.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n forall { i => n % i\
    \ == 0 }\n        !isPrime\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9336cot.scala:24)\n\tat Problem.main(tmpb9336cot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        for (i\
    \ <- 2 to n by 2) {\n            if (n % i == 0) {\n                primes.add(i)\n\
    \            }\n        }\n        primes.size == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72a1_8hh.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp72a1_8hh.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (n : Long)\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.ArrayBuffer(2l)\n        val\
    \ isPrime = true\n        for (i <- 3l to n) primes += i\n        for (i <- 3l\
    \ to n-1 if primes.contains(i)) primes.remove(i)\n        isPrime\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmu2hc0lv.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = scala.math.BigInt(n).isPrime\n  \
    \      if (isPrime) true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp68lh9hi1.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misPrime\e[0m = scala.math.BigInt(n).isPrime\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value isPrime is not a member of BigInt\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val primes = mutable.Set[Long]()\n        for (i\
    \ <- 2 to n by 2) {\n            if (n % i == 0) {\n                primes.add(i)\n\
    \            }\n        }\n        primes.size == n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72a1_8hh.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp72a1_8hh.scala:21:23 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n by \e\
    [31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (n : Long)\n\e[31m   |\e[0m              \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val i = 2l\n        while (i <= n / i) {\n    \
    \        if (n % i == 0l) false\n            i += 1\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3vysc2ph.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp3vysc2ph.scala:22:29\
    \ ----------------\e[0m\e[0m\n\e[33m22 |\e[0m            \e[33mif\e[0m (n % i\
    \ == \e[31m0l\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                  \
    \           ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 warning\
    \ found\n1 error found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until Math.sqrt(n).toInt\n \
    \       val primes = mutable.ArrayBuffer(2l)\n        for (i <- isPrime) {\n \
    \           if (n % i == 0) {\n                primes += i\n            }\n  \
    \      }\n        primes.contains(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3iyej8pa.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.ArrayBuffer(\e\
    [31m2l\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => n % x != 0)\
    \ reduceLeft (_ || _)\n        isPrime\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2gnzrgr.scala:24)\n\tat Problem.main(tmpz2gnzrgr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = scala.math.BigInt(n).isProbablePrime\n\
    \        if (isPrime) true\n        else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnusuy3up.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (isPrime)\
    \ \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Found:    (isPrime : Int => Boolean)\n\e[31m   |\e[0m         \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        val isPrime = (2l) until n map (x => if (n % x\
    \ == 0) false else true) reduceLeft (_ || _)\n        isPrime\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1r831vtw.scala:24)\n\tat Problem.main(tmp1r831vtw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792945
