name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_\
    \ % 2 == 1)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.dropWhile(_ < 10).reverse\n\
    \        val firstEvens = odds.takeWhile(_ < 10)\n        val lastEvens = odds.dropWhile(_\
    \ < 10).reverse\n        val firstOddsEvens = firstOdds.zip(lastEvens)\n     \
    \   val firstEvensOdds = firstEvens.zip(lastOdds)\n        val firstOddsEvensOdds\
    \ = firstOddsEvens.filter(_._1 % 2 == 1)\n        val firstEvensOddsOdds = firstEvensOdds.filter(_._1\
    \ % 2 == 0)\n        val firstOddsEvensOddsOdds = firstOddsEvensOdds.filter(_._2\
    \ % 2 == 1)\n        val firstEvensOddsOddsOdds = firstEvensOddsOdds.filter(_._2\
    \ % 2 == 0)\n        val firstOddsEvensOddsOddsOdds = firstOddsEvensOddsOdds.filter(_._3\
    \ % 2 == 1)\n        val firstEvensOddsOddsOddsOdds = firstEvensOddsOddsOdds.filter(_._3\
    \ % 2 == 0)\n        val firstOddsEvensOddsOddsOddsOdds = firstOddsEvensOddsOddsOdds.filter(_._4\
    \ % 2 == 1)\n        val firstEvensOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOdds.filter(_._4\
    \ % 2 == 0)\n        val firstOddsEvensOddsOddsOddsOddsOdds = firstOddsEvensOddsOddsOddsOdds.filter(_._5\
    \ % 2 == 1)\n        val firstEvensOddsOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOddsOddsOdds.filter(_._5\
    \ % 2 == 0)\n        val firstOdds", "        val numsCopy = nums.toList\n   \
    \     var count = 0\n        for (i <- 0 until numsCopy.size) {\n            val\
    \ num = numsCopy(i)\n            if (num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n        numsCopy5.size",
  "        var count = 0\n        var lastOdd = false\n        var firstOdd = false\n\
    \        var lastEven = false\n        var firstEven = false\n        for(i <-\
    \ 0 until nums.size) {\n            val num = nums(i)\n            if(num > 10)\
    \ {\n                if(lastOdd && firstOdd) {\n                    count += 1\n\
    \                }\n                if(lastEven && firstEven) {\n            \
    \        count += 1\n                }\n                if(num % 2 == 1) {\n \
    \                   lastEven = true\n                } else {\n              \
    \      lastOdd = true\n                }\n                if(num % 2 == 0) {\n\
    \                    firstEven = true\n                } else {\n            \
    \        firstOdd = true\n                }\n            }\n        }\n      \
    \  count", "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val even = numsSorted.filter(_ % 2 == 0)\n \
    \       val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd = odd.takeWhile(_\
    \ < 10)\n        val lastOdd = odd.drop(10)\n        val firstEven = even.takeWhile(_\
    \ < 10)\n        val lastEven = even.drop(10)\n        val firstOddAndEven = firstOdd\
    \ ++ firstEven\n        val lastOddAndEven = lastOdd ++ lastEven\n        val\
    \ oddAndEven = firstOddAndEven ++ lastOddAndEven\n        oddAndEven.count(_ >\
    \ 10)", "        var count = 0\n        for (i <- nums) {\n            if (i >\
    \ 10 && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        var count = 0\n        for (i <- 0 until\
    \ nums.size) {\n            if (nums(i) > 10) {\n                if (nums(i) %\
    \ 2 == 1 && nums(i-1) % 2 == 1) {\n                    count += 1\n          \
    \      }\n            }\n        }\n        count", "        var count = 0\n \
    \       var last = 0\n        var first = 0\n        for (i <- nums) {\n     \
    \       val n = i.toInt\n            if (n > 10) {\n                if (n % 2\
    \ == 0) {\n                    if (first % 2 == 0) {\n                       \
    \ count += 1\n                    }\n                    last = n\n          \
    \          first = n\n                }\n            }\n        }\n        count",
  "        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n    \
    \    var firstEven = 0\n        var lastEven = 0\n        var first = 0\n    \
    \    var last = 0\n        for (i <- nums) {\n            if (i % 2 == 0) {\n\
    \                firstEven += 1\n            }\n            if (i % 2 == 1) {\n\
    \                lastEven += 1\n            }\n            if (i % 2 == 0) {\n\
    \                first += 1\n            }\n            if (i % 2 == 1) {\n  \
    \              last += 1\n            }\n        }\n        if (firstOdd > 0 &&\
    \ lastOdd > 0) {\n            count = firstOdd + lastOdd\n        } else if (firstEven\
    \ > 0 && lastEven > 0) {\n            count = firstEven + lastEven\n        }\
    \ else if (first > 0 && last > 0) {\n            count = first + last\n      \
    \  }\n        count", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        var count = 0\n\
    \        for(i <- 0 until nums.size) {\n            val num = nums(i)\n      \
    \      if(num > 10 && num % 2 == 1 && num % 2 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  '        nums.count(_ > 10) && nums.takeWhile(_ % 2 == 1).takeWhile(_ % 2 == 1).count(_
    % 2 == 1)', "        var count = 0\n        var lastDigit = 0\n        var firstDigit\
    \ = 0\n        for (i <- nums) {\n            if (i > 10) {\n                count\
    \ += 1\n                lastDigit = i\n            }\n            if (i % 2 ==\
    \ 1) {\n                firstDigit = i\n            }\n        }\n        if (count\
    \ == 0) {\n            return 0\n        }\n        if (lastDigit % 2 == 1) {\n\
    \            count += 1\n        }\n        if (firstDigit % 2 == 1) {\n     \
    \       count += 1\n        }\n        count", "        var count = 0\n      \
    \  for (i <- nums) {\n            if (i > 10) {\n                if (i % 2 ==\
    \ 1) {\n                    if (i % 2 == 0) {\n                        if (i %\
    \ 2 == 1) {\n                            count += 1\n                        }\n\
    \                    }\n                }\n            }\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i)\
    \ > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1) % 2 == 1) {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      count", "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  '        nums.filter(x => x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toChar % 2 == 1).length', "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        var count = 0\n        var lastDigit\
    \ = 0\n        var firstDigit = 0\n        for(i <- 0 until numsCopy.size) {\n\
    \            val num = numsCopy(i)\n            if(num > 10) {\n             \
    \   count += 1\n                if(lastDigit % 2 == 1) {\n                   \
    \ count += 1\n                }\n                if(firstDigit % 2 == 1) {\n \
    \                   count += 1\n                }\n            }\n           \
    \ lastDigit = num % 10\n            firstDigit = num / 10\n        }\n       \
    \ count", "        val numsCopy = nums.toList\n        var count = 0\n       \
    \ for(i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n     \
    \       if(num > 10) {\n                val firstDigit = num / 10\n          \
    \      val lastDigit = num % 10\n                if(firstDigit % 2 == 1 && lastDigit\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count", "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => {\n            if (x > 10 && x % 2 == 1 && x % 2 == 0) {\n              \
    \  numsCopy.remove(x)\n            }\n        })\n        numsCopy.size", "  \
    \      var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        var count =\
    \ 0\n        var lastOdd = false\n        var firstOdd = false\n        var lastEven\
    \ = false\n        var firstEven = false\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10) {\n         \
    \       count += 1\n                if(lastOdd && firstOdd) {\n              \
    \      count += 1\n                }\n                if(lastEven && firstEven)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      val lastDigit = num % 10\n            lastOdd = lastDigit % 2 == 1\n  \
    \          lastEven = lastDigit % 2 == 0\n            val firstDigit = num / 10\n\
    \            firstOdd = firstDigit % 2 == 1\n            firstEven = firstDigit\
    \ % 2 == 0\n        }\n        count", "        val numsCopy = nums.toList\n \
    \       val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 1)\n        val numsCopy6 = numsCopy5.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy7 = numsCopy6.filter(_ % 2 == 1)\n        val numsCopy8 = numsCopy7.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 ==\
    \ 1)\n        val numsCopy10 = numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n \
    \       numsCopy10.size", "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        for (i <- 0 until numsCopy.size) {\n            if (numsCopy(i)\
    \ > 10) {\n                if (numsCopy(i) % 2 == 1 && numsCopy(i-1) % 2 == 1)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 !=\
    \ 0)\n        numsCopy3.size", "        var count = 0\n        for(i <- 0 until\
    \ nums.size) {\n            if(nums(i) > 10) {\n                if(nums(i) % 2\
    \ == 1 && nums(i-1) % 2 == 1) {\n                    count += 1\n            \
    \    }\n            }\n        }\n        count", "        var count = 0\n   \
    \     for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 != 0) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   var count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2\
    \ == 1 && i % 2 != 0) {\n                count += 1\n            }\n        }\n\
    \        count", "        val numsCopy = nums.toList\n        numsCopy.filter(num\
    \ => num > 10).count(num => num % 2 != 0 && num % 2 != 1)", "        var count\
    \ = 0\n        var firstOdd = false\n        var lastOdd = false\n        for\
    \ (i <- 0 until nums.length) {\n            if (nums(i) > 10) {\n            \
    \    if (firstOdd && lastOdd) {\n                    count += 1\n            \
    \    }\n                firstOdd = false\n                lastOdd = false\n  \
    \          } else {\n                if (nums(i) % 2 == 1) {\n               \
    \     firstOdd = true\n                } else {\n                    lastOdd =\
    \ true\n                }\n            }\n        }\n        count", "       \
    \ val numsCopy = nums.toList\n        var count = 0\n        var lastDigit = 0\n\
    \        var firstDigit = 0\n        for(i <- 0 until numsCopy.size) {\n     \
    \       val num = numsCopy(i)\n            val digit = num % 10\n            if(digit\
    \ > 10 && lastDigit % 2 == 1 && firstDigit % 2 == 1) {\n                count\
    \ += 1\n            }\n            lastDigit = digit\n            firstDigit =\
    \ num / 10\n        }\n        count", "        var count = 0\n        for (i\
    \ <- 0 until nums.size) {\n            if (nums(i) > 10) {\n                if\
    \ (nums(i) % 2 == 1 && nums(i-1) % 2 == 1) {\n                    count += 1\n\
    \                }\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        numsCopy.foreach(x => {\n            if (x > 10 && numsCopy.last.mod(2)\
    \ == 1) {\n                numsCopy.remove(x)\n            }\n        })\n   \
    \     numsCopy.size", "        val numsSorted = nums.sortWith(_ < _)\n       \
    \ val numsSorted2 = numsSorted.filter(_ > 10)\n        val numsSorted3 = numsSorted2.filter(_\
    \ % 2 == 1)\n        numsSorted3.length", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n      \
    \  var firstEven = 0\n        var lastEven = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10) {\n         \
    \       if(num % 2 == 0) {\n                    firstEven += 1\n             \
    \   } else {\n                    lastEven += 1\n                }\n         \
    \   } else {\n                if(num % 2 == 0) {\n                    firstOdd\
    \ += 1\n                } else {\n                    lastOdd += 1\n         \
    \       }\n            }\n        }\n        count = firstEven + lastEven\n  \
    \      count += firstOdd + lastOdd\n        count", '        nums.count(x => x
    > 10 && nums.take(1).exists(y => y % 2 != 0))', "        var count = 0\n     \
    \   for (i <- nums) {\n            if (i > 10) {\n                if (i % 2 ==\
    \ 1) {\n                    if (i % 2 == 0) {\n                        if (i %\
    \ 2 == 1) {\n                            if (i % 2 == 0) {\n                 \
    \               count += 1\n                            }\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        count", '        nums.count(x => x > 10 && x.toString.take(2).forall(y
    => y % 2 == 1))', "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => {\n            if (x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2\
    \ == 1) numsCopy.remove(x)\n        })\n        numsCopy.size", '        nums.count(x
    => x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(nums.length-1).toInt
    == 1)', "        var count = 0\n        var firstOdd = false\n        var lastOdd\
    \ = false\n        var firstEven = false\n        var lastEven = false\n     \
    \   for (i <- 0 until nums.size) {\n            val num = nums(i)\n          \
    \  if (num > 10) {\n                if (firstOdd && lastOdd) {\n             \
    \       count += 1\n                }\n                if (firstEven && lastEven)\
    \ {\n                    count += 1\n                }\n                if (num\
    \ % 2 == 0) {\n                    firstEven = true\n                }\n     \
    \           if (num % 2 != 0) {\n                    lastEven = true\n       \
    \         }\n                firstOdd = true\n                lastOdd = false\n\
    \                firstEven = false\n                lastEven = false\n       \
    \     } else {\n                if (num % 2 != 0) {\n                    lastOdd\
    \ = true\n                }\n                if (num % 2 == 0) {\n           \
    \         firstEven = true\n                }\n            }\n        }\n    \
    \    count", "        val numsCopy = nums.toList\n        numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1).filter(_ % 2 == 1).size", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        numsCopy5.size", "        val numsCopy = nums.toList\n        var\
    \ count = 0\n        var lastNum = numsCopy(0)\n        var firstNum = numsCopy(0)\n\
    \        for(i <- 0 until numsCopy.size) {\n            if(numsCopy(i) > 10) {\n\
    \                if(lastNum % 2 == 1 && firstNum % 2 == 1) {\n               \
    \     count += 1\n                }\n                lastNum = numsCopy(i)\n \
    \               firstNum = numsCopy(i)\n            } else {\n               \
    \ lastNum = numsCopy(i)\n                firstNum = numsCopy(i)\n            }\n\
    \        }\n        count", "        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10) {\n                if (i % 2 == 1) {\n              \
    \      if (i % 2 == 0) {\n                        if (i % 2 == 1) {\n        \
    \                    count += 1\n                        }\n                 \
    \   }\n                }\n            }\n        }\n        count", "        val\
    \ numsSorted = nums.sortWith(_ < _)\n        val evens = numsSorted.filter(_ %\
    \ 2 == 0)\n        val odds = numsSorted.filter(_ % 2 != 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.drop(evens.size - 10)\n\
    \        val firstOddsOdds = firstOdds.takeWhile(_ % 2 != 0)\n        val lastOddsOdds\
    \ = lastOdds.drop(lastOdds.size - 10)\n        val firstOddsEvens = firstOdds.takeWhile(_\
    \ % 2 == 0)\n        val lastOddsEvens = lastOdds.drop(lastOdds.size - 10)\n \
    \       val firstOddsOddsEvens = firstOddsEvens.takeWhile(_ % 2 != 0)\n      \
    \  val lastOddsOddsEvens = lastOddsEvens.drop(lastOddsEvens.size - 10)\n     \
    \   val firstOddsOddsOdds = firstOddsOdds.takeWhile(_ % 2 != 0)\n        val lastOddsOddsOdds\
    \ = lastOddsOdds.drop(lastOddsOdds.size - 10)\n        val firstOddsEvensOdds\
    \ = firstOddsEvens.takeWhile(_ % 2 == 0)\n        val lastOddsEvensOdds = lastOddsEvens.drop(lastOddsEvens.size\
    \ - 10)\n        val firstOddsEvensEvens = firstOddsEvens.takeWhile(_ % 2 == 0)\n\
    \        val lastOddsEvensEvens = lastOddsEvens.drop(lastOddsEvens.size - 10)\n\
    \        val firstOddsEvensOddsEvens = firstOddsEvensEvens.takeWhile(_ % 2 !=\
    \ 0)\n        val lastOddsEvensOddsEvens = lastOddsEvensEvens.drop(lastOddsEvensEvens.size\
    \ - 10)\n        val firstOddsEvensEvensOdds = firstOddsEvensOdds.takeWhile(_\
    \ % 2 != 0)\n        val lastOddsEvensEvensOdds = lastOddsEvensOdds.drop(lastOddsEvensOdds.size\
    \ - 10)\n        val firstOddsOddsEvensOdds = ", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 != 0)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ % 2 != 0)\n        numsCopy5.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        var count\
    \ = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) > 10) {\n\
    \                if (nums(i) % 2 == 0 && nums(i) != nums(i) / 2) {\n         \
    \           count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1).length", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", "        val numsCopy = nums.toList\n\
    \        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n  \
    \      var firstEven = 0\n        var lastEven = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10) {\n         \
    \       if(num % 2 == 0) {\n                    firstEven = num\n            \
    \    } else {\n                    lastEven = num\n                }\n       \
    \     } else {\n                if(num % 2 == 1) {\n                    firstOdd\
    \ = num\n                } else {\n                    lastOdd = num\n       \
    \         }\n            }\n        }\n        count = firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd\n        count += firstEven + lastEven\n\
    \        count += firstOdd + lastOdd", "        val numsCopy = nums.toList\n \
    \       val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n\
    \        numsCopy3.size", "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                if (num % 2 == 1 && num % 3 == 1)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count", '        nums.count(x => x > 10 && nums(x).toLong % 2 ==
    1)', "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n  \
    \      val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        numsCopy2.count(_\
    \ % 2 == 0)", '        nums.filter(x => x > 10 && x % 2 != 0 && x % 2 != 1).length',
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 != 0 && i % 2 != 1) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsSorted = nums.sortWith(_ < _)\n        val\
    \ even = numsSorted.filter(_ % 2 == 0)\n        val odd = numsSorted.filter(_\
    \ % 2 != 0)\n        val firstOdd = odd.head\n        val lastOdd = odd.last\n\
    \        val firstEven = even.head\n        val lastEven = even.last\n       \
    \ val firstOddAndLastOdd = firstOdd * lastOdd\n        val firstEvenAndLastEven\
    \ = firstEven * lastEven\n        val firstOddAndLastEvenAndLastOdd = firstOddAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEven = firstEvenAndLastEven\
    \ * lastOdd\n        val firstOddAndLastEvenAndLastOddAndLastEven = firstOddAndLastEvenAndLastOdd\
    \ * lastEven\n        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEven * lastOddAndLastEven\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEven * lastEvenAndLastOddAndLastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastOddAndLastEvenAndLastOddAndLastEven\n\
    \        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven * lastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n\
    \        val firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\
    \ = firstEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven *\
    \ lastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven\n        val firstOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEvenAndLastOddAndLastEven",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n\
    \        numsCopy3.size", "        var count = 0\n        for (i <- 0 until nums.length)\
    \ {\n            if (nums(i) > 10 && nums(i) % 2 == 1 && nums(i) % 2 == 1) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val numsCopy = nums.toList\n        var count = 0\n        for (i<- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if (num > 10)\
    \ {\n                if (num % 2 == 0 && numsCopy(i-1) % 2 == 0) {\n         \
    \           count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n\
    \        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 == 1)\n       \
    \ numsCopy4.size", "        var count = 0\n        var lastDigit = 0\n       \
    \ var firstDigit = 0\n        var lastOdd = 0\n        var firstOdd = 0\n    \
    \    for (i <- nums) {\n            if (i > 10) {\n                count += 1\n\
    \                lastDigit = i\n            }\n            if (i % 2 == 1) {\n\
    \                firstDigit = i\n            }\n            if (i % 2 == 0 &&\
    \ lastDigit % 2 == 1) {\n                lastOdd = i\n            }\n        \
    \    if (i % 2 == 0 && firstDigit % 2 == 1) {\n                firstOdd = i\n\
    \            }\n        }\n        if (lastDigit % 2 == 1 && firstDigit % 2 ==\
    \ 1) {\n            count += 1\n        }\n        if (lastOdd % 2 == 1 && firstOdd\
    \ % 2 == 1) {\n            count += 1\n        }\n        count", "        val\
    \ numsCopy = nums.toList\n        numsCopy.foreach(x => {\n            if (x >\
    \ 10 && x % 2 == 1 && x % 2 == 0) {\n                numsCopy.remove(x)\n    \
    \        }\n        })\n        numsCopy.size", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        var count = 0\n        var last = 0\n        var first = 0\n        for(i\
    \ <- nums) {\n            if(i.toLong > 10) {\n                count += 1\n  \
    \              last = i.toLong\n                first = i.toLong\n           \
    \ }\n        }\n        if(count > 0 && first % 2 == 0 && last % 2 == 1) {\n \
    \           return count\n        }\n        return 0", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size", "       \
    \ var count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 ==\
    \ 1 && i % 2 != 0) {\n                count += 1\n            }\n        }\n \
    \       count", "        val numsSorted = nums.sortWith(_ < _)\n        val oddNums\
    \ = numsSorted.filter(_ % 2 == 1)\n        val evenNums = numsSorted.filter(_\
    \ % 2 == 0)\n        val firstOddNum = oddNums.head\n        val lastOddNum =\
    \ oddNums.last\n        val firstEvenNum = evenNums.head\n        val lastEvenNum\
    \ = evenNums.last\n        val firstOddAndEvenNum = firstOddNum :: firstEvenNum\
    \ :: lastOddNum :: lastEvenNum\n        val firstOddAndEvenNumSorted = firstOddAndEvenNum.sortWith(_\
    \ < _)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSorted.length\n\
    \        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 1)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 0)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ < 10)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ > 10)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 1)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 0)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ < 10)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ > 10)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 1)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 0)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ < 10)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ > 10)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 1)\n        val firstOddAndEvenNumSortedLength = firstOddAndEvenNumSortedLength.filter(_\
    \ % 2 == 0)\n        val first", "        var count = 0\n        for (i <- 0 until\
    \ nums.size) {\n            if (nums(i) > 10) {\n                if (nums(i) %\
    \ 2 == 1 && nums(i) != nums(i)) {\n                    count += 1\n          \
    \      }\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(x => x > 10 && numsCopy.head\
    \ % 2 == 1 && numsCopy.last % 2 == 1).length", "        var count = 0\n      \
    \  for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0) {\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 =\
    \ numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        var lastOdd = 0\n        var firstOdd\
    \ = 0\n        for (i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if (num > 10) {\n                count += 1\n                if (num\
    \ % 2 == 1) {\n                    firstOdd += 1\n                } else {\n \
    \                   lastOdd += 1\n                }\n            }\n        }\n\
    \        (firstOdd + lastOdd)", '        nums.filter(x => x > 10 && x % 2 != 0
    && x % 2 != 1).length', "        val numsCopy = nums.toList\n        var count\
    \ = 0\n        var lastOdd = false\n        var firstOdd = false\n        for(i\
    \ <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n           \
    \ if(num > 10) {\n                count += 1\n                if(num % 2 == 0)\
    \ {\n                    lastOdd = true\n                } else {\n          \
    \          firstOdd = true\n                }\n            }\n        }\n    \
    \    if(count == 0) {\n            return 0\n        }\n        if(firstOdd &&\
    \ lastOdd) {\n            return count\n        }\n        if(firstOdd && !lastOdd)\
    \ {\n            return count + 1\n        }\n        if(!firstOdd && lastOdd)\
    \ {\n            return count + 1\n        }\n        return count", "       \
    \ val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n\
    \        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length",
  "        val numsCopy = nums.toList\n        var count = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            if(num > 10)\
    \ {\n                val firstDigit = num / 10\n                val lastDigit\
    \ = num % 10\n                if(firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count", "        val numsCopy = nums.toList\n        var count = 0\n\
    \        for (i <- 0 until numsCopy.size) {\n            if (numsCopy(i) > 10)\
    \ {\n                if (numsCopy(i) %% 2 == 1) {\n                    if (numsCopy(i)\
    \ < (numsCopy(i) / 2)) count += 1\n                }\n            }\n        }\n\
    \        count", "        val numsCopy = nums.toList\n        var count = 0\n\
    \        for(i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if(num > 10) {\n                if(num % 2 == 1 && num % 2 == 0)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count", "        val numsCopy = nums.toList\n        var count =\
    \ 0\n        var firstOdd = 0\n        var lastOdd = 0\n        for(i <- 0 until\
    \ numsCopy.size) {\n            val num = numsCopy(i)\n            val firstDigit\
    \ = num / 10\n            val lastDigit = num % 10\n            val firstOddDigit\
    \ = firstDigit % 2\n            val lastOddDigit = lastDigit % 2\n           \
    \ if(firstOddDigit && lastOddDigit) {\n                count += 1\n          \
    \  }\n            if(firstOddDigit && !lastOddDigit) {\n                count\
    \ += 1\n                firstOdd += 1\n            }\n            if(!firstOddDigit\
    \ && lastOddDigit) {\n                count += 1\n                lastOdd += 1\n\
    \            }\n        }\n        count + (firstOdd * 2) + (lastOdd * 2)", '        nums.filter(_
    > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size', "        var count = 0\n  \
    \      var last = 0\n        var first = 0\n        for (i <- nums) {\n      \
    \      if (i > 10) {\n                if (i % 2 == 0) {\n                    if\
    \ (first % 2 == 0) {\n                        count += 1\n                   \
    \ }\n                    first = i\n                } else {\n               \
    \     if (last % 2 == 0) {\n                        count += 1\n             \
    \       }\n                    last = i\n                }\n            }\n  \
    \      }\n        count", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        numsCopy5.size", "        var count = 0\n        for (i <- nums)\
    \ {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ %\
    \ 2 == 0)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 1).filter(_ % 2 == 0)\n\
    \        val numsCopy5 = numsCopy4.filter(_ % 2 == 1).filter(_ % 2 == 0)\n   \
    \     val numsCopy6 = numsCopy5.filter(_ % 2 == 1).filter(_ % 2 == 0)\n      \
    \  val numsCopy7 = numsCopy6.filter(_ % 2 == 1).filter(_ % 2 == 0)\n        val\
    \ numsCopy8 = numsCopy7.filter(_ % 2 == 1).filter(_ % 2 == 0)\n        val numsCopy9\
    \ = numsCopy8.filter(_ % 2 == 1).filter(_ % 2 == 0)\n        val numsCopy10 =\
    \ numsCopy9.filter(_ % 2 == 1).filter(_ % 2 == 0)\n        numsCopy10.size", " \
    \       val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n        \
    \    if (x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2 == 1) numsCopy.remove(x)\n\
    \        })\n        numsCopy.size", '        nums.filter(num => num > 10).count(num
    => num % 2 == 1 && num % 2 == 0)', "        val numsCopy = nums.toList\n     \
    \   var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n       \
    \ var firstEven = 0\n        var lastEven = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if (num > 10) {\n        \
    \        count += 1\n                if (num % 2 == 0) {\n                   \
    \ firstEven += 1\n                } else {\n                    firstOdd += 1\n\
    \                }\n                if (num % 2 == 0) {\n                    lastEven\
    \ += 1\n                } else {\n                    lastOdd += 1\n         \
    \       }\n            }\n        }\n        (count * 2)", "        var count\
    \ = 0\n        var firstOdd = false\n        var lastOdd = false\n        for(i\
    \ <- 0 until nums.size) {\n            val num = nums(i)\n            if(num >\
    \ 10) {\n                if(firstOdd) {\n                    if(lastOdd) {\n \
    \                       count += 1\n                    }\n                  \
    \  firstOdd = false\n                    lastOdd = false\n                } else\
    \ {\n                    firstOdd = true\n                    lastOdd = false\n\
    \                }\n            } else {\n                lastOdd = true\n   \
    \         }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.foreach(num => {\n            val firstDigit = num / 10\n  \
    \          val lastDigit = num % 10\n            if (firstDigit % 2 == 1 && lastDigit\
    \ % 2 == 1)\n                numsCopy.remove(num)\n        })\n        numsCopy.size",
  '        nums.count(x => x > 10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(nums.length
    - 1).toInt == 1)', "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n        numsCopy5.size",
  "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ %\
    \ 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n    \
    \    val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        numsCopy2.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n\
    \        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 == 1)\n       \
    \ numsCopy4.size", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 != 0)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", '        nums.filter(x => x > 10 && x.toString.charAt(0).toChar
    % 2 == 1 && x.toString.charAt(x.toString.length-1).toChar % 2 == 1).length', " \
    \       val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        val numsCopy5 = numsCopy4.filter(_ %\
    \ 2 != 0)\n        numsCopy5.size", '        nums.count(x => x > 10 && nums(x)
    % 2 == 1 && nums(x) % 2 == 0)', "        val numsCopy = nums.toList\n        var\
    \ count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n        var firstEven\
    \ = 0\n        var lastEven = 0\n        for (i <- numsCopy) {\n            if\
    \ (i % 2 == 0) {\n                firstEven = i\n            }\n            if\
    \ (i % 2 == 1) {\n                lastEven = i\n            }\n            if\
    \ (i % 10 > 0) {\n                count += 1\n            }\n            if (i\
    \ % 10 < 0 && (i % 10 == 0 || i % 10 == 1)) {\n                count += 1\n  \
    \          }\n            if (i % 10 > 0 && i % 10 < 1 && (i % 10 == 0 || i %\
    \ 10 == 1)) {\n                count += 1\n            }\n            if (i %\
    \ 10 > 0 && i % 10 < 1 && i % 10 != 0) {\n                count += 1\n       \
    \     }\n            if (i % 10 < 0 && i % 10 != 0) {\n                count +=\
    \ 1\n            }\n            if (i % 10 < 0 && i % 10 != 1) {\n           \
    \     count += 1\n            }\n            if (i % 10 > 1 && i % 10 != 1) {\n\
    \                count += 1\n            }\n            if (i % 10 > 1 && i %\
    \ 10 != 0) {\n                count += 1\n            }\n            if (i % 10\
    \ == 0 && i % 10 != 1) {\n                count += 1\n            }\n        \
    \    if (i % 10 == 1 && i % 10 != 0) {\n                count += 1\n         \
    \   }\n            if (i % 10 == 1 && i % 10 != 1) {\n                count +=\
    \ 1\n            }\n            if (i % 10 == 1 && i % 10 != 0) {\n          \
    \      count += 1\n            }\n            if (i % 10 == 0 && i % 10 == 1)\
    \ {\n                count += 1\n            }\n            if (i % 10 == 1 &&\
    \ i % 10 == 1) {\n                count += 1\n            }\n            if (i\
    \ % 10 == 1 && i % 10 == 0) {\n                count += 1\n            }\n   \
    \         if (i % 10 == 0 && i % 10 == 0) {\n                count += 1\n    \
    \        }\n            if (i % 10 == 1 && i % 10 == 1) {\n                count\
    \ += 1\n            }\n            if (i % 10 == 1 && i % 10 == 0) {\n       \
    \         count += 1\n            }\n            if (i % 10 == 0 && i % 10 ==\
    \ 0) {\n                count += 1\n            }\n            if (i % 10 == 1\
    \ && i % 10 == 1) {\n                count += 1\n            }\n            if\
    \ (i % 10 == 1 && i % 10 == 0) {\n                count += 1\n            }\n\
    \            if (i % 10 == 0 && i % 10 == 0) {\n                count += 1\n \
    \           }\n            if (i % 10 == 1 && i % 10 == 1) {\n               \
    \ count += 1\n            }\n            if (i % 10 == 1 && i % 10 == 0) {\n \
    \               count += 1\n            }\n            if (i % 10 == 0 && i %\
    \ 10 == 0) {\n                count += 1\n            }\n            if (i % 10\
    \ == 1 && i % 10 == 1) {\n                count += 1\n            }\n        \
    \    if (i % 10 == 1 && i % 10 == 0) {\n                count += 1\n         \
    \   }\n            if (i % 10 == 0 && i % 10 == 0) {\n                count +=\
    \ 1\n            }\n            if (i % 10 == 1 && i % 10 == 1) {\n          \
    \      count += 1\n            }\n            if (i % 10", "        val numsCopy\
    \ = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ %\
    \ 2 == 0).size", "        var count = 0\n        var last = 0\n        var first\
    \ = 0\n        for (i <- nums) {\n            if (i > 10) {\n                count\
    \ += 1\n                if (last % 2 == 1) {\n                    first += 1\n\
    \                }\n            }\n            last = i\n        }\n        count\
    \ + first", "        val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_\
    \ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n  \
    \      var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n    \
    \    var firstEven = 0\n        var lastEven = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if (num > 10) {\n        \
    \        count += 1\n                if (num % 2 == 0) {\n                   \
    \ firstEven += 1\n                } else {\n                    firstOdd += 1\n\
    \                }\n                if (num % 2 == 0) {\n                    lastEven\
    \ += 1\n                } else {\n                    lastOdd += 1\n         \
    \       }\n            }\n        }\n        (count * 2)", "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2 == 1 && i %\
    \ 2 != 0) {\n                count += 1\n            }\n        }\n        count",
  "        val numsSorted = nums.sortWith(_ < _)\n        val evens = numsSorted.filter(_\
    \ % 2 == 0)\n        val odds = numsSorted.filter(_ % 2 == 1)\n        val firstOdds\
    \ = odds.filter(_ % 2 == 0)\n        val lastOdds = odds.filter(_ % 2 == 1)\n\
    \        val firstEvens = evens.filter(_ % 2 == 0)\n        val lastEvens = evens.filter(_\
    \ % 2 == 1)\n        val firstOddsEvens = firstOdds.filter(x => firstEvens.contains(x))\n\
    \        val lastOddsEvens = lastOdds.filter(x => lastEvens.contains(x))\n   \
    \     val firstEvensOdds = firstEvens.filter(x => firstOdds.contains(x))\n   \
    \     val lastEvensOdds = lastEvens.filter(x => lastOdds.contains(x))\n      \
    \  val firstOddsEvensOdds = firstOddsEvens.filter(x => firstEvensOdds.contains(x))\n\
    \        val lastOddsEvensOdds = lastOddsEvens.filter(x => lastEvensOdds.contains(x))\n\
    \        val firstEvensOddsEvensOdds = firstEvensOddsEvens.filter(x => firstEvensOddsEvens.contains(x))\n\
    \        val lastEvensOddsEvensOdds = lastEvensOddsEvens.filter(x => lastEvensOddsEvens.contains(x))\n\
    \        val firstEvensOddsEvensOddsEvensOdds = firstEvensOddsEvensOdds.filter(x\
    \ => firstEvensOddsEvensOdds.contains(x))\n        val lastEvensOddsEvensOddsEvensOdds\
    \ = lastEvensOddsEvensOdds.filter(x => lastEvensOddsEvensOdds.contains(x))\n \
    \       val firstEvensOddsEvensOddsEvensOddsEvensOdds = firstEvensOddsEvensOddsEvensOdds.filter(x\
    \ => firstEvensOddsEvensOddsEvensOdds.contains(x))\n        val lastEvensOddsEvensOddsEvensOddsEvensOdds\
    \ = lastEvensOddsEvensOddsEvensOddsEvensOdds.filter(x => lastEvens", '        nums.count(x
    => x > 10 && nums.take(1).forall(y => y % 2 != 0))', "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(x => x > 10 && numsCopy.last.asInstanceOf[Int] % 2 ==\
    \ 1 && numsCopy.head.asInstanceOf[Int] % 2 == 1).length", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if (num > 10) {\n        \
    \        if (numsCopy(i-1) % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2\
    \ == 1) {\n                    if (numsCopy(i) < (numsCopy(i) / 2)) count += 1\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0\n        for(i <- 0 until nums.size) {\n            if(nums(i) > 10 && nums(i).isOdd\
    \ && nums(i).isOdd && nums(i).isOdd) {\n                count += 1\n         \
    \   }\n        }\n        count", "        var count = 0\n        for (i <- 0\
    \ until nums.size) {\n            if (nums(i) > 10) {\n                if (nums(i)\
    \ % 2 == 1 && nums(i) != nums(i)) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        val numsCopy =\
    \ nums.toList\n        var count = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10) {\n         \
    \       val firstDigit = num / 10\n                val lastDigit = num % 10\n\
    \                if(firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n        }\n        count",
  "        val numsCopy = nums.toList\n        var count = 0\n        var last = 0\n\
    \        var first = 0\n        for(i <- 0 until numsCopy.size) {\n          \
    \  val num = numsCopy(i)\n            if(num > 10) {\n                count +=\
    \ 1\n                if(last % 2 == 1) {\n                    first += 1\n   \
    \             }\n                last = num\n            }\n        }\n      \
    \  count", "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        var count\
    \ = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i) > 10) {\n\
    \                if (nums(i) % 2 == 1 && nums(i) != nums(i)) {\n             \
    \       count += 1\n                }\n            }\n        }\n        count",
  "        var count = 0\n        for (i <- nums) {\n            if (i > 10 && i %\
    \ 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n        numsCopy5.size",
  "        var count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i)\
    \ > 10) {\n                if (nums(i) % 2 == 1 && nums(i) != nums(i)) {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      count", "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_\
    \ % 2 == 0)\n        numsCopy4.size", "        var count = 0\n        for (i <-\
    \ nums) {\n            if (i > 10 && i % 2 == 1 && i % 2 == 0) {\n           \
    \     count += 1\n            }\n        }\n        count", "        var count\
    \ = 0\n        var last = 0\n        var first = 0\n        for (i <- nums) {\n\
    \            if (i > 10) {\n                count += 1\n                if (last\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \     if (first % 2 == 1) {\n                    count += 1\n                }\n\
    \            }\n            last = i\n        }\n        count", "        var\
    \ count = 0\n        var lastDigit = 0\n        var firstDigit = 0\n        for\
    \ (i <- 0 until nums.size) {\n            val num = nums(i)\n            if (num\
    \ > 10) {\n                count += 1\n                lastDigit = num % 10\n\
    \                firstDigit = num / 10\n            }\n        }\n        if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1) {\n            count += 1\n        }\n     \
    \   count", "        val numsSorted = nums.sortWith(_ < _)\n        val even =\
    \ numsSorted.filter(_ % 2 == 0)\n        val odd = numsSorted.filter(_ % 2 !=\
    \ 0)\n        val firstOdd = odd.head\n        val lastOdd = odd.last\n      \
    \  val firstEven = even.head\n        val lastEven = even.last\n        val firstOddEven\
    \ = firstOdd * lastEven\n        val firstEvenOdd = firstEven * lastOdd\n    \
    \    val firstOddEvenOdd = firstOddEven * lastOdd\n        val firstEvenOddEven\
    \ = firstEvenOdd * lastEven\n        val firstOddEvenOddEven = firstOddEvenOdd\
    \ * lastEven\n        val firstEvenOddEvenOddEven = firstEvenOddEvenOdd * lastOdd\n\
    \        val firstOddEvenOddEvenOddEven = firstOddEvenOddEvenOdd\n        val\
    \ firstEvenOddEvenOddEvenOddEven = firstEvenOddEvenOddEvenOddEven * lastEven\n\
    \        val firstOddEvenOddEvenOddEvenOddEven = firstOddEvenOddEvenOddEvenOddEven\
    \ * lastOdd\n        val firstEvenOddEvenOddEvenOddEvenOddEven = firstEvenOddEvenOddEvenOddEvenOddEven\
    \ * lastEvenOdd\n        val firstOddEvenOddEvenOddEvenOddEvenOddEven = firstOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * lastOddEven\n        val firstEvenOddEvenOddEvenOddEvenOddEvenOddEven = firstEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * lastEvenOddEven\n        val firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = firstOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * lastOddEvenOdd\n       \
    \ val firstEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = firstEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * lastEvenOddEvenOddEven\n        val firstOddEvenOddEvenOddEvenOddEven", '        nums.count(x
    => x > 10 && nums(x).toLong % 2 == 1 && nums(x).toLong % 2 == 1)', "        var\
    \ count = 0\n        for(i <- nums) {\n            if(i.toString.length > 1 &&\
    \ i.toString.charAt(0).toInt == 1 && i.toString.charAt(i).toInt == 1) {\n    \
    \            count += 1\n            }\n        }\n        count", "        val\
    \ numsCopy = nums.toList\n        var count = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            if (numsCopy(i) > 10) {\n                if (numsCopy(i) %% 2\
    \ == 1) {\n                    if (numsCopy(i) < (numsCopy(i) / 2)) {\n      \
    \                  count += 1\n                    }\n                }\n    \
    \        }\n        }\n        count", "        val numsCopy = nums.toList\n \
    \       var count = 0\n        for(i <- 0 until numsCopy.size) {\n           \
    \ val num = numsCopy(i)\n            if(num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd)\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       val numsSorted = nums.sortWith(_ < _)\n        val evens = numsSorted.filter(x\
    \ => x % 2 == 0)\n        val odds = numsSorted.filter(x => x % 2 == 1)\n    \
    \    val firstOdds = evens.takeWhile(x => x % 2 == 1).length\n        val lastOdds\
    \ = evens.drop(evens.length - firstOdds).takeWhile(x => x % 2 == 1).length\n \
    \       val firstEvens = evens.takeWhile(x => x % 2 == 0).length\n        val\
    \ lastEvens = evens.drop(evens.length - firstEvens).takeWhile(x => x % 2 == 0).length\n\
    \        val firstOddsEvens = evens.takeWhile(x => x % 2 == 1 && x % 2 == 0).length\n\
    \        val lastOddsEvens = evens.drop(evens.length - firstOddsEvens).takeWhile(x\
    \ => x % 2 == 1 && x % 2 == 0).length\n        val firstEvensEvens = evens.takeWhile(x\
    \ => x % 2 == 0 && x % 2 == 1).length\n        val lastEvensEvens = evens.drop(evens.length\
    \ - firstEvensEvens).takeWhile(x => x % 2 == 0 && x % 2 == 1).length\n       \
    \ val firstOddsOdds = evens.takeWhile(x => x % 2 == 1 && x % 2 == 1).length\n\
    \        val lastOddsOdds = evens.drop(evens.length - firstOddsOdds).takeWhile(x\
    \ => x % 2 == 1 && x % 2 == 1).length\n        val firstEvensOdds = evens.takeWhile(x\
    \ => x % 2 == 0 && x % 2 == 1).length\n        val lastEvensOdds = evens.drop(evens.length\
    \ - firstEvensOdds).takeWhile(x => x % 2 == 0 && x % 2 == 1).length\n        val\
    \ firstOddsEvensOdds = evens.takeWhile(x => x % 2 == 1 && x % 2 == 1).length\n\
    \        val lastOddsEvensOdds = evens.drop(evens.length - firstOddsEvensOdds).takeWhile(x\
    \ => x % 2 == 1 && x % 2 == 1).length\n        val firstEvensEvensOdds = evens.takeWhile(x\
    \ => x % 2 == 0 && x % 2 == 1).length\n        val lastEvensEvensOdds = evens.drop(evens.length\
    \ - firstEvensEvensOdds).takeWhile(x => x % 2 == ", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  "        val numsCopy = nums.toList\n        numsCopy.foreach(x => {\n         \
    \   if (x > 10) {\n                if (x % 2 == 0) {\n                    if (x\
    \ % 2 != 0) {\n                        numsCopy.remove(x)\n                  \
    \  }\n                }\n            }\n        })\n        numsCopy.size", " \
    \       val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_ % 2 ==\
    \ 0)\n        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n        val numsCopy6 = numsCopy5.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy7 = numsCopy6.filter(_ % 2 ==\
    \ 0)\n        val numsCopy8 = numsCopy7.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy9 = numsCopy8.filter(_ % 2 == 0)\n        val numsCopy10 =\
    \ numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n        numsCopy10.size", "   \
    \     val numsCopy = nums.toList\n        numsCopy.filter(_ > 10).filter(_ % 2\
    \ == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n      \
    \  numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "    \
    \    var count = 0\n        for (i <- nums) {\n            if (i > 10 && i % 2\
    \ == 1 && i % 2 != 0) {\n                count += 1\n            }\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.charAt(0).toInt
    == 1 && x.toString.charAt(x.toString.length - 1).toInt == 1).length', "      \
    \  var count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i)\
    \ > 10) {\n                if (nums(i) % 2 == 1 && nums(i) != nums(i)) {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      count", "        var count = 0\n        for (i <- nums) {\n           \
    \ if (i > 10) {\n                if (i % 2 == 1) {\n                    if (i\
    \ % 2 == 0) {\n                        if (i % 2 == 1) {\n                   \
    \         if (i % 2 == 0) {\n                                count += 1\n    \
    \                        }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        count", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        var last = 0\n        var first\
    \ = 0\n        for(i <- 0 until numsCopy.size) {\n            val num = numsCopy(i)\n\
    \            if(num > 10) {\n                if(numsCopy(i-1) % 2 == 1 && numsCopy(i+1)\
    \ % 2 == 1) {\n                    count += 1\n                }\n           \
    \ }\n            first = numsCopy(i-1)\n            last = numsCopy(i)\n     \
    \   }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 != 0)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        numsCopy3.size", "        var count = 0\n        var lastDigit\
    \ = 0\n        var firstDigit = 0\n        for(i <- nums) {\n            if(i.toLong\
    \ > 10) {\n                count += 1\n                lastDigit = i.toLong %\
    \ 10\n                firstDigit = i.toLong / 10\n            }\n        }\n \
    \       if(firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n            count +=\
    \ 1\n        }\n        count", "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", '        nums.count(_
    > 10) && (nums.takeWhile(_ % 2 == 1).takeWhile(_ % 2 == 1).length == nums.length)',
  '        nums.filter(x => x > 10).count(x => x.toString.charAt(0) % 2 != 0 && x.toString.charAt(x.toString.length
    - 1) % 2 != 0)', "        var count = 0\n        var firstOdd = false\n      \
    \  var lastOdd = false\n        for (i <- 0 until nums.length) {\n           \
    \ if (nums(i) > 10) {\n                if (firstOdd) {\n                    lastOdd\
    \ = false\n                } else {\n                    firstOdd = true\n   \
    \             }\n                count += 1\n            } else if (nums(i) <\
    \ 10) {\n                if (lastOdd) {\n                    firstOdd = false\n\
    \                } else {\n                    lastOdd = true\n              \
    \  }\n            }\n        }\n        count", "        var count = 0\n     \
    \   for(i <- 0 until nums.size) {\n            val num = nums(i)\n           \
    \ if(num > 10 && num % 2 == 1 && num % 2 == 0) {\n                count += 1\n\
    \            }\n        }\n        count", '        nums.count(x => x > 10 &&
    x.toString.charAt(0).toInt == 1 && x.toString.charAt(nums.length - 1).toInt ==
    1)', '        nums.count(x => x > 10) && (nums.takeWhile(x => x % 2 == 1).last.isOdd()
    && nums.takeWhile(x => x % 2 == 1).head.isOdd)', "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size",
  '        nums.filter(x => x > 10 && x.toString.charAt(0) % 2 == 1 && x.toString.charAt(nums.length
    - 1) % 2 == 1).length', "        var count = 0\n        var firstOdd = false\n\
    \        var lastOdd = false\n        var firstEven = false\n        var lastEven\
    \ = false\n        for (i <- 0 until nums.size) {\n            if (nums(i) > 10)\
    \ {\n                if (firstOdd && lastOdd) {\n                    count +=\
    \ 1\n                }\n                if (firstEven && lastEven) {\n       \
    \             count += 1\n                }\n                firstOdd = false\n\
    \                lastOdd = false\n                firstEven = false\n        \
    \        lastEven = false\n            } else {\n                if (nums(i) %\
    \ 2 == 0) {\n                    firstEven = true\n                } else {\n\
    \                    firstOdd = true\n                }\n                if (nums(i)\
    \ % 2 == 0) {\n                    lastEven = true\n                } else {\n\
    \                    lastOdd = true\n                }\n            }\n      \
    \  }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 !=\
    \ 0)\n        val numsCopy4 = numsCopy3.filter(_ % 2 != 0)\n        numsCopy4.size",
  "        val numsCopy = nums.toList\n        var count = 0\n        var firstOdd\
    \ = 0\n        var lastOdd = 0\n        for(i <- 0 until numsCopy.size) {\n  \
    \          val num = numsCopy(i)\n            val firstDigit = num / 10\n    \
    \        val lastDigit = num % 10\n            if(firstDigit % 2 == 1) {\n   \
    \             firstOdd = 1\n            }\n            if(lastDigit % 2 == 1)\
    \ {\n                lastOdd = 1\n            }\n            if(firstOdd && lastOdd)\
    \ {\n                count += 1\n            }\n        }\n        count", '        nums.filter(_
    > 10).filter(_ % 2 == 1).filter(_ % 2 == 1).length', "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        numsCopy3.length", '        nums.count(x => x > 10 && nums.take(1).forall(y
    => y % 2 != 0))', '        nums.count(x => x > 10 && nums(x) % 2 == 1 && nums(x)
    % 2 == 0)', '        nums.filter(x => x > 10).count(x => x % 2 == 1 && x % 3 ==
    1)', "        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(x\
    \ => x.toString.toInt%2 == 1)\n        val evens = numsSorted.filter(x => x.toString.toInt%2\
    \ == 0)\n        val firstOdds = evens.filter(x => x.toString.toInt%2 == 1)\n\
    \        val lastOdds = evens.filter(x => x.toString.toInt%2 == 0)\n        val\
    \ firstEvens = odds.filter(x => x.toString.toInt%2 == 1)\n        val lastEvens\
    \ = odds.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvens = firstOdds.filter(x\
    \ => x.toString.toInt%2 == 1)\n        val lastOddsEvens = lastOdds.filter(x =>\
    \ x.toString.toInt%2 == 0)\n        val firstEvensOdds = firstEvens.filter(x =>\
    \ x.toString.toInt%2 == 1)\n        val lastEvensOdds = lastEvens.filter(x =>\
    \ x.toString.toInt%2 == 0)\n        val firstOddsEvensOdds = firstOddsEvens.filter(x\
    \ => x.toString.toInt%2 == 1)\n        val lastOddsEvensOdds = lastOddsEvens.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val firstEvensOddsEvensOdds = firstEvensOdds.filter(x\
    \ => x.toString.toInt%2 == 1)\n        val lastEvensOddsEvensOdds = lastEvensOdds.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val firstOddsEvensOddsEvensOdds = firstOddsEvensOdds.filter(x\
    \ => x.toString.toInt%2 == 1)\n        val lastOddsEvensOddsEvensOdds = lastOddsEvensOdds.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val firstEvensOddsEvensOddsEvensOdds =\
    \ firstEvensOddsEvensOdds.filter(x => x.toString.toInt%2 == 1)\n        val lastEvensOddsEvensOddsEvensOdds\
    \ = lastEvensOddsEvensOdds.filter(x => x.toString.toInt%2 == 0)\n        val firstOddsEvensO",
  "        var count = 0\n        var firstOdd = false\n        var lastOdd = false\n\
    \        for (i <- nums) {\n            if (i % 2 == 0) {\n                count\
    \ += 1\n                if (i % 2 == 1) {\n                    firstOdd = true\n\
    \                }\n                if (i % 2 == 0) {\n                    lastOdd\
    \ = true\n                }\n            }\n        }\n        if (firstOdd &&\
    \ lastOdd) {\n            count += 1\n        }\n        count", "        val\
    \ numsCopy = nums.toList\n        numsCopy.foreach(x => if (x > 10 && x % 2 ==\
    \ 1 && x % 2 == 0) numsCopy.remove(x))\n        numsCopy.size", "        val numsCopy\
    \ = nums.toList\n        var count = 0\n        for(i <- 0 until numsCopy.size)\
    \ {\n            val num = numsCopy(i)\n            if(num > 10 && numsCopy(i).isOdd()\
    \ && numsCopy(i).isOdd()) {\n                count += 1\n            }\n     \
    \   }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        numsCopy3.length", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 != 0)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size", "       \
    \ var count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i)\
    \ > 10) {\n                if (nums(i) % 2 == 1 && nums(i) != nums(i)) {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      count", "        val numsCopy = nums.toList\n        numsCopy.foreach(x\
    \ => {\n            if (x > 10 && numsCopy.head % 2 == 1 && numsCopy.last % 2\
    \ == 1) {\n                numsCopy.remove(x)\n            }\n        })\n   \
    \     numsCopy.size", "        var count = 0\n        var last = 0\n        var\
    \ first = 0\n        for (i <- nums) {\n            if (i > 10) {\n          \
    \      count += 1\n                if (last % 2 == 1) {\n                    count\
    \ += 1\n                }\n                if (first % 2 == 1) {\n           \
    \         count += 1\n                }\n            }\n            last = i\n\
    \        }\n        count", "        val numsSorted = nums.sortWith(_ < _)\n \
    \       val even = numsSorted.filter(_ % 2 == 0)\n        val odd = numsSorted.filter(_\
    \ % 2 == 1)\n        val firstOdd = odd.takeWhile(_ < 10)\n        val lastOdd\
    \ = odd.dropWhile(_ < 10)\n        val firstEven = even.takeWhile(_ < 10)\n  \
    \      val lastEven = even.dropWhile(_ < 10)\n        val firstOddAndEven = firstOdd\
    \ ++ firstEven\n        val lastOddAndEven = lastOdd ++ lastEven\n        val\
    \ firstOddAndEvenCount = firstOddAndEven.count(_ > 10)\n        val lastOddAndEvenCount\
    \ = lastOddAndEven.count(_ > 10)\n        val firstOddAndEvenCountAndLastOddAndEvenCount\
    \ = firstOddAndEvenCount * lastOddAndEvenCount\n        val firstOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCount\
    \ = firstOddAndEvenCountAndLastOddAndEvenCount * lastOddAndEvenCountAndLastOddAndEvenCount\n\
    \        val firstOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCount\
    \ = firstOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCount\n\
    \        val firstOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCountAndLastOddAndEvenCount",
  "        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n    \
    \    for (i <- nums) {\n            if (i % 2 == 0) {\n                count +=\
    \ 1\n                if (i % 2 == 1) {\n                    firstOdd += 1\n  \
    \              }\n                if (i % 2 == 0) {\n                    lastOdd\
    \ += 1\n                }\n            }\n        }\n        if (count > 0 &&\
    \ firstOdd % 2 == 1 && lastOdd % 2 == 1) {\n            count\n        } else\
    \ {\n            0\n        }", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        val numsCopy = nums.toList\n\
    \        val numsCopy2 = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 ==\
    \ 0)\n        val numsCopy6 = numsCopy5.filter(_ > 10).filter(_ % 2 == 1)\n  \
    \      val numsCopy7 = numsCopy6.filter(_ % 2 == 0)\n        val numsCopy8 = numsCopy7.filter(_\
    \ > 10).filter(_ % 2 == 1)\n        val numsCopy9 = numsCopy8.filter(_ % 2 ==\
    \ 0)\n        val numsCopy10 = numsCopy9.filter(_ > 10).filter(_ % 2 == 1)\n \
    \       val numsCopy11 = numsCopy10.filter(_ % 2 == 0)\n        val numsCopy12\
    \ = numsCopy11.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy13 = numsCopy12.filter(_\
    \ % 2 == 0)\n        val numsCopy14 = numsCopy13.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy15 = numsCopy14.filter(_ % 2 == 0)\n        val numsCopy16\
    \ = numsCopy15.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy17 = numsCopy16.filter(_\
    \ % 2 == 0)\n        val numsCopy18 = numsCopy17.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy19 = numsCopy18.filter(_ % 2 == 0)\n        val numsCopy20\
    \ = numsCopy19.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy21 = numsCopy20.filter(_\
    \ % 2 == 0)\n        val numsCopy22 = numsCopy21.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy23 = numsCopy22.filter(_ % 2 == 0)\n        val numsCopy24\
    \ = numsCopy23.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy25 = numsCopy24.filter(_\
    \ % 2 == 0)\n        val numsCopy26 = numsCopy25.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy27 = numsCopy26.filter(_ % 2 == 0)\n        val numsCopy",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length", "        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 10)\n        val\
    \ numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.length", "     \
    \   val numsSorted = nums.sortWith(_ < _)\n        val even = numsSorted.filter(x\
    \ => x % 2 == 0)\n        val odd = numsSorted.filter(x => x % 2 != 0)\n     \
    \   val firstOdd = odd.takeWhile(x => x % 2 == 1)\n        val lastOdd = odd.drop(1).takeWhile(x\
    \ => x % 2 == 1)\n        val firstEven = even.takeWhile(x => x % 2 == 0)\n  \
    \      val lastEven = even.drop(1).takeWhile(x => x % 2 == 0)\n        val firstOddEven\
    \ = firstOdd ++ firstEven\n        val lastOddEven = lastOdd ++ lastEven\n   \
    \     val firstOddEvenLastOdd = firstOddEven ++ lastOdd\n        val lastOddEvenFirstOdd\
    \ = lastOddEven ++ firstOdd\n        val firstOddEvenLastOddEven = firstOddEvenLastOdd\
    \ ++ lastOddEvenFirstOdd\n        val lastOddEvenFirstOddEvenLastOdd = lastOddEvenFirstOddEven\
    \ ++ firstOddEvenLastOdd\n        val firstOddEvenLastOddEvenLastOddEven = firstOddEvenLastOddEvenLastOdd\
    \ ++ lastOddEvenFirstOddEvenLastOdd\n        val lastOddEvenFirstOddEvenLastOddEvenLastOdd\
    \ = lastOddEvenFirstOddEvenLastOddEven ++ firstOddEvenLastOddEvenLastOddEven\n\
    \        val firstOddEvenLastOddEvenLastOddEvenLastOddEven = firstOddEvenLastOddEvenLastOddEvenLastOdd\
    \ ++ lastOddEvenFirstOddEvenLastOddEvenLastOdd\n        val lastOddEvenFirstOddEvenLastOddEvenLastOddEvenLastOdd\
    \ = lastOddEvenFirstOddEvenLastOddEvenLastOddEven ++ firstOddEvenLastOddEvenLastOddEvenLastOddEven\n\
    \        val firstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOddEven = firstOddEvenLastOddEvenLastOddEvenLastOddEvenLastOdd\
    \ ++ lastOddEvenFirstOddEvenLastOddEvenLastOddEvenLastOddEven\n        val lastOddEvenFirstOddEven",
  "        val numsCopy = nums.toList\n        var count = 0\n        for (i <- 0\
    \ until numsCopy.size) {\n            val num = numsCopy(i)\n            if (num\
    \ > 10 && num % 2 == 1 && numsCopy(i-1) % 2 == 1 && numsCopy(i+1) % 2 == 1) {\n\
    \                count += 1\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toChar % 2 == 1).length', '        nums.filter(x => x > 10 && x % 2 == 1
    && x % 2 == 0).size', "        val numsCopy = nums.toList\n        numsCopy.foreach(n\
    \ => {\n            if (n > 10 && n % 2 == 1 && n % 2 == 0) {\n              \
    \  numsCopy.remove(n)\n            }\n        })\n        numsCopy.size", "  \
    \      val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_ >\
    \ 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size", '        nums.filter(x
    => x > 10 && x % 2 == 1 && x % 2 == 0).length', '        nums.filter(x => x >
    10 && x.toString.charAt(0).toInt == 1 && x.toString.charAt(nums.length - 1).toInt
    == 1).length']
stop_tokens:
- "\n    }\n"
