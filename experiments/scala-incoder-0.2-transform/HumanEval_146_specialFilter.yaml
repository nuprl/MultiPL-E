name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an array of numbers as input and returns \n\
  \    // the number of elements in the array that are greater than 10 and both \n\
  \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        val numsSorted = nums.sortWith(_ < _)\n        val odds = numsSorted.filter(_\
    \ % 2 == 1)\n        val evens = numsSorted.filter(_ % 2 == 0)\n        val firstOdds\
    \ = evens.takeWhile(_ < 10)\n        val lastOdds = evens.dropWhile(_ < 10).reverse\n\
    \        val firstEvens = odds.takeWhile(_ < 10)\n        val lastEvens = odds.dropWhile(_\
    \ < 10).reverse\n        val firstOddsEvens = firstOdds.zip(lastEvens)\n     \
    \   val firstEvensOdds = firstEvens.zip(lastOdds)\n        val firstOddsEvensOdds\
    \ = firstOddsEvens.filter(_._1 % 2 == 1)\n        val firstEvensOddsOdds = firstEvensOdds.filter(_._1\
    \ % 2 == 0)\n        val firstOddsEvensOddsOdds = firstOddsEvensOdds.filter(_._2\
    \ % 2 == 1)\n        val firstEvensOddsOddsOdds = firstEvensOddsOdds.filter(_._2\
    \ % 2 == 0)\n        val firstOddsEvensOddsOddsOdds = firstOddsEvensOddsOdds.filter(_._3\
    \ % 2 == 1)\n        val firstEvensOddsOddsOddsOdds = firstEvensOddsOddsOdds.filter(_._3\
    \ % 2 == 0)\n        val firstOddsEvensOddsOddsOddsOdds = firstOddsEvensOddsOddsOdds.filter(_._4\
    \ % 2 == 1)\n        val firstEvensOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOdds.filter(_._4\
    \ % 2 == 0)\n        val firstOddsEvensOddsOddsOddsOddsOdds = firstOddsEvensOddsOddsOddsOdds.filter(_._5\
    \ % 2 == 1)\n        val firstEvensOddsOddsOddsOddsOddsOdds = firstEvensOddsOddsOddsOddsOddsOdds.filter(_._5\
    \ % 2 == 0)\n        val firstOdds", "        val numsCopy = nums.toList\n   \
    \     var count = 0\n        for (i <- 0 until numsCopy.size) {\n            val\
    \ num = numsCopy(i)\n            if (num > 10 && numsCopy(i).isOdd && numsCopy(i).isOdd\
    \ && numsCopy(i).isOdd) {\n                count += 1\n            }\n       \
    \ }\n        count", "        val numsCopy = nums.toList\n        val numsCopy2\
    \ = numsCopy.filter(_ > 10).filter(_ % 2 == 1)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 0)\n        val numsCopy4 = numsCopy3.filter(_ > 10).filter(_ % 2 ==\
    \ 1)\n        val numsCopy5 = numsCopy4.filter(_ % 2 == 0)\n        numsCopy5.size",
  "        var count = 0\n        var lastOdd = false\n        var firstOdd = false\n\
    \        var lastEven = false\n        var firstEven = false\n        for(i <-\
    \ 0 until nums.size) {\n            val num = nums(i)\n            if(num > 10)\
    \ {\n                if(lastOdd && firstOdd) {\n                    count += 1\n\
    \                }\n                if(lastEven && firstEven) {\n            \
    \        count += 1\n                }\n                if(num % 2 == 1) {\n \
    \                   lastEven = true\n                } else {\n              \
    \      lastOdd = true\n                }\n                if(num % 2 == 0) {\n\
    \                    firstEven = true\n                } else {\n            \
    \        firstOdd = true\n                }\n            }\n        }\n      \
    \  count", "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 != 0)\n        val numsCopy4\
    \ = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.length", "        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val even = numsSorted.filter(_ % 2 == 0)\n \
    \       val odd = numsSorted.filter(_ % 2 != 0)\n        val firstOdd = odd.takeWhile(_\
    \ < 10)\n        val lastOdd = odd.drop(10)\n        val firstEven = even.takeWhile(_\
    \ < 10)\n        val lastEven = even.drop(10)\n        val firstOddAndEven = firstOdd\
    \ ++ firstEven\n        val lastOddAndEven = lastOdd ++ lastEven\n        val\
    \ oddAndEven = firstOddAndEven ++ lastOddAndEven\n        oddAndEven.count(_ >\
    \ 10)", "        var count = 0\n        for (i <- nums) {\n            if (i >\
    \ 10 && i % 2 == 1 && i % 2 != 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        var count = 0\n        for (i <- 0 until\
    \ nums.size) {\n            if (nums(i) > 10) {\n                if (nums(i) %\
    \ 2 == 1 && nums(i-1) % 2 == 1) {\n                    count += 1\n          \
    \      }\n            }\n        }\n        count", "        var count = 0\n \
    \       var last = 0\n        var first = 0\n        for (i <- nums) {\n     \
    \       val n = i.toInt\n            if (n > 10) {\n                if (n % 2\
    \ == 0) {\n                    if (first % 2 == 0) {\n                       \
    \ count += 1\n                    }\n                    last = n\n          \
    \          first = n\n                }\n            }\n        }\n        count",
  "        var count = 0\n        var firstOdd = 0\n        var lastOdd = 0\n    \
    \    var firstEven = 0\n        var lastEven = 0\n        var first = 0\n    \
    \    var last = 0\n        for (i <- nums) {\n            if (i % 2 == 0) {\n\
    \                firstEven += 1\n            }\n            if (i % 2 == 1) {\n\
    \                lastEven += 1\n            }\n            if (i % 2 == 0) {\n\
    \                first += 1\n            }\n            if (i % 2 == 1) {\n  \
    \              last += 1\n            }\n        }\n        if (firstOdd > 0 &&\
    \ lastOdd > 0) {\n            count = firstOdd + lastOdd\n        } else if (firstEven\
    \ > 0 && lastEven > 0) {\n            count = firstEven + lastEven\n        }\
    \ else if (first > 0 && last > 0) {\n            count = first + last\n      \
    \  }\n        count", "        val numsCopy = nums.toList\n        numsCopy.filter(_\
    \ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size", "        var count = 0\n\
    \        for(i <- 0 until nums.size) {\n            val num = nums(i)\n      \
    \      if(num > 10 && num % 2 == 1 && num % 2 == 0) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val numsCopy = nums.toList\n\
    \        numsCopy.filter(_ > 10).filter(_ % 2 == 1).filter(_ % 2 == 0).size",
  '        nums.count(_ > 10) && nums.takeWhile(_ % 2 == 1).takeWhile(_ % 2 == 1).count(_
    % 2 == 1)', "        var count = 0\n        var lastDigit = 0\n        var firstDigit\
    \ = 0\n        for (i <- nums) {\n            if (i > 10) {\n                count\
    \ += 1\n                lastDigit = i\n            }\n            if (i % 2 ==\
    \ 1) {\n                firstDigit = i\n            }\n        }\n        if (count\
    \ == 0) {\n            return 0\n        }\n        if (lastDigit % 2 == 1) {\n\
    \            count += 1\n        }\n        if (firstDigit % 2 == 1) {\n     \
    \       count += 1\n        }\n        count", "        var count = 0\n      \
    \  for (i <- nums) {\n            if (i > 10) {\n                if (i % 2 ==\
    \ 1) {\n                    if (i % 2 == 0) {\n                        if (i %\
    \ 2 == 1) {\n                            count += 1\n                        }\n\
    \                    }\n                }\n            }\n        }\n        count",
  "        var count = 0\n        for (i <- 0 until nums.size) {\n            if (nums(i)\
    \ > 10) {\n                if (nums(i) % 2 == 1 && nums(i-1) % 2 == 1) {\n   \
    \                 count += 1\n                }\n            }\n        }\n  \
    \      count", "        val numsCopy = nums.toList\n        val numsCopy2 = numsCopy.filter(_\
    \ > 10)\n        val numsCopy3 = numsCopy2.filter(_ % 2 == 1)\n        numsCopy3.size",
  '        nums.filter(x => x > 10 && x.toString.charAt(0).toChar % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toChar % 2 == 1).length', "        val numsCopy = nums.toList\n        val\
    \ numsCopy2 = numsCopy.filter(_ > 10)\n        val numsCopy3 = numsCopy2.filter(_\
    \ % 2 == 1)\n        val numsCopy4 = numsCopy3.filter(_ % 2 == 0)\n        numsCopy4.size"]
stop_tokens:
- "\n    }\n"
