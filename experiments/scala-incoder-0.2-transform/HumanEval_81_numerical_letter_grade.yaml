name: HumanEval_81_numerical_letter_grade
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // It is the last week of the semester and the teacher has to give the grades\n\
  \    // to students. The teacher has been making her own algorithm for grading.\n\
  \    // The only problem is, she has lost the code she used for grading.\n    //\
  \ She has given you a list of GPAs for some students and you have to write \n  \
  \  // a function that can output a list of letter grades using the following table:\n\
  \    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7\
  \                A \n    // > 3.3                A- \n    // > 3.0             \
  \   B+\n    // > 2.7                B \n    // > 2.3                B-\n    // >\
  \ 2.0                C+\n    // > 1.7                C\n    // > 1.3           \
  \     C-\n    // > 1.0                D+ \n    // > 0.7                D \n    //\
  \ > 0.0                D-\n    // 0.0                E\n    // Example:\n    //\
  \ >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat,\
  \ 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n\
  \    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
  \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
  A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
  D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
  D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
  E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
  \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
  \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
completions: ["        val gradesMap = grades.map(x => x.toInt)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(x => x)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversed.length\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1",
  "        val gradesMap = grades.toMap\n        val gradesArray = grades.toArray\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grade", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByKey = grades.sortBy(x => x)\n        val\
    \ gradesSortedByValue = grades.sortBy(x => x)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grade", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val\
    \ gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedMap\
    \ = gradesMapSortedReversed.toMap\n        val gradesMapSortedReversedMapKeys\
    \ = gradesMapSortedReversedMap.keys\n        val gradesMapSortedReversedMapValues\
    \ = gradesMapSortedReversedMap.values.toList\n        val gradesMapSortedReversedMapValuesSorted\
    \ = gradesMapSortedReversedMapValues.sortBy(_._1)\n        val gradesMapSortedReversedMapValuesSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversed.reverse\n        val gradesMapSortedReversedMapValuesSortedReversedMap\
    \ = gradesMapSortedReversedMapValuesSortedReversed.toMap\n        val gradesMapSortedReversedMapValuesSortedReversedMapKeys\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapKeys.toList\n        val\
    \ gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted = gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed.reverse\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap.toMap\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys.toList\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSorted\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValues", "     \
    \   val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val\
    \ gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val\
    \ gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValues.sortBy(_._1)\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValues = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValues.sortBy(_._1)\n  \
    \      val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedKeys\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedValues\
    \ = grades", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val\
    \ gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted\
    \ = gradesMapSortedReversedKeys.sortBy(_)\n        val gradesMapSortedReversedValuesSorted\
    \ = gradesMapSortedReversedValues.sortBy(_)\n        val gradesMapSortedReversedKeysSortedReversed\
    \ = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversed\
    \ = gradesMapSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedSorted\
    \ = gradesMapSortedReversedKeysSortedReversed.sortBy(_)\n        val gradesMapSortedReversedValuesSortedReversedSorted\
    \ = gradesMapSortedReversedValuesSortedReversed.sortBy(_)\n        val gradesMapSortedReversedKeysSortedReversedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversedSortedSorted\
    \ = gradesMapSortedReversedValuesSortedReversedSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSorted.sortBy(_)\n        val\
    \ gradesMapSortedReversedValuesSortedReversedSortedSortedSorted = gradesMapSortedReversedValuesSortedReversedSortedSorted.sortBy(_)\n\
    \        val gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSortedSorted.reverse\n    \
    \    val gradesMapSortedReversedValuesSortedReversedSortedSortedSortedSorted =\
    \ gradesMapSortedReversedValuesSortedReversedSortedSortedSorted.reverse\n    \
    \    val gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSorted.sortBy(_)\n\
    \        val gradesMapSortedReversedValuesSortedReversedSortedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedValuesSortedReverse", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values.toList\n        val gradesSum = gradesValues.sum\n\
    \        val gradesCount = gradesValues.size\n        val gradesAvg = (gradesSum\
    \ / gradesCount).toFloat\n        val gradesSumOfSquares = gradesValues.map(x\
    \ => x * x).sum\n        val gradesSumOfSquaresAvg = gradesSumOfSquares / gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvg * gradesSumOfSquaresAvg\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr * gradesCount\n\
    \        val gradesSumOfSquaresAvgSqr = gradesSumOf", "        val gradesMap =\
    \ grades.map(x => x.toInt).toMap\n        val gradesKeys = gradesMap.keys\n  \
    \      val gradesValues = gradesMap.values.toList\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAvg = gradesSum / gradesKeys.size\n        val gradesDiff =\
    \ gradesAvg - gradesValues.head\n        val gradesDiffs = gradesValues.tail.zip(gradesDiff)\n\
    \        val gradesDiffsMap = gradesDiffs.map(x => x._1 -> x._2)\n        val\
    \ gradesDiffsKeys = gradesDiffsMap.keys\n        val gradesDiffsValues = gradesDiffsMap.values.toList\n\
    \        val gradesDiffsSum = gradesDiffsValues.sum\n        val gradesDiffsAvg\
    \ = gradesDiffsSum / gradesDiffsKeys.size\n        val gradesDiffsDiff = gradesDiffsAvg\
    \ - gradesDiffsValues.head\n        val gradesDiffsDiffs = gradesDiffsValues.tail.zip(gradesDiffsDiff)\n\
    \        val gradesDiffsDiffsMap = gradesDiffsDiffs.map(x => x._1 -> x._2)\n \
    \       val gradesDiffsDiffsKeys = gradesDiffsDiffsMap.keys\n        val gradesDiffsDiffsValues\
    \ = gradesDiffsDiffsMap.values.toList\n        val gradesDiffsDiffsSum = gradesDiffsDiffsValues.sum\n\
    \        val gradesDiffsDiffsAvg = gradesDiffsDiffsSum / gradesDiffsDiffsKeys.size\n\
    \        val gradesDiffsDiffsDiff = gradesDiffsDiffsAvg - gradesDiffsDiffsValues.head\n\
    \        val gradesDiffsDiffsDiffs = gradesDiffsDiffsValues.tail.zip(gradesDiffsDiffsDiff)\n\
    \        val gradesDiffsDiffsDiffsMap = gradesDiffsDiffsDiffs.map(x => x._1 ->\
    \ x._2)\n        val gradesDiffsDiffsDiffsKeys = gradesDiffsDiffsDiffsMap.keys\n\
    \        val gradesDiffsDiffsDiffsValues = gradesDiffsDiffsDiffsMap.values.toList\n\
    \        val gradesDiffsDiffsDiffsSum = gradesDiffsDiffsDiffsValue", "       \
    \ val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n        val\
    \ gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed\
    \ = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.toMap\n\
    \        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.toMap\n\
    \        val gradesSortedByKeyReversedKeys = gradesSortedByKeyReversedMap.keys\n\
    \        val gradesSortedByValueReversedValues = gradesSortedByValueReversedMap.values\n\
    \        val gradesSortedByKeyReversedValuesMap = gradesSortedByValueReversedValues.toMap\n\
    \        val gradesSortedByKeyReversedValuesKeys = gradesSortedByKeyReversedValuesMap.keys\n\
    \        val gradesSortedByKeyReversedValuesValues = gradesSortedByKeyReversedValuesMap.values.toList\n\
    \        val gradesSortedByKeyReversedValuesValuesMap = gradesSortedByKeyReversedValuesValues.toMap\n\
    \        val gradesSortedByKeyReversedValuesValuesKeys = gradesSortedByKeyReversedValuesValuesMap.keys\n\
    \        val gradesSortedByKeyReversedValuesValuesValues = gradesSortedByKeyReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesKeys = gradesSortedByKeyReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValues = gradesSortedByKeyReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesKeys = gradesSortedByKeyReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesValues = gradesSortedByKeyReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValuesValuesValues.toMap",
  "        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesAverage = gradesSum / gradesSorted.length\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesSorted.length\n        val gradesSumOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x - gradesAverage).sum\n        val gradesAverageOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfDifferences / gradesSorted.length\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesSorted.length\n        val\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x => x\
    \ * x * x - gradesAverageOfSquaresOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n        val\
    \ gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesSorted.length\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x * x - gradesAverageOfSquares", " \
    \       grades.map(grade => {\n            val gpa = grade\n            val letterGrade\
    \ = if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\"\
    \ else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"\
    C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0)\
    \ \"D-\" else \"E\"\n            (gpa, letterGrade)\n        }).sortBy(_._1).map(_._2).reverse",
  "        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSorted", "        val gradesMap = grades.toMap\n       \
    \ val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n\
    \        val gradesMapKeysSortedByValue = gradesMapKeys.sortBy(_._2)\n       \
    \ val gradesMapValuesSortedByKey = gradesMapValues.sortBy(_._1)\n        val gradesMapKeysSortedByValueReversed\
    \ = gradesMapKeysSortedByValue.reverse\n        val gradesMapValuesSortedByKeyReversed\
    \ = gradesMapValuesSortedByKey.reverse\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversed.length\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversed.length\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKey", "        val gradesSet = grades.toSet\n     \
    \   val gradesSortedSet = grades.toSeq.sortBy(_.toFloat)\n        val gradesSortedSetIterator\
    \ = gradesSortedSet.iterator\n        val gradesSortedSetIteratorNext = gradesSortedSetIterator.next\n\
    \        val gradesSortedSetIteratorNextNext = gradesSortedSetIteratorNext.next\n\
    \        val gradesSortedSetIteratorNextNextNext = gradesSortedSetIteratorNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNext = gradesSortedSetIteratorNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val ", "        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.map(_\
    \ % 4.0f)).toMap\n        grades.map(grade => gradesMap(grade).map(letter => letter\
    \ + \"\").mkString(\"\"))", "        val gradesMap = grades.toMap\n        val\
    \ gradesSortedByKey = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMap2\
    \ = gradesSortedByKeyReversedMap.toList\n        val gradesSortedByValueReversedMap2\
    \ = gradesSortedByValueReversedMap.toList\n        val gradesSortedByKeyReversedMap3\
    \ = gradesSortedByKeyReversedMap2.toList\n        val gradesSortedByValueReversedMap3\
    \ = gradesSortedByValueReversedMap2.toList\n        val gradesSortedByKeyReversedMap4\
    \ = gradesSortedByKeyReversedMap3.toList\n        val gradesSortedByValueReversedMap4\
    \ = gradesSortedByValueReversedMap3.toList\n        val gradesSortedByKeyReversedMap5\
    \ = gradesSortedByKeyReversedMap4.toList\n        val gradesSortedByValueReversedMap5\
    \ = gradesSortedByValueReversedMap4.toList\n        val gradesSortedByKeyReversedMap6\
    \ = gradesSortedByKeyReversedMap5.toList\n        val gradesSortedByValueReversedMap6\
    \ = gradesSortedByValueReversedMap5.toList\n        val gradesSortedByKeyReversedMap7\
    \ = gradesSortedByKeyReversedMap6.toList\n        val gradesSortedByValueReversedMap7\
    \ = gradesSortedByValueReversedMap6.toList\n        val gradesSortedByKeyReversedMap8\
    \ = gradesSortedByKeyReversedMap7.toList\n        val gradesSortedByValueReversedMap8\
    \ = gradesSortedByValueReversedMap7.toList\n        val gradesSortedByKeyReversedMap9\
    \ = gradesSortedByKeyReversedMap8.toList\n        val gradesSortedByValueReversedMap9\
    \ = gradesSortedByValueReversedMap8.toList\n        val gradesSortedByKeyReversedMap10\
    \ = gradesSortedByKeyReversedMap9.toList\n        val gradesSortedByValueReversedMap10\
    \ = ", "        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSorted", "      \
    \  val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSorted\
    \ = gradesMapKeys.sorted\n        val gradesMapValuesSorted = gradesMapValues.sorted\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val grade",
  "        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"+\"))\n        val gradesMap2 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"-\"))\n        val gradesMap3 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"+\"))\n        val gradesMap4\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"-\"))\n        val gradesMap5 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"+\"))\n        val gradesMap6 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"-\"))\n        val gradesMap7\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"+\"))\n        val gradesMap8 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"-\"))\n        val gradesMap9 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"+\"))\n        val gradesMap10\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"-\"))\n        val gradesMap11 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"+\"))\n        val gradesMap12 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"-\"))\n        val gradesMap13\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sort", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSor", "        val gradesMap = grades.groupBy(_ / 4).mapValues(_.map(_\
    \ % 4).map(_.toString))\n        gradesMap.mapValues(_.map(_ + \"\")).mapValues(_.mkString(\"\
    \"))", "        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSorted\
    \ = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n\
    \        val gradesMapKeysSortedWithValues = gradesMapKeysSorted.zip(gradesMapValuesSorted)\n\
    \        val gradesMapKeysSortedWithValuesSorted = gradesMapKeysSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValues = gradesMapKeysSortedWithValuesSorted.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSorted =\
    \ gradesMapKeysSortedWithValuesSortedWithValues.sortBy(_._1)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSorted.map(x => x._2)\n     \
    \   val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSorted =\
    \ gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSorted.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSorted\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSorted.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSorted", "        val gradesMap\
    \ = grades.toMap\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesMapLength = gradesMap.length\n     \
    \   val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val ", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap2\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap6\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap10\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap15\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap20\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap25\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByKey = grades.sortBy(x => x)\n\
    \        val gradesSortedByValue = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversed\
    \ = grades.sortBy(x => x)\n        val gradesSortedByValueReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByKeyReversedReversed = grades.sortBy(x => -x)\n\
    \        val gradesSortedByValueReversedReversed = grades.sortBy(x => -x)\n  \
    \      val gradesSortedByKeyReversedReversedReversed = grades.sortBy(x => -x)\n\
    \        val gradesSortedByValueReversedReversedReversed = grades.sortBy(x =>\
    \ -x)\n        val gradesSortedByKeyReversedReversedReversedReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByValueReversedReversedReversedReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sort", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysSum\
    \ = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum = gradesMapSortedValues.sum\n\
    \        val gradesMapSortedKeysProduct = gradesMapSortedKeys.product\n      \
    \  val gradesMapSortedValuesProduct = gradesMapSortedValues.product\n        val\
    \ gradesMapSortedKeysProductLength = gradesMapSortedKeysProduct.size\n       \
    \ val gradesMapSortedValuesProductLength = gradesMapSortedValuesProduct.size\n\
    \        val gradesMapSortedKeysProductSum = gradesMapSortedKeysProduct.sum\n\
    \        val gradesMapSortedValuesProductSum = gradesMapSortedValuesProduct.sum\n\
    \        val gradesMapSortedKeysProductProduct = gradesMapSortedKeysProduct.product\n\
    \        val gradesMapSortedValuesProductProduct = gradesMapSortedValuesProduct.product\n\
    \        val gradesMapSortedKeysProductProductLength = gradesMapSortedKeysProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductLength = gradesMapSortedValuesProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductSum = gradesMapSortedKeysProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductSum = gradesMapSortedValuesProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProduct = gradesMapSortedKeysProductProduct.product\n\
    \        val gradesMapSortedValuesProductProductProduct = gradesMapSortedValuesProductProduct.product\n\
    \        val gradesMapSortedKeysProductProductProductLength = gradesMapSortedKeysProductProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductProductLength = gradesMapSortedValuesProductProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductProductSum = gradesMapSortedKeysProductProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductProductProductSum = gradesMapSortedValuesProductProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProductProduct = gradesMapSortedKeysProductProduct",
  "        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSorted\
    \ = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSor", "        val gradesMap =\
    \ grades.groupBy(x => x.toInt).mapValues(_.toList)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n\
    \        val gradesMapSorted4 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n \
    \       val gradesMapSorted5 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n  \
    \      val gradesMapSorted6 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n   \
    \     val gradesMapSorted7 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted8 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n     \
    \   val gradesMapSorted9 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted10 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n      \
    \  val gradesMapSorted11 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted12 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n      \
    \  val gradesMapSorted13 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted14 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n      \
    \  val gradesMapSorted15 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted16 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n      \
    \  val gradesMapSorted17 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted18 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n      \
    \  val gradesMapSorted19 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted20 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n      \
    \  val gradesMapSorted21 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n      \
    \  val gradesMapSorted22 = grade", "        val gradesMap : Map[Float, String]\
    \ = grades.map(x => x -> \"D-\").toMap\n        val gradesList : List[Float] =\
    \ grades.toList\n        val gradesSum = gradesList.sum\n        val gradesAvg\
    \ = gradesList.sum / gradesList.size\n        val gradesDiff = gradesSum - gradesAvg\n\
    \        val gradesDiffMap = gradesDiff.toList.map(x => x -> \"D-\").toMap\n \
    \       val gradesDiffList : List[Float] = gradesDiff.toList\n        val gradesDiffSum\
    \ = gradesDiffList.sum\n        val gradesDiffAvg = gradesDiffList.sum / gradesDiffList.size\n\
    \        val gradesDiffDiff = gradesDiffSum - gradesDiffAvg\n        val gradesDiffDiffMap\
    \ = gradesDiffDiff.toList.map(x => x -> \"D-\").toMap\n        val gradesDiffDiffList\
    \ : List[Float] = gradesDiffDiff.toList\n        val gradesDiffDiffSum = gradesDiffDiffList.sum\n\
    \        val gradesDiffDiffAvg = gradesDiffDiffList.sum / gradesDiffDiffList.size\n\
    \        val gradesDiffDiffDiff = gradesDiffDiffSum - gradesDiffDiffAvg\n    \
    \    val gradesDiffDiffDiffMap = gradesDiffDiffDiff.toList.map(x => x -> \"D-\"\
    ).toMap\n        val gradesDiffDiffDiffList : List[Float] = gradesDiffDiffDiff.toList\n\
    \        val gradesDiffDiffDiffSum = gradesDiffDiffDiffList.sum\n        val gradesDiffDiffDiffAvg\
    \ = gradesDiffDiffDiffList.sum / gradesDiffDiffDiffList.size\n        val gradesDiffDiffDiffDiff\
    \ = gradesDiffDiffDiffSum - gradesDiffDiffDiffAvg\n        val gradesDiffDiffDiffDiffMap\
    \ = gradesDiffDiffDiffDiff.toList.map(x => x -> \"D-\").toMap\n        val gradesDiffDiffDiffDiffList\
    \ : List[Float] = gradesDiffDiffDiffDiff.toList\n        val gradesDiffDiffDiffDiffSum\
    \ = gradesDiffDiffDiffDiffList.sum\n        val gradesDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffList.sum\
    \ / gradesDiffDiffDiffDiffList.size\n        val gradesDiffDiffDiffDiffDiff =\
    \ gradesDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffAvg\n        val gradesDiffDiffDiffDiffDiffMap\
    \ = gradesDiff", "        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesValuesWithZero = gradesValues.map(_ + 0).toList\n        val gradesValuesWithOne\
    \ = gradesValues.map(_ + 1).toList\n        val gradesValuesWithTwo = gradesValues.map(_\
    \ + 2).toList\n        val gradesValuesWithThree = gradesValues.map(_ + 3).toList\n\
    \        val gradesValuesWithFour = gradesValues.map(_ + 4).toList\n        val\
    \ gradesValuesWithFive = gradesValues.map(_ + 5).toList\n        val gradesValuesWithSix\
    \ = gradesValues.map(_ + 6).toList\n        val gradesValuesWithSeven = gradesValues.map(_\
    \ + 7).toList\n        val gradesValuesWithEight = gradesValues.map(_ + 8).toList\n\
    \        val gradesValuesWithNine = gradesValues.map(_ + 9).toList\n        val\
    \ gradesValuesWithTen = gradesValues.map(_ + 10).toList\n        val gradesValuesWithEleven\
    \ = gradesValues.map(_ + 11).toList\n        val gradesValuesWithTwelve = gradesValues.map(_\
    \ + 12).toList\n        val gradesValuesWithThirteen = gradesValues.map(_ + 13).toList\n\
    \        val gradesValuesWithFourteen = gradesValues.map(_ + 14).toList\n    \
    \    val gradesValuesWithFifteen = gradesValues.map(_ + 15).toList\n        val\
    \ gradesValuesWithSixteen = gradesValues.map(_ + 16).toList\n        val gradesValuesWithSeventeen\
    \ = gradesValues.map(_ + 17).toList\n        val gradesValuesWithEighteen = gradesValues.map(_\
    \ + 18).toList\n        val gradesValuesWithNineteen = gradesValues.map(_ + 19).toList\n\
    \        val gradesValuesWithTwenty = gradesValues.map(_ + 20).toList\n      \
    \  val gradesValuesWithTwentyOne = gradesValues.map(_ + 21).toList\n        val\
    \ gradesValuesWithTwentyTwo = gradesValues.map(_ + 22).toList\n        val gradesValuesWithTwentyThree\
    \ = gradesValues.", "        grades.map{grade => \n            val gpa = grade.toInt\n\
    \            val letterGrade = if (gpa > 0) \"A+\" else if (gpa > 3.7) \"A\" else\
    \ if (gpa > 3.3) \"A-\" else if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else\
    \ if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else\
    \ if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else\
    \ \"E\"\n            letterGrade\n        }", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted3 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted4 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted5 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted6 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted7 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted8 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted9 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted10 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted11 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted12 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted13 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted14 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted15 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted16 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted17 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted18 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted19 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted20 = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n\
    \        val gradesMapSorted21 = gradesMapSor", "        val gradesMap = grades.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x => x.toString.toUpperCase)\n\
    \        val gradesMap2 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap3\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap4 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap5\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap6 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap7\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap8 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap9\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap10 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap11\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap12 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap13\
    \ = grades.groupBy(x => x.toInt).mapValues(_.to", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted\
    \ = gradesValues.sort\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        ",
  "        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesCount = gradesSorted.size\n        val gradesAverage = gradesSum\
    \ / gradesCount\n        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n\
    \        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n  \
    \      val gradesSumOfSquaresAverageSquared = gradesSumOfSquares * gradesSumOfSquaresAverage\n\
    \        val gradesSumOfSquaresAverageSquaredSum = gradesSumOfSquares * gradesSumOfSquaresAverage\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquared = gradesSumOfSquares *\
    \ gradesSumOfSquaresAverageSquared\n        val gradesSumOfSquaresAverageSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquared\n        val\
    \ gradesSumOfSquaresAverageSquaredSumSquaredSumSquared = gradesSumOfSquares *\
    \ gradesSumOfSquaresAverageSquaredSumSquaredSum\n        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquared\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared =\
    \ gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared =\
    \ gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSumSquared\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSum\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverage", "        val gradesMap =\
    \ grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n        val gradesKeys\
    \ = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        gradesKeys.zip(gradesValues).map { case (k, v) => s\"${k}${v}\" }", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum / gradesKeys.size\n\
    \        val gradesGrades = gradesKeys.map(x => if (gradesMap(x) == gradesAvg)\
    \ gradesMap(x) else \"D-\").sorted\n        gradesGrades.reverse.map(x => if (x\
    \ == gradesAvg) x else x.toChar).mkString(\"\")", "        val gradesMap = grades.toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesSet = grades.toSet\n\
    \        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n\
    \        val gradesIterReverse = grades.reverseIterator\n        val gradesIterReversed\
    \ = grades.reversed\n        val gradesIterReversedIter = grades.reversedIterator\n\
    \        val gradesIterReversedIterReversed = grades.reversedIterator.reversed\n\
    \        val gradesIterReversedIterReversedIter = grades.reversedIterator.reversedIterator.reversed\n\
    \        val gradesIterReversedIterReversedIterReversed = grades.reversedIterator.reversedIterator.reversedIterator.reversed\n\
    \        val gradesIterReversedIterReversedIterReversedIter = grades.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversed\n\
    \        val gradesIterReversedIterReversedIterReversedIterReversedIter = grades.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator",
  "        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(x => x)\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength\
    \ - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength -\
    \ 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n \
    \       val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n  \
    \      val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n   \
    \     val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n     \
    \   val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n      \
    \  val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n       \
    \ val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength\
    \ - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength -\
    \ 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n \
    \       val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n  \
    \      val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n   \
    \     val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n     \
    \   val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n      \
    \  val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n       \
    \ val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength = ",
  "        grades.map(grade => {\n            val gpa = grade\n            val letterGrade\
    \ = if (gpa > 3.0) \"A+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B\"\
    \ else if (gpa > 2.0) \"C\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"C\"\
    \ else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0) \"\
    D\" else \"E\"\n            letterGrade\n        }).reverse", "        val gradesMap\
    \ = grades.toMap\n        val gradesSortedByGrade = grades.sortBy(_.toFloat)\n\
    \        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(-_.toFloat)\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesMap = gradesSortedByGradeReversedValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesKeys = gradesSortedByGradeReversedValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValues = gradesSortedByGradeReversedValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesMap = gradesSortedByGradeReversedValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesKeys = gradesSortedByGradeReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValues = gradesSortedByGradeReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesValues =\
    \ gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap\
    \ = gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesValuesValuesMap.keys.to",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap2\
    \ = gradesSortedByKeyReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap2\
    \ = gradesSortedByValueReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap3\
    \ = gradesSortedByKeyReversedMap2.map(x => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap3\
    \ = gradesSortedByValueReversedMap2.map(x => (x._1, x._2)).toMap\n        val\
    \ gradesSortedByKeyReversedMap4 = gradesSortedByKeyReversedMap3.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByValueReversedMap4 = gradesSortedByValueReversedMap3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap5 = gradesSortedByKeyReversedMap4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap5 = gradesSortedByValueReversedMap4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap6 = gradesSortedByKeyReversedMap5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap6 = gradesSortedByValueReversedMap5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap7 = gradesSortedByKeyReversedMap6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap7 = gradesSortedByValueReversedMap6.map(x\
    \ => (x.", "        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) => acc + (grade -> (acc.getOrElse(grade,\
    \ \"\") + s\"${grade}\"))\n        }\n        val gradesList : List[String] =\
    \ gradesMap.filter(_._2 != \"0.0\").map(_._2).sorted\n        gradesList.take(gradesList.size\
    \ - 1).map(_ + \"+\").mkString(\"\")", "        val gradesSorted = grades.sortWith(_\
    \ < _)\n        val gradesLength = gradesSorted.length\n        val gradesSum\
    \ = gradesSorted.sum\n        val gradesAverage = gradesSum / gradesLength\n \
    \       val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val\
    \ gradesAverageOfSquares = gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x - gradesAverage).sum\n        val gradesAverageOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x - gradesAverageOfSquaresOfSquares).sum\n \
    \       val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x * x - gradesAverageOfSquaresOfSquares",
  "        val gradesSet = grades.toSet\n        val gradesSetIterator = grades.iterator\n\
    \        val gradesSetIteratorNext = gradesSetIterator.next\n        val gradesSetIteratorNextAsFloat\
    \ = gradesSetIteratorNext.toFloat\n        val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n\
    \        val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n    \
    \    val gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n    \
    \    val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n      \
    \  val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n        val gradesSetIteratorNextAsLong\
    \ = gradesSetIteratorNext.toLong\n        val gradesSetIteratorNextAsDouble =\
    \ gradesSetIteratorNext.toDouble\n        val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n\
    \        val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n      \
    \  val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n        val\
    \ gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n        val\
    \ gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n        val gradesSetIteratorNextAsInt\
    \ = gradesSetIteratorNext.toInt\n        val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n\
    \        val gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n\
    \        val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n  \
    \      val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n        val\
    \ gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n        val gradesSetIteratorNextAsDouble\
    \ = gradesSetIteratorNext.toDouble\n        val gradesSetIteratorNextAsFloat =\
    \ gradesSetIteratorNext.toFloat\n        val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n\
    \        val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n    \
    \    val gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n    \
    \    val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n", "  \
    \      val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n\
    \            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"\
    B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0\
    \ -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n        \
    \    1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n  \
    \      )\n        grades.map(grade => gradesMap(grade))", "        val gradesMap\
    \ = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n        val gradesReversed\
    \ = grades.reverse\n        val gradesSum = gradesReversed.foldLeft(0f) { (sum,\
    \ grade) => sum + grade }\n        val gradesAverage = gradesSum / grades.size\n\
    \        val gradesMapReversed = gradesMap.mapValues(_.toString.toUpperCase)\n\
    \        val gradesMapReversedReversed = gradesMapReversed.toSeq.reverse.map(_._2)\n\
    \        val gradesMapReversedReversedReversed = gradesMapReversedReversed.toSeq.reverse.map(_._1)\n\
    \        val gradesMapReversedReversedReversedReversed = gradesMapReversedReversedReversed.toSeq.reverse.map(_._0)\n\
    \        val gradesMapReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversed.toSeq.reverse.map(_._1)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversedReversed.toSeq.reverse.map(_._2)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversed.toSeq.reverse.map(_._3)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._4)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._5)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._6)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._7)\n\
    \        val gradesMapReversedReversedReversed", "        val gradesMap = grades.toMap\n\
    \        val gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed", "        val gradesMap : Map[Float, String]\
    \ = grades.map(x => x -> \"A+\")\n        val gradesMap2 : Map[Float, String]\
    \ = grades.map(x => x -> \"B\")\n        val gradesMap3 : Map[Float, String] =\
    \ grades.map(x => x -> \"C+\")\n        val gradesMap4 : Map[Float, String] =\
    \ grades.map(x => x -> \"C\")\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => x -> \"A-\")\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => x -> \"B+\")\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => x -> \"B\")\n        val gradesMap8 : Map[Float, String] = grades.map(x =>\
    \ x -> \"B-\")\n        val gradesMap9 : Map[Float, String] = grades.map(x =>\
    \ x -> \"C+\")\n        val gradesMap10 : Map[Float, String] = grades.map(x =>\
    \ x -> \"C\")\n        val gradesMap11 : Map[Float, String] = grades.map(x =>\
    \ x -> \"C-\")\n        val gradesMap12 : Map[Float, String] = grades.map(x =>\
    \ x -> \"D+\")\n        val gradesMap13 : Map[Float, String] = grades.map(x =>\
    \ x -> \"D\")\n        val gradesMap14 : Map[Float, String] = grades.map(x =>\
    \ x -> \"D-\")\n        val gradesMap15 : Map[Float, String] = grades.map(x =>\
    \ x -> \"E\")\n        val gradesMap16 : Map[Float, String] = grades.map(x =>\
    \ x -> \"F\")\n        val gradesMap17 : Map[Float, String] = grades.map(x =>\
    \ x -> \"G\")\n        val gradesMap18 : Map[Float, String] = grades.map(x =>\
    \ x -> \"H\")\n        val gradesMap19 : Map[Float, String] = grades.map(x =>\
    \ x -> \"I\")\n        val gradesMap20 : Map[Float, String] = grades.map(x =>\
    \ x -> \"J\")\n        val gradesMap21 : Map[Float, String] = grades.map(x =>\
    \ x -> \"K\")\n        val gradesMap22 : Map[Float, String] = grades.map(x =>\
    \ x -> \"L\")\n        val gradesMap23 : Map[Float", "        val gradesMap =\
    \ grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar)\n   \
    \     val gradesMap2 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap3 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap4 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap5 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap6 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap7 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap8 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap9 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.",
  "        val gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\")).toMap\n\
    \        val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"A\")).toMap\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => (x, \"A-\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => (x, \"B+\")).toMap\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => (x, \"B\")).toMap\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => (x, \"B-\")).toMap\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => (x, \"C+\")).toMap\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => (x, \"C\")).toMap\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => (x, \"C-\")).toMap\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => (x, \"D+\")).toMap\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => (x, \"D\")).toMap\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => (x, \"D-\")).toMap\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap22", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = grades", "        val gradesMap = grades.toMap\n\
    \        val gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesSortedByKey.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedWithKeys = gradesSortedByKeyReversed.map(_._1)\n\
    \        val gradesSortedByValueReversedWithKeys = gradesSortedByValueReversed.map(_._2)\n\
    \        val gradesSortedByKeyReversedWithValues = gradesSortedByKeyReversed.map(_._2)\n\
    \        val gradesSortedByKeyReversedWithValuesReversed = gradesSortedByKeyReversed.map(_._1)\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithKeys = gradesSortedByKeyReversed.map(_._1)\n\
    \        val gradesSortedByValueReversedWithValuesReversedWithKeys = gradesSortedByValueReversed.map(_._1)\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversed = gradesSortedByKeyReversed.map(_._1)\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByValueReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val ", "        val gradesMap\
    \ = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n     \
    \   val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSorted", "      \
    \  val gradesMap = grades.map(x => x.toString -> x)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversed = gradesMapSorted.reverse.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSorted = gradesMapSortedGroupedReversed.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGrouped = gradesMapSortedGroupedReversedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSorted = gradesMapSortedGroupedReversedSortedGrouped.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGrouped = gradesMapSortedGroupedReversedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSorted =\
    \ gradesMapSortedGroupedReversedSortedGroupedSortedGrouped.sortBy(_._1)\n    \
    \    val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupe",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap2\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap6\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap10\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap15\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap20\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap25\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum /\
    \ gradesKeys.size\n        val gradesDiff = gradesAvg - gradesMap.head._1\n  \
    \      val gradesDiffInt = gradesDiff.toInt\n        val gradesDiffString = gradesDiff.toString.toUpperCase\n\
    \        val gradesDiffStringList = gradesDiffString.split(\"\\\\+\")\n      \
    \  val gradesDiffStringListLength = gradesDiffStringList.length\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n\
    \        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n   \
    \     val gradesDiffStringListLength = gradesDiffStringListLength - 1\n      \
    \  val gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val\
    \ gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n\
    \        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n   \
    \     val gradesDiffStringListLength = gradesDiffStringListLength - 1\n      \
    \  val gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val\
    \ gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n\
    \        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n   \
    \     val gradesDiffStringListLength = gradesDiffStringListLength - 1\n      \
    \  val gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val\
    \ gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = ", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = ", "        val gradesMap = grades.toMap\n\
    \        val gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesSortedByKey.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse",
  "        val gradesMap = grades.toMap\n        val gradesArray = grades.toArray\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grades.iterator\n        val gradesMap = grades.toMap\n\
    \        val gradesSet = grades.toSet\n        val gradesSeq = grades.toSeq\n\
    \        val gradesIter = grade", "        val gradesMap = grades.toMap\n    \
    \    val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesMap.values.toList.size\n        val gradesMin\
    \ = gradesMap.values.min\n        val gradesMax = gradesMap.values.max\n     \
    \   val gradesSum = gradesMap.values.sum\n        val gradesMean = gradesMap.values.mean\n\
    \        val gradesMedian = gradesMap.values.median\n        val gradesVariance\
    \ = gradesMap.values.variance\n        val gradesStandardDeviation = gradesMap.values.standardDeviation\n\
    \        val gradesStandardError = gradesMap.values.standardError\n        val\
    \ gradesSkew = gradesMap.values.skewness\n        val gradesKurtosis = gradesMap.values.kurtosis\n\
    \        val gradesMedianAbsoluteDeviation = gradesMap.values.medianAbsoluteDeviation\n\
    \        val gradesMedianAbsoluteError = gradesMap.values.medianAbsoluteError\n\
    \        val gradesMedianSquaredDeviation = gradesMap.values.medianSquaredDeviation\n\
    \        val gradesMedianQuantile = gradesMap.values.medianQuantile\n        val\
    \ gradesMedianKurtosis = gradesMap.values.medianKurtosis\n        val gradesMedianRelativeDeviation\
    \ = gradesMap.values.medianRelativeDeviation\n        val gradesMedianRelativeError\
    \ = gradesMap.values.medianRelativeError\n        val gradesMedianTendency = gradesMap.values.medianTendency\n\
    \        val gradesMedianAbsoluteTendency = gradesMap.values.medianAbsoluteTendency\n\
    \        val gradesMedianRelativeTendency = gradesMap.values.medianRelativeTendency\n\
    \        val gradesMedianKurtosisTendency = gradesMap.values.medianKurtosisTendency\n\
    \        val gradesMedianAbsoluteKurtosisTendency = gradesMap.values.medianAbsoluteKurtosisTendency\n\
    \        val gradesMedianRelativeKurtosisTendency = gradesMap.values.medianRelativeKurtosisTendency\n\
    \        val gradesMedianTendencySkew = gradesMap.values.medianTend", "      \
    \  val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n        val\
    \ gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed\
    \ = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val ", "        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys.toList\n\
    \        val gradesMapSortedValues = gradesMapSorted.values.toList\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val ", " \
    \       val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(x => x)\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = ", "        val gradesSorted = grades.sortWith(_\
    \ < _)\n        val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.size\n\
    \        val gradesAverage = gradesSum / gradesCount\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares /\
    \ gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n\
    \        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n  \
    \      val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n    \
    \    val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n      \
    \  val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val\
    \ gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage\
    \ = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares /\
    \ gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n\
    \        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n  \
    \      val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n    \
    \    val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n      \
    \  val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val\
    \ gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage\
    \ = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesCount\n        ", "        val gradesMap = grades.toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesValuesWithZero = gradesValues.map(_+0.0).toList\n        val\
    \ gradesValuesWithOne = gradesValues.map(_+1.0).toList\n        val gradesValuesWithTwo\
    \ = gradesValues.map(_+2.0).toList\n        val gradesValuesWithThree = gradesValues.map(_+3.0).toList\n\
    \        val gradesValuesWithFour = gradesValues.map(_+4.0).toList\n        val\
    \ gradesValuesWithFive = gradesValues.map(_+5.0).toList\n        val gradesValuesWithSix\
    \ = gradesValues.map(_+6.0).toList\n        val gradesValuesWithSeven = gradesValues.map(_+7.0).toList\n\
    \        val gradesValuesWithEight = gradesValues.map(_+8.0).toList\n        val\
    \ gradesValuesWithNine = gradesValues.map(_+9.0).toList\n        val gradesValuesWithTen\
    \ = gradesValues.map(_+10.0).toList\n        val gradesValuesWithEleven = gradesValues.map(_+11.0).toList\n\
    \        val gradesValuesWithTwelve = gradesValues.map(_+12.0).toList\n      \
    \  val gradesValuesWithOneHundred = gradesValues.map(_+100.0).toList\n       \
    \ val gradesValuesWithOneThousand = gradesValues.map(_+100000.0).toList\n    \
    \    val gradesValuesWithOneMillion = gradesValues.map(_+10000000.0).toList\n\
    \        val gradesValuesWithOneBillion = gradesValues.map(_+1000000000.0).toList\n\
    \        val gradesValuesWithOneTrillion = gradesValues.map(_+10000000000000.0).toList\n\
    \        val gradesValuesWithOneQuadrillion = gradesValues.map(_+1000000000000000.0).toList\n\
    \        val gradesValuesWithOneQuintillion = gradesValues.map(_+100000000000000000.0).toList\n\
    \        val gradesValuesWithOneBillion = gradesValues.map(_+10000000000000000000.0).toList\n\
    \        val gradesValuesWithOneTrillion = gradesValues.map(_+1000000000000000000000.0).toList\n\
    \        val gradesValuesWithOneQuadri", "        val gradesMap = grades.toMap\n\
    \        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapKeysLength = gradesMapKeysLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValues", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values.toList\n        val gradesLength = gradesValues.length\n\
    \        val gradesSum = gradesValues.foldLeft(0.0f) { (sum, grade) => sum + grade\
    \ }\n        val gradesAverage = gradesSum / gradesLength\n        val gradesDiff\
    \ = gradesAverage - grades\n        val gradesDiffLength = gradesDiff.length\n\
    \        val gradesDiffSum = gradesDiff.foldLeft(0.0f) { (sum, grade) => sum +\
    \ grade }\n        val gradesDiffAverage = gradesDiffSum / gradesDiffLength\n\
    \        val gradesDiffDiff = gradesDiffAverage - gradesAverage\n        val gradesDiffDiffLength\
    \ = gradesDiffDiff.length\n        val gradesDiffDiffSum = gradesDiffDiff.foldLeft(0.0f)\
    \ { (sum, grade) => sum + grade }\n        val gradesDiffDiffAverage = gradesDiffDiffSum\
    \ / gradesDiffDiffLength\n        val gradesDiffDiffDiff = gradesDiffDiffAverage\
    \ - gradesAverage\n        val gradesDiffDiffDiffLength = gradesDiffDiffDiff.length\n\
    \        val gradesDiffDiffDiffSum = gradesDiffDiffDiff.foldLeft(0.0f) { (sum,\
    \ grade) => sum + grade }\n        val gradesDiffDiffDiffAverage = gradesDiffDiffDiffSum\
    \ / gradesDiffDiffDiffLength\n        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAverage\
    \ - gradesAverage\n        val gradesDiffDiffDiffDiffLength = gradesDiffDiffDiffDiff.length\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiff.foldLeft(0.0f)\
    \ { (sum, grade) => sum + grade }\n        val gradesDiffDiffDiffDiffAverage =\
    \ gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffLength\n        val gradesDiffDiffDiffDiffDiff\
    \ = gradesDiffDiffDiffDiffAverage - gradesAverage\n        val gradesDiffDiffDiffDiffDiffLength\
    \ = gradesDiffDiffDiffDiffDiff.length\n        val gradesDiffDiffDiffDiffDiffSum\
    \ = gradesDiffDiffDiffDiffDiff.foldLeft(0.0f) { (sum, grade) => sum + grade }\n\
    \        val ", "        val gradesMap : Map[Float, String] = grades.map(x =>\
    \ x -> \"A+\".toUpperCase).\n            foldLeft(Map[Float, String]())((map,\
    \ x) => map.updated(x, map.getOrElse(x, \"\") + \"A\"))\n        val gradesMap2\
    \ = grades.map(x => x -> \"B\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"B\"))\n   \
    \     val gradesMap3 = grades.map(x => x -> \"C\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"C\"))\n   \
    \     val gradesMap4 = grades.map(x => x -> \"D\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"D\"))\n   \
    \     val gradesMap5 = grades.map(x => x -> \"E\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"E\"))\n   \
    \     val gradesMap6 = grades.map(x => x -> \"F\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"F\"))\n   \
    \     val gradesMap7 = grades.map(x => x -> \"G\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"G\"))\n   \
    \     val gradesMap8 = grades.map(x => x -> \"H\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"H\"))\n   \
    \     val gradesMap9 = grades.map(x => x -> \"I\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"I\"))\n   \
    \     val gradesMap10 = grades.map(x => x -> \"J\".toUpperCase).\n           \
    \ foldLeft(Map[Float, String]())((map, x) => map.updated(x, map.getOrElse(x, \"\
    \") + \"J\"))\n        val gradesMap11 = grades.map(x => x -> \"K\".", "     \
    \   val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysIterator\
    \ = gradesMapSortedReversedKeys.iterator\n        val gradesMapSortedReversedValuesIterator\
    \ = gradesMapSortedReversedValues.iterator\n        val gradesMapSortedReversedKeysIteratorNext\
    \ = gradesMapSortedReversedKeysIterator.next\n        val gradesMapSortedReversedValuesIteratorNext\
    \ = gradesMapSortedReversedValuesIterator.next\n        val gradesMapSortedReversedKeysIteratorNextValue\
    \ = gradesMapSortedReversedKeysIteratorNext._1\n        val gradesMapSortedReversedValuesIteratorNextValue\
    \ = gradesMapSortedReversedValuesIteratorNext._1\n        val gradesMapSortedReversedKeysIteratorNextKeyValue\
    \ = gradesMapSortedReversedKeysIteratorNext._2\n        val gradesMapSortedReversedValuesIteratorNextKeyValue\
    \ = gradesMapSortedReversedValuesIteratorNext._2\n        val gradesMapSortedReversedKeysIteratorNextKeyValueValue\
    \ = gradesMapSortedReversedKeysIteratorNext._3\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValue\
    \ = gradesMapSortedReversedValuesIteratorNext._3\n        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValue\
    \ = gradesMapSortedReversedKeysIteratorNext._4\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValue\
    \ = gradesMapSortedReversedValuesIteratorNext._4\n        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValueValue\
    \ = gradesMapSortedReversedKeysIteratorNext._5\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValueValue\
    \ = gradesMapSortedReversedValuesIteratorNext._5\n        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValueValueValue\
    \ = gradesMapSortedReversedKeysIteratorNext._6\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValueValueValue\
    \ = gradesMapSortedReversedValuesIteratorNext._6\n        val gradesMapSortedReversedKeysIteratorNextKey",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap\
    \ = grades.sortBy(x => x)\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReversedMapWithKeys = gradesSortedMapReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValues\
    \ = gradesSortedMapReversedMapWithKeys.map(x => (x._1, x._2)).toMap\n        val\
    \ gradesSortedMapReversedMapWithKeysAndValuesReversed = gradesSortedMapReversedMapWithKeysAndValues.reverse\n\
    \        val gradesSortedMapReversedMapWithKeysAndValuesReversedMap = gradesSortedMapReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeys\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeys.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValues\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValues.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMap\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeys.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeysAndValues\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeysAndValues.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeysAnd",
  "        val gradesMap = grades.toMap\n        val gradesSortedByGrade = grades.sortBy(_)\n\
    \        val gradesSortedByGradeWithKeys = gradesSortedByGrade.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversed = gradesSortedByGradeWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeys = gradesSortedByGradeWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversed = gradesSortedByGradeWithKeysReversedWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeys = gradesSortedByGradeWithKeysReversedWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeys.reverse\n    \
    \    val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKey",
  "        val gradesMap = grades.map(x => x.toString -> x)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n   \
    \     val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n   \
    \     val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2\
    \ > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n \
    \       val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val\
    \ gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14\
    \ = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2\
    \ > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n \
    \       val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val\
    \ gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19\
    \ = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2\
    \ > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n \
    \       val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val\
    \ gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24\
    \ = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2\
    \ > 0)\n        val gradesMapSorted26 = grades", "        val gradesMap : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"A+\")).toMap\n        val gradesMap2\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"B\")).toMap\n       \
    \ val gradesMap3 : Map[Float, String] = grades.map(grade => (grade -> \"C\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(grade => (grade -> \"\
    D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade =>\
    \ (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        ", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGrade = grades.sortBy(x =>\
    \ x)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(x =>\
    \ -x)\n        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversed =\
    \ gradesSortedByGradeReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedKeys\
    \ = gradesSortedByGradeReversedMapReversed.keys\n        val gradesSortedByGradeReversedMapReversedValues\
    \ = gradesSortedByGradeReversedMapReversed.values\n        val gradesSortedByGradeReversedMapReversedValuesMap\
    \ = gradesSortedByGradeReversedMapReversedValues.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGradeReversedMapReversedValuesMapReversed = gradesSortedByGradeReversedMapReversedValuesMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedValuesMapReversedKeys\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversed.keys\n        val\
    \ gradesSortedByGradeReversedMapReversedValuesMapReversedValues = gradesSortedByGradeReversedMapReversedValuesMapReversed.values\n\
    \        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMap\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversedValues.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversed\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMap.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversedKeys\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversed.keys\n\
    \        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversedValues\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReverse", "        val gradesMap\
    \ = grades.map(x => x.toInt).zipWithIndex.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesSortedByIndex = grades.sortWith(_.toFloat < _.toFloat)\n       \
    \ val gradesSortedByValue = grades.sortWith(_.toFloat > _.toFloat)\n        val\
    \ gradesSortedByGrade = grades.sortWith(x => x.toFloat < x.toFloat)\n        val\
    \ gradesSortedByGradeValue = grades.sortWith(x => x.toFloat > x.toFloat)\n   \
    \     val gradesSortedByGradeIndex = grades.sortWith(x => x.toFloat < x.toFloat)\n\
    \        val gradesSortedByGradeValueIndex = grades.sortWith(x => x.toFloat >\
    \ x.toFloat)\n        val gradesSortedByGradeIndexValue = grades.sortWith(x =>\
    \ x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexValue = grades.sortWith(x\
    \ => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float, String]()){\n\
    \            (acc, grade) =>\n                acc + (grade -> (acc.getOrElse(grade,\
    \ \"\") + \"+\"))\n        }\n        val gradesList : List[String] = gradesMap.filter(_._2\
    \ != \"E\").map(_._1).sorted\n        gradesList.reverse.takeWhile(grade => grade\
    \ != \"E\").mkString(\",\")", "        val gradesMap = grades.toMap\n        val\
    \ gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed", "        val gradesMap = grades.toMap\n\
    \        val gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesSortedByKey.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSorted", "        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetter = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGradeAndLetter = gradesValuesSortedWithIndexAndGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetter.zipWithIndex.sortBy(x => x._2)\n\
    \        val gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGrade = gradesValuesSortedWithIndexAndGradeAndLetter.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade\
    \ = gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAnd", "  \
    \      val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.toMap\n\
    \        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapKeys = gradesSortedByKeyReversedMap.keys\n\
    \        val gradesSortedByValueReversedMapValues = gradesSortedByValueReversedMap.values\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByValueReversedMapKeysSum = gradesSortedByValueReversedMapKeys.sum\n\
    \        val gradesSortedByKeyReversedMapKeysSum = gradesSortedByKeyReversedMapKeys.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val gradesSortedByKeyReversedMapValuesSum = gradesSortedByKeyReversedMapValues.sum\n\
    \        val grades", "        grades.foldLeft(List[String]()){\n            (acc,\
    \ grade) =>\n                val gpa = grade\n                val letterGrade\
    \ = if(gpa > 3.0) \"A+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\"\
    \ else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"\
    C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0)\
    \ \"D-\" else \"E\"\n                acc :+ letterGrade\n        }", "       \
    \ val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\
    \        val gradesMap2 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap3 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap4 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap5 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap6 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap7 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap8 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap9 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap10 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap11 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap12 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap13 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap14 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap15 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        gradesMap.map(_._2).reverse.map(_ + \"+\").filter(_ != \"-\")", "   \
    \     val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val\
    \ gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val\
    \ gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValues", "        val gradesMap\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n        val gradesMap = gradesMap.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val grades", "        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x, x.toString match {\n            case \"4.0\" => \"A+\"\n            case\
    \ \"3.7\" => \"A\"\n            case \"3.3\" => \"A-\"\n            case \"3.0\"\
    \ => \"B+\"\n            case \"2.7\" => \"B\"\n            case \"2.3\" => \"\
    B-\"\n            case \"2.0\" => \"C+\"\n            case \"1.7\" => \"C\"\n\
    \            case \"1.3\" => \"C-\"\n            case \"1.0\" => \"D+\"\n    \
    \        case \"0.7\" => \"D\"\n            case \"0.0\" => \"D-\"\n         \
    \   case \"0.0\" => \"E\"\n            case _ => \"Error\"\n        })).toMap\n\
    \        val gradesList : List[String] = gradesMap.keys.toList.sortWith(_ < _)\n\
    \        val gradesMapList : List[(String, String)] = gradesList.map(x => (x,\
    \ gradesMap(x)))\n        val gradesMapListSorted : List[(String, String)] = gradesMapList.sortWith(_._1\
    \ < _._1)\n        val gradesMapListSortedWithGrade : List[(String, String)] =\
    \ gradesMapListSorted.map(x => (x._2, x._1))\n        val gradesMapListSortedWithGradeWithGrade\
    \ : List[(String, String)] = gradesMapListSortedWithGrade.map(x => (x._1, x._2))\n\
    \        val gradesMapListSortedWithGradeWithGradeWithGrade : List[(String, String)]\
    \ = gradesMapListSortedWithGradeWithGrade.map(x => (x._1, x._2))\n        val\
    \ gradesMapListSortedWithGradeWithGradeWithGradeWithGrade : List[(String, String)]\
    \ = gradesMapListSortedWithGradeWithGradeWithGrade.map(x => (x._1, x._2))\n  \
    \      val gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGrade :\
    \ List[(String, String)] = gradesMapListSortedWithGradeWithGradeWithGradeWithGrade.map(x\
    \ => (x._1, x._2))\n        val gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGradeWithGrade\
    \ : List[(String, String)] = gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGrade.map(x\
    \ => (x._1, x._2))\n        val gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGradeWithGradeWithGrade\
    \ : List[", "        val gradesSet = grades.toSet\n        val gradesArray = grades.toArray\n\
    \        val gradesArraySet = grades.toSet.toArray\n        val gradesArrayArray\
    \ = grades.toArray.toArray\n        val gradesArrayArraySet = grades.toArray.toSet.toArray\n\
    \        val gradesArrayArrayArray = grades.toArray.toArray.toArray\n        val\
    \ gradesArrayArrayArraySet = grades.toArray.toArray.toSet.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.to",
  "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesValuesWithZero\
    \ = gradesValues.filter(_ > 0)\n        val gradesValuesWithZeroLength = gradesValuesWithZero.length\n\
    \        val gradesValuesWithZeroSum = gradesValuesWithZero.sum\n        val gradesValuesWithZeroAverage\
    \ = gradesValuesWithZeroSum / gradesValuesWithZeroLength\n        val gradesValuesWithZeroAverageLength\
    \ = gradesValuesWithZeroAverage.length\n        val gradesValuesWithZeroAverageSum\
    \ = gradesValuesWithZeroAverage.sum\n        val gradesValuesWithZeroAverageAverage\
    \ = gradesValuesWithZeroAverageSum / gradesValuesWithZeroAverageLength\n     \
    \   val gradesValuesWithZeroAverageAverageLength = gradesValuesWithZeroAverageAverage.length\n\
    \        val gradesValuesWithZeroAverageAverageSum = gradesValuesWithZeroAverageAverage.sum\n\
    \        val gradesValuesWithZeroAverageAverageAverage = gradesValuesWithZeroAverageAverageSum\
    \ / gradesValuesWithZeroAverageAverageLength\n        val gradesValuesWithZeroAverageAverageAverageLength\
    \ = gradesValuesWithZeroAverageAverageAverage.length\n        val gradesValuesWithZeroAverageAverageAverage\
    \ = gradesValuesWithZeroAverageAverageAverage.sum\n        val gradesValuesWithZeroAverageAverageAverageLength\
    \ = gradesValuesWithZeroAverageAverageAverage.length\n        val gradesValuesWithZeroAverageAverageAverageSum\
    \ = gradesValuesWithZeroAverageAverageAverage.sum\n        val gradesValuesWithZeroAverageAverageAverageAverage\
    \ = gradesValuesWithZeroAverageAverageAverageSum / gradesValuesWithZeroAverageAverageAverageLength\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverageLength = gradesValuesWithZeroAverageAverageAverageAverage.length\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverageSum = gradesValuesWithZeroAverageAverageAverageAverage.sum\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverage = gradesValuesWithZeroAverageAverageAverageSum\
    \ / gradesValuesWithZeroAverageAverageAverageLength\n        val gradesValuesWithZeroAverageAverageAverageAverageLength\
    \ = gradesValuesWithZeroAverageAverageAverageAverage.length\n        val gradesValuesWithZeroAverageAverageAverageAverageSum\
    \ = gradesValuesWithZeroAverageAverageAverageAverage.sum\n        val gradesValuesWithZeroAverageAverageAverageAverageAverage\
    \ = gradesValuesWithZeroAverageAverageAverageAverageSum / ", "        val gradesMap\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat)\n\
    \        val gradesMap2 = gradesMap.mapValues(x => x.toFloat)\n        val gradesMap3\
    \ = gradesMap2.mapValues(x => x.toInt)\n        val gradesMap4 = gradesMap3.mapValues(x\
    \ => x.toInt)\n        val gradesMap5 = gradesMap4.mapValues(x => x.toInt)\n \
    \       val gradesMap6 = gradesMap5.mapValues(x => x.toInt)\n        val gradesMap7\
    \ = gradesMap6.mapValues(x => x.toInt)\n        val gradesMap8 = gradesMap7.mapValues(x\
    \ => x.toInt)\n        val gradesMap9 = gradesMap8.mapValues(x => x.toInt)\n \
    \       val gradesMap10 = gradesMap9.mapValues(x => x.toInt)\n        val gradesMap11\
    \ = gradesMap10.mapValues(x => x.toInt)\n        val gradesMap12 = gradesMap11.mapValues(x\
    \ => x.toInt)\n        val gradesMap13 = gradesMap12.mapValues(x => x.toInt)\n\
    \        val gradesMap14 = gradesMap13.mapValues(x => x.toInt)\n        val gradesMap15\
    \ = gradesMap14.mapValues(x => x.toInt)\n        val gradesMap16 = gradesMap15.mapValues(x\
    \ => x.toInt)\n        val gradesMap17 = gradesMap16.mapValues(x => x.toInt)\n\
    \        val gradesMap18 = gradesMap17.mapValues(x => x.toInt)\n        val gradesMap19\
    \ = gradesMap18.mapValues(x => x.toInt)\n        val gradesMap20 = gradesMap19.mapValues(x\
    \ => x.toInt)\n        val gradesMap21 = gradesMap20.mapValues(x => x.toInt)\n\
    \        val gradesMap22 = gradesMap21.mapValues(x => x.toInt)\n        val gradesMap23\
    \ = gradesMap22.mapValues(x => x.toInt)\n        val gradesMap24 = gradesMap23.mapValues(x\
    \ => x.toInt)\n        val gradesMap25 = gradesMap24.mapValues(x => x.toInt)\n\
    \        val gradesMap26 = gradesMap25.mapValues(x ", "        val gradesMap :\
    \ Map[Float, String] = grades.map(grade => (grade -> \"A+\")).toMap\n        val\
    \ gradesMap2 : Map[Float, String] = grades.map(grade => (grade -> \"B\")).toMap\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(grade => (grade -> \"\
    C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade =>\
    \ (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        ", "        val gradesMap = grades.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).mapValues(x => x.toFloat)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversed", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGrade\
    \ = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.map(x\
    \ => (x._2, x._1))\n        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversed =\
    \ gradesSortedByGradeReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversed.map(x => (x._1, x._2)).toMap\n    \
    \    val gradesSortedByGradeReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMapReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedBy", "        val gradesMap\
    \ = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues\
    \ = gradesMap.values.toList\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength", "        val gradesMap = grades.toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfProducts = gradesValues.map(x => x *\
    \ x).map(x => x * x).sum\n        val gradesAverageOfProducts = gradesSumOfProducts\
    \ / gradesLength\n        val gradesSumOfRoots = gradesValues.map(x => Math.sqrt(x)).sum\n\
    \        val gradesAverageOfRoots = gradesSumOfRoots / gradesLength\n        val\
    \ gradesSumOfPowers = gradesValues.map(x => Math.pow(x, 2)).sum\n        val gradesAverageOfPowers\
    \ = gradesSumOfPowers / gradesLength\n        val gradesSumOfLogs = gradesValues.map(x\
    \ => Math.log(x)).sum\n        val gradesAverageOfLogs = gradesSumOfLogs / gradesLength\n\
    \        val gradesSumOfLogsOfPowers = gradesValues.map(x => Math.log(x) * Math.pow(x,\
    \ 2)).sum\n        val gradesAverageOfLogsOfPowers = gradesSumOfLogsOfPowers /\
    \ gradesLength\n        val gradesSumOfLogsOfSquaredPowers = gradesValues.map(x\
    \ => Math.log(x) * Math.pow(x, 2)).map(x => Math.pow(x, 2)).sum\n        val gradesAverageOfLogsOfSquaredPowers\
    \ = gradesSumOfLogsOfSquaredPowers / gradesLength\n        val gradesSumOfLogsOfCubes\
    \ = gradesValues.map(x => Math.log(x) * Math.pow(x, 3)).sum\n        val gradesAverageOfLogsOfCubes\
    \ = gradesSumOfLogsOfCubes / gradesLength\n        val gradesSumOfLogsOfCubesOfPowers\
    \ = gradesValues.map(x => Math.log(x) * Math.pow(x, 3) * Math.pow(x, 2)).sum\n\
    \        val gradesAverageOfLogsOfCubesOfPowers = gradesSumOfLogsOfCubesOfPowers\
    \ / gradesLength\n        val grades", "        val gradesMap = grades.toMap\n\
    \        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n\
    \        val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedReversed = gradesMapKeys.reverse\n\
    \        val gradesMapValuesSortedReversed = gradesMapValues.reverse\n       \
    \ val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeys", "        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                acc + (grade\
    \ -> (acc.getOrElse(grade, \"\") + s\"+\"))\n        }\n        gradesMap.filter(_._2\
    \ != \"E\").map(_._2).reverse", "        val gradesSorted = grades.sortWith(_\
    \ < _)\n        val gradesLength = gradesSorted.length\n        val gradesSum\
    \ = gradesSorted.sum\n        val gradesAvg = gradesSum / gradesLength\n     \
    \   val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val gradesAvgOfSquares\
    \ = gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresOfDiffs =\
    \ gradesSorted.map(x => x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffs\
    \ = gradesSumOfSquaresOfDiffs / gradesLength\n        val gradesSumOfSquaresOfDiffsOfDiffs\
    \ = gradesSorted.map(x => x - gradesAvg).map(x => x - gradesAvg).sum\n       \
    \ val gradesAvgOfSquaresOfDiffsOfDiffs = gradesSumOfSquaresOfDiffsOfDiffs / gradesLength\n\
    \        val gradesSumOfSquaresOfDiffsOfDiffsOfDiffs = gradesSorted.map(x => x\
    \ - gradesAvg).map(x => x - gradesAvg).map(x => x - gradesAvg).sum\n        val\
    \ gradesAvgOfSquaresOfDiffsOfDiffsOfDiffs = gradesSumOfSquaresOfDiffsOfDiffsOfDiffs\
    \ / gradesLength\n        val gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffs =\
    \ gradesSorted.map(x => x - gradesAvg).map(x => x - gradesAvg).map(x => x - gradesAvg).map(x\
    \ => x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffsOfDiffsOfDiffsOfDiffs\
    \ = gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffs / gradesLength\n        val\
    \ gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffsOfDiffs = gradesSorted.map(x =>\
    \ x - gradesAvg).map(x => x - gradesAvg).map(x => x - gradesAvg).map(x => x -\
    \ gradesAvg).map(x => x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffsOfDiffsOfDiffsOfDiffsOfDiffsOfDiffs\
    \ = gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffsOfDiffs / gradesLength\n   \
    \     val gradesSum", '        grades.map(grade => if (grade > 3.0) "B+" else
    if (grade > 2.7) "B" else if (grade > 2.3) "B-" else if (grade > 2.0) "C+" else
    if (grade > 1.7) "C" else if (grade > 1.3) "C-" else if (grade > 1.0) "D+" else
    if (grade > 0.7) "D" else if (grade > 0.0) "D-" else "E")', "        val gradesMap\
    \ = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n     \
    \   val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n    \
    \    val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = ", " \
    \       val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_\
    \ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map\
    \ {\n            case (grade, index) => (index.toString + grade.toString)\n  \
    \      }\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map\
    \ {\n            case (grade, index) => (index.toString + grade.toString)\n  \
    \      }\n        val gradesKeysSortedWithIndexAndGradeAndLetter = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map\
    \ {\n            case (grade, index, letter) => (index.toString + grade + letter)\n\
    \        }\n        val gradesValuesSortedWithIndexAndGradeAndLetter = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map\
    \ {\n            case (grade, index, letter) => (index.toString + grade + letter)\n\
    \        }\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndGrade = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map\
    \ {\n            case (grade, index, letter, grade) => (index.toString + grade\
    \ + letter + grade)\n        }\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndGrade\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map {\n            case (grade,\
    \ index, letter, grade) => (index.toString + grade + letter + grade)\n       \
    \ }\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndGradeAndGrade =\
    \ gradesKeysSortedWithIndexAndGrade.zipWithIndex.map {\n            case (grade,\
    \ index, letter, grade, grade) => (index.toString + grade + letter + grade + grade)\n\
    \        }\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndGradeAndGra",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n\
    \        val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n\
    \        val gradesSortedMapReversedValuesLength = gradesSortedMapReversedValues.length\n",
  "        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed", "        val gradesMap = grades.toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(_)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = grades", "        val gradesMap = grades.toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesMapLength = gradesMap.length\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysArray = gradesMapKeys.toArray\n        val gradesMapValuesArray\
    \ = gradesMapValues.toArray\n        val gradesMapKeysArrayLength = gradesMapKeysArray.length\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArray.length\n      \
    \  val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val ", "        val gradesMap = grades.map(x\
    \ => x.toInt).zipWithIndex.toMap\n        val gradesMap2 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 0).map(x => x._1 -> x._2)\n        val gradesMap3 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 1).map(x => x._1 -> x._2)\n        val gradesMap4 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 2).map(x => x._1 -> x._2)\n        val gradesMap5 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 3).map(x => x._1 -> x._2)\n        val gradesMap6 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 4).map(x => x._1 -> x._2)\n        val gradesMap7 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 5).map(x => x._1 -> x._2)\n        val gradesMap8 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 6).map(x => x._1 -> x._2)\n        val gradesMap9 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 7).map(x => x._1 -> x._2)\n        val gradesMap10 = grades.map(x =>\
    \ x.toInt).zipWithIndex.filter(_._2 % 2 == 8).map(x => x._1 -> x._2)\n       \
    \ val gradesMap11 = grades.map(x => x.toInt).zipWithIndex.filter(_._2 % 2 == 9).map(x\
    \ => x._1 -> x._2)\n        val gradesMap12 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 10).map(x => x._1 -> x._2)\n        val gradesMap13 = grades.map(x =>\
    \ x.toInt).zipWithIndex.filter(_._2 % 2 == 11).map(x => x._1 -> x._2)\n      \
    \  val gradesMap14 = grades.map(x => x.toInt).zipWithIndex.filter(_._2 % 2 ==\
    \ 12).map(x => x._1 -> x._2)\n", "        val gradesMap = grades.toMap\n     \
    \   val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKey", "        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSortedByValues = gradesKeys.sortBy(_._2)\n        val gradesKeysSortedByValuesWithDuplicates\
    \ = gradesKeysSortedByValues.filter(_._2 != gradesKeysSortedByValues.last._2)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGrouped = gradesKeysSortedByValuesWithDuplicates.groupBy(_._2)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGrouped = gradesKeysSortedByValuesWithDuplicatesGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped = gradesKeysSortedByValuesWithDuplicatesGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGro", "        val gradesMap = grades.toMap\n\
    \        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = ", "        val gradesMap : Map[Float, String]\
    \ = Map(\n            4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3\
    \ -> \"A-\",\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n        \
    \    2.3 -> \"B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n \
    \           1.3 -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"\
    D\",\n            0.0 -> \"D-\",\n            0.0 -> \"E\"\n        )\n      \
    \  val gradesList : List[Float] = grades.toList\n        val gradesMapList : List[(Float,\
    \ String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val gradesMapList : List[(Float, String)] = gradesList.map(grade => (grade,\
    \ gradesMap(grade)))\n        val gradesMapList : List[(Float, String)] = gradesList.map(grade\
    \ => (grade, gradesMap(grade)))\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val gradesMapList : List[(Float, String)] = gradesList.map(grade => (grade,\
    \ gradesMap(grade)))\n        val gradesMapList : List[(Float, String)] = gradesList.map(grade\
    \ => (grade, gradesMap(grade)))\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val gradesMapList : List[(Float, String)] = gradesList.map(grade => (grade,\
    \ gradesMap(grade)))\n        val gradesMapList : List[(Float, String)] = gradesList.map(grade\
    \ => (grade, gradesMap(grade)))\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val ", "        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues\
    \ = gradesMap.values.toList\n        val gradesLength = gradesKeys.size\n    \
    \    val gradesSum = gradesValues.sum\n        val gradesAverage = gradesSum /\
    \ gradesLength\n        val gradesSumOfSquares = gradesValues.map(x => x * x).sum\n\
    \        val gradesAverageOfSquares = gradesSumOfSquares / gradesLength\n    \
    \    val gradesSumOfSquaresOfDifferences = gradesValues.map(x => x - gradesAverage).sum\n\
    \        val gradesAverageOfSquaresOfDifferences = gradesSumOfSquaresOfDifferences\
    \ / gradesLength\n        val gradesSumOfSquaresOfSquaresOfDifferences = gradesValues.map(x\
    \ => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x * x - gradesAverageOfSquaresOfSquares).sum\n \
    \       val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf",
  "        val gradesMap = grades.map(x => x.toInt).zipWithIndex.toMap\n        val\
    \ gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverse\
    \ = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverse\
    \ = gradesMapReverseReverse.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = grade", "        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversed", "        val gradesMap : Map[Float, String] =\
    \ grades.map(grade => grade -> \"A+\".toUpperCase)\n        val gradesMap2 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"B\".toUpperCase)\n        val gradesMap3\
    \ : Map[Float, String] = grades.map(grade => grade -> \"C\".toUpperCase)\n   \
    \     val gradesMap4 : Map[Float, String] = grades.map(grade => grade -> \"D\"\
    .toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\".toUpperCase)\n        val gradesMap6 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"F\".toUpperCase)\n        val gradesMap7 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"G\".toUpperCase)\n     \
    \   val gradesMap8 : Map[Float, String] = grades.map(grade => grade -> \"H\".toUpperCase)\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(grade => grade -> \"\
    I\".toUpperCase)\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"J\".toUpperCase)\n        val gradesMap11 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"K\".toUpperCase)\n        val gradesMap12 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"L\".toUpperCase)\n     \
    \   val gradesMap13 : Map[Float, String] = grades.map(grade => grade -> \"M\"\
    .toUpperCase)\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"N\".toUpperCase)\n        val gradesMap15 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"O\".toUpperCase)\n        val gradesMap16 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"P\".toUpperCase)\n     \
    \   val gradesMap17 : Map[Float, String] = grades.map(grade => grade -> \"Q\"\
    .toUpperCase)\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"R\".toUpperCase)\n        val gradesMap19 : Map[Float, ", "  \
    \      val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSorted\
    \ = gradesMapKeys.sort\n        val gradesMapValuesSorted = gradesMapValues.sort\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSor", "        val gradesMap\
    \ = grades.toMap\n        val gradesSortedByGrade = grades.sortBy(_)\n       \
    \ val gradesSortedByGradeWithZero = gradesSortedByGrade.filter(_ != 0)\n     \
    \   val gradesSortedByGradeWithZeroAndOne = gradesSortedByGradeWithZero.filter(_\
    \ != 1)\n        val gradesSortedByGradeWithZeroAndOneAndTwo = gradesSortedByGradeWithZeroAndOne.filter(_\
    \ != 2)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThree = gradesSortedByGradeWithZeroAndOneAndTwo.filter(_\
    \ != 3)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFour =\
    \ gradesSortedByGradeWithZeroAndOneAndTwoAndThree.filter(_ != 4)\n        val\
    \ gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFive = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFour.filter(_\
    \ != 5)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFive.filter(_ !=\
    \ 6)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven.filter(_\
    \ != 7)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight.filter(_\
    \ != 8)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine.filter(_\
    \ != 9)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen\
    \ = gradesSortedByGradeWith", "        val gradesMap = grades.toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.length\n        val gradesIndexes = gradesValues.zipWithIndex.map\
    \ { case (grade, index) => (index.toString, grade) }\n        val gradesIndexesLength\
    \ = gradesIndexes.size\n        val gradesIndexesIndexes = gradesIndexes.zipWithIndex.map\
    \ { case (gradeIndex, index) => (index.toString, gradeIndex) }\n        val gradesIndexesIndexesLength\
    \ = gradesIndexesIndexes.size\n        val gradesIndexesIndexesIndexes = gradesIndexesIndexes.zipWithIndex.map\
    \ { case (gradeIndexIndex, index) => (index.toString, gradeIndexIndex) }\n   \
    \     val gradesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexesIndexesLength\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n        val\
    \ gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes",
  '        grades.map(grade => if(grade > 3.0) "B+" else if (grade > 2.7) "B" else
    if (grade > 2.0) "C+" else if (grade > 1.7) "C" else if (grade > 1.0) "D+" else
    if (grade > 0.7) "D" else if (grade > 0.0) "D-" else "E")', '        grades.map(grade
    => if (grade > 3.0) "B+" else if (grade > 2.7) "B" else if (grade > 2.0) "C+"
    else if (grade > 1.7) "C" else if (grade > 1.0) "D+" else if (grade > 0.7) "D"
    else if (grade > 0.0) "D-" else "E")', "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesSumOfSquares = gradesSum\
    \ * gradesSum\n        val gradesSumOfSquaresOfGrades = gradesSumOfSquares * gradesKeys.size\n\
    \        val gradesSumOfSquaresOfGradesOfGrades = gradesSumOfSquaresOfGrades *\
    \ gradesValues.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGrades =\
    \ gradesSumOfSquaresOfGradesOfGrades * gradesKeys.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGrades * gradesValues.size\n        val\
    \ gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGrades\
    \ * gradesKeys.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGrades * gradesValues.size\n\
    \        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades * gradesKeys.size\n\
    \        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades * gradesValues.size\n\
    \        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ * gradesKeys.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOf",
  "        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\"\
    )).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        ", "        val gradesMap = grades.toMap\n\
    \        val gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReverse = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReverse = gradesSortedByValue.reverse\n      \
    \  val gradesSortedByKeyReverseMap = gradesSortedByKeyReverse.toMap\n        val\
    \ gradesSortedByValueReverseMap = gradesSortedByValueReverse.toMap\n        val\
    \ gradesSortedByKeyReverseMapReverse = gradesSortedByKeyReverseMap.reverse\n \
    \       val gradesSortedByValueReverseMapReverse = gradesSortedByValueReverseMap.reverse\n\
    \        val gradesSortedByKeyReverseMapReverseMap = gradesSortedByKeyReverseMapReverse.toMap\n\
    \        val gradesSortedByValueReverseMapReverseMap = gradesSortedByValueReverseMapReverse.toMap\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverse = gradesSortedByKeyReverseMapReverseMap.reverse\n\
    \        val gradesSortedByValueReverseMapReverseMapReverse = gradesSortedByValueReverseMapReverseMap.reverse\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMap = gradesSortedByKeyReverseMapReverseMapReverse.toMap\n\
    \        val gradesSortedByValueReverseMapReverseMapReverseMap = gradesSortedByValueReverseMapReverseMapReverse.toMap\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMapReverse = gradesSortedByKeyReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedByValueReverseMapReverseMapReverseMapReverse = gradesSortedByValueReverseMapReverseMapReverseMap.reverse\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMapReverseMap = gradesSortedByKeyReverseMapReverseMapReverseMapReverse.toMap\n\
    \        val gradesSortedByValueReverseMapReverseMapReverseMapReverseMap = gradesSortedByValueReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedByKeyReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val gradesSortedByValueReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedByValueReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ = gradesSortedByKeyReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n",
  "        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesCount = gradesSorted.length\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresOfSquares\
    \ = gradesSumOfSquares * gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquares * gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquares * gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares", "      \
    \  val gradesMap = grades.toMap\n        val gradesSortedByKey = grades.sortBy(_._1)\n\
    \        val gradesSortedByValue = grades.sortBy(_._2)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.toMap\n\
    \        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapWithKeyAndValue = gradesSortedByKeyReversedMap.map{\n\
    \            case (grade, key) => key -> grade\n        }\n        val gradesSortedByValueReversedMapWithKeyAndValue\
    \ = gradesSortedByValueReversedMap.map{\n            case (grade, key) => key\
    \ -> grade\n        }\n        val gradesSortedByKeyReversedMapWithValueAndKey\
    \ = gradesSortedByKeyReversedMapWithKeyAndValue.map{\n            case (key, grade)\
    \ => grade -> key\n        }\n        val gradesSortedByValueReversedMapWithValueAndKey\
    \ = gradesSortedByValueReversedMapWithKeyAndValue.map{\n            case (key,\
    \ grade) => grade -> key\n        }\n        val gradesSortedByKeyReversedMapWithValueAndKeyMap\
    \ = gradesSortedByKeyReversedMapWithValueAndKey.toMap\n        val gradesSortedByValueReversedMapWithValueAndKeyMap\
    \ = gradesSortedByValueReversedMapWithValueAndKey.toMap\n        val gradesSortedByKeyReversedMapWithValueAndKeyMapWithKeyAndValue\
    \ = gradesSortedByKeyReversedMapWithValueAndKeyMap.map{\n            case (grade,\
    \ key, value) => key -> grade -> value\n        }\n        val gradesSortedByValueReversedMapWithValueAndKeyMapWithKeyAndValue\
    \ = gradesSortedByValueReversedMapWithValueAndKeyMap.map{\n            case (grade,\
    \ key, value) => key -> grade -> value\n        }\n        val gradesSortedByKeyReversedMapWithValueAndKeyMapWithValueAndKey\
    \ = gradesSortedByKeyReversedMapWithValueAndKeyMapWithKeyAndValue.map{\n     \
    \       case (grade, key, value) => value -> key -> grade\n        }\n       \
    \ val gradesSortedByValueReversedMapWithValueAndKeyMapWithValueAndKey = gradesSortedByValueReversedMapWithValueAnd",
  "        val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n        val\
    \ gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed\
    \ = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.toMap\n\
    \        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.reverse\n\
    \        val gradesSortedByValueReversedMapReversed = gradesSortedByValueReversedMap.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMap = gradesSortedByKeyReversedMapReversed.toMap\n\
    \        val gradesSortedByValueReversedMapReversedMap = gradesSortedByValueReversedMapReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversed = gradesSortedByKeyReversedMapReversedMap.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMap.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMap = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMap = gradesSortedByValueReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = ", "        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                acc + (grade\
    \ -> (acc.getOrElse(grade, \"\") + s\"$grade\"))\n        }\n        val gradesList\
    \ : List[String] = gradesMap.filter(_._2 != \"E\").map(_._2).sorted\n        val\
    \ gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = grades",
  "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesLength\
    \ = gradesKeys.length\n        val gradesSum = gradesValues.sum\n        val gradesAverage\
    \ = gradesSum / gradesLength\n        val gradesMin = gradesValues.min\n     \
    \   val gradesMax = gradesValues.max\n        val gradesRange = gradesMax - gradesMin\n\
    \        val gradesRangeLength = gradesRange.length\n        val gradesRangeSum\
    \ = gradesRange.sum\n        val gradesRangeAverage = gradesRangeSum / gradesRangeLength\n\
    \        val gradesRangeMin = gradesRange.min\n        val gradesRangeMax = gradesRange.max\n\
    \        val gradesRangeRange = gradesRangeMax - gradesRangeMin\n        val gradesRangeRangeLength\
    \ = gradesRangeRange.length\n        val gradesRangeRangeSum = gradesRangeRange.sum\n\
    \        val gradesRangeRangeAverage = gradesRangeRangeSum / gradesRangeRangeLength\n\
    \        val gradesRangeRangeMin = gradesRangeRange.min\n        val gradesRangeRangeMax\
    \ = gradesRangeRange.max\n        val gradesRangeRangeRange = gradesRangeRangeMax\
    \ - gradesRangeRangeMin\n        val gradesRangeRangeRangeLength = gradesRangeRangeRange.length\n\
    \        val gradesRangeRangeRangeSum = gradesRangeRangeRange.sum\n        val\
    \ gradesRangeRangeRangeAverage = gradesRangeRangeRangeSum / gradesRangeRangeRangeLength\n\
    \        val gradesRangeRangeRangeMin = gradesRangeRangeRange.min\n        val\
    \ gradesRangeRangeRangeMax = gradesRangeRangeRange.max\n        val gradesRangeRangeRangeRange\
    \ = gradesRangeRangeRangeMax - gradesRangeRangeRangeMin\n        val gradesRangeRangeRangeRangeLength\
    \ = gradesRangeRangeRangeRange.length\n        val gradesRangeRangeRangeRangeSum\
    \ = gradesRangeRangeRangeRange.sum\n        val gradesRangeRangeRangeRangeAverage\
    \ = gradesRangeRangeRangeRangeSum / gradesRangeRangeRangeRangeLength\n       \
    \ val gradesRangeRangeRangeRangeMin = gradesRangeRangeRangeRange.min\n       \
    \ val gradesRangeRangeRangeRangeMax = gradesRangeRangeRangeRange.max\n       \
    \ val gradesRangeRangeRangeRangeRange", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValues", "        val gradesMap = grades.toMap\n    \
    \    val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesKeysSortedWithIndexAndGradeAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesValuesSortedWithIndexAndGradeAndGrades =\
    \ gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesKeysSortedWithIndexAndGradeAndGrades",
  '        grades.map(grade => if (grade > 3.0) "B+" else if (grade > 2.7) "B" else
    if (grade > 2.3) "B-" else if (grade > 2.0) "C+" else if (grade > 1.7) "C" else
    if (grade > 1.3) "C-" else if (grade > 1.0) "D+" else if (grade > 0.7) "D" else
    if (grade > 0.0) "D-" else "E")', "        val gradesMap = grades.toMap\n    \
    \    val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReverse\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReverseMap = gradesMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSorted = gradesMapSortedReverseMap.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverse = gradesMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMap = gradesMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSorted = gradesMapSortedReverseMapSortedReverseMap.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverse = gradesMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMap = gradesMapSortedReverseMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted =\
    \ gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMap\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMap\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverse", "        val gradesMap\
    \ = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMapReversed = gradesMap.map(x => (x._2, x._1))\n        val\
    \ gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sortWith(_\
    \ < _)\n        val gradesMapReversedValuesSorted = gradesMapReversedValues.sortWith(_\
    \ < _)\n        val gradesMapReversedKeysSortedWithValues = gradesMapReversedKeysSorted.zip(gradesMapReversedValuesSorted)\n\
    \        val gradesMapReversedKeysSortedWithValuesReversed = gradesMapReversedKeysSortedWithValues.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSorted\
    \ = gradesMapReversedKeysSortedWithValuesReversed.sortWith(_ < _)\n        val\
    \ gradesMapReversedKeysSortedWithValuesReversedSortedWithValues = gradesMapReversedKeysSortedWithValuesReversedSorted.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSorted\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValues.sortWith(_ <\
    \ _)\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValues\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSorted.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSorted\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValues.sortWith(_\
    \ < _)\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSorted.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues.sortWith",
  "        val gradesMap = grades.toMap\n        val gradesArray = grades.toArray\n\
    \        val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = grade", "        val gradesMap\
    \ = grades.toMap\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesMapLength = gradesMap.length\n     \
    \   val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n",
  "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n    \
    \    val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n     \
    \   val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val\
    \ gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n  \
    \      val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum)\n \
    \       val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val ", "        val gradesMap\
    \ = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n   \
    \     val gradesSortedByValue = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedWithKeys = gradesSortedByKeyReversed.map{case\
    \ (k,v) => (k,v)}\n        val gradesSortedByValueReversedWithKeys = gradesSortedByValueReversed.map{case\
    \ (k,v) => (v,k)}\n        val gradesSortedByKeyReversedWithValues = gradesSortedByKeyReversedWithKeys.map{case\
    \ (k,v) => (v,k)}\n        val gradesSortedByValueReversedWithValues = gradesSortedByValueReversedWithKeys.map{case\
    \ (k,v) => (k,v)}\n        val gradesSortedByKeyReversedWithValuesReversed = gradesSortedByKeyReversedWithValues.reverse\n\
    \        val gradesSortedByValueReversedWithValuesReversed = gradesSortedByValueReversedWithValuesReversed.reverse\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithKeys = gradesSortedByKeyReversedWithValuesReversed.map{case\
    \ (k,v) => (v,k)}\n        val gradesSortedByValueReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversedWithValuesReversed.map{case (k,v) => (k,v)}\n \
    \       val gradesSortedByKeyReversedWithValuesReversedWithValues = gradesSortedByKeyReversedWithValuesReversedWithKeys.map{case\
    \ (k,v) => (v,k)}\n        val gradesSortedByValueReversedWithValuesReversedWithValues\
    \ = gradesSortedByValueReversedWithValuesReversedWithKeys.map{case (k,v) => (k,v)}\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversed = gradesSortedByKeyReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesSortedByValueReversedWithValuesReversedWithValuesReversed =\
    \ gradesSortedByValueReversedWithValuesReversedWithKeys.map{case (k,v) => (v,k)}\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedBy", "        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        ", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesKeysSortedWithIndexAndGradeAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesValuesSortedWithIndexAndGradeAndGrades =\
    \ gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesKeysSortedWithIndexAndGradeAndGrades",
  "        val gradesSorted = grades.sortWith(_ < _)\n        val gradesLength = gradesSorted.length\n\
    \        val gradesAverage = gradesSorted.sum / gradesLength\n        val gradesSum\
    \ = gradesSorted.sum\n        val gradesSumOfSquares = gradesSorted.map(x => x\
    \ * x).sum\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesLength\n\
    \        val gradesSumOfSquaresSum = gradesSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquares\
    \ = gradesSumOfSquaresSum * gradesSumOfSquaresSum\n        val gradesSumOfSquaresSumOfSquaresAverage\
    \ = gradesSumOfSquaresSumOfSquares / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSum\
    \ = gradesSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquares\
    \ = gradesSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSum\n  \
    \      val gradesSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSum =\
    \ gradesSumOfSquaresSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSumOfSquaresSum\n\
    \        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\n\
    \        val gradesSumOfSqu", "        val gradesMap = grades.toMap\n        val\
    \ gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.toMap\n     \
    \   val gradesSortedByValueReversedMap = gradesSortedByValueReversed.toMap\n \
    \       val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.reverse\n\
    \        val gradesSortedByValueReversedMapReversed = gradesSortedByValueReversedMap.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMap = gradesSortedByKeyReversedMapReversed.toMap\n\
    \        val gradesSortedByValueReversedMapReversedMap = gradesSortedByValueReversedMapReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversed = gradesSortedByKeyReversedMapReversedMap.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMap.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMap = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMap = gradesSortedByValueReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = grades", "        grades.foldLeft(List[String]()){\n            (acc, grade)\
    \ => acc match {\n                case Nil => List(s\"$grade\")\n            \
    \    case x :: xs => if (grade > x) \"B+\" else grade match {\n              \
    \      case _ => \"B\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"\n                    case _ => \"B-\"\n               \
    \     case _ => \"B-\"", "        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ / 4).reverse).mapValues(_.map(_ % 4).map(x => if (x == 0) \"D\" else if (x ==\
    \ 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap2 = grades.groupBy(_ / 3.7).mapValues(_.toList.sortBy(_\
    \ / 3.7).reverse).mapValues(_.map(_ % 3.7).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap3 = grades.groupBy(_ / 3.3).mapValues(_.toList.sortBy(_\
    \ / 3.3).reverse).mapValues(_.map(_ % 3.3).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap4 = grades.groupBy(_ / 3.0).mapValues(_.toList.sortBy(_\
    \ / 3.0).reverse).mapValues(_.map(_ % 3.0).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap5 = grades.groupBy(_ / 2.7).mapValues(_.toList.sortBy(_\
    \ / 2.7).reverse).mapValues(_.map(_ % 2.7).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap6 = grades.groupBy(_ / 2.3).mapValues(_.toList.sortBy(_\
    \ / 2.3).reverse).mapValues(_.map(_ % 2.3).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap7 = grades.groupBy(_ / 2.0).mapValues(_.toList.sortBy(_\
    \ / 2.0).reverse).mapValues(_.map(_ % 2.0).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap8 = grades.groupBy(_ / 1.7).mapValues(_.toList.sortBy(_\
    \ / 1.7).reverse).mapValues(_.map", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse\
    \ = gradesSortedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverse\
    \ = gradesSortedMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReverseReverseReverse\
    \ = gradesSortedMapReverseReverse.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n      \
    \  val gradesSortedMapReverseReverseReverseReverse = gradesSortedMapReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedMapReverseReverseReverseReverseReverseReverse = gradesSortedMapReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverse.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverse",
  "        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = grade", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSortedByValue = gradesKeys.sortBy(_._2)\n        val gradesValuesSortedByKey\
    \ = gradesValues.sortBy(_._1)\n        val gradesKeysSortedByValueAndGrade = gradesKeysSortedByValue.toList\
    \ zip gradesValuesSortedByKey\n        val gradesKeysSortedByValueAndGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGrade.sortBy(_._1)\n        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGrade.sortBy(_._2)\n        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGrade.sortBy(_._3)\n \
    \       val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._4)\n\
    \        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._5)\n\
    \        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._6)\n\
    \        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._7)\n",
  "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_\
    \ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n       \
    \ val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKey",
  "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_\
    \ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n       \
    \ val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKey",
  "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x\
    \ => x)\n        val gradesKeysSortedSorted: Seq[Float] = gradesKeysSorted.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedSortedSorted: Seq[Float] = gradesKeysSortedSorted.sortBy(x\
    \ => x._1)\n        val gradesKeysSortedSortedSortedSorted: Seq[Float] = gradesKeysSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSorted: Seq[Float] =\
    \ gradesKeysSortedSortedSortedSorted.sortBy(x => x._1)\n        val gradesKeysSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSorted.sortBy(x => x._2)\n  \
    \      val gradesKeysSortedSortedSortedSortedSortedSortedSorted: Seq[Float] =\
    \ gradesKeysSortedSortedSortedSortedSortedSorted.sortBy(x => x._1)\n        val\
    \ gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._1)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._1)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSorted", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = grades.map(x\
    \ => x.toInt)\n        val gradesValues = grades.map(x => x.toFloat)\n       \
    \ val gradesValuesWithKeys = gradesKeys.zip(gradesValues)\n        val gradesValuesWithKeysSorted\
    \ = gradesValuesWithKeys.sortBy(_._1)\n        val gradesValuesWithKeysSortedWithKeys\
    \ = gradesValuesWithKeysSorted.map(x => (x._2, x._1))\n        val gradesValuesWithKeysSortedWithKeysReversed\
    \ = gradesValuesWithKeysSortedWithKeys.reverse\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversed.map(x => (x._1, x._2))\n      \
    \  val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversed = gradesValuesWithKeysSortedWithKeysReversedWithKeys.reverse\n\
    \        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversed.map(x => (x._2,\
    \ x._1))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversed.map(x\
    \ => (x._1, x._2))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed.map(x\
    \ => (x._2, x._1))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReverse",
  "        val gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\")).toMap\n\
    \        val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"B\")).toMap\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => (x, \"C\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => (x, \"D\")).toMap\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => (x, \"G\")).toMap\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => (x, \"H\")).toMap\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => (x, \"I\")).toMap\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => (x, \"J\")).toMap\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => (x, \"K\")).toMap\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => (x, \"L\")).toMap\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => (x, \"M\")).toMap\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => (x, \"N\")).toMap\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => (x, \"O\")).toMap\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => (x, \"P\")).toMap\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => (x, \"Q\")).toMap\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => (x, \"R\")).toMap\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => (x, \"S\")).toMap\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => (x, \"T\")).toMap\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => (x, \"U\")).toMap\n\
    \        val gradesMap22 : Map[Float, ", "        val gradesMap = grades.toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(f => -f)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(f => -f)\n        val gradesKeysSortedWithValues = gradesKeysSorted.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversed = gradesKeysSortedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValues = gradesKeysSortedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversed = gradesKeysSortedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValues =\
    \ gradesKeysSortedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValues.reverse\n \
    \       val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSorted", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesMap3 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap4\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap5 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap6 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap7 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap8\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap9 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap10 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap11 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap12 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap13\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap14 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap15 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap16 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap17 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap18\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap19 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap20 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap21 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap22 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap23\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap24 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap25 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap26 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap", "        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.toList).mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap2 = gradesMap.mapValues(_.sortBy(-_._2))\n        val gradesMap3\
    \ = gradesMap2.mapValues(_.sortBy(-_._2))\n        val gradesMap4 = gradesMap3.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap5 = gradesMap4.mapValues(_.sortBy(-_._2))\n        val gradesMap6\
    \ = gradesMap5.mapValues(_.sortBy(-_._2))\n        val gradesMap7 = gradesMap6.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap8 = gradesMap7.mapValues(_.sortBy(-_._2))\n        val gradesMap9\
    \ = gradesMap8.mapValues(_.sortBy(-_._2))\n        val gradesMap10 = gradesMap9.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap11 = gradesMap10.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap12 = gradesMap11.mapValues(_.sortBy(-_._2))\n        val gradesMap13\
    \ = gradesMap12.mapValues(_.sortBy(-_._2))\n        val gradesMap14 = gradesMap13.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap15 = gradesMap14.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap16 = gradesMap15.mapValues(_.sortBy(-_._2))\n        val gradesMap17\
    \ = gradesMap16.mapValues(_.sortBy(-_._2))\n        val gradesMap18 = gradesMap17.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap19 = gradesMap18.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap20 = gradesMap19.mapValues(_.sortBy(-_._2))\n        val gradesMap21\
    \ = gradesMap20.mapValues(_.sortBy(-_._2))\n        val gradesMap22 = gradesMap21.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap23 = gradesMap22.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap24 = gradesMap23.mapValues(_.sortBy(-_._2))\n        val gradesMap25\
    \ = gradesMap24.", "        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap2 = grades.groupBy(_ > 3.7f && _ < 3.3f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap3 = grades.groupBy(_ > 3.3f && _ < 3.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap4 = grades.groupBy(_ > 3.0f && _ < 2.7f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap5 = grades.groupBy(_ > 2.7f && _ < 2.3f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap6 = grades.groupBy(_ > 2.3f && _ < 2.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap7 = grades.groupBy(_ > 2.0f && _ < 1.7f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap8 = grades.groupBy(_ > 1.7f && _ < 1.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap9 = grades.groupBy(_ > 1.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap10 = grades.groupBy(_ > 0.7f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap11 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap12 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap13 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap14 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap15 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap16 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap17 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap18 = grades.group", "        val gradesMap\
    \ : Map[Float, String] = grades.map(x => (x, \"A+\")).toMap\n        val gradesMap2\
    \ = grades.map(x => (x, \"B\")).toMap\n        val gradesMap3 = grades.map(x =>\
    \ (x, \"C\")).toMap\n        val gradesMap4 = grades.map(x => (x, \"D\")).toMap\n\
    \        val gradesMap5 = grades.map(x => (x, \"E\")).toMap\n        val gradesMap6\
    \ = grades.map(x => (x, \"F\")).toMap\n        val gradesMap7 = grades.map(x =>\
    \ (x, \"G\")).toMap\n        val gradesMap8 = grades.map(x => (x, \"H\")).toMap\n\
    \        val gradesMap9 = grades.map(x => (x, \"I\")).toMap\n        val gradesMap10\
    \ = grades.map(x => (x, \"J\")).toMap\n        val gradesMap11 = grades.map(x\
    \ => (x, \"K\")).toMap\n        val gradesMap12 = grades.map(x => (x, \"L\")).toMap\n\
    \        val gradesMap13 = grades.map(x => (x, \"M\")).toMap\n        val gradesMap14\
    \ = grades.map(x => (x, \"N\")).toMap\n        val gradesMap15 = grades.map(x\
    \ => (x, \"O\")).toMap\n        val gradesMap16 = grades.map(x => (x, \"P\")).toMap\n\
    \        val gradesMap17 = grades.map(x => (x, \"Q\")).toMap\n        val gradesMap18\
    \ = grades.map(x => (x, \"R\")).toMap\n        val gradesMap19 = grades.map(x\
    \ => (x, \"S\")).toMap\n        val gradesMap20 = grades.map(x => (x, \"T\")).toMap\n\
    \        val gradesMap21 = grades.map(x => (x, \"U\")).toMap\n        val gradesMap22\
    \ = grades.map(x => (x, \"V\")).toMap\n        val gradesMap23 = grades.map(x\
    \ => (x, \"W\")).toMap\n        val gradesMap24 = grades.map(x => (x, \"X\")).toMap\n\
    \        val gradesMap25 = grades.map(x => (x, \"Y\")).toMap\n        val gradesMap26\
    \ = grades.map(x => (x, \"Z\")).toMap\n        val gradesMap27 = grades.map(x\
    \ => (x, \"A\")).toMap\n        val gradesMap", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n \
    \       val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n    \
    \    val gradesSortedMapReversed = gradesSorted.sortBy(x => x).reverse\n     \
    \   val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversed.sortBy(x => x).reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.sortBy(x => x).reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReverse",
  "        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum\
    \ = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2\
    \ = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n    \
    \    val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4\
    \ = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6\
    \ = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8\
    \ = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10\
    \ = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12\
    \ = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14\
    \ = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14\
    \ * gradesMapSortedReversedValues", "        val gradesMap = grades.groupBy(_\
    \ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val\
    \ gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4\
    \ = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2\
    \ > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n   \
    \     val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8\
    \ = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2\
    \ > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n  \
    \      val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n        val\
    \ gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val gradesMapSorted13\
    \ = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2\
    \ > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n \
    \       val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n        val\
    \ gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val gradesMapSorted18\
    \ = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2\
    \ > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n \
    \       val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n        val\
    \ gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val gradesMapSorted23\
    \ = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2\
    \ > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n \
    \       val gradesMapSorted", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues\
    \ = gradesMap.values.toList\n        val gradesSum = gradesValues.sum\n      \
    \  val gradesAvg = (gradesSum / gradesKeys.size)\n        val gradesDiff = gradesAvg\
    \ - grades\n        val gradesDiffMap = gradesDiff map { x => (x.toInt, x) }.toMap\n\
    \        val gradesDiffKeys = gradesDiffMap.keys\n        val gradesDiffValues\
    \ = gradesDiffMap.values.toList\n        val gradesDiffSum = gradesDiffValues.sum\n\
    \        val gradesDiffAvg = (gradesDiffSum / gradesDiffKeys.size)\n        val\
    \ gradesDiffDiff = gradesDiffAvg - gradesAvg\n        val gradesDiffDiffMap =\
    \ gradesDiffDiff map { x => (x.toInt, x) }.toMap\n        val gradesDiffDiffKeys\
    \ = gradesDiffDiffMap.keys\n        val gradesDiffDiffValues = gradesDiffDiffMap.values.toList\n\
    \        val gradesDiffDiffSum = gradesDiffDiffValues.sum\n        val gradesDiffDiffAvg\
    \ = (gradesDiffDiffSum / gradesDiffDiffKeys.size)\n        val gradesDiffDiffDiff\
    \ = gradesDiffDiffAvg - gradesDiffAvg\n        val gradesDiffDiffDiffMap = gradesDiffDiffDiff\
    \ map { x => (x.toInt, x) }.toMap\n        val gradesDiffDiffDiffKeys = gradesDiffDiffDiffMap.keys\n\
    \        val gradesDiffDiffDiffValues = gradesDiffDiffDiffMap.values.toList\n\
    \        val gradesDiffDiffDiffSum = gradesDiffDiffDiffValues.sum\n        val\
    \ gradesDiffDiffDiffAvg = (gradesDiffDiffDiffSum / gradesDiffDiffDiffKeys.size)\n\
    \        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAvg - gradesDiffDiffAvg\n\
    \        val gradesDiffDiffDiffDiffMap = gradesDiffDiffDiffDiff map { x => (x.toInt,\
    \ x) }.toMap\n        val gradesDiffDiffDiffDiffKeys = gradesDiffDiffDiffDiffMap.keys\n\
    \        val gradesDiffDiffDiffDiffValues = gradesDiffDiffDiffDiffMap.values.toList\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffValues.", "   \
    \     val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesValuesWithZero\
    \ = gradesValues.filter(_ != 0)\n        val gradesValuesWithZeroLength = gradesValuesWithZero.length\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValue", "        val gradesMap\
    \ = grades.toMap\n        val gradesSortedByGrade = grades.sortWith(_ < _)\n \
    \       val gradesSortedByGradeMap = gradesSortedByGrade.toMap\n        val gradesSortedByGradeMapKeys\
    \ = gradesSortedByGradeMap.keys\n        val gradesSortedByGradeMapValues = gradesSortedByGradeMap.values.toList\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val grade", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresMin = gradesSumOfSquares.min\n\
    \        val gradesSumOfSquaresMax = gradesSumOfSquares.max\n        val gradesSumOfSquaresSum\
    \ = gradesValues.map(x => x * x).sum\n        val gradesSumOfSquaresSumAverage\
    \ = gradesSumOfSquaresSum / gradesLength\n        val gradesSumOfSquaresSumMin\
    \ = gradesSumOfSquaresSum.min\n        val gradesSumOfSquaresSumMax = gradesSumOfSquaresSum.max\n\
    \        val gradesSumOfSquaresSumSum = gradesValues.map(x => x * x).sum\n   \
    \     val gradesSumOfSquaresSumSumAverage = gradesSumOfSquaresSumSum / gradesLength\n\
    \        val gradesSumOfSquaresSumSumMin = gradesSumOfSquaresSumSum.min\n    \
    \    val gradesSumOfSquaresSumSumMax = gradesSumOfSquaresSumSum.max\n        val\
    \ gradesSumOfSquaresSumSumSum = gradesValues.map(x => x * x).sum\n        val\
    \ gradesSumOfSquaresSumSumSumAverage = gradesSumOfSquaresSumSumSum / gradesLength\n\
    \        val gradesSumOfSquaresSumSumSumMin = gradesSumOfSquaresSumSumSum.min\n\
    \        val gradesSumOfSquaresSumSumSumMax = gradesSumOfSquaresSumSumSum.max\n\
    \        val gradesSumOfSquaresSumSumSumSum = gradesValues.map(x => x * x).sum\n\
    \        val gradesSumOfSquaresSumSumSumSumAverage = gradesSumOfSquaresSumSumSumSum\
    \ / gradesLength\n        val ", "        val gradesMap : Map[Float, String] =\
    \ grades.foldLeft(Map[Float, String]()){\n            case (acc, grade) =>\n \
    \               val key = grade / 4.0f\n                val value = if (grade\
    \ > 3.7f) \"A+\" else if (grade > 3.3f) \"A\" else if (grade > 2.7f) \"A-\" else\
    \ if (grade > 2.3f) \"B+\" else if (grade > 1.7f) \"B\" else if (grade > 1.3f)\
    \ \"B-\" else if (grade > 0.7f) \"C+\" else if (grade > 0.3f) \"C\" else if (grade\
    \ > 0.0f) \"C-\" else \"D+\"\n                acc + (key -> value)\n        }\n\
    \        val gradesList : List[String] = gradesMap.keys.toList.sortWith(_ < _).map(key\
    \ => gradesMap(key))\n        gradesList.reverse", "        val gradesMap = grades.toMap\n\
    \        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n\
    \        val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSor", "        val gradesMap\
    \ = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n        val gradesMapReverse\
    \ = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverse\
    \ = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        gradesMapReverseReverse.map(x\
    \ => x._1 -> x._2).toList.sortBy(x => x._1).reverse.map(x => x._2).reverse", " \
    \       val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKey = gradesMapSorted.sortBy(_._2)\n     \
    \   val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n     \
    \   val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed",
  "        val gradesMap = grades.toMap\n        val gradesSortedByGPA = grades.sortBy(_.toFloat)\n\
    \        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n        val\
    \ gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n        val\
    \ gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap\
    \ = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.keys.toList\n\
    \        val gradesSortedByGP", "        val gradesMap = grades.toMap\n      \
    \  val gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesSortedByKey.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversed", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues\
    \ = gradesMap.values\n        val gradesLength = gradesKeys.size\n        val\
    \ gradesSum = gradesValues.foldLeft(0.0f){ (sum, grade) => sum + grade }\n   \
    \     val gradesAverage = gradesSum / gradesLength\n        val gradesDiff = gradesAverage\
    \ - gradesMap.values.head\n        val gradesDiffLength = gradesDiff.size\n  \
    \      val gradesDiffSum = gradesDiff.foldLeft(0.0f){ (sum, grade) => sum + grade\
    \ }\n        val gradesDiffAverage = gradesDiffSum / gradesDiffLength\n      \
    \  val gradesDiffDiff = gradesDiffAverage - gradesDiff.head\n        val gradesDiffDiffLength\
    \ = gradesDiffDiff.size\n        val gradesDiffDiffSum = gradesDiffDiff.foldLeft(0.0f){\
    \ (sum, grade) => sum + grade }\n        val gradesDiffDiffAverage = gradesDiffDiffSum\
    \ / gradesDiffDiffLength\n        val gradesDiffDiffDiff = gradesDiffDiffAverage\
    \ - gradesDiffDiff.head\n        val gradesDiffDiffDiffLength = gradesDiffDiffDiff.size\n\
    \        val gradesDiffDiffDiffSum = gradesDiffDiffDiff.foldLeft(0.0f){ (sum,\
    \ grade) => sum + grade }\n        val gradesDiffDiffDiffAverage = gradesDiffDiffDiffSum\
    \ / gradesDiffDiffDiffLength\n        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAverage\
    \ - gradesDiffDiffDiff.head\n        val gradesDiffDiffDiffDiffLength = gradesDiffDiffDiffDiff.size\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiff.foldLeft(0.0f){\
    \ (sum, grade) => sum + grade }\n        val gradesDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffSum\
    \ / gradesDiffDiffDiffDiffLength\n        val gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffAverage\
    \ - gradesDiffDiffDiffDiff.head\n        val gradesDiffDiffDiffDiffDiffLength\
    \ = gradesDiffDiffDiffDiffDiff.size\n        val gradesDiffDiffDiffDiffDiffSum\
    \ = gradesDiffDiffDiffDiffDiff.foldLeft(0.0", "        val gradesSorted = grades.sortWith(_\
    \ < _)\n        val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.length\n\
    \        val gradesAverage = gradesSum / gradesCount\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquare\
    \ = gradesSumOfSquares * (gradesSumOfSquares - gradesAverage) * (gradesSumOfSquares\
    \ - gradesAverage)\n        val gradesSumOfSquaresAverageSquareRoot = math.sqrt(gradesSumOfSquaresAverageSquare)\n\
    \        val gradesSumOfSquaresAverageSquareRootSquare = gradesSumOfSquaresAverageSquareRoot\
    \ * gradesSumOfSquaresAverageSquare\n        val gradesSumOfSquaresAverageSquareRootSquareRoot\
    \ = math.sqrt(gradesSumOfSquaresAverageSquareRootSquare)\n        val gradesSumOfSquaresAverageSquareRootSquareRootSquare\
    \ = gradesSumOfSquaresAverageSquareRootSquare * gradesSumOfSquaresAverageSquareRootSquare\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRoot = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquare)\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare = gradesSumOfSquaresAverageSquareRootSquareRootSquare\
    \ * gradesSumOfSquaresAverageSquareRootSquareRootSquare\n        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\
    \ = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquareRoot)\n     \
    \   val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare = gradesSumOfSquaresAverageSquareRootSquareRootSquare\
    \ * gradesSumOfSquaresAverageSquareRootSquareRootSquare\n        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare)\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquareRootSquare\
    \ = gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare * gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(gradesSumOfSquaresAverageSquare", "        val gradesSet = grades.toSet\n\
    \        val gradesSetSize = grades.size\n        val gradesSetIterator = grades.iterator\n\
    \        val gradesSetIteratorSize = gradesSetIterator.size\n        val gradesSetIteratorIterator\
    \ = gradesSetIterator.iterator\n        val gradesSetIteratorIteratorSize = gradesSetIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIterator = gradesSetIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorSize = gradesSetIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIterator = gradesSetIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorSize = gradesSetIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIterator = gradesSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorSize = gradesSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIterator.iterator\n        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ gradesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator",
  "        val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n        val\
    \ gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed\
    \ = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithDuplicates\
    \ = gradesSortedByKeyReversed.filter(_._2 > 1)\n        val gradesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByValueReversed.filter(_._2 > 1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByKeyReversedWithDuplicates.sortBy(_._1)\n        val gradesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByValueReversedWithDuplicates.sortBy(_._1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValue.reverse\n        val\
    \ gradesSortedByValueReversedWithDuplicatesSortedByValueReversed = gradesSortedByValueReversedWithDuplicatesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValueReversed.filter(_._2 >\
    \ 1)\n        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValueReversed.filter(_._2\
    \ > 1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicates.sortBy(_._1)\n\
    \        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValueReversed.sortBy(_._1)\n\
    \        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue.reverse\n\
    \        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByValueReversedWithDuplicates", "        val gradesMap = grades.toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesSet = grades.toSet\n\
    \        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesEnumerator2 = grades.iterator\n        val\
    \ gradesIterator2 = grades.iterator\n        val gradesEnumerator3 = grades.iterator\n\
    \        val gradesIterator3 = grades.iterator\n        val gradesEnumerator4\
    \ = grades.iterator\n        val gradesIterator4 = grades.iterator\n        val\
    \ gradesEnumerator5 = grades.iterator\n        val gradesIterator5 = grades.iterator\n\
    \        val gradesEnumerator6 = grades.iterator\n        val gradesIterator6\
    \ = grades.iterator\n        val gradesEnumerator7 = grades.iterator\n       \
    \ val gradesIterator7 = grades.iterator\n        val gradesEnumerator8 = grades.iterator\n\
    \        val gradesIterator8 = grades.iterator\n        val gradesEnumerator9\
    \ = grades.iterator\n        val gradesIterator9 = grades.iterator\n        val\
    \ gradesEnumerator10 = grades.iterator\n        val gradesIterator10 = grades.iterator\n\
    \        val gradesEnumerator11 = grades.iterator\n        val gradesIterator11\
    \ = grades.iterator\n        val gradesEnumerator12 = grades.iterator\n      \
    \  val gradesIterator12 = grades.iterator\n        val gradesEnumerator13 = grades.iterator\n\
    \        val gradesIterator13 = grades.iterator\n        val gradesEnumerator14\
    \ = grades.iterator\n        val gradesIterator14 = grades.iterator\n        val\
    \ gradesEnumerator15 = grades.iterator\n        val gradesIterator15 = grades.iterator\n\
    \        val gradesEnumerator16 = grades.iterator\n        val gradesIterator16\
    \ = grades.iterator\n        val gradesEnumerator17 = grades.iterator\n      \
    \  val gradesIterator17 = grades.iterator\n        val gradesEnumerator18 = grades.iterator\n\
    \        val gradesIterator18 = grades.iterator\n        val gradesEnumerator19\
    \ = grades.iterator\n        val gradesIterator19 = grades.iterator\n        val\
    \ gradesEnumerator20 = grades.iterator\n        val gradesIterator20 = grades.iterator\n\
    \        val gradesEnumerator21 = grades.iterator\n        val gradesIterator21\
    \ = grades.iterator\n        ", "        val gradesMap = grades.map(x => x.toString\
    \ -> x)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValuesSum14 * grade", "        val gradesMap = grades.toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesSet = grades.toSet\n\
    \        val gradesSeq = grades.toSeq\n        val gradesIter = grades.toIterator\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.toMap\n\
    \        val gradesMap = grades.toMap\n        val gradesMap = grades.to", " \
    \       val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortBy(_)\n        val gradesValuesSorted = gradesValues.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicates = gradesKeysSorted.distinct\n    \
    \    val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n    \
    \    val gradesKeysSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicates.sortBy(_)\n\
    \        val gradesValuesSortedWithDuplicatesSorted = gradesValuesSortedWithDuplicates.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicates = gradesKeysSortedWithDuplicatesSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicates = gradesValuesSortedWithDuplicatesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicatesSortedWithDuplicates.sortBy(_)\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSorted = gradesValuesSortedWithDuplicatesSortedWithDuplicates.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesKeysSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n      \
    \  val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesValuesSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n    \
    \    val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ = gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.sortBy(_)\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ = gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicate", "        val gradesMap = grades.toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesSet = grades.toSet\n\
    \        val gradesSeq = grades.toSeq\n        val gradesIter = grades.iterator\n\
    \        val gradesEnumerator = grades.iterator\n        val gradesIterator =\
    \ grades.iterator\n        val gradesEnumerator2 = grades.iterator\n        val\
    \ gradesIterator2 = grades.iterator\n        val gradesEnumerator3 = grades.iterator\n\
    \        val gradesIterator3 = grades.iterator\n        val gradesEnumerator4\
    \ = grades.iterator\n        val gradesIterator4 = grades.iterator\n        val\
    \ gradesEnumerator5 = grades.iterator\n        val gradesIterator5 = grades.iterator\n\
    \        val gradesEnumerator6 = grades.iterator\n        val gradesIterator6\
    \ = grades.iterator\n        val gradesEnumerator7 = grades.iterator\n       \
    \ val gradesIterator7 = grades.iterator\n        val gradesEnumerator8 = grades.iterator\n\
    \        val gradesIterator8 = grades.iterator\n        val gradesEnumerator9\
    \ = grades.iterator\n        val gradesIterator9 = grades.iterator\n        val\
    \ gradesEnumerator10 = grades.iterator\n        val gradesIterator10 = grades.iterator\n\
    \        val gradesEnumerator11 = grades.iterator\n        val gradesIterator11\
    \ = grades.iterator\n        val gradesEnumerator12 = grades.iterator\n      \
    \  val gradesIterator12 = grades.iterator\n        val gradesEnumerator13 = grades.iterator\n\
    \        val gradesIterator13 = grades.iterator\n        val gradesEnumerator14\
    \ = grades.iterator\n        val gradesIterator14 = grades.iterator\n        val\
    \ gradesEnumerator15 = grades.iterator\n        val gradesIterator15 = grades.iterator\n\
    \        val gradesEnumerator16 = grades.iterator\n        val gradesIterator16\
    \ = grades.iterator\n        val gradesEnumerator17 = grades.iterator\n      \
    \  val gradesIterator17 = grades.iterator\n        val gradesEnumerator18 = grades.iterator\n\
    \        val gradesIterator18 = grades.iterator\n        val gradesEnumerator19\
    \ = grades.iterator\n        val gradesIterator19 = grades.iterator\n        val\
    \ gradesEnumerator20 = grades.iterator\n        val gradesIterator20 = grades.iterator\n\
    \        val gradesEnumerator21 = grades.iterator\n        val gradesIterator21\
    \ = grades.iterator\n        ", "        grades.map {\n            case 4.0f =>\
    \ \"A+\"\n            case 3.7f => \"A\"\n            case 3.3f => \"A-\"\n  \
    \          case 3.0f => \"B+\"\n            case 2.7f => \"B\"\n            case\
    \ 2.3f => \"B-\"\n            case 2.0f => \"C+\"\n            case 1.7f => \"\
    C\"\n            case 1.3f => \"C-\"\n            case 1.0f => \"D+\"\n      \
    \      case 0.7f => \"D\"\n            case 0.0f => \"D-\"\n            case 0.0f\
    \ => \"E\"\n        }", "        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesWithoutZeros = gradesMapValues.filterNot(_ == 0)\n \
    \       val gradesMapValuesWithoutZeroCount = gradesMapValuesWithoutZeros.length\n\
    \        val gradesMapValuesWithoutZeroSum = gradesMapValuesWithoutZeros.sum\n\
    \        val gradesMapValuesWithoutZeroAverage = gradesMapValuesWithoutZeros.average\n\
    \        val gradesMapValuesWithoutZeroVariance = gradesMapValuesWithoutZeros.variance\n\
    \        val gradesMapValuesWithoutZeroStandardDeviation = gradesMapValuesWithoutZeros.standardDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviation = gradesMapValuesWithoutZeros.varianceDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationDeviation = gradesMapValuesWithoutZeros.standardDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationDeviation = gradesMapValuesWithoutZeros.varianceDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVariance = gradesMapValuesWithoutZeros.standardDeviationVariance\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationVariance = gradesMapValuesWithoutZeros.varianceDeviationVariance\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVarianceDeviation = gradesMapValuesWithoutZeros.standardDeviationVarianceDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationVarianceDeviation = gradesMapValuesWithoutZeros.varianceDeviationVarianceDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVarianceDeviationDeviation\
    \ = gradesMapValuesWithoutZeros.standardDeviationVarianceDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationVarianceDeviationDeviation\
    \ = gradesMapValuesWithoutZeros.varianceDeviationVarianceDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVarianceDe", "       \
    \ val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n        val\
    \ gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed\
    \ = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithZero\
    \ = gradesSortedByKeyReversed.map(_._1 -> 0f)\n        val gradesSortedByValueReversedWithZero\
    \ = gradesSortedByValueReversed.map(_._2 -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZero\
    \ = gradesSortedByKeyReversedWithZero.map(_._1 -> 0f)\n        val gradesSortedByValueReversedWithZeroAndZero\
    \ = gradesSortedByValueReversedWithZero.map(_._2 -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZero.map(_._1 -> 0f)\n        val gradesSortedByValueReversedWithZeroAndZeroAndZero\
    \ = gradesSortedByValueReversedWithZeroAndZero.map(_._2 -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZeroAndZero.map(_._1 -> 0f)\n        val\
    \ gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZero = gradesSortedByValueReversedWithZeroAndZeroAndZero.map(_._2\
    \ -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZero.map(_._1 -> 0f)\n \
    \       val gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZeroAndZero =\
    \ gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZero.map(_._2 -> 0f)\n \
    \       val gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZeroAndZero.map(_._1 ->\
    \ 0f)\n        val gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZeroAndZeroAndZero",
  "        val gradesMap : Map[Float, String] = grades.map(grade => grade -> \"A+\"\
    .toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\".toUpperCase)\n        val gradesMap3 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"C\".toUpperCase)\n        val gradesMap4 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"D\".toUpperCase)\n     \
    \   val gradesMap5 : Map[Float, String] = grades.map(grade => grade -> \"E\".toUpperCase)\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(grade => grade -> \"\
    F\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"G\".toUpperCase)\n        val gradesMap8 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"H\".toUpperCase)\n        val gradesMap9 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"I\".toUpperCase)\n     \
    \   val gradesMap10 : Map[Float, String] = grades.map(grade => grade -> \"J\"\
    .toUpperCase)\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"K\".toUpperCase)\n        val gradesMap12 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"L\".toUpperCase)\n        val gradesMap13 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"M\".toUpperCase)\n     \
    \   val gradesMap14 : Map[Float, String] = grades.map(grade => grade -> \"N\"\
    .toUpperCase)\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"O\".toUpperCase)\n        val gradesMap16 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"P\".toUpperCase)\n        val gradesMap17 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"Q\".toUpperCase)\n     \
    \   val gradesMap18 : Map[Float, String] = grades.map(grade => grade -> \"R\"\
    .toUpperCase)\n        val gradesMap19 : Map[Float, ", "        val gradesMap\
    \ = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n     \
    \   val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n    \
    \    val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = ", '        grades.map(grade
    => if (grade > 3.0) "B+" else if (grade > 2.7) "B" else if (grade > 2.3) "B-"
    else if (grade > 2.0) "C+" else if (grade > 1.7) "C" else if (grade > 1.3) "C-"
    else if (grade > 1.0) "D+" else if (grade > 0.7) "D" else if (grade > 0.0) "D-"
    else "E")', "        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGrade = gradesSortedByGradeReversedMapValues.sortBy(_._1)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversed = gradesSortedByGradeReversedMapValuesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap = gradesSortedByGradeReversedMapValuesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.keys\n      \
    \  val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues.sortBy(_._1)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGrade", "        val gradesMap = grades.map(x => x.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(x => x)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedLength = gradesMapSortedReversed.length\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMap", "        val gradesMap\
    \ = grades.toMap\n        val gradesSortedMap = gradesMap.sortBy(_._1)\n     \
    \   val gradesSortedMapReversed = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap\
    \ = gradesSortedMapReversed.toMap\n        val gradesSortedMapReversedKeys = gradesSortedMapReversedMap.keys\n\
    \        val gradesSortedMapReversedValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedValuesMap = gradesSortedMapReversedValues.toMap\n\
    \        val gradesSortedMapReversedValuesKeys = gradesSortedMapReversedValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValues = gradesSortedMapReversedValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesMap = gradesSortedMapReversedValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesKeys = gradesSortedMapReversedValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValues = gradesSortedMapReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesMap = gradesSortedMapReversedValuesValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesValuesKeys = gradesSortedMapReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValuesValues = gradesSortedMapReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesMap = gradesSortedMapReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesKeys = gradesSortedMapReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValues = gradesSortedMapReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesMap = gradesSortedMapReversedValuesValuesValuesValuesValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesValuesKeys =\
    \ gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValues\
    \ = gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesValuesMap\
    \ = ", "        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n  \
    \      val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, ", "        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList).mapValues(_.sortBy(-_._1))\n\
    \        val gradesMap2 = gradesMap.mapValues(_.map(_._2))\n        val gradesMap3\
    \ = gradesMap2.mapValues(_.map(_._2))\n        val gradesMap4 = gradesMap3.mapValues(_.map(_._2))\n\
    \        val gradesMap5 = gradesMap4.mapValues(_.map(_._2))\n        val gradesMap6\
    \ = gradesMap5.mapValues(_.map(_._2))\n        val gradesMap7 = gradesMap6.mapValues(_.map(_._2))\n\
    \        val gradesMap8 = gradesMap7.mapValues(_.map(_._2))\n        val gradesMap9\
    \ = gradesMap8.mapValues(_.map(_._2))\n        val gradesMap10 = gradesMap9.mapValues(_.map(_._2))\n\
    \        val gradesMap11 = gradesMap10.mapValues(_.map(_._2))\n        val gradesMap12\
    \ = gradesMap11.mapValues(_.map(_._2))\n        val gradesMap13 = gradesMap12.mapValues(_.map(_._2))\n\
    \        val gradesMap14 = gradesMap13.mapValues(_.map(_._2))\n        val gradesMap15\
    \ = gradesMap14.mapValues(_.map(_._2))\n        val gradesMap16 = gradesMap15.mapValues(_.map(_._2))\n\
    \        val gradesMap17 = gradesMap16.mapValues(_.map(_._2))\n        val gradesMap18\
    \ = gradesMap17.mapValues(_.map(_._2))\n        val gradesMap19 = gradesMap18.mapValues(_.map(_._2))\n\
    \        val gradesMap20 = gradesMap19.mapValues(_.map(_._2))\n        val gradesMap21\
    \ = gradesMap20.mapValues(_.map(_._2))\n        val gradesMap22 = gradesMap21.mapValues(_.map(_._2))\n\
    \        val gradesMap23 = gradesMap22.mapValues(_.map(_._2))\n        val gradesMap24\
    \ = gradesMap23.mapValues(_.map(_._2))\n        val gradesMap25 = gradesMap24.mapValues(_.map(_._2))\n\
    \        val gradesMap26 = gradesMap25.mapValues(_.map(_._2))\n        val gradesMap27\
    \ = gradesMap26.mapValues(_.map(_._2))\n        ", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortWith((x,y) =>\
    \ x.toFloat < y.toFloat)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n\
    \        val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n\
    \        val gradesSortedMapReversedValuesSum = gradesSortedMapReversedValues.sum\n\
    \        val gradesSortedMapReversedValuesSum2 = gradesSortedMapReversedValuesSum\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum3\
    \ = gradesSortedMapReversedValuesSum2 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum4 = gradesSortedMapReversedValuesSum3\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum5\
    \ = gradesSortedMapReversedValuesSum4 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum6 = gradesSortedMapReversedValuesSum5\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum7\
    \ = gradesSortedMapReversedValuesSum6 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum8 = gradesSortedMapReversedValuesSum7\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum9\
    \ = gradesSortedMapReversedValuesSum8 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum10 = gradesSortedMapReversedValuesSum9\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum11\
    \ = gradesSortedMapReversedValuesSum10 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum12 = gradesSortedMapReversedValuesSum11\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum13\
    \ = gradesSortedMapReversedValuesSum12 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum14 = grades", "        val gradesMap\
    \ = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n   \
    \     val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReverse",
  "        val gradesMap = grades.toMap\n        val gradesSortedByKey = gradesMap.sortBy(_._1)\n\
    \        val gradesSortedByValue = gradesMap.sortBy(_._2)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedValues = gradesSortedByKeyReversed.map(_._2)\n\
    \        val gradesSortedByValueReversedValues = gradesSortedByValueReversed.map(_._1)\n\
    \        val gradesSortedByKeyReversedValuesSum = gradesSortedByKeyReversedValues.sum\n\
    \        val gradesSortedByValueReversedValuesSum = gradesSortedByValueReversedValues.sum\n\
    \        val gradesSortedByKeyReversedValuesSum2 = gradesSortedByKeyReversedValuesSum\
    \ * gradesSortedByKeyReversedValuesSum\n        val gradesSortedByValueReversedValuesSum2\
    \ = gradesSortedByValueReversedValuesSum * gradesSortedByValueReversedValuesSum\n\
    \        val gradesSortedByKeyReversedValuesSum3 = gradesSortedByKeyReversedValuesSum2\
    \ * gradesSortedByKeyReversedValuesSum\n        val gradesSortedByValueReversedValuesSum3\
    \ = gradesSortedByValueReversedValuesSum2 * gradesSortedByValueReversedValuesSum\n\
    \        val gradesSortedByKeyReversedValuesSum4 = gradesSortedByKeyReversedValuesSum3\
    \ * gradesSortedByKeyReversedValuesSum\n        val gradesSortedByValueReversedValuesSum4\
    \ = gradesSortedByValueReversedValuesSum3 * gradesSortedByValueReversedValuesSum\n\
    \        val gradesSortedByKeyReversedValuesSum5 = gradesSortedByKeyReversedValuesSum4\
    \ * gradesSortedByKeyReversedValuesSum\n        val gradesSortedByValueReversedValuesSum5\
    \ = gradesSortedByValueReversedValuesSum4 * gradesSortedByValueReversedValuesSum\n\
    \        val gradesSortedByKeyReversedValuesSum6 = gradesSortedByKeyReversedValuesSum5\
    \ * gradesSortedByKeyReversedValuesSum\n        val gradesSortedByValueReversedValuesSum6\
    \ = gradesSortedByValueReversedValuesSum5 * gradesSortedByValueReversedValuesSum\n\
    \        val gradesSortedByKeyReversedValuesSum7 = gradesSortedByKeyReversedValuesSum6\
    \ * gradesSortedBy", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum).toMap\n        grades.map(grade => gradesMap(grade / 10).map(letter\
    \ => letter + if (grade % 10 == 0) \"-\" else \"+\"))", "        val gradesMap\
    \ = grades.toMap\n        val gradesArray = grades.toArray\n        val gradesSet\
    \ = grades.toSet\n        val gradesSeq = grades.toSeq\n        val gradesList\
    \ = grades.toList\n        val gradesIterator = grades.iterator\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesEnumerator2 = grades.iterator\n       \
    \ val gradesEnumerator3 = grades.iterator\n        val gradesEnumerator4 = grades.iterator\n\
    \        val gradesEnumerator5 = grades.iterator\n        val gradesEnumerator6\
    \ = grades.iterator\n        val gradesEnumerator7 = grades.iterator\n       \
    \ val gradesEnumerator8 = grades.iterator\n        val gradesEnumerator9 = grades.iterator\n\
    \        val gradesEnumerator10 = grades.iterator\n        val gradesEnumerator11\
    \ = grades.iterator\n        val gradesEnumerator12 = grades.iterator\n      \
    \  val gradesEnumerator13 = grades.iterator\n        val gradesEnumerator14 =\
    \ grades.iterator\n        val gradesEnumerator15 = grades.iterator\n        val\
    \ gradesEnumerator16 = grades.iterator\n        val gradesEnumerator17 = grades.iterator\n\
    \        val gradesEnumerator18 = grades.iterator\n        val gradesEnumerator19\
    \ = grades.iterator\n        val gradesEnumerator20 = grades.iterator\n      \
    \  val gradesEnumerator21 = grades.iterator\n        val gradesEnumerator22 =\
    \ grades.iterator\n        val gradesEnumerator23 = grades.iterator\n        val\
    \ gradesEnumerator24 = grades.iterator\n        val gradesEnumerator25 = grades.iterator\n\
    \        val gradesEnumerator26 = grades.iterator\n        val gradesEnumerator27\
    \ = grades.iterator\n        val gradesEnumerator28 = grades.iterator\n      \
    \  val gradesEnumerator29 = grades.iterator\n        val gradesEnumerator30 =\
    \ grades.iterator\n        val gradesEnumerator31 = grades.iterator\n        val\
    \ gradesEnumerator32 = grades.iterator\n        val gradesEnumerator33 = grades.iterator\n\
    \        val gradesEnumerator34 = grades.iterator\n        val gradesEnumerator35\
    \ = grades.iterator\n        val gradesEnumerator36 = grades.iterator\n      \
    \  val gradesEnumerator37 = grades.iterator\n        val gradesEnumerator38 =\
    \ grades.iterator\n        val gradesEnumerator", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values.toList\n        val gradesLength = gradesValues.size\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum /\
    \ gradesLength\n        val gradesMin = gradesValues.min\n        val gradesMax\
    \ = gradesValues.max\n        val gradesMedian = gradesValues.sortBy(x => x).last\n\
    \        val gradesStdDev = gradesValues.map(x => Math.sqrt(x.toDouble))\n   \
    \     val gradesVariance = gradesStdDev.map(x => x - gradesAvg).sum\n        val\
    \ gradesVariancePercent = gradesVariance / gradesAvg\n        val gradesPercent\
    \ = gradesAvg / gradesSum\n        val gradesPercentOfMax = gradesPercent / gradesMax\n\
    \        val gradesPercentOfMin = gradesPercent / gradesMin\n        val gradesPercentOfMedian\
    \ = gradesPercentOfMax / gradesMedian\n        val gradesPercentOfMedianPercent\
    \ = gradesPercentOfMedian / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMin\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMin\n        val gradesPercentOfMedianPercentOfMin\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMin\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = grades", "        val gradesMap = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => x._1 -> x._2)\n        val gradesMapSorted = gradesMap.sortBy(x => x._1).reverse\n\
    \        val gradesMapSortedWithIndex = gradesMapSorted.map(x => x._2)\n     \
    \   val gradesMapSortedWithIndexWithLetter = gradesMapSortedWithIndex.map(x =>\
    \ (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndex = gradesMapSortedWithIndexWithLetter.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndex.map(x => (x._1, x._2))\n     \
    \   val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndex = gradesMapSortedWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWith", "        grades.toList.sortWith(_ < _).reverse.foldLeft(List[String]()){\n\
    \            case (acc, grade) =>\n                val gpa = grade / 4.0f\n  \
    \              val letterGrade = if (gpa > 3.7f) 'A+' else if (gpa > 3.3f) 'A'\
    \ else if (gpa > 2.7f) 'A-' else if (gpa > 2.3f) 'B+' else if (gpa > 1.7f) 'B'\
    \ else if (gpa > 1.3f) 'B-' else if (gpa > 0.7f) 'C+' else if (gpa > 0.3f) 'C'\
    \ else if (gpa > 0.0f) 'C-' else 'D'\n                acc :+ letterGrade\n   \
    \     }", "        val gradesMap = grades.toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x\
    \ => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n      \
    \  val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSor"]
stop_tokens:
- "\n    }\n"
