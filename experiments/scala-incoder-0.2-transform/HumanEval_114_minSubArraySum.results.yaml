language: scala
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.sum\n        val numsArraySumLength = numsArraySum.length\n\
    \        val numsArraySumMinusOne = numsArraySum - numsArraySumLength\n      \
    \  val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n        val numsArraySumMinusOneArray\
    \ = numsArraySumMinusOne.toArray\n        val numsArraySumMinusOneArrayLength\
    \ = numsArraySumMinusOneArray.length\n        val numsArraySumMinusOneArraySum\
    \ = numsArraySumMinusOneArray.sum\n        val numsArraySumMinusOneArraySumLength\
    \ = numsArraySumMinusOneArraySum.length\n        val numsArraySumMinusOneArraySumMinusOne\
    \ = numsArraySumMinusOneArraySum - numsArraySumMinusOneArraySumLength\n      \
    \  val numsArraySumMinusOneArraySumMinusOneLength = numsArraySumMinusOneArraySumMinusOne.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArray = numsArraySumMinusOneArraySumMinusOne.toArray\n\
    \        val numsArraySumMinusOneArraySumMinusOneArrayLength = numsArraySumMinusOneArraySumMinusOneArray.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySum = numsArraySumMinusOneArraySumMinusOneArray.sum\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumLength = numsArraySumMinusOneArraySumMinusOneArraySum.length\n\
    \        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOne = numsArraySumMinusOneArraySumMinusOneArraySum\
    \ - numsArraySumMinusOneArraySumMinusOneArraySumLength\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneLength\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.length\n        val numsArraySumMinusOneArraySumMinusOneArraySumMinusOneArray\
    \ = numsArraySumMinusOneArraySumMinusOneArraySumMinusOne.toArray\n        val\
    \ numsArraySumMinusOneArraySumMinusOneArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwps9asuf.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwps9asuf.scala:15:46\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumLength\e[0m = numsArraySum.length\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value length is not a member of Long\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwps9asuf.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplp3gbo_z.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp3gbo_z.scala:16:58\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value next is not a member of\
    \ Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplp3gbo_z.scala:26:58 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplp3gbo_z.scala:28:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplp3gbo_z.scala:30:66\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      Not found: numsSetIteratorNextNextNex"
  stdout: ''
  timestamp: 1659805879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n\
    \                newSum\n            } else {\n                sum\n         \
    \   }\n        }\n        minSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18zkclq2.scala:24)\n\tat Problem.main(tmp18zkclq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (num > sum) num\n            else sum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqrpuo5g.scala:20)\n\tat Problem.main(tmpdqrpuo5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val sums = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum < 0l) {\n\
    \                newSum\n            } else {\n                newSum\n      \
    \      }\n        }\n        sums\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq7e1c9a4.scala:24)\n\tat Problem.main(tmpq7e1c9a4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy(0)\n        var minSumIndex = 0\n\
    \        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8z26ydpm.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8z26ydpm.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val numsSortedLength = numsSorted.length\n\
    \        val numsSortedSum = numsSorted.foldLeft(0l) { (sum, num) =>\n       \
    \     val newSum = sum + num\n            if (newSum > 0l) {\n               \
    \ newSum\n            } else {\n                0l\n            }\n        }\n\
    \        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumMinusOne\
    \ = numsSortedSum.dropRight(1)\n        val numsSortedSumMinusOneLength = numsSortedSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSum = numsSortedSumMinusOne.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        val numsSortedSumMinusOneSumLength = numsSortedSumMinusOneSum.length\n\
    \        val numsSortedSumMinusOneSumMinusOne = numsSortedSumMinusOneSum.dropRight(1)\n\
    \        val numsSortedSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumMinusOneSumLength\
    \ = numsSortedSumMinusOneSumMinusOneSum.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ = numsSortedSumMinusOneSumMinusOneSum.dropRight(1)\n        val numsSortedSumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsSortedSumMinusOneSumMinusOneSumMinusOne.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsSortedSumMinusOneSumMinusOneSumMinusOne.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum > 0l) {\n        \
    \        newSum\n            } else {\n                0l\n            }\n   \
    \     }\n\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxc91fput.scala:22:48 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumLength\e[0m\
    \ = numsSortedSum.length\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxc91fput.scala:23:50 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mnumsSortedSumMinusOne\e[0m = numsSortedSum.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value dropRight is not a\
    \ member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxc91fput.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ minSum = Long.MaxValue\n        var minSumIndex = -1\n        var sum = 0\n\
    \        var index = 0\n        while (index < numsCopy.size) {\n            val\
    \ currentSum = numsCopy(index) + sum\n            if (currentSum < minSum) {\n\
    \                minSum = currentSum\n                minSumIndex = index\n  \
    \          }\n            sums += currentSum\n            index += 1\n       \
    \ }\n        minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1ss5tmw.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val minSum = numsSorted.head\n        val minSumIndex\
    \ = 0\n        val minSumSubArray = numsSorted.take(minSumIndex + 1)\n       \
    \ val minSumSubArraySum = minSumSubArray.reduce((a, b) => a + b)\n        val\
    \ minSumSubArraySumIndex = 0\n        val minSumSubArraySumSubArray = minSumSubArray.take(minSumSubArraySumIndex\
    \ + 1)\n        minSumSubArraySumSubArray.reduce((a, b) => a + b)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp71svxasf.scala:23)\n\tat Problem.main(tmp71svxasf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphs8lrymm.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphs8lrymm.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsLen = nums.size\n        val numsLenSet = numsLen.toSet\n\
    \        val numsLenSetSet = numsLenSet.toSet\n        val numsLenSetSetSet =\
    \ numsLenSetSet.toSet\n        val numsLenSetSetSetSet = numsLenSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSet = numsLenSetSetSetSet.toSet\n        val numsLenSetSetSetSetSetSet\
    \ = numsLenSetSetSetSetSet.toSet\n        val numsLenSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsLenSetSetSetSetSetSetSetSetSetSetSetSet\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3pjoyh80.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3pjoyh80.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenSetSetSetSetSetSetSetSetSetSetSetSet\e[0m = numsLenSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenSetSetSetSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenSetSetSetSetSetSetSetSetSetSetSetSet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3pjoyh80.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = numsLenSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3pjoyh80.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = numsLenSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenSetSetSetSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mN"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val subArray = numsCopy.filter(num => sum >= num)\n       \
    \ minSum + minSubArraySum(subArray)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmkezq8x.scala:14:46 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msubArray\e[0m = numsCopy.filter(\e\
    [36mnum\e[0m => sum >= num)\n\e[31m\e[31m   |\e[0m                           \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                                \
    \              Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk0ohctpu.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk0ohctpu.scala:14:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSortedSet = numsSorted.toSet\n     \
    \   val numsSortedSetIterator = numsSortedSet.iterator\n        val numsSortedSetIteratorIterator\
    \ = numsSortedSetIterator.iterator\n        val numsSortedSetIteratorIteratorIterator\
    \ = numsSortedSetIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbvtj5huu.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbvtj5huu.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetIteratorIteratorIteratorIterator\e[0m = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIterator is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIterator\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbvtj5huu.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbvtj5huu.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorIte"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = Long.MaxValue\n        var minSumIndex =\
    \ 0\n        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvjypzf1p.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvjypzf1p.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0L) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0L) newSum\
    \ else num\n        }\n        numsSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmzhu6jag.scala:20)\n\tat Problem.main(tmpmzhu6jag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n\
    \                newSum\n            } else {\n                0l\n          \
    \  }\n        }\n        numsSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyvkvm1i9.scala:24)\n\tat Problem.main(tmpyvkvm1i9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val minSum = numsSorted.head\n        val minSumIndex\
    \ = numsSorted.indexOf(minSum)\n        val minSumSize = numsSorted.take(minSumIndex).size\n\
    \        val minSumSubArray = numsSorted.take(minSumIndex).drop(minSumIndex +\
    \ 1)\n        minSumSubArray.foldLeft(0l) { (sum, num) =>\n            val newSum\
    \ = sum + num\n            if (newSum < minSum) {\n                minSum = newSum\n\
    \                minSumIndex = numsSorted.indexOf(newSum)\n                minSumSize\
    \ = numsSorted.take(minSumIndex).size\n                minSumSubArray = numsSorted.take(minSumIndex).drop(minSumIndex\
    \ + 1)\n            }\n            newSum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptt67j1pa.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                minSum = newSum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minSum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmptt67j1pa.scala:21:28\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                minSumIndex\
    \ = numsSorted.indexOf(newSum)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val minSumIndex\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmptt67j1pa.scala:22:27 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                minSumSize = numsSorted.take(minSumIndex).size\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val minSumSize\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmptt67j1pa.scala:23:31 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                minSumSubArray = numsSorted.take(minSumIndex).drop(minSumIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val minSumSubArray\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsArray = nums.toArray\n        val numsArraySet\
    \ = numsArray.toSet\n        val numsArrayArray = numsArray.toArray\n        val\
    \ numsArraySetArray = numsArraySet.toArray\n        val numsArrayArraySet = numsArrayArray.toSet\n\
    \        val numsArrayArrayArray = numsArrayArray.toArray\n        val numsArraySetArrayArraySet\
    \ = numsArraySetArray.toSet\n        val numsArrayArrayArraySet = numsArrayArrayArray.toArray\n\
    \        val numsArraySetArrayArrayArraySet = numsArraySetArrayArray.toSet\n \
    \       val numsArrayArrayArraySetArrayArray = numsArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArray = numsArraySetArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArraySet = numsArraySetArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArraySet = numsArraySetArrayArrayArraySetArray.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArraySet = numsArraySetArrayArrayArraySetArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArraySet = numsArraySetArrayArrayArraySetArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArraySet = numsArraySetArrayArrayArraySetArrayArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet =\
    \ numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet.toArray\n  \
    \      val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArraySet.toArray\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet\
    \ = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArraySet.toSet\n\
    \        val numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArrayArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8_4oy24u.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8_4oy24u.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySetArrayArrayArraySetArrayArrayArrayArraySet\e[0m = numsArraySetArrayArrayArraySetArrayArrayArrayArraySet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArraySetArrayArrayArraySetArrayArrayArrayArraySet is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsArraySetArrayArrayArraySetArrayArrayArrayArraySet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp8_4oy24u.scala:21:45 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArrayArrayArraySet\e[0m\
    \ = numsArraySetArrayArray.toSet\n\e[31m\e[31m   |\e[0m                      \
    \                       ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                              Not found: numsArraySetArrayArray\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8_4oy24u.scala:29:78 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet\e\
    [0m = numsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet.toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsArraySetArrayArrayArraySetArrayArrayArrayArrayArrayArraySet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8_4oy24u.scala:30:88\
    \ ---------------------------\e[0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660010170
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val subArray = numsCopy.filter(_ > minSum)\n        minSubArraySum(subArray)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010175
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum))\n  \
    \              newSum\n            else\n                sum\n        }\n    \
    \    minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp06zg2mo0.scala:23)\n\tat Problem.main(tmp06zg2mo0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) {\n                    minSum = newSum\n\
    \                }\n            }\n            sum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvd8xgf50.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvd8xgf50.scala:17:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                    minSum\
    \ = newSum\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m \
    \                   Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSortedLength = numsSorted.length\n \
    \       val numsSortedLength = numsSortedLength - 1\n        val numsSortedLast\
    \ = numsSorted.last\n        val numsSortedLastIndex = numsSorted.lastIndex\n\
    \        val numsSortedLastIndex = numsSortedLastIndex - 1\n        val numsSortedLastElement\
    \ = numsSortedLast\n        val numsSortedLastElementIndex = numsSortedLastIndex\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex\
    \ = numsSortedLastElementIndex - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex\
    \ - 1\n        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n\
    \        val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n   \
    \     val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n      \
    \  val numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val\
    \ numsSortedLastElementIndex = numsSortedLastElementIndex - 1\n        val numsSortedLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeghgl16q.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeghgl16q.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedLength\e[0m = numsSortedLength - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsSortedLength is already defined as \e[33mvalue\e[0m \e[35mnumsSortedLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeghgl16q.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLastIndex\e[0m = numsSortedLastIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedLastIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsSortedLastIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeghgl16q.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLastElementIndex\e\
    [0m = numsSortedLastElementIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsSortedLastElementIndex is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSortedLastElementIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeghgl16q.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLastElementIndex\e\
    [0m = numsSortedLastElementIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsSortedLastElementIndex is alr"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val sums = numsCopy.map(x => x.toLong).foldLeft(0l) {\
    \ (sum, num) => sum + num }\n        val minSum = sums.min\n        val maxSum\
    \ = sums.max\n        val minSumIndex = numsCopy.zipWithIndex.filter(x => x._1\
    \ == minSum).map(x => x._2).max\n        val maxSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == maxSum).map(x => x._2).min\n        val minSumSum = numsCopy.slice(minSumIndex).map(x\
    \ => x.toLong).sum\n        val maxSumSum = numsCopy.slice(maxSumIndex).map(x\
    \ => x.toLong).sum\n        val minSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == minSumSum).map(x => x._2).max\n        val maxSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == maxSumSum).map(x => x._2).min\n        val minSumSumSum = numsCopy.slice(minSumSumIndex).map(x\
    \ => x.toLong).sum\n        val maxSumSumSum = numsCopy.slice(maxSumSumIndex).map(x\
    \ => x.toLong).sum\n        val minSumSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == minSumSumSum).map(x => x._2).max\n        val maxSumSumSumIndex =\
    \ numsCopy.zipWithIndex.filter(x => x._1 == maxSumSumSum).map(x => x._2).min\n\
    \        val minSumSumSumSum = numsCopy.slice(minSumSumSumIndex).map(x => x.toLong).sum\n\
    \        val maxSumSumSumSum = numsCopy.slice(maxSumSumSumIndex).map(x => x.toLong).sum\n\
    \        val minSumSumSumSumIndex = numsCopy.zipWithIndex.filter(x => x._1 ==\
    \ minSumSumSumSum).map(x => x._2).max\n        val maxSumSumSumSumIndex = numsCopy.zipWithIndex.filter(x\
    \ => x._1 == maxSumSumSumSum).map(x => x._2).min\n        val minSumSumSumSumSum\
    \ = numsCopy.slice(minSumSumSumSumIndex).map(x => x.toLong).sum\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3ur4p1zj.scala:31:11 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp3ur4p1zj.scala:16:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminSumIndex\e[0m = numsCopy.zipWithIndex.filter(\e\
    [36mx\e[0m => x._1 == minSum).map(\e[36mx\e[0m => x._2).max\n\e[31m\e[31m   |\e\
    [0m                                                            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Long @uncheckedVariance and Long => Long cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3ur4p1zj.scala:17:60\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxSumIndex\e[0m = numsCopy.zipWithIndex.filter(\e[36mx\e\
    [0m => x._1 == maxSum).map(\e[36mx\e[0m => x._2).min\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mValues of types Long @uncheckedVariance and Long => Long cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3ur4p1zj.scala:18:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mminSumSum\e[0m = numsCopy.slice(minSumIndex).map(\e[36mx\e\
    [0m => x.toLong).sum\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter until of \e[33mmethod\e[0m\
    \ \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until: Int):\
    \ List[Long]\n\e[31m\e[31m-- Error: /tmp/tmp3ur4p1zj.scala:19:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxSumSum\e[0m = numsCopy.slice(maxSumIndex).map(\e\
    [36mx\e[0m => x.toLong).sum\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter until of \e[33mmethod\e[0m\
    \ \e[35mslice\e[0m in \e[33mclass\e[0m \e[35mList\e[0m: (from: Int, until:"
  stdout: ''
  timestamp: 1660010171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.foldLeft(0l) { (sum, num) =>\n            if (sum > num) sum\n      \
    \      else sum + num\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaf5qdt77.scala:19)\n\tat Problem.main(tmpaf5qdt77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < 0) newSum\n\
    \            else newSum\n        }\n        sums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaqxvyn48.scala:21)\n\tat Problem.main(tmpaqxvyn48.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ minSum = Long.MaxValue\n        var minSumIndex = 0\n        for (i <- 0 until\
    \ numsCopy.size) {\n            val curSum = numsCopy(i) + sums(minSumIndex)\n\
    \            if (curSum < minSum) {\n                minSum = curSum\n       \
    \         minSumIndex = i\n            }\n        }\n        minSum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz8sp_xhz.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum > 0l) {\n   \
    \             newSum\n            } else {\n                0l\n            }\n\
    \        }\n        sums.min\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1wtjlyxw.scala:24)\n\tat Problem.main(tmp1wtjlyxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sum = 0\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        var minSumIndex2 = -1\n        var minSumIndex3\
    \ = -1\n        var minSumIndex4 = -1\n        var minSumIndex5 = -1\n       \
    \ var minSumIndex6 = -1\n        var minSumIndex7 = -1\n        var minSumIndex8\
    \ = -1\n        var minSumIndex9 = -1\n        var minSumIndex10 = -1\n      \
    \  var minSumIndex11 = -1\n        var minSumIndex12 = -1\n        var minSumIndex13\
    \ = -1\n        var minSumIndex14 = -1\n        var minSumIndex15 = -1\n     \
    \   var minSumIndex16 = -1\n        var minSumIndex17 = -1\n        var minSumIndex18\
    \ = -1\n        var minSumIndex19 = -1\n        var minSumIndex20 = -1\n     \
    \   var minSumIndex21 = -1\n        var minSumIndex22 = -1\n        var minSumIndex23\
    \ = -1\n        var minSumIndex24 = -1\n        var minSumIndex25 = -1\n     \
    \   var minSumIndex26 = -1\n        var minSumIndex27 = -1\n        var minSumIndex28\
    \ = -1\n        var minSumIndex29 = -1\n        var minSumIndex30 = -1\n     \
    \   var minSumIndex31 = -1\n        var minSumIndex32 = -1\n        var minSumIndex33\
    \ = -1\n        var minSumIndex34 = -1\n        var minSumIndex35 = -1\n     \
    \   var minSumIndex36 = -1\n        var minSumIndex37 = -1\n        var minSumIndex38\
    \ = -1\n        var minSumIndex39 = -1\n        var minSumIndex40 = -1\n     \
    \   var minSumIndex41 = -1\n        var minSumIndex42 = -1\n        var minSumIndex43\
    \ = -1\n        var minSumIndex44 = -1\n        var minSumIndex45 = -1\n     \
    \   var minSumIndex46 = -1\n        var minSumIndex47 = -1\n        var minSumIndex48\
    \ = -1\n        var minSumIndex49 = -1\n        var minSumIndex50 = -1\n     \
    \   var minSumIndex51 = -1\n        var minSumIndex52 = -1\n        var minSumIndex53\
    \ = -1\n        var minSumIndex54 = -1\n        var minSumIndex55 = -1\n     \
    \   var minSumIndex56 = -1\n        var minSumIndex57 = -1\n        var minSumIndex58\
    \ = -1\n        var minSumIndex59 = -1\n        var minSumIndex60 = -1\n     \
    \   var minSumIndex61 = -1\n        var minSumIndex62 = -1\n        var minSumIndex63\
    \ = -1\n        var minSumIndex64 = -1\n        var minSumIndex65 = -1\n     \
    \   var minSumIndex66 = -1\n        var minSumIndex67 = -1\n        var min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpomnv1r33.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpomnv1r33.scala:83:5 ---------------------\e[0m\e[0m\n\e[31m83 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val minSumList = numsCopy.foldLeft(List[Long](0l)) { (sum,\
    \ num) => sum + num }\n        val minSumList2 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList3 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList4 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList5 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList6 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList7 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList8 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList9 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList10 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList11 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList12 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList13 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList14 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList15 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, num) => sum + num }\n        val minSumList16 = numsCopy.foldLeft(List[Long](0l))\
    \ { (sum, \n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjvyny5k_.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjvyny5k_.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjvyny5k_.scala:14:79 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSumList\e[0m = numsCopy.foldLeft(List[\e\
    [35mLong\e[0m](\e[31m0l\e[0m)) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjvyny5k_.scala:15:80 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mminSumList2\e[0m = numsCopy.foldLeft(List[\e\
    [35mLong\e[0m](\e[31m0l\e[0m)) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of\
    \ List[Long], but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpjvyny5k_.scala:16:80 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextNext = numsSetIteratorNext.next\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext =\
    \ numsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgqbod78f.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNext.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNext is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSetIteratorNextNextNextNext\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgqbod78f.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgqbod78f.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161]"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum > sum) newSum\
    \ else sum\n        }\n        numsSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62gi7vl0.scala:20)\n\tat Problem.main(tmp62gi7vl0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (num > 0) sum + num\n            else sum\n        }\n       \
    \ minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_t79jao.scala:20)\n\tat Problem.main(tmp0_t79jao.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val numsCopySize = numsCopy.size\n        val numsCopyIterator\
    \ = numsCopy.iterator\n        val numsCopyIteratorSize = numsCopyIterator.size\n\
    \        val numsCopyIteratorIterator = numsCopyIterator.iterator\n        val\
    \ numsCopyIteratorIteratorSize = numsCopyIteratorIterator.size\n        val numsCopyIteratorIteratorIterator\
    \ = numsCopyIteratorIterator.iterator\n        val numsCopyIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIterator.size\n        val numsCopyIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIterator.iterator\n        val numsCopyIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIterator.size\n        val numsCopyIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIterator.iterator\n        val numsCopyIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIterator.size\n        val numsCopyIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorSize = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.iterator\n      \
    \  val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize =\
    \ numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n    \
    \    val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsy1urzjo.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsy1urzjo.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m\
    \ = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsCopyIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpsy1urzjo.scala:24:71 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsCopyIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsCopyIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsCopyIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy1urzjo.scala:29:91\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsCopyIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: numsCopyIteratorIt"
  stdout: ''
  timestamp: 1660010178
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ne29nkf.scala:19)\n\tat Problem.main(tmp_ne29nkf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) newSum else minSum\n            }\
    \ else {\n                sum\n            }\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ud91znp.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum\
    \ \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp0ud91znp.scala:16:49 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum \e[33melse\e[0m\
    \ minSum\n\e[31m\e[31m   |\e[0m                                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e\
    [33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val min = sums.min\n        val index = sums.indexWhere(_ == min)\n \
    \       sums(index)\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevcxvzgq.scala:19)\n\tat Problem.main(tmpevcxvzgq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy(0)\n        var minSumIndex = 0\n\
    \        var minSumIndex2 = numsCopy.size - 1\n        var minSumIndex3 = numsCopy.size\
    \ - 2\n        var minSumIndex4 = numsCopy.size - 3\n        var minSumIndex5\
    \ = numsCopy.size - 4\n        var minSumIndex6 = numsCopy.size - 5\n        var\
    \ minSumIndex7 = numsCopy.size - 6\n        var minSumIndex8 = numsCopy.size -\
    \ 7\n        var minSumIndex9 = numsCopy.size - 8\n        var minSumIndex10 =\
    \ numsCopy.size - 9\n        var minSumIndex11 = numsCopy.size - 10\n        var\
    \ minSumIndex12 = numsCopy.size - 11\n        var minSumIndex13 = numsCopy.size\
    \ - 12\n        var minSumIndex14 = numsCopy.size - 13\n        var minSumIndex15\
    \ = numsCopy.size - 14\n        var minSumIndex16 = numsCopy.size - 15\n     \
    \   var minSumIndex17 = numsCopy.size - 16\n        var minSumIndex18 = numsCopy.size\
    \ - 17\n        var minSumIndex19 = numsCopy.size - 18\n        var minSumIndex20\
    \ = numsCopy.size - 19\n        var minSumIndex21 = numsCopy.size - 20\n     \
    \   var minSumIndex22 = numsCopy.size - 21\n        var minSumIndex23 = numsCopy.size\
    \ - 22\n        var minSumIndex24 = numsCopy.size - 23\n        var minSumIndex25\
    \ = numsCopy.size - 24\n        var minSumIndex26 = numsCopy.size - 25\n     \
    \   var minSumIndex27 = numsCopy.size - 26\n        var minSumIndex28 = numsCopy.size\
    \ - 27\n        var minSumIndex29 = numsCopy.size - 28\n        var minSumIndex30\
    \ = numsCopy.size - 29\n        var minSumIndex31 = numsCopy.size - 30\n     \
    \   var minSumIndex32 = numsCopy.size - 31\n        var minSumIndex33 = numsCopy.size\
    \ - 32\n        var minSumIndex34 = numsCopy.size - 33\n        var minSumIndex35\
    \ = numsCopy.size - 34\n        var minSumIndex36 = numsCopy.size - 35\n     \
    \   var minSumIndex37 = numsCopy.size - 36\n        var minSumIndex38 = numsCopy.size\
    \ - 37\n        var minSumIndex39 = numsCopy.size - 38\n        var minSum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptm98e_84.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptm98e_84.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        sums.min\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepoathff.scala:17)\n\tat Problem.main(tmpepoathff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy(0)\n        var minSumIndex = 0\n\
    \        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8z26ydpm.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8z26ydpm.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy.head\n        var minSumIndex =\
    \ 0\n        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1uw3rcgq.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1uw3rcgq.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ne29nkf.scala:19)\n\tat Problem.main(tmp_ne29nkf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.foldLeft(0l) { (sum, num) =>\n            val newSum = sum + num\n  \
    \          if (newSum < minSum) newSum else minSum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk0ohctpu.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk0ohctpu.scala:14:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp81i9k0qe.scala:32:69 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp81i9k0qe.scala:16:58 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e\
    [0m = numsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                      value next is not a member of Long\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp81i9k0qe.scala:26:58 ---------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp81i9k0qe.scala:28:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp81i9k0qe.scala:30:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNe"
  stdout: ''
  timestamp: 1660010181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexWhere(_ ==\
    \ minSum)\n        val minSumSubArray = numsSorted.take(minSumIndex + 1)\n   \
    \     minSumSubArray.sum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_a59ylw.scala:25)\n\tat Problem.main(tmpv_a59ylw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsLen = nums.size\n        val numsLenSet = numsLen.toSet\n\
    \        val numsLenSetLen = numsLenSet.size\n        val numsLenSetLenSet = numsLenSetLen.toSet\n\
    \        val numsLenSetLenSetLen = numsLenSetLenSet.size\n        val numsLenSetLenSetLenSet\
    \ = numsLenSetLenSetLen.toSet\n        val numsLenSetLenSetLenSetLen = numsLenSetLenSetLenSet.size\n\
    \        val numsLenSetLenSetLenSetLenSet = numsLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSet = numsLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSet = numsLenSetLenSetLenSetLenSetLenSet.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen = numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \        val numsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqkjev0th.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqkjev0th.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenSetLenSetLenSetLenSetLenSetLenSetLen\e[0m = numsLenSetLenSetLenSetLenSetLenSetLen.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenSetLenSetLenSetLenSetLenSetLenSetLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenSetLenSetLenSetLenSetLenSetLenSetLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqkjev0th.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen\e\
    [0m = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqkjev0th.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen\e\
    [0m = numsLenSetLenSetLenSetLenSetLenSetLenSetLen.toSet\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsLenSetLenSetLenSetLenSetLenSetLenSetLenSetLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1660010181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sum = 0\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        for (i <- 0 until numsSorted.length) {\n\
    \            val currentSum = numsSorted(i) + sum\n            if (currentSum\
    \ < minSum) {\n                minSum = currentSum\n                minSumIndex\
    \ = i\n            }\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r9r4seh.scala:27)\n\tat Problem.main(tmp0r9r4seh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) newSum else minSum\n            }\
    \ else {\n                sum\n            }\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ud91znp.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum\
    \ \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp0ud91znp.scala:16:49 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum \e[33melse\e[0m\
    \ minSum\n\e[31m\e[31m   |\e[0m                                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e\
    [33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.reduce((a, b) => math.min(math.min(a, b), math.max(a, b)))\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lio08p4.scala:17)\n\tat Problem.main(tmp3lio08p4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.foldLeft(0l) { (sum, num) => sum + num }\n        val maxSum = nums.foldRight(0l)\
    \ { (sum, num) => sum + num }\n        minSum - maxSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgylep80w.scala:17)\n\tat Problem.main(tmpgylep80w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.reduceLeft(_ + _)\n        val maxSum = nums.reduceRight(_ + _)\n   \
    \     if (minSum < 0 || maxSum < 0) {\n            throw new IllegalArgumentException(\"\
    Invalid input\")\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpse466ist.scala:20)\n\tat Problem.main(tmpse466ist.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum > sum) newSum\
    \ else sum\n        }\n        sums.min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2j82_hm.scala:20)\n\tat Problem.main(tmpr2j82_hm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val minSums = numsCopy.foldLeft(List[Long]()) { (sums, num)\
    \ => sums.map(_ + num).min }\n        minSums.min match {\n            case Some(minSum)\
    \ => minSum\n            case None => 0l\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqmrbl88.scala:14:71\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSums\e\
    [0m = numsCopy.foldLeft(List[\e[35mLong\e[0m]()) { (\e[36msums\e[0m, \e[36mnum\e\
    [0m) => sums.map(_ + num).min }\n\e[31m\e[31m   |\e[0m                       \
    \                                                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    Long\n\
    \e[31m   |\e[0m                                                    Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqmrbl88.scala:16:33 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m Some(minSum) => minSum\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Found:    (minSum : Any)\n\e[31m   |\e[0m\
    \                                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaqmrbl88.scala:17:17 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m None => \e[31m0l\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m               \
    \  Found:    None.type\n\e[31m   |\e[0m                 Required: Long\n\e[31m\
    \   |\e[0m                 pattern type is incompatible with expected type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var min = Long.MaxValue\n        var minIndex = 0\n \
    \       var sum = 0\n        var index = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            sum += numsCopy(i)\n            if (sum < min) {\n          \
    \      min = sum\n                minIndex = index\n            }\n          \
    \  index += 1\n        }\n        min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj41zjspe.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += numsCopy(i)\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        sums.min\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepoathff.scala:17)\n\tat Problem.main(tmpepoathff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.foldLeft(0l) { (sum, num) => sum + num }\n        val\
    \ numsArraySumLength = numsArraySum.length\n        val numsArraySumMinusOne =\
    \ numsArraySum.foldLeft((0l, 0l)) { (sum, num) =>\n            if (numsArrayLength\
    \ - numsArraySumLength < numsArraySumMinusOne._1) {\n                (numsArraySumMinusOne._2,\
    \ numsArraySumMinusOne._1)\n            } else {\n                (numsArraySumMinusOne._1\
    \ + num, numsArraySumMinusOne._2)\n            }\n        }\n        numsArraySumMinusOne._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw2_nn_gf.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumLength\e[0m\
    \ = numsArraySum.length\n\e[31m\e[31m   |\e[0m                               \
    \  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw2_nn_gf.scala:16:48\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumMinusOne\e[0m = numsArraySum.foldLeft((\e[31m0l\e[0m, \e[31m0l\e\
    [0m)) { (\e[36msum\e[0m, \e[36mnum\e[0m) =>\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                         value foldLeft is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) => sum + num }\n        val numsSum2 = numsSorted.foldLeft(0l) { (sum,\
    \ num) => sum + num * num }\n        val numsSum3 = numsSorted.foldLeft(0l) {\
    \ (sum, num) => sum + num * num * num }\n        val numsSum4 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num }\n        val numsSum5 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num * num }\n        val numsSum6 =\
    \ numsSorted.foldLeft(0l) { (sum, num) => sum + num * num * num * num * num *\
    \ num }\n        val numsSum7 = numsSorted.foldLeft(0l) { (sum, num) => sum +\
    \ num * num * num * num * num * num * num }\n        val numsSum8 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num * num * num * num * num }\n    \
    \    val numsSum9 = numsSorted.foldLeft(0l) { (sum, num) => sum + num * num *\
    \ num * num * num * num * num * num * num }\n        val numsSum10 = numsSorted.foldLeft(0l)\
    \ { (sum, num) => sum + num * num * num * num * num * num * num * num * num *\
    \ num }\n        val numsSum11 = numsSorted.foldLeft(0l) { (sum, num) => sum +\
    \ num * num * num * num * num * num * num * num * num * num * num }\n        val\
    \ numsSum12 = numsSorted.foldLeft(0l) { (sum, num) => sum + num * num * num *\
    \ num * num * num * num * num * num * num * num * num }\n        val numsSum13\
    \ = numsSorted.foldLeft(0l) { (sum, num) => sum + num * num * num * num * num\
    \ * num * num * num * num * num * num * num * num * num }\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8a3gtzg.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val subArray = numsCopy.filter(_ < minSum)\n        minSubArraySum(subArray)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.reduceLeft(_ + _)\n        val subArray\
    \ = nums.filterNot(numsSet)\n        minSum + minSubArraySum(subArray)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.reduceLeft\n\tat scala.collection.IterableOnceOps.reduceLeft(IterableOnce.scala:727)\n\
    \tat scala.collection.IterableOnceOps.reduceLeft$(IterableOnce.scala:724)\n\t\
    at scala.collection.AbstractIterable.reduceLeft(Iterable.scala:926)\n\tat Problem$.minSubArraySum(tmp4oz5dk8i.scala:13)\n\
    \tat Problem$.minSubArraySum(tmp4oz5dk8i.scala:15)\n\tat Problem$.main(tmp4oz5dk8i.scala:18)\n\
    \tat Problem.main(tmp4oz5dk8i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy.head\n        var minSumIndex =\
    \ 0\n        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1uw3rcgq.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1uw3rcgq.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSet\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmoof8wen.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmoof8wen.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmoof8wen.scala:30:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmoof8wen.scala:34:110 --------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) {\n    \
    \            minSum = newSum\n            }\n            newSum\n        }\n \
    \       minSum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg3eb23di.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) {\n\e[31m\e\
    [31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                \
    \         Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg3eb23di.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                minSum = newSum\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy(0)\n        var minSumIndex = 0\n\
    \        var minSumIndex2 = 0\n        var minSumIndex3 = 0\n        var minSumIndex4\
    \ = 0\n        var minSumIndex5 = 0\n        var minSumIndex6 = 0\n        var\
    \ minSumIndex7 = 0\n        var minSumIndex8 = 0\n        var minSumIndex9 = 0\n\
    \        var minSumIndex10 = 0\n        var minSumIndex11 = 0\n        var minSumIndex12\
    \ = 0\n        var minSumIndex13 = 0\n        var minSumIndex14 = 0\n        var\
    \ minSumIndex15 = 0\n        var minSumIndex16 = 0\n        var minSumIndex17\
    \ = 0\n        var minSumIndex18 = 0\n        var minSumIndex19 = 0\n        var\
    \ minSumIndex20 = 0\n        var minSumIndex21 = 0\n        var minSumIndex22\
    \ = 0\n        var minSumIndex23 = 0\n        var minSumIndex24 = 0\n        var\
    \ minSumIndex25 = 0\n        var minSumIndex26 = 0\n        var minSumIndex27\
    \ = 0\n        var minSumIndex28 = 0\n        var minSumIndex29 = 0\n        var\
    \ minSumIndex30 = 0\n        var minSumIndex31 = 0\n        var minSumIndex32\
    \ = 0\n        var minSumIndex33 = 0\n        var minSumIndex34 = 0\n        var\
    \ minSumIndex35 = 0\n        var minSumIndex36 = 0\n        var minSumIndex37\
    \ = 0\n        var minSumIndex38 = 0\n        var minSumIndex39 = 0\n        var\
    \ minSumIndex40 = 0\n        var minSumIndex41 = 0\n        var minSumIndex42\
    \ = 0\n        var minSumIndex43 = 0\n        var minSumIndex44 = 0\n        var\
    \ minSumIndex45 = 0\n        var minSumIndex46 = 0\n        var minSumIndex47\
    \ = 0\n        var minSumIndex48 = 0\n        var minSumIndex49 = 0\n        var\
    \ minSumIndex50 = 0\n        var minSumIndex51 = 0\n        var minSumIndex52\
    \ = 0\n        var minSumIndex53 = 0\n        var minSumIndex54 = 0\n        var\
    \ minSumIndex55 = 0\n        var minSumIndex56 = 0\n        var minSumIndex57\
    \ = 0\n        var minSumIndex58 = 0\n        var minSumIndex59 = 0\n        var\
    \ minSumIndex60 = 0\n        var minSumIndex61 = 0\n        var minSumIndex62\
    \ = 0\n        var minSumIndex63 = 0\n        var minSumIndex64 = 0\n        var\
    \ minSumIndex65 = 0\n        var minSumIndex66 = 0\n        var minSumIndex67\
    \ = 0\n        var minSumIndex68 = 0\n        var minSumIndex69 = 0\n        var\
    \ minSumIndex70 = 0\n        var minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8z26ydpm.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8z26ydpm.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ minSum = Long.MaxValue\n        var minSumIndex = 0\n        var i = 0\n   \
    \     while (i < numsCopy.size) {\n            val currentSum = numsCopy(i) +\
    \ numsCopy(i + 1)\n            if (currentSum < minSum) {\n                minSum\
    \ = currentSum\n                minSumIndex = i\n            }\n            i\
    \ += 2\n        }\n        minSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgoqzuphm.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val numsSortedSet = numsSorted.toSet\n    \
    \    val numsSortedSetIterator = numsSortedSet.iterator\n        val minSum =\
    \ numsSortedSortedSet.head\n        val minSumIterator = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator2 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator3 = numsSortedSortedSet.iterator.next\n        val minSumIterator4\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator5 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator6 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator7 = numsSortedSortedSet.iterator.next\n        val minSumIterator8\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator9 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator10 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator11 = numsSortedSortedSet.iterator.next\n        val minSumIterator12\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator13 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator14 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator15 = numsSortedSortedSet.iterator.next\n        val minSumIterator16\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator17 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator18 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator19 = numsSortedSortedSet.iterator.next\n        val minSumIterator20\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator21 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator22 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator23 = numsSortedSortedSet.iterator.next\n        val minSumIterator24\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator25 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator26 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator27 = numsSortedSortedSet.iterator.next\n        val minSumIterator28\
    \ = numsSortedSortedSet.iterator.next\n        val minSumIterator29 = numsSortedSortedSet.iterator.next\n\
    \        val minSumIterator30 = numsSortedSortedSet.iterator.next\n        val\
    \ minSumIterator31 = numsSortedSortedSet.iterator.next\n        val minSum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk76_i8xa.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk76_i8xa.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mminSum\e[0m = numsSortedSortedSet.head\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ numsSortedSortedSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk76_i8xa.scala:16:29\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mminSumIterator\e[0m = numsSortedSortedSet.iterator.next\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                         Not found: numsSortedSortedSet\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk76_i8xa.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mminSumIterator2\e[0m = numsSortedSortedSet.iterator.next\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              Not found: numsSortedSortedSet\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk76_i8xa.scala:18:30\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mminSumIterator3\e[0m = numsSortedSortedSet.iterator.next\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                           Not found: numsSortedSortedSet\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk76_i8xa.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminSumIterator4\e[0m = numsSortedSortedSet.iter"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSortedSet = nums.sortBy(_.toLong)\n        val\
    \ numsSortedSetSet = numsSortedSet.toSet\n        val numsSortedSetSetSize = numsSortedSetSet.size\n\
    \        val numsSortedSetSetIterator = numsSortedSetSet.iterator\n        val\
    \ numsSortedSetSetIteratorSize = numsSortedSetSetIterator.size\n        val numsSortedSetSetIteratorIterator\
    \ = numsSortedSetSetIterator.iterator\n        val numsSortedSetSetIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIterator.size\n        val numsSortedSetSetIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIterator.iterator\n        val numsSortedSetSetIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIterator.size\n        val numsSortedSetSetIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIterator.iterator\n        val numsSortedSetSetIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIterator.size\n        val numsSortedSetSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIterator.iterator\n        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSorted\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuovgs0q4.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuovgs0q4.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize\e[0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuovgs0q4.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuovgs0q4.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIt"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (num > sum) num else sum\n        }\n        minSum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7lhirovp.scala:19)\n\tat Problem.main(tmp7lhirovp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.sum\n        val numsArrayMin = numsArray.min\n   \
    \     val numsArrayMax = numsArray.max\n        val numsArraySumMin = numsArraySum.min\n\
    \        val numsArraySumMax = numsArraySum.max\n        val numsArraySumMinMax\
    \ = numsArraySumMin + numsArraySumMax\n        val numsArraySumMinMaxArray = numsArraySumMinMax.toArray\n\
    \        val numsArraySumMinMaxArrayLength = numsArraySumMinMaxArray.length\n\
    \        val numsArraySumMinMaxArraySum = numsArraySumMinMaxArray.sum\n      \
    \  val numsArraySumMinMaxArraySumMin = numsArraySumMinMaxArraySum.min\n      \
    \  val numsArraySumMinMaxArraySumMax = numsArraySumMinMaxArraySum.max\n      \
    \  val numsArraySumMinMaxArraySumMinMax = numsArraySumMinMaxArraySumMin.min +\
    \ numsArraySumMinMaxArraySumMin.max\n        val numsArraySumMinMaxArraySumMinMaxArray\
    \ = numsArraySumMinMaxArraySumMinMax.toArray\n        val numsArraySumMinMaxArraySumMinMaxArrayLength\
    \ = numsArraySumMinMaxArraySumMinMaxArray.length\n        val numsArraySumMinMaxArraySumMinMaxArraySum\
    \ = numsArraySumMinMaxArraySumMinMaxArray.sum\n        val numsArraySumMinMaxArraySumMinMaxArraySumMin\
    \ = numsArraySumMinMaxArraySumMinMaxArraySum.min\n        val numsArraySumMinMaxArraySumMinMaxArraySumMax\
    \ = numsArraySumMinMaxArraySumMinMaxArraySum.max\n        val numsArraySumMinMaxArraySumMinMaxArraySumMinMax\
    \ = numsArraySumMinMaxArraySumMinMaxArraySumMinMax.min + numsArraySumMinMaxArraySumMinMaxArraySumMinMax.max\n\
    \        val numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray = numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray.toArray\n\
    \        val numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArrayLength = numsArraySumMinMaxArraySumMinMaxArraySumMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_s1aujxn.scala:19:49 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumMinMax\e[0m\
    \ = numsArraySumMin + numsArraySumMax\n\e[31m\e[31m   |\e[0m                 \
    \                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of Long => Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp_s1aujxn.scala:31:61 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumMinMaxArraySumMinMaxArraySumMinMax\e\
    [0m = numsArraySumMinMaxArraySumMinMaxArraySumMinMax.min + numsArraySumMinMaxArraySumMinMaxArraySumMinMax.max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsArraySumMinMaxArraySumMinMaxArraySumMinMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_s1aujxn.scala:32:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray\e[0m = numsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray.toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsArraySumMinMaxArraySumMinMaxArraySumMinMaxArray\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_s1aujxn.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) newSum else minSum\n            }\
    \ else {\n                sum\n            }\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ud91znp.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum\
    \ \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp0ud91znp.scala:16:49 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum \e[33melse\e[0m\
    \ minSum\n\e[31m\e[31m   |\e[0m                                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e\
    [33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < sum) newSum\
    \ else sum\n        }\n        sums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0m5eiwr.scala:20)\n\tat Problem.main(tmpn0m5eiwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex - 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.minSubArraySum(tmpkpglr4r0.scala:16)\n\tat Problem$.main(tmpkpglr4r0.scala:19)\n\
    \tat Problem.main(tmpkpglr4r0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsLen = nums.size\n        val numsSetLen = numsSet.size\n\
    \        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorLen\
    \ = numsSetIterator.size\n        val numsSetIteratorIterator = numsSetIterator.iterator\n\
    \        val numsSetIteratorIteratorLen = numsSetIteratorIterator.size\n     \
    \   val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorLen = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n \
    \       val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorLen = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpajrysbqb.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpajrysbqb.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorLen\e[0m = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpajrysbqb.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorLen\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorLen is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajrysbqb.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is alrea"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.get\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.get\n        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n\
    \        val numsSetIteratorNextNextNextValue = numsSetIteratorNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextValue = numsSetIteratorNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.get\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ud0l4r8.scala:15:59 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextValue\e\
    [0m = numsSetIteratorNext.get\n\e[31m\e[31m   |\e[0m                         \
    \              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value get is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7ud0l4r8.scala:16:58 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNext\e[0m\
    \ = numsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                          \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value next is not a member of Long\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp7ud0l4r8.scala:28:62 ---------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ud0l4r8.scala:32:70\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m  Not found: numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ud0l4r8.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Requir"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.reduceLeft(_ + _)\n        val numsArraySumLength =\
    \ numsArraySum.length\n        val numsArraySumArray = numsArraySum.toArray\n\
    \        val numsArraySumArrayLength = numsArraySumArray.length\n        val numsArraySumArraySum\
    \ = numsArraySumArray.reduceLeft(_ + _)\n        val numsArraySumArraySumLength\
    \ = numsArraySumArraySum.length\n        val numsArraySumArraySumArray = numsArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArrayLength = numsArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySum = numsArraySumArraySumArray.reduceLeft(_\
    \ + _)\n        val numsArraySumArraySumArraySumLength = numsArraySumArraySumArraySum.length\n\
    \        val numsArraySumArraySumArraySumArray = numsArraySumArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySum = numsArraySumArraySumArraySumArray.reduceLeft(_\
    \ + _)\n        val numsArraySumArraySumArraySumArraySumLength = numsArraySumArraySumArraySumArraySum.length\n\
    \        val numsArraySumArraySumArraySumArraySumArray = numsArraySumArraySumArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySum = numsArraySumArraySumArraySumArraySumArray.reduceLeft(_\
    \ + _)\n        val numsArraySumArraySumArraySumArraySumArraySumLength = numsArraySumArraySumArraySumArraySumArraySum.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySumArray = numsArraySumArraySumArraySumArraySumArraySum.toArray\n\
    \        val numsArraySumArraySumArraySumArraySumArraySumArrayLength = numsArraySumArraySumArraySumArraySumArraySumArray.length\n\
    \        val numsArraySumArraySumArraySumArraySumArraySumArray\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqv_25lf2.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqv_25lf2.scala:15:46\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumLength\e[0m = numsArraySum.length\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value length is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqv_25lf2.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumArray\e[0m =\
    \ numsArraySum.toArray\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value toArray is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqv_25lf2.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val numsCopyCopy = numsCopy.toList\n        var minSum\
    \ = numsCopy(0)\n        var minSumIndex = 0\n        for (i <- 0 until numsCopy.size)\
    \ {\n            val curSum = numsCopy(i) + numsCopyCopy(i)\n            if (curSum\
    \ < minSum) {\n                minSum = curSum\n                minSumIndex =\
    \ i\n            }\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjl2uzp8v.scala:26)\n\tat Problem.main(tmpjl2uzp8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val minSum = numsSorted.head\n        val minSumIndex\
    \ = 0\n        var minSumIndexInner = numsSorted.length\n        var minSumIndexOuter\
    \ = 0\n        var minSumIndexOuterInner = numsSorted.length\n        var minSumIndexOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterInner = numsSorted.length\n        var\
    \ minSumIndexOuterOuterOuter = 0\n        var minSumIndexOuterOuterOuterInner\
    \ = numsSorted.length\n        var minSumIndexOuterOuterOuterOuter = 0\n     \
    \   var minSumIndexOuterOuterOuterInner = numsSorted.length\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var minSumIndexOuterOuterOuterInner = 0\n        var minSumIndexOuterOuterOuterOuter\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyxg3h7r7.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpyxg3h7r7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mminSumIndexOuterOuterOuterInner\e\
    [0m = numsSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumIndexOuterOuterOuterInner is already defined as \e[33mvariable\e\
    [0m \e[35mminSumIndexOuterOuterOuterInner\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyxg3h7r7.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mminSumIndexOuterOuterOuterOuter\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminSumIndexOuterOuterOuterOuter\
    \ is already defined as \e[33mvariable\e[0m \e[35mminSumIndexOuterOuterOuterOuter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyxg3h7r7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mvar\e[0m \e[36mminSumIndexOuterOuterOuterInner\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumIndexOuterOuterOuterInner is already defined as \e[33mvariable\e\
    [0m \e[35mminSumIndexOuterOuterOuterInner\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyxg3h7r7.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mminSumIndexOuterOuterOuterOuter\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsLen = nums.size\n        val numsLenMinusOne =\
    \ numsLen - 1\n        val numsLenMinusTwo = numsLen - 2\n        val numsLenMinusThree\
    \ = numsLen - 3\n        val numsLenMinusFour = numsLen - 4\n        val numsLenMinusFive\
    \ = numsLen - 5\n        val numsLenMinusSix = numsLen - 6\n        val numsLenMinusSeven\
    \ = numsLen - 7\n        val numsLenMinusEight = numsLen - 8\n        val numsLenMinusNine\
    \ = numsLen - 9\n        val numsLenMinusTen = numsLen - 10\n        val numsLenMinusEleven\
    \ = numsLen - 11\n        val numsLenMinusTwelve = numsLen - 12\n        val numsLenMinusThirteen\
    \ = numsLen - 13\n        val numsLenMinusFourteen = numsLen - 14\n        val\
    \ numsLenMinusFifteen = numsLen - 15\n        val numsLenMinusSixteen = numsLen\
    \ - 16\n        val numsLenMinusSeventeen = numsLen - 17\n        val numsLenMinusEighteen\
    \ = numsLen - 18\n        val numsLenMinusNineteen = numsLen - 19\n        val\
    \ numsLenMinusTwenty = numsLen - 20\n        val numsLenMinusThirty = numsLen\
    \ - 30\n        val numsLenMinusFourty = numsLen - 40\n        val numsLenMinusFifty\
    \ = numsLen - 50\n        val numsLenMinusSixty = numsLen - 60\n        val numsLenMinusSeventy\
    \ = numsLen - 70\n        val numsLenMinusEighty = numsLen - 80\n        val numsLenMinusNinety\
    \ = numsLen - 90\n        val numsLenMinusEleventy = numsLen - 100\n        val\
    \ numsLenMinusTwentyOne = numsLen - 101\n        val numsLenMinusTwentyTwo = numsLen\
    \ - 102\n        val nums\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphx1_w2i_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphx1_w2i_.scala:12:27\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSet\e[0m = nums.toSet\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toSet is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphx1_w2i_.scala:13:27\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsLen\e[0m = nums.size\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue size is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer AsJavaL"
  stdout: ''
  timestamp: 1660010196
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       if (numsSet.contains(num)) {\n                sum + num\n            }\
    \ else {\n                sum\n            }\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0i_5ufqj.scala:23)\n\tat Problem.main(tmp0i_5ufqj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n\
    \                newSum\n            } else {\n                sum\n         \
    \   }\n        }\n        minSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18zkclq2.scala:24)\n\tat Problem.main(tmp18zkclq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val subArray = numsCopy.filter(num => num < minSum)\n     \
    \   minSubArraySum(subArray)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) newSum else minSum\n            }\
    \ else {\n                sum\n            }\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ud91znp.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum\
    \ \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp0ud91znp.scala:16:49 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum \e[33melse\e[0m\
    \ minSum\n\e[31m\e[31m   |\e[0m                                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e\
    [33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val maxSum = numsCopy.foldRight(0l) { (sum, num) => sum + num\
    \ }\n        val minSumInRange = minSum - maxSum\n        val minSumInRangeInRange\
    \ = minSumInRange / 2\n        val minSumInRangeInRangeInRange = minSumInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRange = minSumInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n     \
    \   val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n\
    \        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ / 2\n        val minSumInRangeInRangeInRangeInRangeInRangeInRange\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ouxjjai.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ouxjjai.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminSumInRangeInRangeInRangeInRangeInRangeInRange\e[0m = minSumInRangeInRangeInRangeInRangeInRangeInRange\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumInRangeInRangeInRangeInRangeInRangeInRange is already\
    \ defined as \e[33mvalue\e[0m \e[35mminSumInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_ouxjjai.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mminSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\
    \ is already defined as \e[33mvalue\e[0m \e[35mminSumInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp_ouxjjai.scala:22:70 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mminSumInRangeInRangeInRangeInRangeInRangeInRangeInRange\e\
    [0m = minSumInRangeInRangeInRangeInRangeInRangeInRangeInRange / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mminSumInRangeInRangeInRangeInRa"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val minSum = numsSorted.head\n        val minSumIndex\
    \ = numsSorted.indexOf(minSum)\n        val minSumIndex2 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1)\n        val minSumIndex3 = numsSorted.indexOf(minSum, minSumIndex\
    \ + 1, minSumIndex2 + 1)\n        val minSumIndex4 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1)\n        val minSumIndex5\
    \ = numsSorted.indexOf(minSum, minSumIndex + 1, minSumIndex2 + 1, minSumIndex3\
    \ + 1, minSumIndex4 + 1)\n        val minSumIndex6 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5\
    \ + 1)\n        val minSumIndex7 = numsSorted.indexOf(minSum, minSumIndex + 1,\
    \ minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5 + 1, minSumIndex6\
    \ + 1)\n        val minSumIndex8 = numsSorted.indexOf(minSum, minSumIndex + 1,\
    \ minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5 + 1, minSumIndex6\
    \ + 1, minSumIndex7 + 1)\n        val minSumIndex9 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5\
    \ + 1, minSumIndex6 + 1, minSumIndex7 + 1, minSumIndex8 + 1)\n        val minSumIndex10\
    \ = numsSorted.indexOf(minSum, minSumIndex + 1, minSumIndex2 + 1, minSumIndex3\
    \ + 1, minSumIndex4 + 1, minSumIndex5 + 1, minSumIndex6 + 1, minSumIndex7 + 1,\
    \ minSumIndex8 + 1, minSumIndex9 + 1)\n        val minSumIndex11 = numsSorted.indexOf(minSum,\
    \ minSumIndex + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5\
    \ + 1, minSumIndex6 + 1, minSumIndex7 + 1, minSumIndex8 + 1, minSumIndex9 + 1,\
    \ minSumIndex10 + 1)\n        val minSumIndex12 = numsSorted.indexOf(minSum, minSumIndex\
    \ + 1, minSumIndex2 + 1, minSumIndex3 + 1, minSumIndex4 + 1, minSumIndex5 + 1,\
    \ minSumIndex6 + 1, minSumIndex7 + 1, minSumIndex8 + 1, minSumIndex9\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpihbzks3i.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpihbzks3i.scala:16:38\
    \ -----------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e\
    [0m \e[36mminSumIndex3\e[0m = numsSorted.indexOf(minSum, minSumIndex + \e[31m1\e\
    [0m, minSumIndex2 + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mindexOf\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\
    \ with types\n\e[31m   |\e[0m [B >: Long](elem: B): Int\n\e[31m   |\e[0m [B >:\
    \ Long](elem: B, from: Int): Int\n\e[31m   |\e[0mmatch arguments ((minSum : Long),\
    \ Int, Int)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpihbzks3i.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val minSum = numsArray.foldLeft(0l) { (sum, elem) =>\
    \ sum + elem }\n        val maxSum = numsArray.foldRight(0l) { (sum, elem) =>\
    \ sum + elem }\n        val minSumIndex = numsArray.indexOf(minSum)\n        val\
    \ maxSumIndex = numsArray.indexOf(maxSum)\n        if (minSumIndex < 0 || maxSumIndex\
    \ < 0 || minSumIndex > maxSumIndex) {\n            throw new IllegalArgumentException(\"\
    Invalid input\")\n        }\n        numsArray.slice(minSumIndex, maxSumIndex\
    \ + 1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: Invalid input\n\tat Problem$.minSubArraySum(tmputfxxnrj.scala:18)\n\
    \tat Problem$.main(tmputfxxnrj.scala:23)\n\tat Problem.main(tmputfxxnrj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum)\n                    minSum = newSum\n\
    \            }\n            else\n                sum\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm2pqcpy3.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum)\n\e[31m\e\
    [31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m            \
    \                 Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm2pqcpy3.scala:17:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                    minSum\
    \ = newSum\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m \
    \                   Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum : Long = numsCopy(0)\n        var minIndex\
    \ = 0\n        var minSumIndex = 0\n        var sum = 0\n        var index = 0\n\
    \        var sumIndex = 0\n        while(index < numsCopy.size) {\n          \
    \  sum = numsCopy(index) + sum\n            sumIndex = index\n            index\
    \ = index + 1\n            if(sum < minSum) {\n                minSum = sum\n\
    \                minIndex = sumIndex\n            }\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbqabagil.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            sum = numsCopy(index)\
    \ + sum\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  Found:    Long\n\e[31m   |\e[0m               \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextNext = numsSetIteratorNext.next\n\
    \        val numsSetIteratorNextNextNext = numsSetIteratorNextNext.next\n    \
    \    val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNext = numsSetIteratorNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfiilub0a.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNext.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNext is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSetIteratorNextNextNextNext\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfiilub0a.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNext is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNext\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfiilub0a.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetIteratorNextNextNextNextNextNext is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNext\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfiilub0a.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sum = 0\n        var minSum = Long.MaxValue\n\
    \        var minSumIndex = 0\n        var i = 0\n        while (i < numsSorted.length)\
    \ {\n            val currentSum = numsSorted(i) + sum\n            if (currentSum\
    \ < minSum) {\n                minSum = currentSum\n                minSumIndex\
    \ = i\n            }\n            i += 1\n        }\n        minSum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxdu882_p.scala:29)\n\tat Problem.main(tmpxdu882_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        var minSum = numsSorted.head\n        var minSumIndex\
    \ = 0\n        var currentSum = 0\n        var currentSumIndex = 0\n        var\
    \ currentSumIndex2 = 0\n        var currentSumIndex3 = 0\n        var currentSumIndex4\
    \ = 0\n        var currentSumIndex5 = 0\n        var currentSumIndex6 = 0\n  \
    \      var currentSumIndex7 = 0\n        var currentSumIndex8 = 0\n        var\
    \ currentSumIndex9 = 0\n        var currentSumIndex10 = 0\n        var currentSumIndex11\
    \ = 0\n        var currentSumIndex12 = 0\n        var currentSumIndex13 = 0\n\
    \        var currentSumIndex14 = 0\n        var currentSumIndex15 = 0\n      \
    \  var currentSumIndex16 = 0\n        var currentSumIndex17 = 0\n        var currentSumIndex18\
    \ = 0\n        var currentSumIndex19 = 0\n        var currentSumIndex20 = 0\n\
    \        var currentSumIndex21 = 0\n        var currentSumIndex22 = 0\n      \
    \  var currentSumIndex23 = 0\n        var currentSumIndex24 = 0\n        var currentSumIndex25\
    \ = 0\n        var currentSumIndex26 = 0\n        var currentSumIndex27 = 0\n\
    \        var currentSumIndex28 = 0\n        var currentSumIndex29 = 0\n      \
    \  var currentSumIndex30 = 0\n        var currentSumIndex31 = 0\n        var currentSumIndex32\
    \ = 0\n        var currentSumIndex33 = 0\n        var currentSumIndex34 = 0\n\
    \        var currentSumIndex35 = 0\n        var currentSumIndex36 = 0\n      \
    \  var currentSumIndex37 = 0\n        var currentSumIndex38 = 0\n        var currentSumIndex39\
    \ = 0\n        var currentSumIndex40 = 0\n        var currentSumIndex41 = 0\n\
    \        var currentSumIndex42 = 0\n        var currentSumIndex43 = 0\n      \
    \  var currentSumIndex44 = 0\n        var currentSumIndex45 = 0\n        var currentSumIndex46\
    \ = 0\n        var currentSumIndex47 = 0\n        var currentSumIndex48 = 0\n\
    \        var currentSumIndex49 = 0\n        var currentSumIndex50 = 0\n      \
    \  var currentSumIndex51 = 0\n        var currentSumIndex52 = 0\n        var currentSumIndex53\
    \ = 0\n        var currentSumIndex54 = 0\n        var currentSumIndex55 = 0\n\
    \        var currentSumIndex56 = 0\n        var currentSumIndex57 = 0\n      \
    \  var currentSumIndex58 = 0\n        var currentSumIndex59 = 0\n        var currentSumIndex60\
    \ = 0\n        var currentSumIndex61 = 0\n        var currentSumIndex62 = 0\n\
    \        var currentSumIndex63 = 0\n        var currentSumIndex64 = 0\n      \
    \  var currentSumIndex65 = 0\n        var currentSumIndex66 = 0\n        var currentSumIndex67\
    \ = 0\n        var currentSumIndex68 = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9fu3bzk4.scala:84:11 ---------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9fu3bzk4.scala:85:5 ---------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val minSumList = numsCopy.foldLeft(List[Long](0l) { (sum, num)\
    \ => sum + num }) { (sum, num) => sum + num }\n        minSumList.foldLeft(0l)\
    \ { (sum, num) => sum + num }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfscwphl4.scala:14:61 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSumList\e[0m = numsCopy.foldLeft(List[\e\
    [35mLong\e[0m](\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num\
    \ }) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num }\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^\e[0m\n\e[31m\
    \   |\e[0m                        Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                        I could not infer the type of the parameter\
    \ sum.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfscwphl4.scala:14:66 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mminSumList\e[0m = numsCopy.foldLeft(List[\e\
    [35mLong\e[0m](\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num\
    \ }) { (\e[36msum\e[0m, \e[36mnum\e[0m) => sum + num }\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^\e[0m\n\e\
    [31m   |\e[0m                        Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                        I could not infer the type of the parameter\
    \ num.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfscwphl4.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        minSumList.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e\
    [0m, \e[36mnum\e[0m) => sum + num }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value foldLeft is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            if (numsCopy.contains(num)) {\n                val newSum = sum +\
    \ num\n                if (newSum < minSum) newSum else minSum\n            }\
    \ else {\n                sum\n            }\n        }\n        minSum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ud91znp.scala:16:29 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum\
    \ \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp0ud91znp.scala:16:49 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                \e[33mif\e[0m (newSum < minSum) newSum \e[33melse\e[0m\
    \ minSum\n\e[31m\e[31m   |\e[0m                                              \
    \   ^\e[0m\n\e[31m   |\e[0m                                       Recursive \e\
    [33mvalue\e[0m \e[35mminSum\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy(0)\n        var minIndex = -1\n\
    \        var minSumIndex = 0\n        var i = 0\n        while (i < numsCopy.size)\
    \ {\n            val sum = numsCopy(i) + minSum\n            if (sum < minSum)\
    \ {\n                minSum = sum\n                minIndex = i\n            \
    \    minSumIndex = i\n            } else if (sum == minSum) {\n              \
    \  minSumIndex = i\n            }\n            i += 1\n        }\n        minSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmejvlk4.scala:31)\n\tat Problem.main(tmpkmejvlk4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        var minSum = numsCopy(0)\n        var minSumIndex = 0\n\
    \        for (i <- 0 until numsCopy.size) {\n            val curSum = numsCopy(i)\
    \ + minSum\n            if (curSum < minSum) {\n                minSum = curSum\n\
    \                minSumIndex = i\n            }\n        }\n        minSum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphqfrussr.scala:25)\n\tat Problem.main(tmphqfrussr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9eeuhdzj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9eeuhdzj.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9eeuhdzj.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val min = numsSorted.head\n        val max\
    \ = numsSorted.last\n        val minSum = numsSorted.foldLeft(0l) { (sum, num)\
    \ => sum + num }\n        val maxSum = numsSorted.foldRight(0l) { (sum, num) =>\
    \ sum + num }\n        val maxSumDiff = maxSum - minSum\n        val minDiff =\
    \ max - min\n        val minSumDiff = minSum - min\n        val minDiffDiff =\
    \ minDiff - max\n        val minSumDiffDiff = minSumDiff - max\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiff - minDiff\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSumDiff\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n\
    \        val minSumDiffDiffDiff = minSumDiffDiffDiff - min\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff\
    \ - minSum\n        val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n   \
    \     val minSumDiffDiffDiff = minSumDiffDiffDiff - minSum\n        val minSumDiffDiffDiff\
    \ = minSumDiffDiffDiff - \n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdj8zxtvb.scala:42:53 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mminSumDiffDiffDiff\e[0m\
    \ = minSumDiffDiffDiff - \n\e[31m\e[31m   |\e[0m                             \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \          expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdj8zxtvb.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminSumDiffDiffDiff\e[0m\
    \ = minSumDiffDiffDiff - minSumDiff\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumDiffDiffDiff is already defined as \e[33mvalue\e[0m\
    \ \e[35mminSumDiffDiffDiff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdj8zxtvb.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mminSumDiffDiffDiff\e[0m\
    \ = minSumDiffDiffDiff - minSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumDiffDiffDiff is already defined as \e[33mvalue\e[0m\
    \ \e[35mminSumDiffDiffDiff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdj8zxtvb.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mminSumDiffDiffDiff\e[0m\
    \ = minSumDiffDiffDiff - min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminSumDiffDiffDiff is already defined as \e[33mvalue\e[0m\
    \ \e[35mminSumDiffDiffDiff\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdj8zxtvb.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val numsSortedLength = numsSorted.length\n\
    \        val numsSortedSum = numsSorted.foldLeft(0l) { (sum, num) =>\n       \
    \     val newSum = sum + num\n            if (newSum < 0l) {\n               \
    \ newSum\n            } else {\n                newSum\n            }\n      \
    \  }\n        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n                newSum\n            } else\
    \ {\n                newSum\n            }\n        }\n        val numsSortedSumTot\
    \ = numsSortedSum.foldLeft(0l) { (sum, num) =>\n            val newSum = sum +\
    \ num\n            if (newSum < 0l) {\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy9tz7ms7.scala:100:0 ---------------------------\e\
    [0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy9tz7ms7.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSumTot\e[0m = numsSortedSum.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e\
    [0m, \e[36mnum\e[0m) =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mnumsSortedSumTot\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSumTot\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m32 |\e[0m            \e[33mval\e\
    [0m \e[36mnewSum\e[0m = sum + num\n\e[31m33 |\e[0m            \e[33mif\e[0m (newSum\
    \ < \e[31m0l\e[0m) {\n\e[31m34 |\e[0m                newSum\n\e[31m35 |\e[0m \
    \           } \e[33melse\e[0m {\n\e[31m36 |\e[0m                newSum\n\e[31m37\
    \ |\e[0m            }\n\e[31m38 |\e[0m        }\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy9tz7ms7.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumTot\e[0m = numsSortedSum.foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36mnum\e[0m) =>\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0mnumsSortedSumTot is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSumTot\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m40\
    \ |\e[0m            \e[33mval\e[0m \e[36mnewSum\e[0m = sum + num\n\e[31m41 |\e\
    [0m            \e[33mif\e[0m (newSum < \e[31m0l\e[0m) {\n\e[31m42 |\e[0m     \
    \           newSum\n\e[31m43 |\e[0m            } \e[33melse\e[0m {\n\e[31m44 |\e\
    [0m                newSum\n\e[31m45 |\e[0m            }\n\e[31m46 |\e[0m     \
    \   }\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy9tz7ms7.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSumTot\e[0m =\
    \ numsSortedSum.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36mnum\e[0m) =>\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mnumsSortedSumTot is already\
    \ defined as \e[33mvalue\e[0m \e[3"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val numsSortedLength = numsSorted.length\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val numsSortedLength\
    \ = numsSortedLength.toLong\n        val numsSortedLength = numsSortedLength.toLong\n\
    \        val numsSortedLength = numsSortedLength.toLong\n        val nums\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxc7ih1wd.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxc7ih1wd.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedLength\e[0m = numsSortedLength.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsSortedLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedLength\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxc7ih1wd.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLength\e[0m = numsSortedLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxc7ih1wd.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLength\e[0m =\
    \ numsSortedLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxc7ih1wd.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedLength\e[0m =\
    \ numsSortedLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the "
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSortedLength = numsSorted.length\n \
    \       val numsSortedLastIndex = numsSortedLength - 1\n        val numsSortedLastValue\
    \ = numsSorted(numsSortedLastIndex)\n        val numsSortedLastIndexSum = numsSortedLastIndex\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum2 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum3 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum4 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum5 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum6 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum7 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum8 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum9 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum10 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum11 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum12 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum13 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum14 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum15 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum16 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum17 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum18 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum19 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum20 = numsSortedLastIndexSum\
    \ * numsSortedLastValue\n        val numsSortedLastIndexSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy3w8s6ky.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpy3w8s6ky.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.foldLeft(0l) { (sum, num)\
    \ =>\n            val newSum = sum + num\n            if (newSum < 0l) newSum\n\
    \            else newSum\n        }\n        sums.min\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv33uylb_.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        sums.min\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long => Long\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetSize = numsSet.size\n        val numsSetIterator\
    \ = numsSet.iterator\n        val numsSetIteratorSize = numsSetIterator.size\n\
    \        val numsSetIteratorIterator = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize\
    \ = numsSetIteratorIterator.size\n        val numsSetIteratorIteratorIterator\
    \ = numsSetIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIterator.iterator\n        val numsSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIterator.size\n        val numsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIterator\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpse674tbv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:24:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e[0m = numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpse674tbv.scala:34:110\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpse674tbv.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val numsCopy = numsCopy.filter(_ > 0l)\n        val numsCopy2\
    \ = numsCopy.filter(_ < 0l)\n        val numsCopy3 = numsCopy.filter(_ > 0l)\n\
    \        val numsCopy4 = numsCopy.filter(_ < 0l)\n        val numsCopy5 = numsCopy.filter(_\
    \ > 0l)\n        val numsCopy6 = numsCopy.filter(_ < 0l)\n        val numsCopy7\
    \ = numsCopy.filter(_ > 0l)\n        val numsCopy8 = numsCopy.filter(_ < 0l)\n\
    \        val numsCopy9 = numsCopy.filter(_ > 0l)\n        val numsCopy10 = numsCopy.filter(_\
    \ < 0l)\n        val numsCopy11 = numsCopy.filter(_ > 0l)\n        val numsCopy12\
    \ = numsCopy.filter(_ < 0l)\n        val numsCopy13 = numsCopy.filter(_ > 0l)\n\
    \        val numsCopy14 = numsCopy.filter(_ < 0l)\n        val numsCopy15 = numsCopy.filter(_\
    \ > 0l)\n        val numsCopy16 = numsCopy.filter(_ < 0l)\n        val numsCopy17\
    \ = numsCopy.filter(_ > 0l)\n        val numsCopy18 = numsCopy.filter(_ < 0l)\n\
    \        val numsCopy19 = numsCopy.filter(_ > 0l)\n        val numsCopy20 = numsCopy.filter(_\
    \ < 0l)\n        val numsCopy21 = numsCopy.filter(_ > 0l)\n        val numsCopy22\
    \ = numsCopy.filter(_ < 0l)\n        val numsCopy23 = numsCopy.filter(_ > 0l)\n\
    \        val numsCopy24 = numsCopy.filter(_ < 0l)\n        val numsCopy25 = numsCopy.filter(_\
    \ > 0l)\n        val numsCopy26 = numsCopy.filter(_ < 0l)\n        val numsCopy27\
    \ = numsCopy.filter(_ > 0l)\n        val numsCopy28 = numsCopy.filter(_ < 0l)\n\
    \        val numsCopy29 = numsCopy.filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfad85ulg.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy\e[0m = numsCopy.filter(_\
    \ > \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsCopy is already defined as \e[33mvalue\e[0m \e[35mnumsCopy\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpfad85ulg.scala:43:5 ---------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val numsSetIterator = numsSet.iterator\n        val numsSetIteratorNext\
    \ = numsSetIterator.next\n        val numsSetIteratorNextValue = numsSetIteratorNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNext = numsSetIteratorNext.next\n        val numsSetIteratorNextNextValue\
    \ = numsSetIteratorNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNext\
    \ = numsSetIteratorNextNext.next\n        val numsSetIteratorNextNextNextValue\
    \ = numsSetIteratorNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNext\
    \ = numsSetIteratorNextNextNext.next\n        val numsSetIteratorNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNext.asInstanceOf[Long]\n        val numsSetIteratorNextNextNextNextNextNextNext\
    \ = numsSetIteratorNextNextNextNextNextNextNext.next\n        val numsSetIteratorNextNextNextNextNextNextNextValue\
    \ = numsSetIteratorNextNextNextNextNextNextNext.asInstanceOf[Long]\n        val\
    \ numsSetIteratorNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNextValue = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.asInstanceOf[Long]\n\
    \        val numsSetIteratorNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplp3gbo_z.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp3gbo_z.scala:16:58\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNext\e[0m = numsSetIteratorNext.next\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value next is not a member of\
    \ Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplp3gbo_z.scala:26:58 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = numsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m  Recursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplp3gbo_z.scala:28:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetIteratorNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplp3gbo_z.scala:30:66\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = numsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m      Not found: numsSetIteratorNextNextNex"
  stdout: ''
  timestamp: 1659805879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val minSums = numsCopy.filter(num => num < minSum).map(num\
    \ => num - minSum)\n        minSums.foldLeft(0l) { (sum, num) => sum + num }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9xvji5si.scala:18)\n\tat Problem.main(tmp9xvji5si.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n\
    \                newSum\n            } else {\n                sum\n         \
    \   }\n        }\n        minSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18zkclq2.scala:24)\n\tat Problem.main(tmp18zkclq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSet\
    \ = nums.toSet\n        val minSum = nums.foldLeft(0l) { (sum, num) =>\n     \
    \       val newSum = sum + num\n            if (numsSet.contains(newSum)) {\n\
    \                newSum\n            } else {\n                sum\n         \
    \   }\n        }\n        minSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp18zkclq2.scala:24)\n\tat Problem.main(tmp18zkclq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805879
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortBy(_.toLong)\n        val numsSortedLength = numsSorted.length\n\
    \        val numsSortedSum = numsSorted.foldLeft(0l) { (sum, num) =>\n       \
    \     val newSum = sum + num\n            if (newSum > 0l) {\n               \
    \ newSum\n            } else {\n                0l\n            }\n        }\n\
    \        val numsSortedSumLength = numsSortedSum.length\n        val numsSortedSumMinusOne\
    \ = numsSortedSum - numsSortedSumLength\n        val numsSortedSumMinusOneLength\
    \ = numsSortedSumMinusOne.length\n        val numsSortedSumMinusOneSum = numsSortedSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumLength = numsSortedSumMinusOneSum.length\n\
    \        val numsSortedSumMinusOneSumMinusOne = numsSortedSumMinusOneSum - numsSortedSumMinusOneLength\n\
    \        val numsSortedSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOne.foldLeft(0l)\
    \ { (sum, num) =>\n            val newSum = sum + num\n            if (newSum\
    \ > 0l) {\n                newSum\n            } else {\n                0l\n\
    \            }\n        }\n        val numsSortedSumMinusOneSumMinusOneSumLength\
    \ = numsSortedSumMinusOneSumMinusOneSum.length\n        val numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ = numsSortedSumMinusOneSumMinusOneSum - numsSortedSumMinusOneSumMinusOneLength\n\
    \        val numsSortedSumMinusOneSumMinusOneSumMinusOneLength = numsSortedSumMinusOneSumMinusOneSumMinusOne.length\n\
    \        val numsSortedSumMinusOneSumMinusOneSumMinusOneSum = numsSortedSumMinusOneSumMinusOneSumMinusOne\
    \ - numsSortedSumMinusOneSumMinusOneSumLength\n        val numsSortedSumMinusOneSumMinus\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_qa7zh9e.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qa7zh9e.scala:22:48\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSortedSumLength\e[0m = numsSortedSum.length\n\e[31m\e[31m   |\e[0m   \
    \                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                               value length is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_qa7zh9e.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val minSum = numsSorted.foldLeft(0l) { (sum,\
    \ num) =>\n            val newSum = sum + num\n            if (newSum < minSum)\
    \ newSum else minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwae5wct0.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwae5wct0.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val numsSortedLength = numsSorted.length\n \
    \       val numsSortedHead = numsSorted.head\n        val numsSortedTail = numsSorted.tail\n\
    \        val numsSortedHeadLength = numsSortedHead - numsSortedTail\n        val\
    \ numsSortedTailLength = numsSortedTail.length - numsSortedHeadLength\n      \
    \  val numsSortedHeadHead = numsSortedHeadHead\n        val numsSortedTailTail\
    \ = numsSortedTailTail\n        val numsSortedHeadTail = numsSortedHeadTail\n\
    \        val numsSortedTailHead = numsSortedTailHead\n        val numsSortedHeadHeadHead\
    \ = numsSortedHeadHeadHead\n        val numsSortedTailTailTail = numsSortedTailTailTail\n\
    \        val numsSortedHeadTailTail = numsSortedHeadTailTail\n        val numsSortedTailHeadTail\
    \ = numsSortedTailHeadTail\n        val numsSortedHeadHeadHead = numsSortedHeadHeadHead\n\
    \        val numsSortedTailTailTailTail = numsSortedTailTailTailTail\n       \
    \ val numsSortedHeadTailTailTail = numsSortedHeadTailTailTail\n        val numsSortedTailHeadTailTail\
    \ = numsSortedTailHeadTailTail\n        val numsSortedHeadHeadHeadHead = numsSortedHeadHeadHeadHead\n\
    \        val numsSortedTailTailTailTailTail = numsSortedTailTailTailTailTail\n\
    \        val numsSortedHeadTailTailTailTail = numsSortedHeadTailTailTailTail\n\
    \        val numsSortedTailHeadTailTailTail = numsSortedTailHeadTailTailTail\n\
    \        val numsSortedHeadHeadHeadHeadHead = numsSortedHeadHeadHeadHeadHead\n\
    \        val numsSortedTailTailTailTailTail = numsSortedTailTailTailTailTail\n\
    \        val numsSortedHeadTailTailTailTailTail = numsSortedHeadTailTailTailTailTail\n\
    \        val numsSortedTailHeadTailTailTailTail = numsSortedTailHeadTailTailTailTail\n\
    \        val numsSortedHeadHeadHeadHeadHeadHead = numsSortedHeadHeadHeadHeadHeadHead\n\
    \        val numsSortedTailTailTailTailTailTail = numsSortedTailTailTailTailTailTail\n\
    \        val numsSortedHeadTailTailTailTailTailTail = numsSortedHeadTailTailTailTailTailTail\n\
    \        val num\n    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzks78wqb.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzks78wqb.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedHeadHeadHead\e[0m = numsSortedHeadHeadHead\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mnumsSortedHeadHeadHead is already defined as \e[33mvalue\e[0m \e[35mnumsSortedHeadHeadHead\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzks78wqb.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedTailTailTailTailTail\e[0m\
    \ = numsSortedTailTailTailTailTail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedTailTailTailTailTail is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedTailTailTailTailTail\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpzks78wqb.scala:16:50 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedHeadLength\e[0m\
    \ = numsSortedHead - numsSortedTail\n\e[31m\e[31m   |\e[0m                   \
    \                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((numsSortedTail : List[Long]))\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzks78wqb.scala:18:33 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedH"
  stdout: ''
  timestamp: 1660010205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val minSum\
    \ = nums.foldLeft(0l)((sum, num) => sum + num)\n        val subArray = nums.filter(num\
    \ => num > 0)\n        minSum - subArray.foldLeft(0l)((sum, num) => sum + num)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpprxq54q2.scala:17)\n\tat Problem.main(tmpprxq54q2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.sum\n        val numsArraySumLength = numsArraySum.length\n\
    \        val numsArraySumMinusOne = numsArraySum - numsArraySumLength\n      \
    \  val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n        val numsArraySumMinusOneSum\
    \ = numsArraySumMinusOne.sum\n        val numsArraySumMinusOneSumLength = numsArraySumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOne = numsArraySumMinusOneSum - numsArraySumMinusOneSumLength\n\
    \        val numsArraySumMinusOneSumMinusOneLength = numsArraySumMinusOneSumMinusOne.length\n\
    \        val numsArraySumMinusOneSumMinusOneSum = numsArraySumMinusOneSumMinusOne.sum\n\
    \        val numsArraySumMinusOneSumMinusOneSumLength = numsArraySumMinusOneSumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOne = numsArraySumMinusOneSumMinusOneSum\
    \ - numsArraySumMinusOneSumMinusOneSumLength\n        val numsArraySumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.length\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.sum\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSumLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOneSum.length\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOne\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOneSum - numsArraySumMinusOneSumMinusOneSumMinusOneSumLength\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength = numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\n\
    \        val numsArraySumMinusOneSumMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgpboks38.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpboks38.scala:15:46\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumLength\e[0m = numsArraySum.length\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value length is not a member of Long\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpgpboks38.scala:29:74 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\e\
    [0m = numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgpboks38.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val minSums = numsCopy.filter(num => num < minSum).map(num\
    \ => num - minSum)\n        minSums.foldLeft(0l) { (sum, num) => sum + num }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9xvji5si.scala:18)\n\tat Problem.main(tmp9xvji5si.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsArray\
    \ = nums.toArray\n        val numsArrayLength = numsArray.length\n        val\
    \ numsArraySum = numsArray.reduceLeft(_ + _)\n        val numsArraySumLength =\
    \ numsArraySum.length\n        val numsArraySumMinusOne = numsArraySum - numsArrayLength\n\
    \        val numsArraySumMinusOneLength = numsArraySumMinusOne.length\n      \
    \  val numsArraySumMinusOneSum = numsArraySumMinusOne.reduceLeft(_ + _)\n    \
    \    val numsArraySumMinusOneSumLength = numsArraySumMinusOneSum.length\n    \
    \    val numsArraySumMinusOneSumMinusOne = numsArraySumMinusOneSum - numsArraySumLength\n\
    \        val numsArraySumMinusOneSumMinusOneLength = numsArraySumMinusOneSumMinusOne.length\n\
    \        val numsArraySumMinusOneSumMinusOneSum = numsArraySumMinusOneSumMinusOne.reduceLeft(_\
    \ + _)\n        val numsArraySumMinusOneSumMinusOneSumLength = numsArraySumMinusOneSumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOne = numsArraySumMinusOneSumMinusOneSum\
    \ - numsArraySumMinusOneSumLength\n        val numsArraySumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.length\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSum\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOne.reduceLeft(_ + _)\n        val\
    \ numsArraySumMinusOneSumMinusOneSumMinusOneSumLength = numsArraySumMinusOneSumMinusOneSumMinusOneSum.length\n\
    \        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOne = numsArraySumMinusOneSumMinusOneSumMinusOneSum\
    \ - numsArraySumMinusOneSumMinusOneSumLength\n        val numsArraySumMinusOneSumMinusOneSumMinusOneSumMinusOneLength\
    \ = numsArraySumMinusOneSumMinusOneSumMinusOneSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hmiwk1h.scala:15:46 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumsArraySumLength\e[0m\
    \ = numsArraySum.length\n\e[31m\e[31m   |\e[0m                               \
    \  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ length is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hmiwk1h.scala:17:62\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumMinusOneLength\e[0m = numsArraySumMinusOne.length\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1hmiwk1h.scala:18:59\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsArraySumMinusOneSum\e[0m = numsArraySumMinusOne.reduceLeft(_ + _)\n\e\
    [31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value reduceLeft is not a\
    \ member of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1hmiwk1h.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) => sum\
    \ + num }\n        val subArray = numsCopy.filter(num => num > minSum)\n     \
    \   minSubArraySum(subArray)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010211
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0l) { (sum, num)\
    \ =>\n            if (num > 0) sum + num\n            else sum\n        }\n  \
    \      val min = sums.min\n        val max = sums.max\n        val sum = sums.sum\n\
    \        if (sum < min || sum > max) 0l\n        else sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong,\
    \ 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4z0lmhsy.scala:24)\n\tat Problem.main(tmp4z0lmhsy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val numsCopy2 = numsCopy.filter(_ > 0).toList\n     \
    \   val numsCopy3 = numsCopy2.filter(_ > 0).toList\n        val numsCopy4 = numsCopy3.filter(_\
    \ > 0).toList\n        val numsCopy5 = numsCopy4.filter(_ > 0).toList\n      \
    \  val numsCopy6 = numsCopy5.filter(_ > 0).toList\n        val numsCopy7 = numsCopy6.filter(_\
    \ > 0).toList\n        val numsCopy8 = numsCopy7.filter(_ > 0).toList\n      \
    \  val numsCopy9 = numsCopy8.filter(_ > 0).toList\n        val numsCopy10 = numsCopy9.filter(_\
    \ > 0).toList\n        val numsCopy11 = numsCopy10.filter(_ > 0).toList\n    \
    \    val numsCopy12 = numsCopy11.filter(_ > 0).toList\n        val numsCopy13\
    \ = numsCopy12.filter(_ > 0).toList\n        val numsCopy14 = numsCopy13.filter(_\
    \ > 0).toList\n        val numsCopy15 = numsCopy14.filter(_ > 0).toList\n    \
    \    val numsCopy16 = numsCopy15.filter(_ > 0).toList\n        val numsCopy17\
    \ = numsCopy16.filter(_ > 0).toList\n        val numsCopy18 = numsCopy17.filter(_\
    \ > 0).toList\n        val numsCopy19 = numsCopy18.filter(_ > 0).toList\n    \
    \    val numsCopy20 = numsCopy19.filter(_ > 0).toList\n        val numsCopy21\
    \ = numsCopy20.filter(_ > 0).toList\n        val numsCopy22 = numsCopy21.filter(_\
    \ > 0).toList\n        val numsCopy23 = numsCopy22.filter(_ > 0).toList\n    \
    \    val numsCopy24 = numsCopy23.filter(_ > 0).toList\n        val numsCopy25\
    \ = numsCopy24.filter(_ > 0).toList\n        val numsCopy26 = numsCopy25.filter(_\
    \ > 0).toList\n        val numsCopy27 = numsCopy26.filter(_ > 0).toList\n    \
    \    val numsCopy28 = numsCopy27.filter(_ > 0).toList\n        val numsCopy29\
    \ = numsCopy28.filter(_ > 0).toList\n        val numsCopy30 = num\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuh1617e1.scala:41:25 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnumsCopy30\e[0m = num\n\e\
    [31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                 Not found: num\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuh1617e1.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val sums = numsSorted.scanLeft(0L)(_ + _)\n\
    \        val minSum = sums.min\n        val minSumIndex = sums.indexOf(minSum)\n\
    \        sums(minSumIndex)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ne29nkf.scala:19)\n\tat Problem.main(tmp_ne29nkf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
    \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    //\
    \ (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsCopy\
    \ = nums.toList\n        val minSum = numsCopy.foldLeft(0l) { (sum, num) =>\n\
    \            val newSum = sum + num\n            if (newSum < minSum) newSum else\
    \ minSum\n        }\n        minSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
    \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong,\
    \ 10l.toLong, 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
    \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n \
    \   assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
    \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n\
    \    assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
    \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) ==\
    \ (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (newSum < minSum) newSum \e\
    [33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mminSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpheaeqbbz.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e\
    [0m (newSum < minSum) newSum \e[33melse\e[0m minSum\n\e[31m\e[31m   |\e[0m   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            Recursive \e[33mvalue\e[0m \e[35mminSum\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805873
