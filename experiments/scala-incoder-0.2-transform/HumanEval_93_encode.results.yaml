language: scala
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) => {\n\
    \            val index = letters.indexOf(elem)\n            val nextIndex = letters.indexOf(elem,\
    \ index + 1)\n            val nextLetter = letters(nextIndex)\n            val\
    \ nextVowel = vowels(nextIndex)\n            val nextVowelIndex = letters.indexOf(nextVowel)\n\
    \            val nextVowelNextIndex = letters.indexOf(nextVowel, nextVowelIndex\
    \ + 1)\n            val nextVowelNextLetter = letters(nextVowelNextIndex)\n  \
    \          val nextVowelNextVowel = vowels(nextVowelNextIndex)\n            val\
    \ nextVowelNextVowelIndex = letters.indexOf(nextVowelNextVowel)\n            val\
    \ nextVowelNextVowelNextIndex = letters.indexOf(nextVowelNextVowel, nextVowelNextVowelIndex\
    \ + 1)\n            val nextVowelNextVowelNextLetter = letters(nextVowelNextVowelNextIndex)\n\
    \            val nextVowelNextVowelNextVowel = vowels(nextVowelNextVowelNextIndex)\n\
    \            val nextVowelNextVowelNextVowelIndex = letters.indexOf(nextVowelNextVowelNextVowel)\n\
    \            val nextVowelNextVowelNextVowelNextIndex = letters.indexOf(nextVowelNextVowelNextVowel,\
    \ nextVowelNextVowelNextVowelIndex + 1)\n            val nextVowelNextVowelNextVowelNextLetter\
    \ = letters(nextVowelNextVowelNextVowelNextIndex)\n            val nextVowelNextVowelNextVowelNextVowel\
    \ = vowels(nextVowelNextVowelNextVowelNextIndex)\n            val nextVowelNextVowelNextVowelNextVowelIndex\
    \ = letters.indexOf(nextVowelNextVowelNextVowelNextVowel)\n            val nextVowelNextVowelNextVowelNextVowelNextIndex\
    \ = letters.indexOf(nextVowelNextVowelNextVowelNextVowel, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_xi9_g5.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_xi9_g5.scala:38:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_xi9_g5.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_xi9_g5.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_xi9_g5.scala:46:1\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val encodedMessageArray = ArrayBuffer.empty[String]\n        var i =\
    \ 0\n        while (i < messageArrayLength) {\n            val currentChar = messageArray(i)\n\
    \            val currentCharIndex = vowels.indexOf(currentChar)\n            if\
    \ (currentCharIndex != -1) {\n                val nextChar = vowels(currentCharIndex\
    \ + 1)\n                val nextCharIndex = vowels.indexOf(nextChar)\n       \
    \         if (nextCharIndex != -1) {\n                    val encodedChar = nextChar\
    \ + vowels(currentCharIndex + 2)\n                    encodedMessageArray.append(encodedChar)\n\
    \                }\n            }\n            i += 1\n        }\n        encodedMessageArray.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwti_ut3n.scala:28:40 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    encodedMessageArray.append(encodedChar)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e\
    [0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems:\
    \ String*): \n\e[31m   |\e[0m  (encodedMessageArray : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): \n\e[31m   |\e[0m  (encodedMessageArray : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((encodedChar : Int))\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        var newMessage = \"\"\n        var currentLetter\
    \ = messageArray(0)\n        var currentVowel = vowels(0)\n        var currentVowelIndex\
    \ = -1\n        var currentVowelIndex2 = -1\n        var currentVowelIndex3 =\
    \ -1\n        var currentVowelIndex4 = -1\n        var currentVowelIndex5 = -1\n\
    \        var currentVowelIndex6 = -1\n        var currentVowelIndex7 = -1\n  \
    \      var currentVowelIndex8 = -1\n        var currentVowelIndex9 = -1\n    \
    \    var currentVowelIndex10 = -1\n        var currentVowelIndex11 = -1\n    \
    \    var currentVowelIndex12 = -1\n        var currentVowelIndex13 = -1\n    \
    \    var currentVowelIndex14 = -1\n        var currentVowelIndex15 = -1\n    \
    \    var currentVowelIndex16 = -1\n        var currentVowelIndex17 = -1\n    \
    \    var currentVowelIndex18 = -1\n        var currentVowelIndex19 = -1\n    \
    \    var currentVowelIndex20 = -1\n        var currentVowelIndex21 = -1\n    \
    \    var currentVowelIndex22 = -1\n        var currentVowelIndex23 = -1\n    \
    \    var currentVowelIndex24 = -1\n        var currentVowelIndex25 = -1\n    \
    \    var currentVowelIndex26 = -1\n        var currentVowelIndex27 = -1\n    \
    \    var currentVowelIndex28 = -1\n        var currentVowelIndex29 = -1\n    \
    \    var currentVowelIndex30 = -1\n        var currentVowelIndex31 = -1\n    \
    \    var currentVowelIndex32 = -1\n        var currentVowelIndex33 = -1\n    \
    \    var currentVowelIndex34 = -1\n        var currentVowelIndex35 = -1\n    \
    \    var currentVowelIndex36 = -1\n        var currentVowelIndex37 = -1\n    \
    \    var currentVowelIndex38 = -1\n        var currentVowelIndex39 = -1\n    \
    \    var currentVowelIndex40 = -1\n        var currentVowelIndex41 = -1\n    \
    \    var currentVowelIndex42 = -1\n        var currentVowelIndex43 = -1\n    \
    \    var currentVowelIndex44 = -1\n        var currentVowelIndex45 = -1\n    \
    \    var currentVowelIndex46 = -1\n        var currentVowelIndex47 = -1\n    \
    \    var currentVowelIndex48 = -1\n        var currentVowelIndex49 = -1\n    \
    \    var currentVowelIndex50 = -1\n        var currentVowelIndex51 = -1\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfy_9i0mp.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        val messageArray = message.split(\"\")\n        val vowelsArray = vowels.split(\"\
    \")\n        val vowelsSet = mutable.Set[String]()\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArraySet = mutable.Set[String]()\n \
    \       val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14x2ycr0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp14x2ycr0.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsArraySetLength\e[0m = vowelsArraySet.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m \e[35mvowelsArraySetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp14x2ycr0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsArraySetLength\e[0m = vowelsArraySet.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsArraySetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp14x2ycr0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsArraySetLength\e[0m\
    \ = vowelsArraySet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsArraySetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp14x2ycr0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsArraySetLength\e[0m\
    \ = vowelsArraySet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsArraySetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote tha"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val encodedMessage = messageList.foldLeft(\"\
    \") { (result, current) =>\n            val currentList = current.toUpperCase().toList\n\
    \            val currentVowels = currentList.filter(vowels.contains)\n       \
    \     val currentVowelsCount = currentVowels.map(_.length).sum\n            val\
    \ currentVowelsIndex = currentList.indexOf(currentVowels.head)\n            val\
    \ currentVowelsIndex2 = currentVowelsIndex + 2\n            val currentVowelsIndex3\
    \ = currentVowelsIndex + 3\n            val currentVowelsIndex4 = currentVowelsIndex\
    \ + 4\n            val currentVowelsIndex5 = currentVowelsIndex + 5\n        \
    \    val currentVowelsIndex6 = currentVowelsIndex + 6\n            val currentVowelsIndex7\
    \ = currentVowelsIndex + 7\n            val currentVowelsIndex8 = currentVowelsIndex\
    \ + 8\n            val currentVowelsIndex9 = currentVowelsIndex + 9\n        \
    \    val currentVowelsIndex10 = currentVowelsIndex + 10\n            val currentVowelsIndex11\
    \ = currentVowelsIndex + 11\n            val currentVowelsIndex12 = currentVowelsIndex\
    \ + 12\n            val currentVowelsIndex13 = currentVowelsIndex + 13\n     \
    \       val currentVowelsIndex14 = currentVowelsIndex + 14\n            val currentVowelsIndex15\
    \ = currentVowelsIndex + 15\n            val currentVowelsIndex16 = currentVowelsIndex\
    \ + 16\n            val currentVowelsIndex17 = currentVowelsIndex + 17\n     \
    \       val currentVowelsIndex18 = currentVowelsIndex + 18\n            val currentVowelsIndex19\
    \ = currentVowelsIndex + 19\n            val currentVowelsIndex20 = currentVowelsIndex\
    \ + 20\n            val currentVowelsIndex21 = currentVowelsIndex + 21\n     \
    \       val currentVowelsIndex22 = currentVowelsIndex + 22\n            val currentVowelsIndex23\
    \ = currentVowelsIndex + 23\n            val current\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpylgtvekr.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpylgtvekr.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpylgtvekr.scala:18:38 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcurrentList\e[0m = current.toUpperCase().toList\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value toUpperCase is not a member of\
    \ Null\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpylgtvekr.scala:54:1\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpylgtvekr.scala:46:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel.zip(vowels.drop(vowelIndex)).map\
    \ { case (vowel1, vowel2) => vowel1 -> vowel2 }.toMap\n            } else {\n\
    \                letter -> letter\n            }\n        })\n        newMessageArray.toList.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmxoj6o6v.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowel.zip(vowels.drop(vowelIndex)).map\
    \ { \e[33mcase\e[0m (vowel1, vowel2) => vowel1 -> vowel2 }.toMap\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ zip is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toList\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\".toList\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\")( (acc, curr) => {\n\
    \            val currIndex = letters.indexOf(curr)\n            val currVowelIndex\
    \ = vowels.indexOf(curr)\n            val currVowelIndex2 = vowels.indexOf(curr\
    \ + 1, currIndex + 1)\n            val currVowelIndex3 = vowels.indexOf(curr +\
    \ 2, currIndex + 2)\n            val currVowelIndex4 = vowels.indexOf(curr + 3,\
    \ currIndex + 3)\n            val currVowelIndex5 = vowels.indexOf(curr + 4, currIndex\
    \ + 4)\n            val currVowelIndex6 = vowels.indexOf(curr + 5, currIndex +\
    \ 5)\n            val currVowelIndex7 = vowels.indexOf(curr + 6, currIndex + 6)\n\
    \            val currVowelIndex8 = vowels.indexOf(curr + 7, currIndex + 7)\n \
    \           val currVowelIndex9 = vowels.indexOf(curr + 8, currIndex + 8)\n  \
    \          val currVowelIndex10 = vowels.indexOf(curr + 9, currIndex + 9)\n  \
    \          val currVowelIndex11 = vowels.indexOf(curr + 10, currIndex + 10)\n\
    \            val currVowelIndex12 = vowels.indexOf(curr + 11, currIndex + 11)\n\
    \            val currVowelIndex13 = vowels.indexOf(curr + 12, currIndex + 12)\n\
    \            val currVowelIndex14 = vowels.indexOf(curr + 13, currIndex + 13)\n\
    \            val currVowelIndex15 = vowels.indexOf(curr + 14, currIndex + 14)\n\
    \            val currVowelIndex16 = vowels.indexOf(curr + 15, currIndex + 15)\n\
    \            val currVowelIndex17 = vowels.indexOf(curr + 16, currIndex + 16)\n\
    \            val currVowelIndex18 = vowels.indexOf(curr + 17, currIndex + 17)\n\
    \            val currVowelIndex19 = vowels.indexOf(curr + 18, currIndex + 18)\n\
    \            val currVowelIndex20 = vowels.indexOf(curr + 19, currIndex + 19)\n\
    \            val currVowelIndex21 = vowels.indexOf(curr + 20, currIndex + 20)\n\
    \            val currVowelIndex22 = vowels.indexOf(curr + 21, currIndex + 21)\n\
    \            val currVowelIndex23 = vowels.indexOf(curr + 22, currIndex + 22)\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyzmp5zv8.scala:43:15 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyzmp5zv8.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyzmp5zv8.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyzmp5zv8.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyzmp5zv8.scala:53:1 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        var i\
    \ = 0\n        while (i < messageArray.length) {\n            val letter = messageArray(i)\n\
    \            if (vowels(i) == letter) {\n                val nextLetter = messageArray(i\
    \ + 1)\n                val index = vowels.indexOf(letter)\n                if\
    \ (index != -1) {\n                    result.append(vowels(index))\n        \
    \            result.append(nextLetter)\n                }\n            }\n   \
    \         i += 1\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_i8a7q_.scala:34)\n\tat Problem.main(tmpa_i8a7q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            if (vowels.contains(letter)) {\n \
    \               vowels.find(vowel => vowel == letter).map(_ + letter).head\n \
    \           } else {\n                letter\n            }\n        }).mkString(\"\
    \")\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_0ivasg.scala:27)\n\tat Problem.main(tmp9_0ivasg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        }).mkString\n        val encodedMessageLength = encodedMessage.length\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_gqgi0tu.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\").toList\n        val newMessageList2\
    \ = newMessageList.map(x => vowels.indexOf(x) + 1).map(x => vowels(x)).mkString(\"\
    \")\n        val newMessageList3 = newMessageList2.split(\"\").toList\n      \
    \  val newMessageList4 = newMessageList3.map(x => vowels.indexOf(x) + 1).map(x\
    \ => vowels(x)).mkString(\"\")\n        val newMessageList5 = newMessageList4.split(\"\
    \").toList\n        val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList7 = newMessageList6.split(\"\
    \").toList\n        val newMessageList8 = newMessageList7.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList9 = newMessageList8.split(\"\
    \").toList\n        val newMessageList10 = newMessageList9.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList11 = newMessageList10.split(\"\
    \").toList\n        val newMessageList12 = newMessageList11.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList13 = newMessageList12.split(\"\
    \").toList\n        val newMessageList14 = newMessageList13.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList15 = newMessageList14.split(\"\
    \").toList\n        val newMessageList16 = newMessageList15.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList17 = newMessageList16.split(\"\
    \").toList\n        val newMessageList18 = newMessageList17.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList19 = newMessageList18.split(\"\
    \").toList\n        val newMessageList20 = newMessageList19.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList21 = newMessageList20.split(\"\
    \").toList\n        val newMessageList22 = newMessageList21.map(x \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo4hvqeeu.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo4hvqeeu.scala:39:52\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessageList22\e[0m = newMessageList21.map(x \n\e[31m\e[31m   |\e[0m   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                                Not found: x\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4hvqeeu.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n      \
    \      val newElem = if (index != -1) alphabet(index - 1) else elem\n        \
    \    acc + (if (vowels.contains(elem)) elem else newElem)\n        })\n      \
    \  newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg87fw4xr.scala:26)\n\tat Problem.main(tmpg87fw4xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2vlw53h.scala:22)\n\tat Problem.main(tmpu2vlw53h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoCharsBefore\
    \ = messageWithVowels.replaceAll(vowels.charAt(2), vowels.charAt(3))\n       \
    \ val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfter = messageWithVowelsAndTwoCharsBefore.replaceAll(vowels.charAt(3),\
    \ vowels.charAt(4))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfter.replaceAll(vowels.charAt(4),\
    \ vowels.charAt(5))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(5),\
    \ vowels.charAt(6))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(6),\
    \ vowels.charAt(7))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(7),\
    \ vowels.charAt(8))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(8),\
    \ vowels.charAt(9))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBefore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:16:72\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e\
    [0m = message.replaceAll(vowels, vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:17:91\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoCharsBefore\e\
    [0m = messageWithVowels.replaceAll(vowels.charAt(\e[31m2\e[0m), vowels.charAt(\e\
    [31m3\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                      Found:    Char\n\e[31m\
    \   |\e[0m                                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:17:109\
    \ -------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoCharsBefore\e\
    [0m = messageWithVowels.replaceAll(vowels.charAt(\e[31m2\e[0m), vowels.charAt(\e\
    [31m3\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                      ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:18:124\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoCharsBeforeAndTwoCharsA"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    )( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n        \
    \    if (index != -1) {\n                val vowelIndex = vowels.indexOf(elem)\n\
    \                if (vowelIndex != -1) {\n                    val vowel = vowels(vowelIndex)\n\
    \                    val vowelIndex = vowels.indexOf(vowel)\n                \
    \    val vowelIndex = vowelIndex + 2\n                    if (vowelIndex < vowels.length)\
    \ acc + (vowels(vowelIndex))\n                    else acc + (elem)\n        \
    \        } else acc + (elem)\n            } else acc + (elem)\n        })\n  \
    \      encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzjs9h66.scala:25:24 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mval\e[0m \e[36mvowelIndex\e\
    [0m = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpjzjs9h66.scala:24:52 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                    \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                        Recursive \e[33mvalue\e\
    [0m \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (index != -1 && vowelIndex != -1) {\n                val vowel\
    \ = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(index)\n\
    \            } else {\n                letter\n            }\n        }).mkString\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7q7byro.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpw7q7byro.scala:23:48 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => \n            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(2)) + elem.toLowerCase().replaceAll(vowels, elem.toLowerCase().charAt(2))\
    \ ) \n        )\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphehgehta.scala:18:82\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(\e[31m2\e[0m)) + elem.toLowerCase().replaceAll(vowels,\
    \ elem.toLowerCase().charAt(\e[31m2\e[0m)) ) \n\e[31m\e[31m   |\e[0m         \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphehgehta.scala:18:152\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(\e[31m2\e[0m)) + elem.toLowerCase().replaceAll(vowels,\
    \ elem.toLowerCase().charAt(\e[31m2\e[0m)) ) \n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : vowels.find(letter => letter != letter + 2) match {\n           \
    \ case Some(vowel) => vowel\n            case None => letter\n        })\n   \
    \     val messageWithVowelsAndLetters = messageWithVowels.map(letter => vowels.find(letter\
    \ => letter != letter + 2) match {\n            case Some(vowel) => vowel\n  \
    \          case None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowels\
    \ = messageWithVowelsAndLetters.map(letter => vowels.find(letter => letter !=\
    \ letter + 2) match {\n            case Some(vowel) => vowel\n            case\
    \ None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowels.map(letter => vowels.find(letter\
    \ => letter != letter + 2) match {\n            case Some(vowel) => vowel\n  \
    \          case None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31yz1w3g.scala:16:100 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : vowels.find(letter\
    \ => letter != letter + \e[31m2\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                ')' expected, but '(' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp31yz1w3g.scala:16:70 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m = message.map(\e[36mletter\e\
    [0m => vowels.contains(letter) ? letter : vowels.find(letter => letter != letter\
    \ + \e[31m2\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                  \
    \                                                    ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (letter : Char)\n\e\
    [31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp31yz1w3g.scala:36:126\
    \ --------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\e\
    [0m = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels.map(\e\
    [36mletter\e[0m => vowels.find(\e[36mletter\e[0m => letter != letter + \e[31m2\e\
    [0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling "
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        newMessage.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjjs1h9rk.scala:21)\n\tat Problem.main(tmpjjs1h9rk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(letter)\n            \
    \    case letter => alphabet.indexOf(letter) + 2\n            }\n        )\n \
    \       val newMessage = messageArray.toList.mkString(\"\")\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpauhk48v_.scala:28)\n\tat Problem.main(tmpauhk48v_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 2)))\n        newMessage.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnp_vf0ef.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[Int]\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => \n         \
    \   letter match {\n                case letter if vowels.contains(letter) =>\
    \ vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage3 = newMessageArray3.toList.mkString(\"\
    \")\n        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage5 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgqxv4uv8.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgqxv4uv8.scala:74:5 ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + letter\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1) + letter\n            }\n        ).mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_thj23h.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => vowels(letter\
    \ - \e[31m1\e[0m) + letter\n\e[31m\e[31m   |\e[0m                            \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf_thj23h.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m => vowels(letter\
    \ - \e[31m1\e[0m) + vowels(letter - \e[31m1\e[0m) + letter\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf_thj23h.scala:22:61 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m => vowels(letter\
    \ - \e[31m1\e[0m) + vowels(letter - \e[31m1\e[0m) + letter\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e["
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case i => vowels(i + 2)\n        })\n        val newMessageString\
    \ = newMessage.toList.reverse.mkString\n        newMessageString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9kunlxf.scala:24)\n\tat Problem.main(tmp_9kunlxf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = String.join(\"\
    \", newMessageArray)\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpywxu7gec.scala:27:32 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = scala.collection.mutable.ArrayBuffer(\n\
    \            \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n        )\n        val messageArray =\
    \ message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\"\
    )(\n            (acc, elem) => {\n                val index = alphabet.indexOf(elem)\n\
    \                if (index != -1) {\n                    val nextIndex = index\
    \ + 2\n                    if (nextIndex < alphabet.length) {\n              \
    \          acc += alphabet(nextIndex)\n                    } else {\n        \
    \                acc += elem\n                    }\n                } else {\n\
    \                    acc += elem\n                }\n            }\n        )\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn6r82axv.scala:26:28 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        acc += alphabet(nextIndex)\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \         value += is not a member of String - did you mean acc.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn6r82axv.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                        acc += elem\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m               value +=\
    \ is not a member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpn6r82axv.scala:31:24 ------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m                    acc += elem\n\e[31m\e[31m   |\e[0m        \
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member\
    \ of String - did you mean acc.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map {\n  \
    \          letter =>\n                if (vowels.contains(letter)) {\n       \
    \             letter\n                } else {\n                    val index\
    \ = vowels.indexOf(letter)\n                    val vowelIndex = index + 1\n \
    \                   vowels(vowelIndex - 1) + letter\n                }\n     \
    \   }\n        newMessageArray.toString.toUpperCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$1(tmpsby9zbmw.scala:24)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmpsby9zbmw.scala:26)\n\
    \tat Problem$.main(tmpsby9zbmw.scala:30)\n\tat Problem.main(tmpsby9zbmw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp894ogcfs.scala:23)\n\tat Problem.main(tmp894ogcfs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case letter if letter != ' ' => letter\n          \
    \      case letter if letter != ' ' =>\n                    val index = alphabet.indexOf(letter)\n\
    \                    val vowelIndex = vowels.indexOf(letter)\n               \
    \     val nextLetter = alphabet(index+2)\n                    nextLetter match\
    \ {\n                        case letter if letter != ' ' =>\n               \
    \             letter\n                        case letter if letter != ' ' =>\n\
    \                            letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3v8vz07p.scala:80:48 ---------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m                        \e[33mcase\e[0m letter \e[33mif\e\
    [0m letter != \n\e[31m\e[31m   |\e[0m                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3v8vz07p.scala:91:0 ----------------------------\e[0m\e[0m\n\e[31m91\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmp3v8vz07p.scala:20:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter != \e[31m' '\e[0m => letter\n\e[31m\e[31m   |\e[0m                  \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp3v8vz07p.scala:21:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         \e[33mcase\e[0m letter \e[33mif\e[0m letter != \e[31m' '\e[0m =>\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3v8vz07p.scala:90:1 ---------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp3v8vz07p.scala:82:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m82 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n   \
    \     val encodedMessage = mutable.StringBuilder(messageLength)\n        for(i\
    \ <- 0 until messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val currentCharIndex = letters.indexOf(currentChar)\n           \
    \ val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % letters.length\n            val currentChar = letters(currentCharIndex)\n\
    \            encodedMessage.append(currentChar)\n        }\n        encodedMessage.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt019fi2t.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.StringBuilder(messageLength)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpt019fi2t.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m\
    \ = currentCharIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt019fi2t.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m\
    \ = currentCharIndex % letters.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt019fi2t.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e[0m = letters(currentCharIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentChar is already defined as \e[33mvalue\e[0m \e[35mcurrentChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = String.join(\"\
    \", newMessageArray)\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpo04os0_i.scala:27:32 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val replacement = vowels(vowelIndex -\
    \ 1) + vowel\n                replacement\n            } else {\n            \
    \    letter\n            }\n        })\n        newMessageArray.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7623rcp.scala:31)\n\tat Problem.main(tmpb7623rcp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowel2Index = vowels.indexOf(vowels.charAt(vowelIndex + 1))\n\
    \                vowels.charAt(vowelIndex + 1) match {\n                    case\
    \ vowel => vowel\n                    case _ => vowels.charAt(vowel2Index)\n \
    \               }\n            } else {\n                letter\n            }\n\
    \        }).mkString(\"\")\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8ki_jiw.scala:32)\n\tat Problem.main(tmpf8ki_jiw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \")\n        var newMessage = \"\"\n        var i = 0\n   \
    \     while(i < messageList.length){\n            val currentChar = messageList(i)\n\
    \            val newChar = currentChar.toUpper\n            val newCharIndex =\
    \ alphabet.indexOf(newChar)\n            val newCharIndex2 = alphabet.indexOf(newChar,\
    \ newCharIndex + 1)\n            val newCharIndex3 = alphabet.indexOf(newChar,\
    \ newCharIndex + 2)\n            val newCharIndex4 = alphabet.indexOf(newChar,\
    \ newCharIndex + 3)\n            val newCharIndex5 = alphabet.indexOf(newChar,\
    \ newCharIndex + 4)\n            val newCharIndex6 = alphabet.indexOf(newChar,\
    \ newCharIndex + 5)\n            val newCharIndex7 = alphabet.indexOf(newChar,\
    \ newCharIndex + 6)\n            val newCharIndex8 = alphabet.indexOf(newChar,\
    \ newCharIndex + 7)\n            val newCharIndex9 = alphabet.indexOf(newChar,\
    \ newCharIndex + 8)\n            val newCharIndex10 = alphabet.indexOf(newChar,\
    \ newCharIndex + 9)\n            val newCharIndex11 = alphabet.indexOf(newChar,\
    \ newCharIndex + 10)\n            val newCharIndex12 = alphabet.indexOf(newChar,\
    \ newCharIndex + 11)\n            val newCharIndex13 = alphabet.indexOf(newChar,\
    \ newCharIndex + 12)\n            val newCharIndex14 = alphabet.indexOf(newChar,\
    \ newCharIndex + 13)\n            val newCharIndex15 = alphabet.indexOf(newChar,\
    \ newCharIndex + 14)\n            val newCharIndex16 = alphabet.indexOf(newChar,\
    \ newCharIndex + 15)\n            val newCharIndex17 = alphabet.indexOf(newChar,\
    \ newCharIndex + 16)\n            val newCharIndex18 = alphabet.indexOf(newChar,\
    \ newCharIndex + 17)\n            val newCharIndex19 = alphabet.indexOf(newChar,\
    \ newCharIndex + 18)\n            val newCharIndex20 = alphabet.indexOf(newChar,\
    \ newCharIndex + 19)\n            val newCharIndex21 = alphabet.indexOf(newChar,\
    \ newCharIndex + 20)\n            val newCharIndex22 = alphabet.indexOf(newChar,\
    \ newCharIndex\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe1vyck5k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe1vyck5k.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe1vyck5k.scala:22:38 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewChar\e[0m = currentChar.toUpper\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value toUpper is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1vyck5k.scala:54:1 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpe1vyck5k.scala:46:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659978776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.foldLeft(\"\")(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvwa73cit.scala:23)\n\tat Problem.main(tmpvwa73cit.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(vowels.indexOf(vowels.tail)\
    \ + 1)\n            })\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        newMessageArray.toList.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 6 (of class java.lang.Integer)\n\tat Problem$.$anonfun$1(tmp_9aldiqu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmp_9aldiqu.scala:22)\n\
    \tat Problem$.main(tmp_9aldiqu.scala:27)\n\tat Problem.main(tmp_9aldiqu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => {\n\
    \            val index = vowels.indexOf(letter)\n            if (index >= 0) {\n\
    \                val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex) + vowel\n            } else\
    \ {\n                letter\n            }\n        }).mkString(\"\")\n      \
    \  newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx39_kgds.scala:30)\n\tat Problem.main(tmpx39_kgds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\".toCharArray\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 1)\n        val newMessage2 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 2)\n        val newMessage3\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 3)\n        val newMessage4 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 4)\n        val newMessage5\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 5)\n        val newMessage6 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 6)\n        val newMessage7\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 7)\n        val newMessage8 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 8)\n        val newMessage9\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 9)\n        val newMessage10 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 10)\n        val newMessage11\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 11)\n        val newMessage12 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 12)\n        val newMessage13\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 13)\n        val newMessage14 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 14)\n        val newMessage15\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 15)\n        val newMessage16 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 16)\n        val newMessage17\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 17)\n        val newMessage18 = message.map(letter => letters.indexOf(letter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg70u128d.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg70u128d.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextVowel = vowels(index + 1)\n              \
    \  val nextVowelIndex = vowels.indexOf(nextVowel)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) vowels.length else nextVowelIndex\n            \
    \    val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n  \
    \              val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk01f56jq.scala:45:36 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk01f56jq.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk01f56jq.scala:22:20 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = \e[33mif\e\
    [0m (nextVowelIndex == -\e[31m1\e[0m) vowels.length \e[33melse\e[0m nextVowelIndex\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk01f56jq.scala:23:20 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = \e[33mif\e\
    [0m (nextVowelIndex == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m nextVowelIndex\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk01f56jq.scala:24:20 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                \e[33mval\e[0m \e[36mnextVowel\e[0m = vowels(nextVowelIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowel is already defined as \e[33mvalue"
  stdout: ''
  timestamp: 1659978777
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = mutable.StringBuilder()\n\
    \        val messageArray = message.split(\"\")\n        messageArray.foreach(letter\
    \ => {\n            val index = alphabet.indexOf(letter)\n            val nextLetter\
    \ = alphabet(index + 1)\n            val nextIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextLetter2 = alphabet(index + 2)\n            val nextIndex2\
    \ = alphabet.indexOf(nextLetter2)\n            val nextLetter3 = alphabet(index\
    \ + 3)\n            val nextIndex3 = alphabet.indexOf(nextLetter3)\n         \
    \   val nextLetter4 = alphabet(index + 4)\n            val nextIndex4 = alphabet.indexOf(nextLetter4)\n\
    \            val nextLetter5 = alphabet(index + 5)\n            val nextIndex5\
    \ = alphabet.indexOf(nextLetter5)\n            val nextLetter6 = alphabet(index\
    \ + 6)\n            val nextIndex6 = alphabet.indexOf(nextLetter6)\n         \
    \   val nextLetter7 = alphabet(index + 7)\n            val nextIndex7 = alphabet.indexOf(nextLetter7)\n\
    \            val nextLetter8 = alphabet(index + 8)\n            val nextIndex8\
    \ = alphabet.indexOf(nextLetter8)\n            val nextLetter9 = alphabet(index\
    \ + 9)\n            val nextIndex9 = alphabet.indexOf(nextLetter9)\n         \
    \   val nextLetter10 = alphabet(index + 10)\n            val nextIndex10 = alphabet.indexOf(nextLetter10)\n\
    \            val nextLetter11 = alphabet(index + 11)\n            val nextIndex11\
    \ = alphabet.indexOf(nextLetter11)\n            val nextLetter12 = alphabet(index\
    \ + 12)\n            val nextIndex12 = alphabet.indexOf(nextLetter12)\n      \
    \      val nextLetter13 = alphabet(index + 13)\n            val nextIndex13 =\
    \ alphabet.indexOf(nextLetter13)\n            val nextLetter14 = alphabet(index\
    \ + 14)\n            val nextIndex14 = alphabet.indexOf(nextLetter14)\n      \
    \      val nextLetter15 = alphabet(index + 15)\n            val nextIndex15 =\
    \ alphabet.indexOf(nextLetter15)\n            val nextLetter16 = alphabet(index\
    \ + 16)\n            val nextIndex16 = alphabet.indexOf(nextLetter16)\n      \
    \      val nextLetter17 = alphabet(index + 17)\n            val nextIndex17 =\
    \ alphabet.indexOf(nextLetter17)\n            val nextLetter18 = alphabet(index\
    \ + 18)\n            val nextIndex18 = alphabet.indexOf(nextLetter18)\n      \
    \      val nextLetter19 = alphabet(index + 19)\n            val nextIndex19 =\
    \ alphabet.indexOf(nextLetter19)\n            val nextLetter20 = alphabet(index\
    \ + 20)\n            val nextIndex\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi9a5vm5a.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi9a5vm5a.scala:62:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpi9a5vm5a.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9a5vm5a.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessage\e[0m = mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelMap = new mutable.HashMap[String,\
    \ String]()\n        vowelMap += (vowels -> \"a\")\n        vowelMap += (vowels.tail\
    \ ->\"e\")\n        vowelMap += (vowels.tail.tail ->\"i\")\n        vowelMap +=\
    \ (vowels.tail.tail.tail ->\"o\")\n        vowelMap += (vowels.tail.tail.tail.tail\
    \ ->\"u\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail ->\"A\")\n  \
    \      vowelMap += (vowels.tail.tail.tail.tail.tail.tail ->\"E\")\n        vowelMap\
    \ += (vowels.tail.tail.tail.tail.tail.tail.tail ->\"I\")\n        vowelMap +=\
    \ (vowels.tail.tail.tail.tail.tail.tail.tail.tail ->\"O\")\n        vowelMap +=\
    \ (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail ->\"U\")\n        vowelMap\
    \ += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail ->\"a\")\n    \
    \    vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail ->\"\
    e\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"i\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"o\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"u\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"A\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"E\")\n        vowelMap += (vowels.tail.tail.tail.tail\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40q0l46z.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40q0l46z.scala:17:27\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => \n \
    \           letter match {\n                case 'a' => alphabet(0)\n        \
    \        case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n  \
    \              case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case _ => letter\n\
    \            }\n        ).mkString(\"\")\n        val newMessageList = newMessage.split(\"\
    \")\n        val newAlphabet = alphabet.map(letter => \n            letter match\
    \ {\n                case 'a' => alphabet(0)\n                case 'b' => alphabet(1)\n\
    \                case 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n\
    \                case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n\
    \                case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n\
    \                case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case _ => letter\n            }\n        ).mkString(\"\")\n \
    \       val newAlphabetList = newAlphab\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m => alphabet(\e\
    [31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => alphabet(\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'f'\e[0m => alphabet(\e\
    [31m5\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp8y2vr_o5.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m'g'\e[0m => alphabet(\e\
    [31m6\e[0"
  stdout: ''
  timestamp: 1659978778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => x.toUpperCase)\n        val newMessageList3 = newMessageList2.map(x\
    \ => vowels.indexOf(x) + 1)\n        val newMessageList4 = newMessageList3.map(x\
    \ => vowels.charAt(x))\n        val newMessageList5 = newMessageList4.map(x =>\
    \ x.toUpperCase)\n        val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x)\
    \ + 1)\n        val newMessageList7 = newMessageList6.map(x => vowels.charAt(x))\n\
    \        val newMessageList8 = newMessageList7.map(x => x.toUpperCase)\n     \
    \   val newMessageList9 = newMessageList8.map(x => vowels.indexOf(x) + 1)\n  \
    \      val newMessageList10 = newMessageList9.map(x => vowels.charAt(x))\n   \
    \     newMessageList10.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4ou0nvo.scala:21:57 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList5\e[0m = newMessageList4.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmpg4ou0nvo.scala:21:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList5\e[0m = newMessageList4.map(\e\
    [36mx\e[0m => x.toUpperCase)\n\e[31m\e[31m   |\e[0m                          \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659978775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val newMessage\
    \ = message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy5mg1916.scala:18:64\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.map(\e[36mletter\e\
    [0m => vowels.indexOf(letter) + \e[31m1\e[0m).map(\e[36mletter\e[0m => alphabet(alphabet.indexOf(letter)\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[String]\n\e[31m   |\e[0m    \
    \    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.map(letter =>\
    \ vowels.map(vowel => vowel match {\n            case vowel => vowel\n       \
    \     case _ => alphabet(alphabet.indexOf(vowel) + 1)\n        }))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3giptgz.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.map(\e[36mletter\e\
    [0m => vowels.map(\e[36mvowel\e[0m => vowel \e[33mmatch\e[0m {\n\e[31m\e[31m \
    \  |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                      \
    \ Found:    Char => \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mChar\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m                       Required: Char => Char\n\e[31m19 |\e[0m\
    \            \e[33mcase\e[0m vowel => vowel\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m _ => alphabet(alphabet.indexOf(vowel) + \e[31m1\e[0m)\n\e[31m21 |\e[0m   \
    \     }))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => \n            letter match {\n                case 'a'\
    \ => alphabet(0)\n                case 'b' => alphabet(1)\n                case\
    \ 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n              \
    \  case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n        \
    \        case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n  \
    \              case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case _ => letter\n            }\n        ).map(letter => \n \
    \           vowels.map(vowel => \n                vowel match {\n            \
    \        case 'a' => alphabet(0)\n                    case 'e' => alphabet(1)\n\
    \                    case 'i' => alphabet(2)\n                    case 'o' =>\
    \ alphabet(3)\n                    case 'u' => alphabet(4)\n                 \
    \   case 'y' => alphabet(5)\n                    case 'a' => alphabet(0)\n   \
    \                 case 'e' => alphabet(1)\n                    case 'i' => alphabet(2)\n\
    \                    case 'o' => alphabet(3)\n                    case 'u' =>\
    \ alphabet(4)\n                    case 'y' => alphabet(5)\n                 \
    \   case 'a' => alphabet(0)\n                    case 'e' => alphabet(1)\n   \
    \                 case 'i' => alphabet(2)\n                    case 'o' => alphabet(3)\n\
    \                    case 'u' => alphabet(4)\n                    case 'y' =>\
    \ alphabet(5)\n                    case 'a' => alphabet(0)\n                 \
    \   case 'e' => alphabet(1)\n                    case 'i' => alphabet(2)\n   \
    \                 case 'o' => alphabet(3)\n                    case 'u' => alphabet(4)\n\
    \                    case 'y' => alphabet(5)\n                    case 'a' =>\
    \ alphabet(0)\n                    case 'e' => alphabet(1)\n                 \
    \   case 'i' => alphabet(2)\n                    case 'o' => alphabet(3)\n   \
    \                 case 'u' => alphabet(4)\n                    case 'y' => alphabet(5)\n\
    \                    case 'a' => alphabet(0)\n                    case 'e\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp58g_01pb.scala:81:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m                    \e[33mcase\e[0m \e[31m'e\e[0m\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ 'e is no longer supported,\n\e[31m   |\e[0muse a string literal \"e\" or an\
    \ application Symbol(\"e\") instead,\n\e[31m   |\e[0mor enclose in braces '{e}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp58g_01pb.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp58g_01pb.scala:83:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m83 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp58g_01pb.scala:92:0 ----------------------------\e\
    [0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58g_01pb.scala:91:1\
    \ ---------------------\e[0m\e[0m\n\e[31m91 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659978784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ) { (acc, c) =>\n            val index = alphabet.indexOf(c)\n            if (index\
    \ != -1) {\n                acc += alphabet(index - 2)\n            }\n      \
    \      acc += c\n        }\n        val vowelIndex = vowels.indexOf(messageList(0))\n\
    \        if (vowelIndex != -1) {\n            encodedMessage += vowels(vowelIndex\
    \ - 2)\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyp9ppdi.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                acc += alphabet(index - \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   value += is not a member of String - did you mean acc.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfyp9ppdi.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            acc += c\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfyp9ppdi.scala:27:27\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            encodedMessage\
    \ += vowels(vowelIndex - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of String - did you mean encodedMessage.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter)).mkString\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2s945ec3.scala:20)\n\tat Problem.main(tmp2s945ec3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val vowelsMap = Map(vowels -> \"A\", vowels.tail\
    \ ->\"B\")\n        val messageList = message.split(\"\")\n        val result\
    \ = messageList.foldLeft(\"\"){ (acc, elem) =>\n            val index = alphabet.indexOf(elem)\n\
    \            val nextVowel = alphabet(index+1)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowelIndex = if (nextVowelIndex\
    \ == -1) alphabet.size else nextVowelIndex\n            val nextVowelIndex = if\
    \ (nextVowelIndex == -1) 0 else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVow\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnjuygy7w.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnjuygy7w.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnjuygy7w.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = \e[33mif\e\
    [0m (nextVowelIndex == -\e[31m1\e[0m) alphabet.size \e[33melse\e[0m nextVowelIndex\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnjuygy7w.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = \e[33mif\e\
    [0m (nextVowelIndex == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m nextVowelIndex\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnjuygy7w.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mnextVowel\e[0m = alphabet(nextVowelIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextVowel is already defined as \e[33mvalue\e[0m \e[35mnextVowel\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnjuygy7w.scala:26:16 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageList = message.split(\"\")\n\
    \        val newMessageList = messageList.map(letter => \n            letter match\
    \ {\n                case vowel => vowel\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n            }\n        )\n        val newMessage = newMessageList.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringList\
    \ = newMessageString.split(\" \")\n        val newMessageStringList2 = newMessageStringList.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString2 = newMessageStringList2.toString\n        val newMessageString3\
    \ = newMessageString2.split(\" \")\n        val newMessageString4 = newMessageString3.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString5 = newMessageString4.toString\n        val newMessageString6\
    \ = newMessageString5.split(\" \")\n        val newMessageString7 = newMessageString6.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString8 = newMessageString7.toString\n        val newMessageString9\
    \ = newMessageString8.split(\" \")\n        val newMessageString10 = newMessageString9.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString11 = newMessageString10.toString\n        val newMessageString12\
    \ = newMessageString11.split(\" \")\n        val newMessageString13 = newMessageString12.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString14 = newMessageString13.toString\n        val newMessageString15\
    \ = newMessageString14.split(\" \")\n        val newMessageString16 = newMessageString15.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString17 = newMessageString16.map(word => \n            word match\
    \ {\n                case letter => alphabet(alphabet.indexOf(letter) + 2)\n \
    \               case _ => word\n            }\n        )\n        val newMessageString18\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8mwk11sx.scala:80:4 ----------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8mwk11sx.scala:80:5 ---------------------\e[0m\e[0m\n\e[31m80 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ elem) =>\n            val index = vowels.indexOf(elem)\n            if (index\
    \ != -1) {\n                val newElem = vowels(index - 1) + vowels(index)\n\
    \                acc += newElem\n            }\n            else {\n         \
    \       acc += elem\n            }\n        }\n        newMessage\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3i47t7rk.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                acc += newElem\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a\
    \ member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3i47t7rk.scala:24:20 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m                acc += elem\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value += is not a member of String - did you\
    \ mean acc.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndVowelsTwoAhead\
    \ = (messageWithVowels +: messageWithVowels.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead = (messageWithVowelsAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n  \
    \      val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndV\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpam7zgptj.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpam7zgptj.scala:16:72 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m = message.replaceAll(vowels,\
    \ vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                     Found:    Char\n\e[31m \
    \  |\e[0m                                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpam7zgptj.scala:20:190\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpam7zgptj.scala:21:135 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowels"
  stdout: ''
  timestamp: 1659978787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n            if\
    \ (index != -1) {\n                val vowel = vowels(index)\n               \
    \ val vowelIndex = vowels.indexOf(vowel)\n                val vowel2 = vowels(vowelIndex\
    \ + 1)\n                acc + (if (vowelIndex == 0) elem.toUpperCase else elem.toLowerCase\
    \ + vowel2)\n            } else {\n                acc + elem\n            }\n\
    \        }\n        encodedMessage\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1k5k9xv.scala:31)\n\tat Problem.main(tmpv1k5k9xv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (result, current) => {\n            val currentLetter = current.toUpperCase()\n\
    \            val currentVowel = vowels.find(letter => letter === currentLetter)\n\
    \            val currentVowelIndex = vowels.indexOf(currentVowel)\n          \
    \  val currentVowelIndex = currentVowelIndex + 2\n            val currentVowelLetter\
    \ = alphabet(currentVowelIndex)\n            val currentLetterIndex = alphabet.indexOf(currentLetter)\n\
    \            val currentLetterIndex = currentLetterIndex + 2\n            val\
    \ currentLetterLetter = alphabet(currentLetterIndex)\n            val currentLetterVowel\
    \ = alphabet(currentLetterIndex + 2)\n            val currentVowelLetterVowel\
    \ = alphabet(currentVowelIndex + 2)\n            val currentVowelLetterLetter\
    \ = alphabet(currentVowelIndex + 3)\n            val currentLetterVowelLetter\
    \ = alphabet(currentLetterIndex + 3)\n            val currentVowelLetterVowelLetter\
    \ = alphabet(currentVowelIndex + 3)\n            val currentLetterVowelVowelLetter\
    \ = alphabet(currentLetterIndex + 4)\n            val currentVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 4)\n            val currentVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 5)\n            val currentVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 6)\n            val currentVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 7)\n            val currentVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 8)\n            val currentVowelVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 9)\n            val currentVowelVowelVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 10)\n            val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0md99dpm.scala:40:15 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0md99dpm.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0md99dpm.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcurrentVowelIndex\e[0m = currentVowelIndex + \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvalue\e[0m \e[35mcurrentVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0md99dpm.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mcurrentLetterIndex\e[0m = currentLetterIndex\
    \ + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLetterIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mcurrentLetterIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0md99dpm.scala:35:16 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36mcurrentVowelVowelVowelLetter\e\
    [0m = alphabet(currentVowelIndex + \e[31m6\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcurrentVowelVowelVowelLetter is already defined as \e[33mvalue\e\
    [0m \e[35mcurrentVowelVowelVowelLetter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] "
  stdout: ''
  timestamp: 1659978789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n \
    \       val newMessage2 = newMessage.map(letter => alphabet.indexOf(letter) +\
    \ 2)\n        val newMessage3 = newMessage2.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage4 = newMessage3.map(letter => alphabet.indexOf(letter))\n\
    \        val newMessage5 = newMessage4.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage6 = newMessage5.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage7 = newMessage6.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage8 = newMessage7.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage9 = newMessage8.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage10 = newMessage9.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage11 = newMessage10.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage12 = newMessage11.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage13 = newMessage12.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage14 = newMessage13.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage15 = newMessage14.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage16 = newMessage15.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage17 = newMessage16.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage18 = newMessage17.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage19 = newMessage18.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage20 = newMessage19.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage21 = newMessage20.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage22 = newMessage21.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage23 = newMessage22.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage24 = newMessage23.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage25 = new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr0a2qjgk.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr0a2qjgk.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter\n            case 1 => letter\n            case 2 => letter\n\
    \            case 3 => letter\n            case 4 => letter\n            case\
    \ 5 => letter\n            case 6 => letter\n            case 7 => letter\n  \
    \          case 8 => letter\n            case 9 => letter\n            case 10\
    \ => letter\n            case 11 => letter\n            case 12 => letter\n  \
    \          case 13 => letter\n            case 14 => letter\n            case\
    \ 15 => letter\n            case 16 => letter\n            case 17 => letter\n\
    \            case 18 => letter\n            case 19 => letter\n            case\
    \ 20 => letter\n            case 21 => letter\n            case 22 => letter\n\
    \            case 23 => letter\n            case 24 => letter\n            case\
    \ 25 => letter\n            case 26 => letter\n            case 27 => letter\n\
    \            case 28 => letter\n            case 29 => letter\n            case\
    \ 30 => letter\n            case 31 => letter\n            case 32 => letter\n\
    \            case 33 => letter\n            case 34 => letter\n            case\
    \ 35 => letter\n            case 36 => letter\n            case 37 => letter\n\
    \            case 38 => letter\n            case 39 => letter\n            case\
    \ 40 => letter\n            case 41 => letter\n            case 42 => letter\n\
    \            case 43 => letter\n            case 44 => letter\n            case\
    \ 45 => letter\n            case 46 => letter\n            case 47 => letter\n\
    \            case 48 => letter\n            case 49 => letter\n            case\
    \ 50 => letter\n            case 51 => letter\n            case 52 => letter\n\
    \            case 53 => letter\n            case 54 => letter\n            case\
    \ 55 => letter\n            case 56 => letter\n            case 57 => letter\n\
    \            case 58 => letter\n            case 59 => letter\n            case\
    \ 60 => letter\n            case 61 => letter\n            case 62 => letter\n\
    \            case 63 => letter\n            case 64 => letter\n            case\
    \ 65 => letter\n            case 66 => letter\n            case 67 => letter\n\
    \            case 68 => letter\n            case 69 => letter\n            case\
    \ 70 => letter\n            case 71 => letter\n            case 72 => letter\n\
    \            case 73 => letter\n            case 74 => letter\n            case\
    \ 75 => letter\n            case 76 => letter\n            case 77 => letter\n\
    \            case 78 => letter\n            case 79 => letter\n            case\
    \ 80 => letter\n            case 81 => letter\n            case 82 => letter\n\
    \            case 83 => letter\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi17n7zti.scala:105:4 ---------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m    |\e[0m    ^^^\e[0m\n\
    \e[31m    |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpi17n7zti.scala:114:0 ---------------------------\e[0m\e[0m\n\e\
    [31m114 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but\
    \ eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi17n7zti.scala:113:1\
    \ --------------------\e[0m\e[0m\n\e[31m113 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: String\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                if (vowelIndex\
    \ < vowels.length) vowels(vowelIndex) else letter\n            } else {\n    \
    \            letter\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        newMessage.foldLeft(\"\")( (acc, letter) => acc + letter.toUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjcj19zh0.scala:27:63 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        newMessage.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e\
    [0m, \e[36mletter\e[0m) => acc + letter.toUpperCase)\n\e[31m\e[31m   |\e[0m  \
    \                                                      ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value toUpperCase is not a member of\
    \ Matchable\n1 error found\n"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = mutable.StringBuilder()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl6ieqfpk.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl6ieqfpk.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageList\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl6ieqfpk.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl6ieqfpk.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl6ieqfpk.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ov"
  stdout: ''
  timestamp: 1659978787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel, vowelIndex + 1)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage = String.join(\"\", newMessageArray)\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp9xcpb4xw.scala:27:32 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => \n \
    \           vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i+2)\n            }\n        ).mkString(\"\"\
    )\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case i => vowels(i+2)\n  \
    \          }\n        ).mkString(\"\")\n        newMessageList2.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 10\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$2(tmp5c7wl8c4.scala:27)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmp5c7wl8c4.scala:29)\n\
    \tat Problem$.main(tmp5c7wl8c4.scala:33)\n\tat Problem.main(tmp5c7wl8c4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels(vowelIndex) = letter\n        \
    \        vowel\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString\n        val newMessageStringArray = newMessageString.split(\"\
    \")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = new\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjcw67xft.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjcw67xft.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e[0m = newMessageStringArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcw67xft.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcw67xft.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjcw67xft.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659978789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\"\")\n        val result = new StringBuilder\n        var i\
    \ = 0\n        while (i < messageList.length) {\n            val letter = messageList(i)\n\
    \            val index = alphabet.indexOf(letter)\n            if (index != -1)\
    \ {\n                val nextLetter = alphabet(index + 1)\n                val\
    \ nextIndex = alphabet.indexOf(nextLetter)\n                if (nextIndex != -1)\
    \ {\n                    val nextLetter2 = alphabet(nextIndex + 1)\n         \
    \           val nextIndex2 = alphabet.indexOf(nextLetter2)\n                 \
    \   if (nextIndex2 != -1) {\n                        val nextLetter3 = alphabet(nextIndex2\
    \ + 1)\n                        val nextIndex3 = alphabet.indexOf(nextLetter3)\n\
    \                        if (nextIndex3 != -1) {\n                           \
    \ val nextLetter4 = alphabet(nextIndex3 + 1)\n                            val\
    \ nextIndex4 = alphabet.indexOf(nextLetter4)\n                            if (nextIndex4\
    \ != -1) {\n                                val nextLetter5 = alphabet(nextIndex4\
    \ + 1)\n                                val nextIndex5 = alphabet.indexOf(nextLetter5)\n\
    \                                if (nextIndex5 != -1) {\n                   \
    \                 val nextLetter6 = alphabet(nextIndex5 + 1)\n               \
    \                     val nextIndex6 = alphabet.indexOf(nextLetter6)\n       \
    \                             if (nextIndex6 != -1) {\n                      \
    \                  val nextLetter7 = alphabet(nextIndex6 + 1)\n              \
    \                          val nextIndex7 = alphabet.indexOf(nextLetter7)\n  \
    \                                      if (nextIndex7 != -1) {\n             \
    \                               val nextLetter8 = alphabet(nextIndex7 + 1)\n \
    \                                           val nextIndex8 = alphabet.indexOf(nextLetter8)\n\
    \                                            if (nextIndex8 != -1) {\n       \
    \                                         val nextLetter9 = alphabet(nextIndex8\
    \ + 1)\n                                                val nextIndex9 = alphabet.indexOf(nextLetter9)\n\
    \                                                if (nextIndex9 != -1) {\n   \
    \                                                 val nextLetter10 = alphabet(nextIndex9\
    \ + 1)\n                                                    val nextIndex10 =\
    \ alphabet.indexOf(nextLetter10)\n                                           \
    \         if (nextIndex10 != -1) {\n                                         \
    \               val nextLetter11 = alphabet(nextIndex10 + 1)\n               \
    \                                         val nextIndex11 = alphabet.indexOf(nextLetter11)\n\
    \                                                        if (nextIndex11 != -1)\
    \ {\n                                                            val nextLetter12\
    \ = alphabet(nextIndex11 + 1)\n                                              \
    \              val nextIndex12 = alphabet.indexOf(nextLetter12)\n            \
    \                                                if (nextIndex12 != -1) {\n  \
    \                                                              val nextLetter13\
    \ = alphabet(nextIndex12 + 1)\n                                              \
    \                  val nextIndex13 = alphabet.indexOf(nextLetter13)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6a6qo8fx.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6a6qo8fx.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m (i\
    \ < messageList.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m21 |\e\
    [0m            \e[33mval\e[0m \e[36mletter\e[0m = messageList(i)\n\e[31m22 |\e\
    [0m            \e[33mval\e[0m \e[36mindex\e[0m = alphabet.indexOf(letter)\n\e\
    [31m23 |\e[0m            \e[33mif\e[0m (index != -\e[31m1\e[0m) {\n\e[31m24 |\e\
    [0m                \e[33mval\e[0m \e[36mnextLetter\e[0m = alphabet(index + \e\
    [31m1\e[0m)\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mnextIndex\e[0m\
    \ = alphabet.indexOf(nextLetter)\n\e[31m26 |\e[0m                \e[33mif\e[0m\
    \ (nextIndex != -\e[31m1\e[0m) {\n\e[31m27 |\e[0m                    \e[33mval\e\
    [0m \e[36mnextLetter2\e[0m = alphabet(nextIndex + \e[31m1\e[0m)\n\e[31m28 |\e\
    [0m                    \e[33mval\e[0m \e[36mnextIndex2\e[0m = alphabet.indexOf(nextLetter2)\n\
    \e[31m29 |\e[0m                    \e[33mif\e[0m (nextIndex2 != -\e[31m1\e[0m)\
    \ {\n\e[31m30 |\e[0m                        \e[33mval\e[0m \e[36mnextLetter3\e\
    [0m = alphabet(nextIndex2 + \e[31m1\e[0m)\n\e[31m31 |\e[0m                   \
    \     \e[33mval\e[0m \e[36mnextIndex3\e[0m = alphabet.indexOf(nextLetter3)\n\e\
    [31m32 |\e[0m                        \e[33mif\e[0m (nextIndex3 != -\e[31m1\e[0m)\
    \ {\n\e[31m33 |\e[0m                            \e[33mval\e[0m \e[36mnextLetter4\e\
    [0m = alphabet(nextIndex3 + \e[31m1\e[0m)\n\e[31m34 |\e[0m                   \
    \         \e[33mval\e[0m \e[36mnextIndex4\e[0m = alphabet.indexOf(nextLetter4)\n\
    \e[31m35 |\e[0m                            \e[33mif\e[0m (nextIndex4 != -\e[31m1\e\
    [0m) {\n\e[31m36 |\e[0m                                \e[33mval\e[0m \e[36mnextLetter5\e\
    [0m = alphabet(nextIndex4 + \e[31m1\e[0m)\n\e[31m37 |\e[0m                   \
    \             \e[33mval\e[0m \e[36mnextIndex5\e[0m = alphabet.indexOf(nextLetter5)\n\
    \e[31m38 |\e[0m                                \e"
  stdout: ''
  timestamp: 1659978789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 5\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.$anonfun$1(tmpmwhf97ky.scala:17)\n\tat Problem$.$anonfun$adapted$1(tmpmwhf97ky.scala:17)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encode(tmpmwhf97ky.scala:17)\n\
    \tat Problem$.main(tmpmwhf97ky.scala:21)\n\tat Problem.main(tmpmwhf97ky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \") { (result, current) => {\n            val currentChar = current.charAt(0)\n\
    \            val currentVowel = vowels.indexOf(currentChar)\n            val currentVowel2\
    \ = vowels.indexOf(current.charAt(1))\n            val currentVowel3 = vowels.indexOf(current.charAt(2))\n\
    \            val currentVowel4 = vowels.indexOf(current.charAt(3))\n         \
    \   val currentVowel5 = vowels.indexOf(current.charAt(4))\n            val currentVowel6\
    \ = vowels.indexOf(current.charAt(5))\n            val currentVowel7 = vowels.indexOf(current.charAt(6))\n\
    \            val currentVowel8 = vowels.indexOf(current.charAt(7))\n         \
    \   val currentVowel9 = vowels.indexOf(current.charAt(8))\n            val currentVowel10\
    \ = vowels.indexOf(current.charAt(9))\n            val currentVowel11 = vowels.indexOf(current.charAt(10))\n\
    \            val currentVowel12 = vowels.indexOf(current.charAt(11))\n       \
    \     val currentVowel13 = vowels.indexOf(current.charAt(12))\n            val\
    \ currentVowel14 = vowels.indexOf(current.charAt(13))\n            val currentVowel15\
    \ = vowels.indexOf(current.charAt(14))\n            val currentVowel16 = vowels.indexOf(current.charAt(15))\n\
    \            val currentVowel17 = vowels.indexOf(current.charAt(16))\n       \
    \     val currentVowel18 = vowels.indexOf(current.charAt(17))\n            val\
    \ currentVowel19 = vowels.indexOf(current.charAt(18))\n            val currentVowel20\
    \ = vowels.indexOf(current.charAt(19))\n            val currentVowel21 = vowels.indexOf(current.charAt(20))\n\
    \            val currentVowel22 = vowels.indexOf(current.charAt(21))\n       \
    \     val currentVowel23 = vowels.indexOf(current.charAt(22))\n            val\
    \ currentVowel24 = vowels.indexOf(current.charAt(23))\n            val currentVowel25\
    \ = vowels.indexOf(current.charAt(24))\n            val currentVowel26 = vowels.indexOf(current.charAt(25))\n\
    \            val currentVowel27 = vowels.indexOf(current.charAt(26))\n       \
    \     val currentVowel28 = vowels.indexOf(current.charAt(27))\n            val\
    \ currentVowel29 = vowels.indexOf(current.charAt(28))\n            val currentVowel30\
    \ = vowels.indexOf(current.charAt(29))\n            val currentVowel31 = vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmple3tr3qc.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmple3tr3qc.scala:49:33\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcurrentVowel31\e[0m = vowel\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: vowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmple3tr3qc.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmple3tr3qc.scala:59:1\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map {\n   \
    \         letter =>\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                if (vowelIndex == -1) {\n                    letter\n       \
    \         } else {\n                    val vowelIndex2 = vowels.indexOf(letter,\
    \ vowelIndex + 1)\n                    if (vowelIndex2 == -1) {\n            \
    \            letter\n                    } else {\n                        vowels(vowelIndex2)\
    \ + letter\n                    }\n                }\n        }\n        encodedMessage.toString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_6rtm_vx.scala:34)\n\tat Problem.main(tmp_6rtm_vx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\") { (result, current)\
    \ =>\n            val currentLetter = current.toLowerCase\n            val currentLetterIndex\
    \ = alphabet.indexOf(currentLetter)\n            val currentVowelIndex = vowels.indexOf(currentLetter)\n\
    \            val currentVowelIndex2 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 1))\n            val currentVowelIndex3 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 2))\n            val currentVowelIndex4 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 3))\n            val currentVowelIndex5 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 4))\n            val currentVowelIndex6 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 5))\n            val currentVowelIndex7 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 6))\n            val currentVowelIndex8 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 7))\n            val currentVowelIndex9 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 8))\n            val currentVowelIndex10 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 9))\n            val currentVowelIndex11 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 10))\n            val currentVowelIndex12 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 11))\n            val currentVowelIndex13 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 12))\n            val currentVowelIndex14 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 13))\n            val currentVowelIndex15 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 14))\n            val currentVowelIndex16 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 15))\n            val currentVowelIndex17 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 16\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo134o_wm.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo134o_wm.scala:48:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpo134o_wm.scala:37:96 --------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m            \e[33mval\e[0m \e[36mcurrentVowelIndex17\e[0m = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + \e[31m16\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                        Found:    Unit\n\e\
    [31m   |\e[0m                                                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo134o_wm.scala:47:1\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpo134o_wm.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659978791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(1)\n\
    \                vowels(vowelIndex) = newLetter\n                newLetter\n \
    \           } else {\n                letter\n            }\n        })\n    \
    \    val newMessage = newMessageArray.toList\n        newMessage.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpifl2kroo.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpifl2kroo.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val encodedMessageArray = messageArray.map(letter => {\n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex != -1) {\n \
    \               val vowel2Index = vowels.indexOf(messageArray(vowelIndex + 1))\n\
    \                if (vowel2Index != -1) {\n                    val vowel2Letter\
    \ = vowels.charAt(vowel2Index)\n                    val vowel2LetterIndex = vowels.indexOf(vowel2Letter)\n\
    \                    if (vowel2LetterIndex != -1) {\n                        val\
    \ vowel2Letter2Index = vowels.indexOf(messageArray(vowel2LetterIndex + 1))\n \
    \                       if (vowel2Letter2Index != -1) {\n                    \
    \        val vowel2Letter2Letter = vowels.charAt(vowel2Letter2Index)\n       \
    \                     val vowel2Letter2LetterIndex = vowels.indexOf(vowel2Letter2Letter)\n\
    \                            if (vowel2Letter2LetterIndex != -1) {\n         \
    \                       val vowel2Letter2Letter2Index = vowels.indexOf(messageArray(vowel2Letter2LetterIndex\
    \ + 1))\n                                if (vowel2Letter2Letter2Index != -1)\
    \ {\n                                    val vowel2Letter2Letter2Letter = vowels.charAt(vowel2Letter2Letter2Index)\n\
    \                                    val vowel2Letter2Letter2LetterIndex = vowels.indexOf(vowel2Letter2Letter2Letter)\n\
    \                                    if (vowel2Letter2Letter2LetterIndex != -1)\
    \ {\n                                        val vowel2Letter2Letter2Letter2Index\
    \ = vowels.indexOf(messageArray(vowel2Letter2Letter2LetterIndex + 1))\n      \
    \                                  if (vowel2Letter2Letter2Letter2Index != -1)\
    \ {\n                                            val vowel2Letter2Letter2Letter2Letter\
    \ = vowels.charAt(vowel2Letter2Letter2Letter2Index)\n                        \
    \                    val vowel2Letter2Letter2Letter2LetterIndex = vowels.indexOf(vowel2Letter2Letter2Letter2Letter)\n\
    \                                            if (vowel2Letter2Letter2Letter2LetterIndex\
    \ != -1) {\n                                                val vowel2Letter2Letter2Letter2Letter2Index\
    \ = vowels.indexOf(messageArray(vowel2Letter2Letter2Letter2Index + 1))\n     \
    \                                           if (vowel2Letter2Letter2Letter2Letter2Index\
    \ != -1) {\n                                                    val vowel2Letter2Letter2Letter2Letter2Letter\
    \ = vowels.charAt(vowel2Letter2Letter2Letter2Letter2Index)\n                 \
    \                                   val vowel2Letter2Letter2Letter2Letter2LetterIndex\
    \ = vowels.indexOf(vowel2Letter2Letter2Letter2Letter2Letter)\n               \
    \                                     if (vowel2Letter2Letter2Letter2Letter2LetterIndex\
    \ != -1) {\n                                                        val vowel2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz4k943q8.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz4k943q8.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpz4k943q8.scala:56:1 ---------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpz4k943q8.scala:48:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m48 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"\
    ,\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\"\
    ,\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n        val vowels = List(\"a\",\"\
    e\",\"i\",\"o\",\"u\")\n        val newMessage = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val newVowels = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 2))\n        newMessage.zip(newVowels).map(x => x._1 + x._2).mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzykx1f1q.scala:22)\n\tat Problem.main(tmpzykx1f1q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map { letter =>\n\
    \            val index = vowels.indexOf(letter)\n            if (index != -1)\
    \ {\n                val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex) + vowel\n            } else\
    \ {\n                letter\n            }\n        }\n        val newMessageString\
    \ = newMessage.toList.reverse.mkString(\"\")\n        newMessageString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvt36lld.scala:31)\n\tat Problem.main(tmpzvt36lld.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) =>\n   \
    \         val index = alphabet.indexOf(elem)\n            if (index != -1) {\n\
    \                val newIndex = index + 2\n                if (newIndex < alphabet.length)\
    \ {\n                    acc += alphabet(newIndex)\n                }\n      \
    \      }\n            acc += elem\n        }\n        val vowelIndex = alphabet.indexOf(\"\
    a\")\n        val newMessageList = newMessage.split(\"\")\n        newMessageList.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n          \
    \  if (index != -1) {\n                val newIndex = index + vowelIndex\n   \
    \             if (newIndex < vowels.length) {\n                    acc += vowels(newIndex)\n\
    \                }\n            }\n            acc += elem\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3s6c30i1.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    acc += alphabet(newIndex)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3s6c30i1.scala:26:16 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m            acc += elem\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ acc.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3s6c30i1.scala:35:24\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m                    acc +=\
    \ vowels(newIndex)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               value += is not a member of String - did you mean acc.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3s6c30i1.scala:38:16 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            acc += elem\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean acc.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelMap = new mutable.HashMap[String,\
    \ String]()\n        val letterMap = new mutable.HashMap[String, String]()\n \
    \       val result = new mutable.StringBuilder\n        for (letter <- message)\
    \ {\n            val vowelIndex = letters.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                vowelMap(vowel)\
    \ = letter\n            }\n            val letterIndex = letters.indexOf(letter)\n\
    \            if (letterIndex != -1) {\n                val letter = letters(letterIndex)\n\
    \                letterMap(letter) = letter\n            }\n        }\n      \
    \  for (vowel <- vowelMap) {\n            val letter = vowelMap(vowel)\n     \
    \       result.append(vowel)\n            result.append(letter)\n        }\n \
    \       for (letter <- letterMap) {\n            val vowel = letterMap(letter)\n\
    \            result.append(vowel)\n            result.append(vowel)\n        }\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6efbgbwh.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6efbgbwh.scala:18:28 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mletterMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6efbgbwh.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978794
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val newMessage = message.map(letter => alphabet.indexOf(letter)\
    \ + alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter)) + 1))\n        newMessage.toList.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.$anonfun$1(tmpfca6833e.scala:17)\n\tat Problem$.$anonfun$adapted$1(tmpfca6833e.scala:17)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encode(tmpfca6833e.scala:17)\n\
    \tat Problem$.main(tmpfca6833e.scala:21)\n\tat Problem.main(tmpfca6833e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map { letter =>\n            val index\
    \ = letters.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (vowelIndex != -1) letters.charAt(vowelIndex + 2)\n          \
    \  else letters.charAt(index + 2)\n        }.mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjgl1zx78.scala:27)\n\tat Problem.main(tmpjgl1zx78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n                val newIndex = messageArray.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    messageArray(newIndex)\
    \ = letter\n                }\n                else {\n                    messageArray(index)\n\
    \                }\n            }\n            else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexuzyrt3.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m).toUpperCase + vowel.substring(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\")(\n            (x: String, y: Char) => x\
    \ + y + x.charAt(x.indexOf(y) + 1))\n        val messageWithVowelsAndVowelsTwoAhead\
    \ = (messageWithVowels.toUpperCase.foldLeft(\"\")(\n            (x: String, y:\
    \ Char) => x + y + x.charAt(x.indexOf(y) + 2)))\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead.toUpperCase.foldLeft(\"\")(\n        \
    \    (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 3)))\n        val\
    \ messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 4)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 5)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 6)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoA\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj527c8ga.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj527c8ga.scala:24:101\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\e\
    [31m\"\"\e[0m)(\n\e[31m\e[31m   |\e[0m                                       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj527c8ga.scala:26:118 -----------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\e\
    [31m\"\"\e[0m)(\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                            \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj527c8ga.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   "
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    )( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n        \
    \    val vowelIndex = vowels.indexOf(elem)\n            val nextIndex = index\
    \ - vowelIndex\n            if (nextIndex >= 0) {\n                acc += alphabet(nextIndex)\n\
    \            } else {\n                acc += elem\n            }\n        })\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ydyqn5y.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                acc += alphabet(nextIndex)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2ydyqn5y.scala:25:20 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                acc += elem\n\e[31m\e[31m   |\e[0m            \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member of String\
    \ - did you mean acc.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = new Array[Char](messageArray.length)\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            val nextChar = messageArray(i + 1)\n\
    \            val currentCharIndex = vowels.indexOf(currentChar)\n            val\
    \ nextCharIndex = vowels.indexOf(nextChar)\n            if (currentCharIndex !=\
    \ -1 && nextCharIndex != -1) {\n                val currentCharVowel = vowels(currentCharIndex)\n\
    \                val nextCharVowel = vowels(nextCharIndex)\n                if\
    \ (currentCharVowel != nextCharVowel) {\n                    newMessage(i) = vowels(nextCharIndex)\n\
    \                } else {\n                    newMessage(i) = currentChar\n \
    \               }\n                i += 2\n            } else {\n            \
    \    newMessage(i) = currentChar\n                i += 1\n            }\n    \
    \    }\n        new String(newMessage)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.encode(tmp9phm08ey.scala:21)\n\tat Problem$.main(tmp9phm08ey.scala:41)\n\
    \tat Problem.main(tmp9phm08ey.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\" \").toList\n        val encodedMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n      \
    \      if (index != -1) {\n                val nextIndex = index + 2\n       \
    \         if (nextIndex < alphabet.length) {\n                    acc += alphabet(nextIndex)\n\
    \                }\n            }\n            acc += elem\n        })\n     \
    \   encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqpo4h9d0.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    acc += alphabet(nextIndex)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpqpo4h9d0.scala:26:16 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m            acc += elem\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ acc.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowels.charAt(vowelIndex)\n\
    \                letter.replace(vowel, newLetter)\n            } else {\n    \
    \            letter\n            }\n        })\n        newMessageArray.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbybisbg3.scala:31)\n\tat Problem.main(tmpbybisbg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ {\n            val index = vowels.indexOf(letter)\n            if (index >=\
    \ 0) letter else vowels(index - 2)\n        })\n        val newMessage = newMessageList.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringList\
    \ = newMessageString.split(\"\")\n        val newMessageStringList2 = newMessageStringList.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString2\
    \ = newMessageStringList2.toList\n        val newMessageString3 = newMessageString2.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString4\
    \ = newMessageString3.toList\n        val newMessageString5 = newMessageString4.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString6\
    \ = newMessageString5.toList\n        val newMessageString7 = newMessageString6.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString8\
    \ = newMessageString7.toList\n        val newMessageString9 = newMessageString8.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString10\
    \ = newMessageString9.toList\n        val newMessageString11 = newMessageString10.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString12\
    \ = newMessageString11.toList\n        val newMessageString13 = newMessageString12.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString14\
    \ = newMessageString13.toList\n        val newMessageString15 = newMessageString14.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString16\
    \ = newMessageString15.toList\n        val newMessageString17 = newMessageString16.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjylrrorn.scala:66:24 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m            \e[33mif\e[0m (index >= \n\e[31m\e[31m  \
    \ |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                      \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpjylrrorn.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpjylrrorn.scala:77:0 ----------------------------\e[0m\e[0m\n\e[31m77\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjylrrorn.scala:76:1 ---------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndLetters\
    \ = messageWithVowels.replaceAll(\"[aeiou]\", \"z\")\n        val messageWithVowelsAndLettersAndLetters\
    \ = messageWithVowelsAndLetters.replaceAll(\"[aeiouAEIOU]\", \"z\")\n        val\
    \ messageWithVowelsAndLettersAndLettersAndLetters = messageWithVowelsAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLetters.replaceAll(\"[aeiouAEIOUAEIOUAEIOU]\"\
    , \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLetters.replaceAll(\"[aeiouAEIOUAEIOUAEIOUAEIOU]\"\
    , \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpau_36tv9.scala:25:221 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\e\
    [0m = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                                 unclosed string literal\n\e\
    [31m\e[31m-- Error: /tmp/tmpau_36tv9.scala:27:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpau_36tv9.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\e\
    [0m = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\e\
    [31m\"[aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU]\"\e[0m, \e[31m\"z\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overload"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.toLowerCase.foldLeft(\"\"){\n       \
    \     (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else c)\n     \
    \   }\n        val messageWithVowelsAndTwoLettersBeforeVowel = messageWithVowels.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowel.foldLeft(\"\"){\n            (acc,\
    \ c) => acc + (if (vowels.contains(c)) c.toUpperCase else c)\n        }\n    \
    \    val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowel.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLetters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv15vuvz2.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv15vuvz2.scala:17:51 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \            (\e[36macc\e[0m, \e[36mc\e[0m) => acc + (\e[33mif\e[0m (vowels.contains(c))\
    \ c.toUpperCase \e[33melse\e[0m c)\n\e[31m\e[31m   |\e[0m                    \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                             Found:    (c : Char)\n\e[31m   |\e[0m          \
    \                                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpv15vuvz2.scala:17:57 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            (\e[36macc\e[0m, \e[36mc\e[0m) => acc + (\e\
    [33mif\e[0m (vowels.contains(c)) c.toUpperCase \e[33melse\e[0m c)\n\e[31m\e[31m\
    \   |\e[0m                                                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv15vuvz2.scala:20:51\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            (\e[36macc\e[0m,\
    \ \e[36mc\e[0m) => acc + (\e[33mif\e[0m (vowels.contains(c)) c.toUpperCase \e\
    [33melse\e[0m c)\n\e[31m\e[31m   |\e[0m                                      \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \           Found:    (c : Char)\n\e[31m   |\e[0m                            \
    \                       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpv15vuvz2.scala:20:57 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            (\e[36macc\e[0m, \e[36mc\e[0m) => acc + (\e[33mif\e\
    [0m (vowels.contains(c)) c.toUpperCase \e[33melse\e[0m c)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1659978802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet(i+1)\n        }).mkString\n        newMessage\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp57q9fq4d.scala:24)\n\tat Problem.main(tmp57q9fq4d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index >=\
    \ 0) {\n                val nextVowel = vowels(index + 1)\n                letter\
    \ match {\n                    case \"a\" => nextVowel\n                    case\
    \ \"e\" => nextVowel\n                    case \"i\" => nextVowel\n          \
    \          case \"o\" => nextVowel\n                    case \"u\" => nextVowel\n\
    \                    case \"A\" => nextVowel\n                    case \"E\" =>\
    \ nextVowel\n                    case \"I\" => nextVowel\n                   \
    \ case \"O\" => nextVowel\n                    case \"U\" => nextVowel\n     \
    \               case _ => letter\n                }\n            } else {\n  \
    \              letter\n            }\n        }.mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7io8o3rl.scala:41)\n\tat Problem.main(tmp7io8o3rl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap : Map[Char, Char] = Map(vowels\
    \ -> letters.charAt(2))\n        val lettersMap : Map[Char, Char] = Map(letters\
    \ -> vowels.charAt(2))\n        val newMessage = message\n            .map(letter\
    \ => lettersMap(letter))\n            .map(letter => vowelsMap(letter))\n    \
    \        .mkString\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pk6tm2y.scala:17:46\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e\
    [0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(vowels -> letters.charAt(\e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                       Found:    (\e[1m\e[31mString\e[0m, Char)\n\e[31m   |\e\
    [0m                                              Required: (\e[1m\e[32mChar\e\
    [0m, Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pk6tm2y.scala:18:47\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlettersMap\e\
    [0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(letters -> vowels.charAt(\e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Found:    (\e[1m\e[31mString\e[0m, Char)\n\e[31m   |\e\
    [0m                                               Required: (\e[1m\e[32mChar\e\
    [0m, Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => \n\
    \            letter match {\n                case vowel => vowel\n           \
    \     case letter => alphabet.indexOf(letter) + alphabet.indexOf(vowel)\n    \
    \        }\n        )\n        val newMessageString = newMessage.toList\n    \
    \    val newMessageStringString = newMessageString.mkString(\"\")\n        val\
    \ newMessageStringStringString = newMessageStringString.toUpperCase\n        newMessageStringStringString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd8hdoe3y.scala:20:75 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter => alphabet.indexOf(letter)\
    \ + alphabet.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                           \
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                                       Not found: vowel\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder()\n   \
    \     var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val nextChar = message.charAt(i + 1)\n    \
    \        val currentCharIndex = vowels.indexOf(currentChar)\n            val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n            if (currentCharIndex != -1 && nextCharIndex\
    \ != -1) {\n                val currentCharIndex = currentCharIndex + 2\n    \
    \            val nextCharIndex = nextCharIndex + 2\n                if (currentCharIndex\
    \ < messageLength && nextCharIndex < messageLength) {\n                    encodedMessage.append(vowels(currentCharIndex))\n\
    \                    encodedMessage.append(vowels(nextCharIndex))\n          \
    \      }\n            }\n            i += 1\n        }\n        encodedMessage.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_jxw5up.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp4_jxw5up.scala:25:39 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mcurrentCharIndex\e\
    [0m = currentCharIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Recursive\
    \ \e[33mvalue\e[0m \e[35mcurrentCharIndex\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4_jxw5up.scala:26:36 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex\e\
    [0m = nextCharIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                ^\e[0m\n\e[31m   |\e[0m                                Recursive\
    \ \e[33mvalue\e[0m \e[35mnextCharIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case 'a' => alphabet(0)\n                case 'b' =>\
    \ alphabet(1)\n                case 'c' => alphabet(2)\n                case 'd'\
    \ => alphabet(3)\n                case 'e' => alphabet(4)\n                case\
    \ 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n              \
    \  case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n        \
    \        case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n \
    \               case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.mkString(\"\"\
    )\n        val newMessageArray2 = newMessageArray.map(letter => \n           \
    \ letter match {\n                case 'a' => vowels(0)\n                case\
    \ 'b' => vowels(1)\n                case 'c' => vowels(2)\n                case\
    \ 'd' => vowels(3)\n                case 'e' => vowels(4)\n                case\
    \ 'f' => vowels(5)\n                case 'g' => vowels(6)\n                case\
    \ 'h' => vowels(7)\n                case 'i' => vowels(8)\n                case\
    \ 'j' => vowels(9)\n                case 'k' => vowels(10)\n                case\
    \ 'l' => vowels(11)\n                case 'm' => vowels(12)\n                case\
    \ 'n' => vowels(13)\n                case 'o' => vowels(14)\n                case\
    \ 'p' => vowels(15)\n                case 'q' => vowels(16)\n                case\
    \ 'r' => vowels(17)\n                case 's' => vowels(18)\n                case\
    \ 't' => vowels(19)\n                case 'u' => vowels(20)\n                case\
    \ 'v' => vowels(21)\n                case 'w' => vowels(22)\n                case\
    \ 'x' => vowels(23)\n                case 'y' => vowels(24)\n                case\
    \ 'z' => vowels(25)\n                case letter => letter\n            }\n  \
    \      )\n        val new\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp06nbxsle.scala:81:12 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp06nbxsle.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp06nbxsle.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp06nbxsle.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp06nbxsle.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m => alphabet(\e\
    [31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp06nbxsle.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => alphabet(\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp06nbxsle.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'f'\e[0m => alphabet(\e\
    [31m5\e"
  stdout: ''
  timestamp: 1659978806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        val vowelsArray\
    \ = vowels.toCharArray\n        val vowelsCount = vowels.length\n        val messageCount\
    \ = messageArray.length\n        var i = 0\n        var j = 0\n        while (i\
    \ < messageCount) {\n            while (j < vowelsCount) {\n                if\
    \ (messageArray(i) == vowelsArray(j)) {\n                    result.append(vowelsArray(j\
    \ + 1))\n                    j += 2\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp36w734bi.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsArray\e[0m = vowels.toCharArray\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value toCharArray is not a member of Array[Char]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case 0 => letter\n            case 1 => vowels.charAt(vowels.indexOf(letter)\
    \ + 1)\n            case 2 => vowels.charAt(vowels.indexOf(letter) - 1)\n    \
    \        case _ => letter\n        })\n        val newMessageString = newMessage.toList\n\
    \        newMessageString.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf65dw08l.scala:27)\n\tat Problem.main(tmpf65dw08l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel, vowelIndex + 1)\n\
    \            } else {\n                letter\n            }\n        }).mkString(\"\
    \")\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb5jhkk69.scala:30)\n\tat Problem.main(tmpb5jhkk69.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessage = messageArray.foldLeft(\"\"){ (acc, letter) =>\n    \
    \        val index = letters.indexOf(letter)\n            val nextLetter = letters.charAt(index\
    \ + 1)\n            val nextIndex = letters.indexOf(nextLetter)\n            val\
    \ nextLetter2 = letters.charAt(index + 2)\n            val nextIndex2 = letters.indexOf(nextLetter2)\n\
    \            val nextLetter3 = letters.charAt(index + 3)\n            val nextIndex3\
    \ = letters.indexOf(nextLetter3)\n            val nextLetter4 = letters.charAt(index\
    \ + 4)\n            val nextIndex4 = letters.indexOf(nextLetter4)\n          \
    \  val nextLetter5 = letters.charAt(index + 5)\n            val nextIndex5 = letters.indexOf(nextLetter5)\n\
    \            val nextLetter6 = letters.charAt(index + 6)\n            val nextIndex6\
    \ = letters.indexOf(nextLetter6)\n            val nextLetter7 = letters.charAt(index\
    \ + 7)\n            val nextIndex7 = letters.indexOf(nextLetter7)\n          \
    \  val nextLetter8 = letters.charAt(index + 8)\n            val nextIndex8 = letters.indexOf(nextLetter8)\n\
    \            val nextLetter9 = letters.charAt(index + 9)\n            val nextIndex9\
    \ = letters.indexOf(nextLetter9)\n            val nextLetter10 = letters.charAt(index\
    \ + 10)\n            val nextIndex10 = letters.indexOf(nextLetter10)\n       \
    \     val nextLetter11 = letters.charAt(index + 11)\n            val nextIndex11\
    \ = letters.indexOf(nextLetter11)\n            val nextLetter12 = letters.charAt(index\
    \ + 12)\n            val nextIndex12 = letters.indexOf(nextLetter12)\n       \
    \     val nextLetter13 = letters.charAt(index + 13)\n            val nextIndex13\
    \ = letters.indexOf(nextLetter13)\n            val nextLetter14 = letters.charAt(index\
    \ + 14)\n            val nextIndex14 = letters.indexOf(nextLetter14)\n       \
    \     val nextLetter15 = letters.charAt(index + 15)\n            val nextIndex15\
    \ = letters.indexOf(nextLetter15)\n            val nextLetter16 = letters.charAt(index\
    \ + 16)\n            val nextIndex16 = letters.indexOf(nextLetter16)\n       \
    \     val nextLetter17 = letters.charAt(index + 17)\n            val nextIndex17\
    \ = letters.indexOf(nextLetter17)\n            val nextLetter18 = letters.charAt(index\
    \ + 18)\n            val nextIndex18 = letters.indexOf(nextLetter18)\n       \
    \     val nextLetter19 = letters.charAt(index + 19)\n            val nextIndex19\
    \ = letters.indexOf(\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprrgfoqel.scala:57:46 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m            \e[33mval\e[0m \e[36mnextIndex19\e[0m = letters.indexOf(\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprrgfoqel.scala:68:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprrgfoqel.scala:58:4 ---------------------\e[0m\e[0m\n\
    \e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    Found:\
    \    Unit\n\e[31m   |\e[0m    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprrgfoqel.scala:67:1 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmprrgfoqel.scala:59:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m59 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap : Map[Char, Char] = Map(a\
    \ -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\")\n        val lettersMap\
    \ : Map[Char, Char] = Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u ->\
    \ \"u\", z -> \"z\")\n        val newMessage = message.map(letter => lettersMap(letter))\n\
    \        val newMessage2 = newMessage.map(letter => vowelsMap(letter))\n     \
    \   val newMessage3 = newMessage2.map(letter => lettersMap(letter))\n        val\
    \ newMessage4 = newMessage3.map(letter => vowelsMap(letter))\n        val newMessage5\
    \ = newMessage4.map(letter => lettersMap(letter))\n        val newMessage6 = newMessage5.map(letter\
    \ => vowelsMap(letter))\n        val newMessage7 = newMessage6.map(letter => lettersMap(letter))\n\
    \        val newMessage8 = newMessage7.map(letter => vowelsMap(letter))\n    \
    \    val newMessage9 = newMessage8.map(letter => lettersMap(letter))\n       \
    \ val newMessage10 = newMessage9.map(letter => vowelsMap(letter))\n        val\
    \ newMessage11 = newMessage10.map(letter => lettersMap(letter))\n        val newMessage12\
    \ = newMessage11.map(letter => vowelsMap(letter))\n        val newMessage13 =\
    \ newMessage12.map(letter => lettersMap(letter))\n        val newMessage14 = newMessage13.map(letter\
    \ => vowelsMap(letter))\n        val newMessage15 = newMessage14.map(letter =>\
    \ lettersMap(letter))\n        val newMessage16 = newMessage15.map(letter => vowelsMap(letter))\n\
    \        val newMessage17 = newMessage16.map(letter => lettersMap(letter))\n \
    \       val newMessage18 = newMessage17.map(letter => vowelsMap(letter))\n   \
    \     val newMessage19 = newMessage18.map(letter => lettersMap(letter))\n    \
    \    val newMessage20 = newMessage19.map(letter => vowelsMap(letter))\n      \
    \  val newMessage21 = newMessage20.map(letter => lettersMap(letter))\n       \
    \ val newMessage22 = newMessage21.map(letter => vowelsMap(letter))\n        val\
    \ newMessage23 = newMessage22.map(letter => lettersMap(letter))\n        val newMessage24\
    \ = newMessage23.map(letter => vowelsMap(letter))\n        val newMessage25 =\
    \ newMessage24.map(letter => letters\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj9v7l8ye.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9v7l8ye.scala:17:46\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(a\
    \ -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"\
    o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                 Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj9v7l8ye.scala:17:56 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m,\
    \ \e[35mChar\e[0m] = Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e\
    [31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: e\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9v7l8ye.scala:17:66\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(a\
    \ -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"\
    o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                                   Not found: i\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj9v7l8ye.scala:17:76 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(a -> \e[31m\"a\"\e[0"
  stdout: ''
  timestamp: 1659978809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    )( (acc, elem) => {\n            val index = vowels.indexOf(elem)\n          \
    \  if (index != -1) {\n                val nextVowel = vowels(index + 1)\n   \
    \             acc + (if (index == 0) elem.toUpperCase else elem.toLowerCase +\
    \ nextVowel)\n            } else {\n                acc + elem\n            }\n\
    \        })\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_t1c4uc.scala:29)\n\tat Problem.main(tmpj_t1c4uc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelMap = new mutable.HashMap[String,\
    \ String]()\n        vowelMap += \"a\" -> \"A\"\n        vowelMap += \"e\" ->\
    \ \"E\"\n        vowelMap += \"i\" -> \"I\"\n        vowelMap += \"o\" -> \"O\"\
    \n        vowelMap += \"u\" -> \"U\"\n        vowelMap += \"A\" -> \"a\"\n   \
    \     vowelMap += \"E\" -> \"e\"\n        vowelMap += \"I\" -> \"i\"\n       \
    \ vowelMap += \"O\" -> \"o\"\n        vowelMap += \"U\" -> \"u\"\n        val\
    \ messageArray = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val vowel = vowels.find(_ == letter)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val nextVowel = vowels.indexOf(vowel, vowelIndex\
    \ + 1)\n            val nextLetter = alphabet.find(_ == nextVowel)\n         \
    \   val nextLetterIndex = alphabet.indexOf(nextLetter)\n            val nextLetterNextVowel\
    \ = alphabet.indexOf(nextLetter, nextLetterIndex + 1)\n            val nextLetterNextVowelIndex\
    \ = alphabet.indexOf(nextLetterNextVowel)\n            val nextLetterNextVowelNextLetter\
    \ = alphabet.indexOf(nextLetterNextVowel, nextLetterNextVowelIndex + 1)\n    \
    \        val nextLetterNextVowelNextLetterIndex = alphabet.indexOf(nextLetterNextVowelNextLetter)\n\
    \            val nextLetterNextVowelNextLetterNextLetter = alphabet.indexOf(nextLetterNextVowelNextLetter,\
    \ nextLetterNextVowelNextLetterIndex + 1)\n            val nextLetterNextVowelNextLetterNextLetterIndex\
    \ = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetter)\n            val\
    \ nextLetterNextVowelNextLetterNextLetterNextLetter = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetter,\
    \ nextLetterNextVowelNextLetterNextLetterIndex + 1)\n            val nextLetterNextVowelNextLetterNextLetterNextLetterIndex\
    \ = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetterNextLetter)\n    \
    \        val nextLetterNextVowelNextLetterNextLetterNextLetterNextLetter = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetterNextLetter,\
    \ nextLetterNextVowelNextLetterNextLetterNextLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxbokccr_.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxbokccr_.scala:45:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpxbokccr_.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxbokccr_.scala:17:27\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpxbokccr_.scala:30:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mvowel\e[0m = vowels.find(_\
    \ == letter)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxbokccr_.scala:53:1\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (result, current) => {\n            val currentLetter = current.toLowerCase\n\
    \            val currentLetterIndex = alphabet.indexOf(currentLetter)\n      \
    \      val currentVowelIndex = vowels.indexOf(currentLetter)\n            val\
    \ currentVowelIndex2 = vowels.indexOf(currentLetter.charAt(currentVowelIndex +\
    \ 1))\n            val currentVowelIndex3 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 2))\n            val currentVowelIndex4 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 3))\n            val currentVowelIndex5 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 4))\n            val currentVowelIndex6 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 5))\n            val currentVowelIndex7 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 6))\n            val currentVowelIndex8 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 7))\n            val currentVowelIndex9 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 8))\n            val currentVowelIndex10 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 9))\n            val currentVowelIndex11 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 10))\n            val currentVowelIndex12 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 11))\n            val currentVowelIndex13 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 12))\n            val currentVowelIndex14 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 13))\n            val currentVowelIndex15 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 14))\n            val currentVowelIndex16 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 15))\n            val currentVowelIndex17 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 16))\n\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv4g0fx3b.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4g0fx3b.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4g0fx3b.scala:48:1\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessageArray = messageArray.map(letter => {\n            val index\
    \ = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            val nextVowelIndex = vowelIndex + 2\n            val nextLetter =\
    \ alphabet(nextVowelIndex)\n            alphabet(index) match {\n            \
    \    case letter if index == vowelIndex => letter\n                case letter\
    \ if index == nextVowelIndex => nextLetter\n                case letter => letter\n\
    \            }\n        })\n        newMessageArray.toString.replaceAll(\"\\\\\
    s+\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$1(tmp8j4a3_kn.scala:23)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmp8j4a3_kn.scala:28)\n\
    \tat Problem$.main(tmp8j4a3_kn.scala:32)\n\tat Problem.main(tmp8j4a3_kn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => \n \
    \           vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i + 2)\n            }\n        ).mkString(\"\
    \")\n        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahmimp09.scala:26)\n\tat Problem.main(tmpahmimp09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => {\n\
    \            if (vowels.contains(letter)) {\n                val vowelIndex =\
    \ vowels.indexOf(letter)\n                val vowel2Index = vowels.indexOf(vowels[vowelIndex\
    \ + 1])\n                vowels(vowelIndex) match {\n                    case\
    \ \"a\" => vowels(vowelIndex + 1)\n                    case \"e\" => vowels(vowelIndex\
    \ + 1)\n                    case \"i\" => vowels(vowelIndex + 1)\n           \
    \         case \"o\" => vowels(vowelIndex + 1)\n                    case \"u\"\
    \ => vowels(vowelIndex + 1)\n                    case \"A\" => vowels(vowel2Index\
    \ + 1)\n                    case \"E\" => vowels(vowel2Index + 1)\n          \
    \          case \"I\" => vowels(vowel2Index + 1)\n                    case \"\
    O\" => vowels(vowel2Index + 1)\n                    case \"U\" => vowels(vowel2Index\
    \ + 1)\n                    case \"a\" => vowels(vowel2Index + 1)\n          \
    \          case \"e\" => vowels(vowel2Index + 1)\n                    case \"\
    i\" => vowels(vowel2Index + 1)\n                    case \"o\" => vowels(vowel2Index\
    \ + 1)\n                    case \"u\" => vowels(vowel2Index + 1)\n          \
    \          case \"A\" => vowels(vowelIndex + 1)\n                    case \"E\"\
    \ => vowels(vowelIndex + 1)\n                    case \"I\" => vowels(vowelIndex\
    \ + 1)\n                    case \"O\" => vowels(vowelIndex + 1)\n           \
    \         case \"U\" => vowels(vowelIndex + 1)\n                    case \"a\"\
    \ => vowels(vowelIndex + 1)\n                    case \"e\" => vowels(vowelIndex\
    \ + 1)\n                    case \"i\" => vowels(vowelIndex + 1)\n           \
    \         case \"o\" => vowels(vowelIndex + 1)\n                    case \"u\"\
    \ => vowels(vowelIndex + 1)\n                    case \"A\" => vowels(vowel2Index\
    \ + 1)\n                    case \"E\" => vowels(vowel2Index + 1)\n          \
    \          case \"I\" => vowels(vowel2Index + 1)\n                    case \"\
    O\" => vowels(vowel2Index + 1)\n                    case \"U\" => vowels(vowel2Index\
    \ + 1)\n                    case \"a\" => vowels(vowel2Index + 1)\n          \
    \          case \"e\" => vowels(vowel2Index + 1)\n                    case \"\
    i\" => vowels(vowel2Index + 1)\n                    case \"o\" => vowels(vowel2Index\
    \ + 1)\n                    case \"u\" => vowels(vowel2Index + 1)\n          \
    \          case \"A\" => vowels(vowelIndex + 1)\n                    case \"E\"\
    \ => vowels(vowelIndex + 1)\n                    case \"I\" => vowels(vowelIndex\
    \ + 1)\n                    case \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvy39iy8i.scala:60:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m                    \e[33mcase\e[0m \"\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvy39iy8i.scala:71:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpvy39iy8i.scala:20:67 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m                \e[33mval\e[0m \e[36mvowel2Index\e[0m = vowels.indexOf(vowels[\e\
    [35mvowelIndex\e[0m \e[35m+\e[0m \e[31m1\e[0m])\n\e[31m\e[31m   |\e[0m       \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                       Not found: type\
    \ +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpvy39iy8i.scala:22:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m\"a\"\e[0m\
    \ => vowels(vowelIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \         ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpvy39iy8i.scala:23:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \             \e[33mcase\e[0m \e[31m\"e\"\e[0m => vowels(vowelIndex + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpvy39iy8i.scala:24:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m \e[31m\"i\"\e[0m\
    \ => vowels(vowelIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \         ^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpvy39iy8i.scala:25:25\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \    "
  stdout: ''
  timestamp: 1659978813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case vowel => vowels.indexOf(vowel)\
    \ + 2\n                case _ => vowels.indexOf(letter) + 2\n            }\n \
    \       )\n        val newMessage = messageArray.toList.mkString(\"\")\n     \
    \   val newMessageArray2 = newMessageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(vowel) + 2\n         \
    \       case _ => vowels.indexOf(letter) + 2\n            }\n        )\n     \
    \   val newMessage2 = newMessageArray2.toList.mkString(\"\")\n        val newMessageArray3\
    \ = newMessage2.split(\"\").map(letter => \n            letter match {\n     \
    \           case vowel => vowels.indexOf(vowel) + 2\n                case _ =>\
    \ vowels.indexOf(letter) + 2\n            }\n        )\n        val newMessage3\
    \ = newMessageArray3.toList.mkString(\"\")\n        val newMessageArray4 = newMessage3.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowels.indexOf(vowel) + 2\n                case _ => vowels.indexOf(letter)\
    \ + 2\n            }\n        )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           letter match {\n                case vowel => vowels.indexOf(vowel)\
    \ + 2\n                case _ => vowels.indexOf(letter) + 2\n            }\n \
    \       )\n        val newMessage5 = newMessageArray5.toList.mkString(\"\")\n\
    \        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n     \
    \       letter match {\n                case vowel => vowels.indexOf(vowel) +\
    \ 2\n                case _ => vowels.indexOf(letter) + 2\n            }\n   \
    \     )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\")\n  \
    \      val newMessageArray7 = newMessage6.split(\"\").map(letter => \n       \
    \     letter match {\n                case vowel => vowels.indexOf(vowel) + 2\n\
    \                case _ => vowels.indexOf(letter) + 2\n            }\n       \
    \ )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\")\n      \
    \  val newMessageArray8 = newMessage7.split(\"\").map(letter => \n           \
    \ letter match {\n                case vowel => vowels.indexOf(vowel) + 2\n  \
    \              case _ => vowels.indexOf(letter) + 2\n            }\n        )\n\
    \        val newMessage8 = newMessageArray8.toList.mkString(\"\")\n        val\
    \ newMessageArray9 = newMessage8.split(\"\").map(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmporthd6a_.scala:73:57 ---------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray9\e[0m =\
    \ newMessage8.split(\e[31m\"\"\e[0m).map(\n\e[31m\e[31m   |\e[0m             \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmporthd6a_.scala:74:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:\
    \    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmporthd6a_.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowel2Index = vowels.indexOf(vowels[vowelIndex + 1])\n  \
    \              val newLetter = vowels(vowelIndex + 1) + vowels(vowel2Index + 1)\n\
    \                println(s\"vowelIndex: $vowelIndex, $vowel2Index, $letter, $newLetter\"\
    )\n                newLetter\n            } else {\n                letter\n \
    \           }\n        })\n        val newMessage = newMessageArray.toList\n \
    \       newMessage.toString.replace(\",\", \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdesfhiit.scala:20:67 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36mvowel2Index\e[0m\
    \ = vowels.indexOf(vowels[\e[35mvowelIndex\e[0m \e[35m+\e[0m \e[31m1\e[0m])\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \           Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(1)\n\
    \                vowels(vowelIndex) = newLetter\n                vowels(index)\
    \ = newLetter\n                newLetter\n            } else {\n             \
    \   letter\n            }\n        })\n        newMessageArray.toString.replaceAll(\"\
    [aeiouAEIOU]\", \"$0\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrlyhaa3.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbrlyhaa3.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrlyhaa3.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                vowels(index)\
    \ = newLetter\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value update is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessage = messageArray.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.charAt(letters.indexOf(letter) + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 4)))\n        val newMessageString = newMessage.toList.toString\n        newMessageString.replaceAll(\"\
    ,\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7fik7tl.scala:23)\n\tat Problem.main(tmpz7fik7tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageWithVowels\
    \ = message.toLowerCase.map(letter => vowels.contains(letter) ? letter : alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndVowelsTwoAheadOfVowel = messageWithVowels.map(letter\
    \ => vowels.contains(letter) ? letter : alphabet(alphabet.indexOf(letter) + 2))\n\
    \        messageWithVowelsAndVowelsTwoAheadOfVowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo7_o5rkl.scala:17:109 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.toLowerCase.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter\
    \ : \e[35malphabet\e[0m(alphabet.indexOf(letter) + \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                  ')' expected, but '(' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpo7_o5rkl.scala:18:131 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadOfVowel\e\
    [0m = messageWithVowels.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter\
    \ : \e[35malphabet\e[0m(alphabet.indexOf(letter) + \e[31m2\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                             ')' expected, but '(' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7_o5rkl.scala:17:90 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.toLowerCase.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter\
    \ : \e[35malphabet\e[0m(alphabet.indexOf(letter) + \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value ? is not a member\
    \ of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1659978811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \"){ (result, current) =>\n            val index = alphabet.indexOf(current)\n\
    \            val vowelIndex = vowels.indexOf(current)\n            if (index !=\
    \ -1 && vowelIndex != -1) {\n                val newIndex = index + vowelIndex\n\
    \                val newChar = alphabet(newIndex)\n                result + newChar\n\
    \            } else {\n                result + current\n            }\n     \
    \   }\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpsqlrod.scala:32)\n\tat Problem.main(tmpxpsqlrod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val result = new StringBuilder\n       \
    \ for(i <- 0 until message.length){\n            val letter = message.charAt(i)\n\
    \            val vowelIndex = letters.indexOf(letter)\n            val vowel =\
    \ vowels(vowelIndex)\n            val nextLetter = letters.indexOf(letter, vowelIndex\
    \ + 1)\n            val nextVowel = vowels(nextLetter)\n            result.append(vowel)\n\
    \            result.append(nextVowel)\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.encode$$anonfun$1(tmpg6hc63u8.scala:21)\n\
    \tat Problem$.encode$$anonfun$adapted$1(tmpg6hc63u8.scala:26)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.encode(tmpg6hc63u8.scala:26)\n\tat Problem$.main(tmpg6hc63u8.scala:30)\n\
    \tat Problem.main(tmpg6hc63u8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case 0 => alphabet(alphabet.indexOf(letter) + 1)\n     \
    \       case 1 => alphabet(alphabet.indexOf(letter) + 2)\n            case _ =>\
    \ letter\n        })\n        newMessage.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_i8sh4n.scala:26)\n\tat Problem.main(tmpn_i8sh4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        for(i\
    \ <- 0 until messageArray.length){\n            val currentChar = messageArray(i)\n\
    \            val nextChar = messageArray(i+1)\n            if(vowels(i) == currentChar){\n\
    \                val nextCharIndex = vowels.indexOf(nextChar)\n              \
    \  if(nextCharIndex != -1){\n                    result.append(vowels(nextCharIndex+1))\n\
    \                }\n            }\n            result.append(currentChar)\n  \
    \      }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.encode$$anonfun$1(tmpxwl2sj4t.scala:20)\n\tat Problem$.encode$$anonfun$adapted$1(tmpxwl2sj4t.scala:28)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmpxwl2sj4t.scala:28)\n\
    \tat Problem$.main(tmpxwl2sj4t.scala:32)\n\tat Problem.main(tmpxwl2sj4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.toCharArray\n        val newMessage = messageArray.map\
    \ { c =>\n            val index = vowels.indexOf(c)\n            if (index !=\
    \ -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.contains(c) ? vowel : c\n     \
    \       } else {\n                c\n            }\n        }\n        new String(newMessage)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoa47j0zj.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = vowels.indexOf(c)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpoa47j0zj.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels.contains(c) ? vowel : \e[35mc\e\
    [0m\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\
    \e[31m   |\e[0m                                             Not found: type c\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoa47j0zj.scala:22:32\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                vowels.contains(c)\
    \ ? vowel : \e[35mc\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \  ^\e[0m\n\e[31m   |\e[0m                                Found:    (c : Char)\n\
    \e[31m   |\e[0m                                Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n   \
    \     val encodedMessage = mutable.Buffer.empty[String]\n        val vowelsCount\
    \ = message.count(vowels)\n        val lettersCount = message.count(letters)\n\
    \        val vowelsPosition = vowels.indexOf(message.charAt(0))\n        val lettersPosition\
    \ = letters.indexOf(message.charAt(messageLength - 1))\n        val vowelsPosition2\
    \ = vowels.indexOf(message.charAt(messageLength - 2))\n        val lettersPosition2\
    \ = letters.indexOf(message.charAt(messageLength - 3))\n        val vowelsPosition3\
    \ = vowels.indexOf(message.charAt(messageLength - 4))\n        val lettersPosition3\
    \ = letters.indexOf(message.charAt(messageLength - 5))\n        val vowelsPosition4\
    \ = vowels.indexOf(message.charAt(messageLength - 6))\n        val lettersPosition4\
    \ = letters.indexOf(message.charAt(messageLength - 7))\n        val vowelsPosition5\
    \ = vowels.indexOf(message.charAt(messageLength - 8))\n        val lettersPosition5\
    \ = letters.indexOf(message.charAt(messageLength - 9))\n        val vowelsPosition6\
    \ = vowels.indexOf(message.charAt(messageLength - 10))\n        val lettersPosition6\
    \ = letters.indexOf(message.charAt(messageLength - 11))\n        val vowelsPosition7\
    \ = vowels.indexOf(message.charAt(messageLength - 12))\n        val lettersPosition7\
    \ = letters.indexOf(message.charAt(messageLength - 13))\n        val vowelsPosition8\
    \ = vowels.indexOf(message.charAt(messageLength - 14))\n        val lettersPosition8\
    \ = letters.indexOf(message.charAt(messageLength - 15))\n        val vowelsPosition9\
    \ = vowels.indexOf(message.charAt(messageLength - 16))\n        val lettersPosition9\
    \ = letters.indexOf(message.charAt(messageLength - 17))\n        val vowelsPosition10\
    \ = vowels.indexOf(message.charAt(messageLength - 18))\n        val lettersPosition10\
    \ = letters.indexOf(message.charAt(messageLength - 19))\n        val vowelsPosition11\
    \ = vowels.indexOf(message.charAt(messageLength - 20))\n        val lettersPosition11\
    \ = letters.indexOf(message.charAt(messageLength - 21))\n        val vowelsPosition12\
    \ = vowels.indexOf(message.charAt(messageLength - 22))\n        val lettersPosition12\
    \ = letters.indexOf(message.charAt(messageLength - 23))\n        val vowelsPosition13\
    \ = vowels.indexOf(message.charAt(messageLength - 24))\n        val lettersPosition13\
    \ = letters.indexOf(message.charAt(messageLength - 25))\n        val vowelsPosition14\
    \ = vowels.indexOf(message.charAt(messageLength - 26))\n        val lettersPosition14\
    \ = letters.indexOf(message.charAt(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe0k3csed.scala:48:63 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mlettersPosition14\e[0m =\
    \ letters.indexOf(message.charAt(\n\e[31m\e[31m   |\e[0m                     \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0k3csed.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.Buffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpe0k3csed.scala:19:40 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = message.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                        Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe0k3csed.scala:20:41\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlettersCount\e\
    [0m = message.count(letters)\n\e[31m\e[31m   |\e[0m                          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \         Found:    (letters : String)\n\e[31m   |\e[0m                      \
    \                   Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpe0k3csed.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e["
  stdout: ''
  timestamp: 1659978814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if(index !=\
    \ -1){\n                val vowelIndex = index - 2\n                val vowel\
    \ = vowels(vowelIndex)\n                val replacement = vowels(vowelIndex +\
    \ 1)\n                letter.replace(vowel, replacement)\n            }\n    \
    \        else{\n                letter\n            }\n        })\n        newMessageArray.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptsfqz9su.scala:32)\n\tat Problem.main(tmptsfqz9su.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val alphabet = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageWithVowels\
    \ = message.map(letter => vowels.contains(letter) ? letter : alphabet.find(letter\
    \ => letter != letter + letter))\n        val messageWithVowelsAndTwoLettersAfterVowel\
    \ = messageWithVowels.map(letter => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowel.map(letter => letter + letter)\n\
    \        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ytf1sc0.scala:17:102 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : alphabet.find(letter\
    \ => letter != letter + letter))\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                             ')' expected,\
    \ but '(' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ytf1sc0.scala:17:70\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e\
    [0m = message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : alphabet.find(letter\
    \ => letter != letter + letter))\n\e[31m\e[31m   |\e[0m                      \
    \                                                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Found:    (letter : Char)\n\e\
    [31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6ytf1sc0.scala:22:147\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\e\
    [0m = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(\e\
    [36mletter\e[0m => letter + letter)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                                    ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-expla"
  stdout: ''
  timestamp: 1659978816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n                val newIndex = vowels.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    newLetter\n      \
    \          } else {\n                    letter\n                }\n         \
    \   } else {\n                letter\n            }\n        })\n        newMessageArray.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4fhjr8zy.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m).toUpperCase + vowel.substring(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.toLowerCase.foldLeft(\"\") { (result,\
    \ letter) =>\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowel = vowels(index)\n                val vowelIndex\
    \ = vowels.indexOf(vowel)\n                val newLetter = vowels(vowelIndex +\
    \ 2)\n                result + newLetter\n            } else {\n             \
    \   result + letter\n            }\n        }\n        val messageWithVowelsArray\
    \ = messageWithVowels.toCharArray\n        val messageWithVowelsArrayLength =\
    \ messageWithVowelsArray.length\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithVowelsArrayLength\
    \ - 1\n        val messageWithVowelsArrayLength = messageWithV\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl5hutn6d.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = messageWithVowelsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessageWithVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl5hutn6d.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = messageWithVowelsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessageWithVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl5hutn6d.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = messageWithVowelsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessageWithVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl5hutn6d.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsArrayLength\e\
    [0m = messageWithVowelsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmessageWithVowelsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mmessage"
  stdout: ''
  timestamp: 1659978819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val newMessage = new Array[Char](messageArray.length)\n\
    \        val vowelsArray = vowels.toCharArray\n        var i = 0\n        while\
    \ (i < messageArray.length) {\n            val currentChar = messageArray(i)\n\
    \            val nextChar = messageArray(i + 1)\n            if (vowelsArray.contains(currentChar))\
    \ {\n                newMessage(i) = vowelsArray(vowelsArray.indexOf(currentChar)\
    \ + 1)\n                newMessage(i + 1) = currentChar\n            } else {\n\
    \                newMessage(i) = currentChar\n                newMessage(i + 1)\
    \ = vowelsArray(vowelsArray.indexOf(nextChar) + 1)\n            }\n          \
    \  i += 1\n        }\n        new String(newMessage)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpic94c9ao.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsArray\e[0m = vowels.toCharArray\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value toCharArray is not a member of Array[Char]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map(letter => {\n            if (vowels.contains(letter))\
    \ {\n                val vowelIndex = letters.indexOf(letter)\n              \
    \  val vowel2Index = vowelIndex + 2\n                letters(vowel2Index) \n \
    \           } else {\n                letter\n            }\n        }).mkString(\"\
    \")\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8aexlme6.scala:30)\n\tat Problem.main(tmp8aexlme6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        var i\
    \ = 0\n        while (i < messageArray.length) {\n            val currentChar\
    \ = messageArray(i)\n            val nextChar = messageArray(i + 1)\n        \
    \    val currentCharIndex = vowels.indexOf(currentChar)\n            val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n            if (currentCharIndex < 0 || nextCharIndex\
    \ < 0 || currentCharIndex > nextCharIndex) {\n                result.append((currentChar))\n\
    \            } else {\n                val currentCharVowel = vowels(currentCharIndex)\n\
    \                val nextCharVowel = vowels(nextCharIndex)\n                val\
    \ currentCharIndex = vowels.indexOf(currentCharVowel)\n                val nextCharIndex\
    \ = vowels.indexOf(nextCharVowel)\n                if (currentCharIndex < 0 ||\
    \ nextCharIndex < 0 || currentCharIndex > nextCharIndex) {\n                 \
    \   result.append((currentChar))\n                } else {\n                 \
    \   val currentCharVowel = vowels(currentCharIndex)\n                    val nextCharVowel\
    \ = vowels(nextCharIndex)\n                    val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                    val nextCharIndex = vowels.indexOf(nextCharVowel)\n     \
    \               if (currentCharIndex < 0 || nextCharIndex < 0 || currentCharIndex\
    \ > nextCharIndex) {\n                        result.append((currentChar))\n \
    \                   } else {\n                        val currentCharVowel = vowels(currentCharIndex)\n\
    \                        val nextCharVowel = vowels(nextCharIndex)\n         \
    \               val currentCharIndex = vowels.indexOf(currentCharVowel)\n    \
    \                    val nextCharIndex = vowels.indexOf(nextCharVowel)\n     \
    \                   if (currentCharIndex < 0 || nextCharIndex < 0 || currentCharIndex\
    \ > nextCharIndex) {\n                            result.append((currentChar))\n\
    \                        } else {\n                            val currentCharVowel\
    \ = vowels(currentCharIndex)\n                            val nextCharVowel =\
    \ vowels(nextCharIndex)\n                            val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                            val nextCharIndex = vowels.indexOf(nextCharVowel)\n\
    \                            if (currentCharIndex < 0 || nextCharIndex < 0 ||\
    \ currentCharIndex > nextCharIndex) {\n                                result.append((currentChar))\n\
    \                            } else {\n                                val currentCharVowel\
    \ = vowels(currentCharIndex)\n                                val nextCharVowel\
    \ = vowels(nextCharIndex)\n                                val currentCharIndex\
    \ = vowels.indexOf(currentCharVowel)\n                                val nextCharIndex\
    \ = vowels.indexOf(nextChar\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr0_83s28.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr0_83s28.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpr0_83s28.scala:29:54 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m                \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m = vowels.indexOf(currentCharVowel)\n\
    \e[31m\e[31m   |\e[0m                                                      ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mcurrentCharVowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr0_83s28.scala:30:51 ---------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex\e[0m =\
    \ vowels.indexOf(nextCharVowel)\n\e[31m\e[31m   |\e[0m                       \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \       Recursive \e[33mvalue\e[0m \e[35mnextCharVowel\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr0_83s28.scala:36:58 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mval\e[0m \e[36mcurrentCharIndex\e\
    [0m = vowels.indexOf(currentCharVowel)\n\e[31m\e[31m   |\e[0m                \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                  Recursive \e[33mvalue\e[0m \e[35mcurrentCharVowel\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpr0_83s28.scala:37:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                    \e\
    [33mval\e[0m \e[36mnextCharIndex\e[0m = vowels.indexOf(nextCharVowel)\n\e[31m\e\
    [31m   |\e[0m                                              "
  stdout: ''
  timestamp: 1659978818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") { (acc,\
    \ elem) => \n            val index = alphabet.indexOf(elem)\n            val nextIndex\
    \ = index + 2\n            val nextChar = alphabet(nextIndex)\n            acc\
    \ + (if (vowels.contains(elem)) nextChar else elem)\n        }\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsau51er.scala:27)\n\tat Problem.main(tmpdsau51er.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val\
    \ newVowels2 = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n\
    \        val newVowels3 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 3))\n        val newVowels4 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 4))\n        val newVowels5 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 5))\n        val newVowels6 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 6))\n        val newVowels7 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 7))\n        val newVowels8 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 8))\n        val newVowels9 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 9))\n        val newVowels10 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 10))\n        val newVowels11 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 11))\n        val newVowels12 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 12))\n        val newVowels13 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 13))\n        val newVowels14 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 14))\n        val newVowels15 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 15))\n        val newVowels16 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 16))\n        val newVowels17 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 17))\n        val newVowels18 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 18))\n        val newVowels19 = vowels.map(letter \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz_bam061.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz_bam061.scala:36:37\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mnewVowels19\e[0m = vowels.map(letter \n\e[31m\e[31m   |\e[0m             \
    \                        ^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \             Not found: letter\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz_bam061.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) + vowels.indexOf(letter) + 1)\n    \
    \    val newMessage = messageArray.join(\"\")\n        val newMessageArray2 =\
    \ newMessage.split(\"\")\n        newMessageArray2.map(letter => \n          \
    \  vowels.indexOf(letter) + vowels.indexOf(letter) + 1).mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3u6k4kl3.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = messageArray.join(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue join is not a member of Array[String] - did you mean\
    \ messageArray.wait?\n1 error found\n"
  stdout: ''
  timestamp: 1659978821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadOfVowel = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowel.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter) + 1) +\
    \ alphabet(vowels.indexOf(letter) + 2))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3) + alphabet(vowels.indexOf(letter) + 4))\n        val messageWithVowelsAndVowelsTwoAheadOfVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc7umydh8.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc7umydh8.scala:21:125\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel\e\
    [0m = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) +\
    \ alphabet(vowels.indexOf(letter) + \e[31m1\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m2\e[0m) + alphabet(vowels.indexOf(letter) + \e[31m3\e[0m) + alphabet(vowels.indexOf(letter)\
    \ + \e[31m4\e[0m))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc7umydh8.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = mutable.StringBuilder()\n\
    \        val vowelsCount = mutable.Map[Char,Int]()\n        val messageLength\
    \ = message.length\n        for(i <- 0 until messageLength){\n            val\
    \ currentChar = message.charAt(i)\n            val currentCharIndex = alphabet.indexOf(currentChar)\n\
    \            val currentCharNext = alphabet.indexOf(message.charAt(i+1))\n   \
    \         val currentCharNextIndex = alphabet.indexOf(message.charAt(i+2))\n \
    \           val currentCharNextNext = alphabet.indexOf(message.charAt(i+3))\n\
    \            val currentCharNextNextIndex = alphabet.indexOf(message.charAt(i+4))\n\
    \            val currentCharNextNextNext = alphabet.indexOf(message.charAt(i+5))\n\
    \            val currentCharNextNextNextIndex = alphabet.indexOf(message.charAt(i+6))\n\
    \            val currentCharNextNextNextNext = alphabet.indexOf(message.charAt(i+7))\n\
    \            val currentCharNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+8))\n\
    \            val currentCharNextNextNextNextNext = alphabet.indexOf(message.charAt(i+9))\n\
    \            val currentCharNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+10))\n\
    \            val currentCharNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+11))\n\
    \            val currentCharNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+12))\n\
    \            val currentCharNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+13))\n\
    \            val currentCharNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+14))\n\
    \            val currentCharNextNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+15))\n\
    \            val currentCharNextNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+16))\n\
    \            val currentCharNextNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+17))\n\
    \            val currentCharNextNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+18))\n\
    \            val currentCharNextNextNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+19))\n\
    \            val currentCharNextNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+20))\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjhsb5oc0.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhsb5oc0.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessage\e[0m = mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjhsb5oc0.scala:18:26\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount\e[0m = mutable.Map[\e[35mChar\e[0m,\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpjhsb5oc0.scala:39:16 ---------------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharNextNextNextNextNextNextNextNext\e\
    [0m = alphabet.indexOf(message.charAt(i+\e[31m17\e[0m))\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharNextNextNextNextNextNextNextNext is already defined\
    \ as \e[33mvalue\e[0m \e[35mcurrentCharNextNextNextNextNextNextNextNext\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhsb5oc0.scala:40:16 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m            \e[33mval\e[0m \e[36mcurrentCharNextNextNextNextNextNextNextNextIndex\e\
    [0m = alphabet.indexOf(message.charAt(i+\e[31m18\e[0m))\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharNextNextNextNextNextNextNextNextIndex is already\
    \ defined as \e[33mv"
  stdout: ''
  timestamp: 1659978822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c.toUpperCase else c))\n        val messageWithVowelsAndVowelsTwoAhead = messageWithVowels.foldLeft(\"\
    \")( (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else c))\n     \
    \   val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzk05il4u.scala:16:111 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.toLowerCase.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mc\e[0m)\
    \ => acc + (\e[33mif\e[0m (vowels.contains(c)) c.toUpperCase \e[33melse\e[0m c))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzk05il4u.scala:17:126 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAhead\e\
    [0m = messageWithVowels.foldLeft(\e[31m\"\"\e[0m)( (\e[36macc\e[0m, \e[36mc\e\
    [0m) => acc + (\e[33mif\e[0m (vowels.contains(c)) c.toUpperCase \e[33melse\e[0m\
    \ c))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzk05il4u.scala:18:100\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhe"
  stdout: ''
  timestamp: 1659978823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                if (vowelIndex\
    \ < vowels.length)\n                    vowels(vowelIndex) = vowels(index)\n \
    \               else\n                    vowels(vowelIndex) = letter\n      \
    \      }\n            else\n                letter\n        })\n        val newMessage\
    \ = newMessageArray.toList\n        val newMessageString = newMessage.toString\n\
    \        val newMessageStringArray = newMessageString.split(\"\")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36x7xjp5.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36x7xjp5.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36x7xjp5.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36x7xjp5.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0"
  stdout: ''
  timestamp: 1659978823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                vowels(vowelIndex)\
    \ = letter\n                vowel\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.replace(\"[\", \"\
    \").replace(\"]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxff7tolg.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels(vowelIndex) = letter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a\
    \ member of List[String] - did you mean vowels.updated?\n1 error found\n"
  stdout: ''
  timestamp: 1659978822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val alphabet = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageList\
    \ = message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\")(\
    \ (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n         \
    \   val newElem = if (index > 0) alphabet(index - 1) else elem\n            acc\
    \ + newElem\n        })\n        val newMessageList = newMessage.split(\"\")\n\
    \        val newVowels = vowels.map(elem => elem.toLowerCase)\n        val newVowelsSet\
    \ = Set(newVowels.toList)\n        val newVowelsSetList = newVowelsSet.toList\n\
    \        val newVowelsSetListWithIndex = newVowelsSetList.zipWithIndex\n     \
    \   val newVowelsSetListWithIndexSorted = newVowelsSetListWithIndex.sortBy(_._2)\n\
    \        val newVowelsSetListWithIndexSortedWithIndex = newVowelsSetListWithIndexSorted.map(elem\
    \ => elem._1 + elem._2)\n        val newVowelsSetListWithIndexSortedWithIndexSorted\
    \ = newVowelsSetListWithIndexSortedWithIndex.sortBy(_._1)\n        val newVowelsSetListWithIndexSortedWithIndexSortedWithIndex\
    \ = newVowelsSetListWithIndexSortedWithIndexSorted.map(elem => elem._1 + elem._2\
    \ + elem._3)\n        val newVowelsSetListWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = newVowelsSetListWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1)\n   \
    \     newVowelsSetListWithIndexSortedWithIndexSortedWithIndexSorted.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n      \
    \      val newElem = if (index > 0) alphabet(index - 1) else elem\n          \
    \  acc + newElem\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphznufuj.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = alphabet.indexOf(elem)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpphznufuj.scala:29:107 -----------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsSetListWithIndexSortedWithIndex\e\
    [0m = newVowelsSetListWithIndexSorted.map(\e[36melem\e[0m => elem._1 + elem._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of List[String], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpphznufuj.scala:30:111\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnewVowelsSetListWithIndexSortedWithIndexSorted\e[0m = newVowelsSetListWithIndexSortedWithIndex.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^^^^\e[0m\n\e[31m   |\e\
    [0mvalue _1 is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import concurrent.duration.durationToPair\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpphznufuj.scala:30:114 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsSetListWithIndexSortedWithIndexSorted\e\
    [0m = newVowelsSetListWithIndexSortedWithIndex.sortBy(_._1)\n\e[31m\e[31m   |\e\
    [0m   "
  stdout: ''
  timestamp: 1659978825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index) else letter)\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageStringArray = newMessageString.split(\"\")\n\
    \        val newMessageStringArrayLength = newMessageStringArray.length\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3p59rav.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3p59rav.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3p59rav.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe3p59rav.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0"
  stdout: ''
  timestamp: 1659978824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val messageArrayLength = messageArray.length\n        val newMessageArray\
    \ = Array.fill(messageArrayLength)(\"\")\n        val newMessageArrayLength =\
    \ newMessageArray.length\n        val newMessageArrayIndex = 0\n        val newMessageArrayIndexLength\
    \ = 0\n        val newMessageArrayIndexLength2 = newMessageArrayIndexLength\n\
    \        val newMessageArrayIndexLength3 = newMessageArrayIndexLength2\n     \
    \   val newMessageArrayIndexLength4 = newMessageArrayIndexLength3\n        val\
    \ newMessageArrayIndexLength5 = newMessageArrayIndexLength4\n        val newMessageArrayIndexLength6\
    \ = newMessageArrayIndexLength5\n        val newMessageArrayIndexLength7 = newMessageArrayIndexLength6\n\
    \        val newMessageArrayIndexLength8 = newMessageArrayIndexLength7\n     \
    \   val newMessageArrayIndexLength9 = newMessageArrayIndexLength8\n        val\
    \ newMessageArrayIndexLength10 = newMessageArrayIndexLength9\n        val newMessageArrayIndexLength11\
    \ = newMessageArrayIndexLength10\n        val newMessageArrayIndexLength12 = newMessageArrayIndexLength11\n\
    \        val newMessageArrayIndexLength13 = newMessageArrayIndexLength12\n   \
    \     val newMessageArrayIndexLength14 = newMessageArrayIndexLength13\n      \
    \  val newMessageArrayIndexLength15 = newMessageArrayIndexLength14\n        val\
    \ newMessageArrayIndexLength16 = newMessageArrayIndexLength15\n        val newMessageArrayIndexLength17\
    \ = newMessageArrayIndexLength16\n        val newMessageArrayIndexLength18 = newMessageArrayIndexLength17\n\
    \        val newMessageArrayIndexLength19 = newMessageArrayIndexLength18\n   \
    \     val newMessageArrayIndexLength20 = newMessageArrayIndexLength19\n      \
    \  val newMessageArrayIndexLength21 = newMessageArrayIndexLength20\n        val\
    \ newMessageArrayIndexLength22 = newMessageArrayIndexLength21\n        val newMessageArrayIndexLength23\
    \ = newMessageArrayIndexLength22\n        val newMessageArrayIndexLength24 = newMessageArrayIndexLength23\n\
    \        val newMessageArrayIndexLength25 = newMessageArrayIndexLength24\n   \
    \     val newMessageArrayIndexLength26 = newMessageArrayIndexLength25\n      \
    \  val newMessageArrayIndexLength27 = newMessageArrayIndexLength26\n        val\
    \ newMessageArrayIndexLength28 = newMessageArrayIndexLength27\n        val newMessageArrayIndexLength29\
    \ = newMessageArrayIndexLength28\n        val newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpusixnd1y.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpusixnd1y.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \ \").toList\n        val messageList2 = messageList.map(x => x.toLowerCase)\n\
    \        val messageList3 = messageList2.map(x => x.replaceAll(vowels, \"X\"))\n\
    \        val messageList4 = messageList3.map(x => x.replaceAll(alphabet, x =>\
    \ alphabet.indexOf(x) + 2))\n        val messageList5 = messageList4.map(x =>\
    \ x.replaceAll(\"X\", \"a\"))\n        messageList5.mkString(\"\")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0jhbyw5.scala:19:62\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmessageList3\e\
    [0m = messageList2.map(\e[36mx\e[0m => x.replaceAll(vowels, \e[31m\"X\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    (vowels : List[Char])\n\e[31m   |\e[0m                                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpz0jhbyw5.scala:20:62 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageList4\e[0m = messageList3.map(\e[36mx\e\
    [0m => x.replaceAll(alphabet, \e[36mx\e[0m => alphabet.indexOf(x) + \e[31m2\e\
    [0m))\n\e[31m\e[31m   |\e[0m                                                 \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      Found:    (alphabet : List[Char])\n\e[31m   |\e[0m                    \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpz0jhbyw5.scala:20:72 -----------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmessageList4\e[0m = messageList3.map(\e\
    [36mx\e[0m => x.replaceAll(alphabet, \e[36mx\e[0m => alphabet.indexOf(x) + \e\
    [31m2\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \         I could not infer the type of the parameter x.\n3 errors found\n"
  stdout: ''
  timestamp: 1659978826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ \n            letter match {\n                case vowel => vowels.indexOf(letter)\
    \ + 2\n                case letter => vowels.indexOf(letter)\n            })\n\
    \        val newMessage = newMessageList.toList\n        val newMessageString\
    \ = newMessage.toString.toUpperCase\n        val newMessageStringList = newMessageString.split(\"\
    \ \")\n        val newMessageStringList2 = newMessageStringList.map(word => \n\
    \            word match {\n                case letter => vowels.indexOf(letter)\
    \ + 2\n                case letter => vowels.indexOf(letter)\n            })\n\
    \        val newMessageString2 = newMessageStringList2.toList\n        val newMessageString3\
    \ = newMessageString2.toString.toUpperCase\n        val newMessageString4 = newMessageString3.split(\"\
    \ \")\n        val newMessageString5 = newMessageString4.map(word => \n      \
    \      word match {\n                case letter => vowels.indexOf(letter) + 2\n\
    \                case letter => vowels.indexOf(letter)\n            })\n     \
    \   val newMessageString6 = newMessageString5.toList\n        val newMessageString7\
    \ = newMessageString6.toString.toUpperCase\n        val newMessageString8 = newMessageString7.split(\"\
    \ \")\n        val newMessageString9 = newMessageString8.map(word => \n      \
    \      word match {\n                case letter => vowels.indexOf(letter) + 2\n\
    \                case letter => vowels.indexOf(letter)\n            })\n     \
    \   val newMessageString10 = newMessageString9.toList\n        val newMessageString11\
    \ = newMessageString10.toString.toUpperCase\n        val newMessageString12 =\
    \ newMessageString11.split(\" \")\n        val newMessageString13 = newMessageString12.map(word\
    \ => \n            word match {\n                case letter => vowels.indexOf(letter)\
    \ + 2\n                case letter => vowels.indexOf(letter)\n            })\n\
    \        val newMessageString14 = newMessageString13.toList\n        val newMessageString15\
    \ = newMessageString14.toString.toUpperCase\n        val newMessageString16 =\
    \ newMessageString15.split(\" \")\n        val newMessageString17 = newMessageString16.map(word\
    \ => \n            word match {\n                case letter => vowels.indexOf(letter)\
    \ + 2\n                case letter => vowels.indexOf(letter)\n            })\n\
    \        val newMessageString18 = newMessageString17.toList\n        val newMessageString19\
    \ = newMessageString18.toString.toUpperCase\n        val newMessageString20 =\
    \ newMessageString19.split(\" \")\n        val newMessageString21 = newMessageString20.map(word\
    \ => \n            word match {\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprj10zm6d.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'case' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprj10zm6d.scala:69:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmprj10zm6d.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprj10zm6d.scala:77:1\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = mutable.StringBuilder()\n\
    \        val vowelCount = message.count(vowels)\n        val letterCount = message.count(letters)\n\
    \        val newVowelCount = vowelCount - message.count(vowels.toCharArray)\n\
    \        val newLetterCount = letterCount - message.count(letters.toCharArray)\n\
    \        val newVowels = vowels.toCharArray\n        val newLetters = letters.toCharArray\n\
    \        val newVowelsCount = newVowels.size - newVowelCount\n        val newLettersCount\
    \ = newLetters.size - newLetterCount\n        val newVowelsArray = newVowels.slice(1,\
    \ newVowelsCount)\n        val newLettersArray = newLetters.slice(1, newLettersCount)\n\
    \        val newVowelsArrayLength = newVowelsArray.length\n        val newLettersArrayLength\
    \ = newLettersArray.length\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVow\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphf6npp4u.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphf6npp4u.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewVowelsArrayLength\e[0m = newVowelsArrayLength - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnewVowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphf6npp4u.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnewLettersArrayLength\e\
    [0m = newLettersArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewLettersArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewLettersArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphf6npp4u.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsArrayLength\e[0m\
    \ = newVowelsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewVowelsArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewVowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphf6npp4u.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnewLettersArrayLength\e\
    [0m = newLettersArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewLettersArrayLength is already defined as \e[33mvalu"
  stdout: ''
  timestamp: 1659978826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                vowels(index)\n            }\
    \ else {\n                letter\n            }\n        })\n        val newMessage\
    \ = messageArray.toList.mkString(\"\")\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjzogp9w0.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = vowels.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val messageList = message.split(\"\
    \ \").toList\n        var newMessage = \"\"\n        for(i <- 0 until messageList.length){\n\
    \            val currentChar = messageList(i)\n            val currentCharIndex\
    \ = alphabet.indexOf(currentChar)\n            val currentCharVowelIndex = vowels.indexOf(currentChar)\n\
    \            val newChar = if(currentCharIndex < currentCharVowelIndex) alphabet(currentCharIndex\
    \ + 2) else alphabet(currentCharIndex + 1)\n            newMessage += newChar\n\
    \        }\n        return newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjpuguym4.scala:29)\n\tat Problem.main(tmpjpuguym4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap = new mutable.HashMap[String,\
    \ String]()\n        val lettersMap = new mutable.HashMap[String, String]()\n\
    \        val newMessage = message.map(letter => {\n            if (vowels.contains(letter))\
    \ {\n                vowelsMap(letter) = lettersMap(lettersMap(letter) + letter)\n\
    \            } else {\n                lettersMap(letter) = lettersMap(letter)\
    \ + letter\n            }\n        })\n        newMessage.toString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9ocz_y6.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa9ocz_y6.scala:18:29 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mlettersMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\"){\
    \ (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            val nextIndex = index + 2\n            val nextChar = alphabet(nextIndex)\n\
    \            val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(next\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_3sba1tz.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_3sba1tz.scala:66:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3sba1tz.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mnextCharIndex\e[0m = nextCharIndex\
    \ + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextCharIndex is already defined as \e[33mvalue\e[0m \e[35mnextCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3sba1tz.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mnextChar\e[0m = alphabet(nextCharIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnextChar is already defined as \e[33mvalue\e[0m \e[35mnextChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3sba1tz.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mnextCharIndex\e[0m = alphabet.indexOf(nextChar)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextCharIndex is already defined as \e[33mvalue\e[0m \e[35mnextCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3sba1tz.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mnextCharIndex\e[0m = nextCharIndex\
    \ + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextCharIndex i"
  stdout: ''
  timestamp: 1659978829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31ldxd13.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp31ldxd13.scala:22:118\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp31ldxd13.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index >=\
    \ 0) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(1)\n\
    \                vowels(vowelIndex) = newLetter\n                newLetter\n \
    \           } else {\n                letter\n            }\n        }\n     \
    \   val newMessage = newMessageArray.toArray\n        val newMessageString = newMessage.join\n\
    \        newMessageString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt4s45j1t.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt4s45j1t.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt4s45j1t.scala:30:42\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessageString\e[0m = newMessage.join\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue join is not a\
    \ member of Array[String] - did you mean newMessage.wait?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + letter)\n       \
    \ val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersAfter.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLetters\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5anv8hs6.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5anv8hs6.scala:18:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndTwoLettersAfter\e[0m = messageWithVowelsAndTwoLettersAfter.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + letter)\n\e[31m\e[31m   |\e[0m   \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \    Recursive \e[33mvalue\e[0m \e[35mmessageWithVowelsAndTwoLettersAfter\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5anv8hs6.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(1)\n\
    \                vowels(vowelIndex) = newLetter\n                newLetter\n \
    \           } else {\n                letter\n            }\n        })\n    \
    \    newMessageArray.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp059ei8hz.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp059ei8hz.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel\n                case letter =>\
    \ vowels.indexOf(letter) + vowels.indexOf(vowel) + 1 \n            }\n       \
    \ ).mkString(\"\")\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0pev57m.scala:20:71 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m             \
    \                                                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: vowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31ldxd13.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp31ldxd13.scala:22:118\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp31ldxd13.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val nextVowel = alphabet(vowelIndex\
    \ + 2)\n                alphabet(index) match {\n                    case vowel\
    \ => nextVowel\n                    case letter => letter\n                }\n\
    \            } else {\n                alphabet(index)\n            }\n      \
    \  })\n        newMessageArray.toString.replace(\"[\", \"\")\n            .replace(\"\
    ]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpukxxbecm.scala:23:48 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                             \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \      Recursive \e[33mvalue\e[0m \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ) {\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase() else\
    \ c.toLowerCase())\n        }\n        val vowelsCount = messageList.count(vowels.contains)\n\
    \        val vowelsIndex = messageList.zipWithIndex.filter(_._2 == vowelsCount).map(_._1).last\n\
    \        val vowelsIndex = vowelsIndex.toString.toInt\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val encodedMessage = encodedMessage.replace(vowels,\
    \ vowels.charAt(vowelsIndex))\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkfvh59ec.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfvh59ec.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkfvh59ec.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = encodedMessage.replace(vowels,\
    \ vowels.charAt(vowelsIndex))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessage is already defined as \e[33mvalue\e[0m \e[35mencodedMessage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n3 errors found\n"
  stdout: ''
  timestamp: 1659978830
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ elem) => \n            val index = alphabet.indexOf(elem)\n            val nextIndex\
    \ = index + 1\n            val nextElem = alphabet(nextIndex)\n            val\
    \ nextVowel = vowels(index)\n            acc + (if (index > 0) nextVowel else\
    \ elem) + nextElem\n        }\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpbmjj27fr.scala:22)\n\tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\
    \tat Problem$.encode(tmpbmjj27fr.scala:23)\n\tat Problem$.main(tmpbmjj27fr.scala:28)\n\
    \tat Problem.main(tmpbmjj27fr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0)\n    \
    \            val newIndex = vowels.indexOf(newLetter)\n                if (newIndex\
    \ != -1) {\n                    newLetter -> vowel.charAt(newIndex)\n        \
    \        } else {\n                    letter -> vowel.charAt(0)\n           \
    \     }\n            } else {\n                letter -> letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        newMessage.foldLeft(\"\
    \")( (acc, elem) => acc + (elem._1 + elem._2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvwp7fiu0.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ charAt is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvwp7fiu0.scala:27:36\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    letter\
    \ -> vowel.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ charAt is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if(index !=\
    \ -1){\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(1)\n\
    \                vowels(vowelIndex) = newLetter\n                newLetter\n \
    \           }\n            else{\n                letter\n            }\n    \
    \    })\n        newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo42iwk2s.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo42iwk2s.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + letter + letter)\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndVowelsReplaced = messageWithVowelsAndTwoLettersBefore\n\
    \            .map(letter => vowels.indexOf(letter) + letter + letter)\n      \
    \      .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8yjc3m1d.scala:53:51 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            .map(letter => vowels.indexOf(letter) + \n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8yjc3m1d.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel, vowelIndex + 1)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage = newMessageArray.toList\n        newMessage.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0qss_zcu.scala:31)\n\tat Problem.main(tmp0qss_zcu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageList = message.split(\"\")\n\
    \        val encodedMessage = messageList.foldLeft(\"\") { (result, letter) =>\n\
    \            val index = letters.indexOf(letter)\n            val vowelIndex =\
    \ vowels.indexOf(letter)\n            if (vowelIndex != -1) {\n              \
    \  val vowel = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                val vowel =\
    \ vowels(vowelIndex)\n                result + vowel + letters(index)\n      \
    \      } else {\n                result + letter\n            }\n        }\n \
    \       encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn24k282y.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn24k282y.scala:25:20 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m                \e[33mval\e[0m \e[36mvowel\e[0m = vowels(vowelIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowel is already defined as \e[33mvalue\e[0m \e[35mvowel\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpn24k282y.scala:23:48 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => {\n\
    \            val index = vowels.indexOf(letter)\n            if (index != -1)\
    \ {\n                val vowel = vowels(index + 1)\n                val vowelIndex\
    \ = vowels.indexOf(vowel)\n                val newLetter = vowels(vowelIndex +\
    \ 2)\n                vowels(vowelIndex) = newLetter\n                vowels(vowelIndex\
    \ + 1) = newLetter\n                vowels(vowelIndex + 2) = vowel\n         \
    \   }\n            letter\n        }).mkString(\"\")\n        newMessage\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa94w49bp.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa94w49bp.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                vowels(vowelIndex\
    \ + \e[31m1\e[0m) = newLetter\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                value update is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa94w49bp.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                vowels(vowelIndex + \e[31m2\e[0m) = vowel\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value update is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659978836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageList = message.split(\"\
    \ \").toList\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem)\
    \ =>\n            val firstVowel = elem.indexOf(vowels(0))\n            val secondVowel\
    \ = elem.indexOf(vowels(1))\n            val firstLetter = elem.charAt(firstVowel)\n\
    \            val secondLetter = elem.charAt(secondVowel)\n            val firstLetterIndex\
    \ = vowels.indexOf(firstLetter)\n            val secondLetterIndex = vowels.indexOf(secondLetter)\n\
    \            val firstLetterIndex = elem.indexOf(firstLetter)\n            val\
    \ secondLetterIndex = elem.indexOf(secondLetter)\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstLetterIndex = elem.indexOf(firstLetter)\n\
    \            val secondLetterIndex = elem.indexOf(secondLetter)\n            val\
    \ firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVow\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjkmkh0vc.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjkmkh0vc.scala:66:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjkmkh0vc.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mfirstLetterIndex\e[0m = elem.indexOf(firstLetter)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstLetterIndex is already defined as \e[33mvalue\e[0m \e\
    [35mfirstLetterIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjkmkh0vc.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36msecondLetterIndex\e\
    [0m = elem.indexOf(secondLetter)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msecondLetterIndex is already defined as \e[33mvalue\e[0m \e\
    [35msecondLetterIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjkmkh0vc.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mfirstVowelIndex\e[0m\
    \ = elem.indexOf(vowels(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstVowelIndex is already defined as \e[33mvalue\e[0m \e\
    [35mfirstVowelIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjkmkh0vc.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36msecondVowelIndex\e[0m\
    \ = elem.indexOf(vowels(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659978837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage ++ newVowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1edoy1v.scala:22)\n\tat Problem.main(tmpa1edoy1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n                val newIndex = messageArray.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    messageArray(newIndex)\
    \ = letter\n                }\n                else {\n                    messageArray(index)\
    \ = letter\n                }\n            }\n            else {\n           \
    \     messageArray(letter)\n            }\n        })\n        newMessageArray.toString.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppuzwotps.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m).toUpperCase + vowel.substring(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value charAt is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppuzwotps.scala:32:29 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                messageArray(letter)\n\e[31m\e[31m  \
    \ |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                 Found:    (letter : String)\n\e[31m   |\e[0m               \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\"){ (result, letter) =>\n            val index\
    \ = vowels.indexOf(letter)\n            if (index >= 0) {\n                val\
    \ vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowel2Index = vowels.indexOf(vowel, index + 1)\n        \
    \        if (vowelIndex >= 0) {\n                    result + vowel\n        \
    \        } else if (vowel2Index >= 0) {\n                    result + vowels(vowel2Index)\
    \ + vowel\n                } else {\n                    result + vowel\n    \
    \            }\n            } else {\n                result\n            }\n\
    \        }\n        val messageWithVowelsAnd2LettersBefore = messageWithVowels.foldLeft(\"\
    \"){ (result, letter) =>\n            val index = vowels.indexOf(letter)\n   \
    \         if (index >= 0) {\n                val vowel = vowels(index)\n     \
    \           val vowelIndex = vowels.indexOf(vowel, index + 1)\n              \
    \  val vowel2Index = vowels.indexOf(vowel, index + 2)\n                if (vowelIndex\
    \ >= 0) {\n                    result + vowel\n                } else if (vowel2Index\
    \ >= 0) {\n                    result + vowels(vowel2Index) + vowel\n        \
    \        } else {\n                    result + vowel\n                }\n   \
    \         } else {\n                result\n            }\n        }\n       \
    \ val messageWithVowelsAnd3LettersBefore = messageWithVowelsAnd2LettersBefore.foldLeft(\"\
    \"){ (result, letter) =>\n            val index = vowels.indexOf(letter)\n   \
    \         if (index >= 0) {\n                val vowel = vowels(index)\n     \
    \           val vowelIndex = vowels.indexOf(vowel, index + 1)\n              \
    \  val vowel2Index = vowels.indexOf(vowel, index + 2)\n                val vowel3Index\
    \ = vowels.indexOf(vowel, index + 3)\n                if (vowelIndex >= 0) {\n\
    \                    result + vowel\n                } else if (vowel2Index >=\
    \ 0) {\n                    result + vowels(vowel2Index) + vowel\n           \
    \     } else if (vowel3Index >= 0) {\n                    result + vowels(vowel3Index)\
    \ + vowel\n                } else {\n                    result + vowel\n    \
    \            }\n            } else {\n                result\n            }\n\
    \        }\n        val messageWithVowelsAnd4LettersBefore = messageWithVowelsAnd3LettersBefore.foldLeft(\"\
    \"){ (result, letter) =>\n            val index = vowels.indexOf(letter)\n   \
    \         if (index >= 0) {\n                val vowel = vowels(index)\n     \
    \           val vowelIndex = vowels.indexOf(vowel, index + 1)\n              \
    \  val vowel2Index = vowels.indexOf(vowel, index + 2)\n                val vowel3Index\
    \ = vowels.indexOf(vowel, index + 3)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6689o1wp.scala:87:0 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6689o1wp.scala:84:5\
    \ ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6689o1wp.scala:86:1\
    \ ---------------------\e[0m\e[0m\n\e[31m86 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp6689o1wp.scala:78:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659978837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel)\n            } else\
    \ {\n                letter\n            }\n        }).mkString(\"\")\n      \
    \  encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnot6kwwu.scala:30)\n\tat Problem.main(tmpnot6kwwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => \n            vowels.contains(letter) ? letter :\
    \ \n            vowels.find(vowel => vowel.equals(messageArray(vowels.indexOf(vowel)\
    \ + 1))) \n            .getOrElse(letter))\n        encodedMessage.toString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpx8qkfy08.scala:19:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            vowels.find(\e[36mvowel\e[0m => vowel.equals(messageArray(vowels.indexOf(vowel)\
    \ + \e[31m1\e[0m))) \n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m\
    \   |\e[0m                       end of statement expected but '(' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpx8qkfy08.scala:20:30 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            .getOrElse(letter))\n\e[31m\e[31m   |\e[0m\
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \       '}' expected, but unindent found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpx8qkfy08.scala:18:36 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            vowels.contains(letter) ? letter : \n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value ? is\
    \ not a member of Boolean\n\e[31m\e[31m-- Error: /tmp/tmpx8qkfy08.scala:19:87\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     vowels.find(\e[36mvowel\e[0m => vowel.equals(messageArray(vowels.indexOf(vowel)\
    \ + \e[31m1\e[0m))) \n\e[31m\e[31m   |\e[0m                                  \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx8qkfy08.scala:31:1\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageLength = message.length\n   \
    \     val encodedMessage = mutable.Buffer.empty[String]\n        val messageArray\
    \ = message.split(\"\")\n        val vowelArray = vowels.split(\"\")\n       \
    \ val letterArray = letters.split(\"\")\n        val currentLetter = messageArray(0)\n\
    \        val currentVowel = vowelArray(0)\n        val currentLetterIndex = letterArray.indexOf(currentLetter)\n\
    \        val currentVowelIndex = vowelArray.indexOf(currentVowel)\n        val\
    \ currentVowelIndex2 = vowelArray.indexOf(currentVowel, currentLetterIndex + 1)\n\
    \        val currentVowelIndex3 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 2)\n        val currentVowelIndex4 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 3)\n        val currentVowelIndex5 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 4)\n        val currentVowelIndex6 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 5)\n        val currentVowelIndex7 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 6)\n        val currentVowelIndex8 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 7)\n        val currentVowelIndex9 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 8)\n        val currentVowelIndex10 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 9)\n        val currentVowelIndex11 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 10)\n        val currentVowelIndex12 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 11)\n        val currentVowelIndex13 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 12)\n        val currentVowelIndex14 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 13)\n        val currentVowelIndex15 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 14)\n        val currentVowelIndex16 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 15)\n        val currentVowelIndex17 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 16)\n        val currentVowelIndex18 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 17)\n        val currentVowelIndex19 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 18)\n        val current\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0rp3jb8b.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0rp3jb8b.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.Buffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0rp3jb8b.scala:45:5 ---------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + letter)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithV\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3njqp36o.scala:22:118 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3njqp36o.scala:23:170 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithV\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map { letter\
    \ =>\n            val index = vowels.indexOf(letter)\n            if (index >=\
    \ 0) letter else vowels((index + 1) % vowels.length)\n        }.mkString(\"\"\
    )\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplzvjnrmu.scala:24)\n\tat Problem.main(tmplzvjnrmu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val letters = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val newMessage = message.map(letter => letters.find(letter\
    \ => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage2 = newMessage.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage3 = newMessage2.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage4 = newMessage3.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage5 = newMessage4.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage6 = newMessage5.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage7 = newMessage6.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage8 = newMessage7.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage9 = newMessage8.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage10 = newMessage9.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        val newMessage11 = newMessage10.map(letter\
    \ => letters.find(letter => letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw1qltna9.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw1qltna9.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map { letter =>\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            val nextLetter\
    \ = alphabet(index + 1)\n            if (vowelIndex != -1) {\n               \
    \ alphabet(vowelIndex) = nextLetter\n            }\n            else {\n     \
    \           alphabet(index) = nextLetter\n            }\n        }\n        encodedMessage.toString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7z2uh2jk.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                alphabet(vowelIndex) = nextLetter\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7z2uh2jk.scala:26:16 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m                alphabet(index) = nextLetter\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value update is not a\
    \ member of String\n\e[31m\e[31m-- Error: /tmp/tmp7z2uh2jk.scala:28:9 ------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        }\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e[31m\
    \   |\e[0m         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m         where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659978842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toList\n        val messageList\
    \ = message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ \n            vowels.map(vowel => \n                if (vowel == letter) vowel\
    \ \n                else vowel.charAt(vowel.indexOf(letter) + 2))\n          \
    \  .toList.flatten)\n        val newMessage = \n            newMessageList.map(letter\
    \ => \n                letter.foldLeft(\"\")(_ + _))\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1wjnrbha.scala:19:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m (vowel == letter) vowel\
    \ \n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wjnrbha.scala:20:27 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m vowel.charAt(vowel.indexOf(letter)\
    \ + \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value charAt is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1wjnrbha.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m vowel.charAt(vowel.indexOf(letter)\
    \ + \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value indexOf is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmp1wjnrbha.scala:21:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            .toList.flatten)\n\e[31m\e[31m   |\e[0m \
    \                          ^\e[0m\n\e[31m   |\e[0mno given instance of type Char\
    \ => IterableOnce[B] was found for parameter toIterableOnce of \e[33mmethod\e\
    [0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder()\n   \
    \     var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val nextChar = message.charAt(i + 1)\n    \
    \        val currentCharIndex = vowels.indexOf(currentChar)\n            val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n            if (currentCharIndex != -1 && nextCharIndex\
    \ != -1) {\n                val currentCharIndex = currentCharIndex + 1\n    \
    \            val nextCharIndex = nextCharIndex + 1\n                val currentChar\
    \ = vowels(currentCharIndex)\n                val nextChar = vowels(nextCharIndex)\n\
    \                encodedMessage.append(currentChar)\n                encodedMessage.append(nextChar)\n\
    \                i += 2\n            } else {\n                encodedMessage.append(currentChar)\n\
    \                i += 1\n            }\n        }\n        encodedMessage.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ywipytx.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8ywipytx.scala:25:39 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mcurrentCharIndex\e\
    [0m = currentCharIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                 \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Recursive\
    \ \e[33mvalue\e[0m \e[35mcurrentCharIndex\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ywipytx.scala:26:36 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex\e\
    [0m = nextCharIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \                ^\e[0m\n\e[31m   |\e[0m                                Recursive\
    \ \e[33mvalue\e[0m \e[35mnextCharIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case 0 => letter\n                case 1 => vowels(letter - 2)\n\
    \            }\n        ).mkString(\"\")\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptonpvc8q.scala:21:40 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => vowels(letter\
    \ - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.replaceAll(\"[aeiou]\", vowels)\n        val messageWithVowelsAndLetters\
    \ = messageWithVowels.replaceAll(\"[aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLetters\
    \ = messageWithVowelsAndLetters.replaceAll(\"[aeiou]\", alphabet)\n        val\
    \ messageWithVowelsAndLettersAndLettersAndLetters = messageWithVowelsAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLetters.replaceAll(\"[aeiou]\", alphabet)\n\
    \        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLetters.replaceAll(\"[aeiou]\"\
    , alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowel\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpalzz7sm1.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\e\
    [0m = messageWithVowel\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpalzz7sm1.scala:17:62 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.replaceAll(\e[31m\"[aeiou]\"\e[0m, vowels)\n\e[31m\e[31m   |\e[0m  \
    \                                                            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    (vowels : List[Char])\n\
    \e[31m   |\e[0m                                         Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpalzz7sm1.scala:18:82 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndLetters\e\
    [0m = messageWithVowels.replaceAll(\e[31m\"[aeiou]\"\e[0m, alphabet)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \           Found:    (alphabet : List[Char])\n\e[31m   |\e[0m               \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpalzz7sm1.scala"
  stdout: ''
  timestamp: 1659978844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\"){ (result, letter)\
    \ =>\n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val nextVowelIndex = vowelIndex + 2\n\
    \            val nextLetter = alphabet(nextVowelIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetterIndex\
    \ = alphabet.indexOf(nextLetter)\n            val nextVowelIndex = vowels.indexOf(nextVowel)\n\
    \            val nextLetter = alphabet(nextLetterIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter\
    \ = alphabet(nextLetterIndex)\n            val nextVowel = vowels(nextVowelIndex)\n\
    \            val nextLetterIndex = alphabet.indexOf(nextLetter)\n            val\
    \ nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter = alphabet(nextLetterIndex)\n\
    \            val nextVowel = vowels(nextVowelIndex)\n            val nextLetterIndex\
    \ = alphabet.indexOf(nextLetter)\n            val nextVowelIndex = vowels.indexOf(nextVowel)\n\
    \            val nextLetter = alphabet(nextLetterIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter\
    \ = alphabet(nextLetterIndex)\n            val nextVowel = vowels(nextVowelIndex)\n\
    \            val nextLetterIndex = alphabet.indexOf(nextLetter)\n            val\
    \ nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter = alphabet(nextLetterIndex)\n\
    \            val nextVowel = vowels(nextVowelIndex)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplvw4fukv.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplvw4fukv.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mnextVowelIndex\e[0m = vowels.indexOf(nextVowel)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplvw4fukv.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mnextLetterIndex\e[0m = alphabet.indexOf(nextLetter)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLetterIndex is already defined as \e[33mvalue\e[0m \e\
    [35mnextLetterIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplvw4fukv.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mnextVowelIndex\e[0m\
    \ = vowels.indexOf(nextVowel)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplvw4fukv.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mnextLetter\e[0m = alphabet(nextLetterIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLetter is already defined as \e[33mvalue\e[0m \e[35mnextLetter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the sam"
  stdout: ''
  timestamp: 1659978843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case 0 => letter\n            case 1 => vowels(letter -\
    \ 1) + vowels(letter - 2)\n            case 2 => vowels(letter - 1) + vowels(letter\
    \ - 2)\n            case _ => letter\n        })\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpozxo1ogg.scala:26)\n\tat Problem.main(tmpozxo1ogg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \")\n        var newMessage = \"\"\n        for(i <- 0 until\
    \ messageList.length){\n            val currentChar = messageList(i)\n       \
    \     val currentCharList = currentChar.toList\n            val newCharList =\
    \ currentCharList.map(x => if (vowels.contains(x)) x.toUpperCase() else x)\n \
    \           val newChar = newCharList.mkString(\"\")\n            newMessage +=\
    \ newChar\n        }\n        return newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2hoaden_.scala:21:81 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnewCharList\e[0m = currentCharList.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (vowels.contains(x)) x.toUpperCase() \e[33melse\e\
    [0m x)\n\e[31m\e[31m   |\e[0m                                                \
    \                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                     value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n\
    \        val messageWithVowelsAndVowelsBefore = messageWithVowels.map(letter =>\
    \ vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBefore.map(letter => vowels.indexOf(letter) + 1).map(letter\
    \ => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAnd\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnrdkm9mr.scala:21:107 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\e\
    [0m = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + \e[31m1\e[0m).map(\e[36mletter\e[0m\
    \ => vowels(letter))\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpnrdkm9mr.scala:22:122 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\e\
    [0m = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(\e\
    [36mletter\e[0m => vowels.indexOf(letter) + \e[31m1\e[0m).map(\e[36mletter\e[0m\
    \ => vowels(letter))\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnrdkm9mr.scala:23:137 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\e\
    [0m = messageWithVowelsAnd\n\e[31m\e[31m   |\e[0m                        "
  stdout: ''
  timestamp: 1659978846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val alphabet = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageList\
    \ = message.split(\" \").toList\n        val encodedMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val letter = elem.toUpperCase\n           \
    \ val vowelIndex = alphabet.indexOf(letter)\n            val vowel = vowels(vowelIndex)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val nextVowel\
    \ = alphabet(vowelIndex + 2)\n            acc += vowel + nextVowel\n        })\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp12_o735k.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp12_o735k.scala:20:38 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36mvowelIndex\e[0m = alphabet.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m   value indexOf is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp12_o735k.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            acc += vowel + nextVowel\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp12_o735k.scala:24:25 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m            acc += vowel + nextVowel\n\e[31m\e[31m   |\e[0m               \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Boolean, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => letters.charAt(i + 2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowels\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => letters.charAt(i - 2)\n \
    \       })\n        val messageWithVowelsReversedWithVowelsReversed = messageWithVowelsReversedWithVowels.reverse\n\
    \        messageWithVowelsReversedWithVowelsReversed.map(letter => letters.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => letters.charAt(i\
    \ + 2)\n        }).mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5xdrzuxi.scala:33)\n\tat Problem.main(tmp5xdrzuxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder()\n   \
    \     var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val nextChar = message.charAt(i + 1)\n    \
    \        val nextCharIndex = vowels.indexOf(nextChar)\n            if (nextCharIndex\
    \ != -1) {\n                val currentCharIndex = vowels.indexOf(currentChar)\n\
    \                val nextCharIndex = vowels.indexOf(nextChar)\n              \
    \  val nextCharIndex2 = vowels.indexOf(nextChar, nextCharIndex + 1)\n        \
    \        val currentCharIndex2 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 1)\n                val nextCharIndex3 = vowels.indexOf(nextChar, nextCharIndex2\
    \ + 1)\n                val currentCharIndex3 = vowels.indexOf(currentChar, currentCharIndex2\
    \ + 1)\n                val nextCharIndex4 = vowels.indexOf(nextChar, nextCharIndex3\
    \ + 1)\n                val currentCharIndex4 = vowels.indexOf(currentChar, currentCharIndex3\
    \ + 1)\n                val nextCharIndex5 = vowels.indexOf(nextChar, nextCharIndex4\
    \ + 1)\n                val currentCharIndex5 = vowels.indexOf(currentChar, currentCharIndex4\
    \ + 1)\n                val nextCharIndex6 = vowels.indexOf(nextChar, nextCharIndex5\
    \ + 1)\n                val currentCharIndex6 = vowels.indexOf(currentChar, currentCharIndex5\
    \ + 1)\n                val nextCharIndex7 = vowels.indexOf(nextChar, nextCharIndex6\
    \ + 1)\n                val currentCharIndex7 = vowels.indexOf(currentChar, currentCharIndex6\
    \ + 1)\n                val nextCharIndex8 = vowels.indexOf(nextChar, nextCharIndex7\
    \ + 1)\n                val currentCharIndex8 = vowels.indexOf(currentChar, currentCharIndex7\
    \ + 1)\n                val nextCharIndex9 = vowels.indexOf(nextChar, nextCharIndex8\
    \ + 1)\n                val currentCharIndex9 = vowels.indexOf(currentChar, currentCharIndex8\
    \ + 1)\n                val nextCharIndex10 = vowels.indexOf(nextChar, nextCharIndex9\
    \ + 1)\n                val currentCharIndex10 = vowels.indexOf(currentChar, currentCharIndex9\
    \ + 1)\n                val nextCharIndex11 = vowels.indexOf(nextChar, nextCharIndex10\
    \ + 1)\n                val currentCharIndex11 = vowels.indexOf(currentChar, currentCharIndex10\
    \ + 1)\n                val nextCharIndex12 = vowels.indexOf(nextChar, nextCharIndex11\
    \ + 1)\n                val currentCharIndex12 = vowels.indexOf(currentChar, currentCharIndex11\
    \ + 1)\n                val nextCharIndex13 = vowels.indexOf(nextChar, nextCharIndex12\
    \ + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3_juios9.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_juios9.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3_juios9.scala:19:8 ---------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mwhile\e[0m (i < messageLength) {\n\e[31m\e[31m   |\e[0m\
    \        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m      \
    \  Required: String\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e\
    [0m = message.charAt(i)\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnextChar\e\
    [0m = message.charAt(i + \e[31m1\e[0m)\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mnextCharIndex\e[0m = vowels.indexOf(nextChar)\n\e[31m23 |\e[0m     \
    \       \e[33mif\e[0m (nextCharIndex != -\e[31m1\e[0m) {\n\e[31m24 |\e[0m    \
    \            \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m = vowels.indexOf(currentChar)\n\
    \e[31m25 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex\e[0m = vowels.indexOf(nextChar)\n\
    \e[31m26 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex2\e[0m = vowels.indexOf(nextChar,\
    \ nextCharIndex + \e[31m1\e[0m)\n\e[31m27 |\e[0m                \e[33mval\e[0m\
    \ \e[36mcurrentCharIndex2\e[0m = vowels.indexOf(currentChar, currentCharIndex\
    \ + \e[31m1\e[0m)\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex3\e\
    [0m = vowels.indexOf(nextChar, nextCharIndex2 + \e[31m1\e[0m)\n\e[31m29 |\e[0m\
    \                \e[33mval\e[0m \e[36mcurrentCharIndex3\e[0m = vowels.indexOf(currentChar,\
    \ currentCharIndex2 + \e[31m1\e[0m)\n\e[31m30 |\e[0m                \e[33mval\e\
    [0m \e[36mnextCharIndex4\e[0m = vowels.indexOf(nextChar, nextCharIndex3 + \e[31m1\e\
    [0m)\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mcurrentCharIndex4\e\
    [0m = vow"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val nextLetter = vowels(index + 1)\n             \
    \   val newLetter = if (letter != nextLetter) letter else nextLetter\n       \
    \         (newLetter, letter)\n            } else {\n                (letter,\
    \ letter)\n            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiou]\", \"\
    $0\")\n        newMessageString.replaceAll(\"[AEIOU]\", \"$0\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpspcqh50d.scala:21:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ \e[33mif\e[0m (letter != nextLetter) letter \e[33melse\e[0m nextLetter\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.Buffer.empty[Char]\n\
    \        val vowelsCount = message.count(vowels)\n        val vowelsIndex = 0\n\
    \        val vowelsIndex2 = vowelsIndex + 1\n        val vowelsIndex3 = vowelsIndex2\
    \ + 1\n        val vowelsIndex4 = vowelsIndex3 + 1\n        val vowelsIndex5 =\
    \ vowelsIndex4 + 1\n        val vowelsIndex6 = vowelsIndex5 + 1\n        val vowelsIndex7\
    \ = vowelsIndex6 + 1\n        val vowelsIndex8 = vowelsIndex7 + 1\n        val\
    \ vowelsIndex9 = vowelsIndex8 + 1\n        val vowelsIndex10 = vowelsIndex9 +\
    \ 1\n        val vowelsIndex11 = vowelsIndex10 + 1\n        val vowelsIndex12\
    \ = vowelsIndex11 + 1\n        val vowelsIndex13 = vowelsIndex12 + 1\n       \
    \ val vowelsIndex14 = vowelsIndex13 + 1\n        val vowelsIndex15 = vowelsIndex14\
    \ + 1\n        val vowelsIndex16 = vowelsIndex15 + 1\n        val vowelsIndex17\
    \ = vowelsIndex16 + 1\n        val vowelsIndex18 = vowelsIndex17 + 1\n       \
    \ val vowelsIndex19 = vowelsIndex18 + 1\n        val vowelsIndex20 = vowelsIndex19\
    \ + 1\n        val vowelsIndex21 = vowelsIndex20 + 1\n        val vowelsIndex22\
    \ = vowelsIndex21 + 1\n        val vowelsIndex23 = vowelsIndex22 + 1\n       \
    \ val vowelsIndex24 = vowelsIndex23 + 1\n        val vowelsIndex25 = vowelsIndex24\
    \ + 1\n        val vowelsIndex26 = vowelsIndex25 + 1\n        val vowelsIndex27\
    \ = vowelsIndex26 + 1\n        val vowelsIndex28 = vowelsIndex27 + 1\n       \
    \ val vowelsIndex29 = vowelsIndex28 + 1\n        val vowelsIndex30 = vowelsIndex29\
    \ + 1\n        val vowelsIndex31 = vowelsIndex30 + 1\n        val vowelsIndex32\
    \ = vowelsIndex31 + 1\n        val vowelsIndex33 = vowelsIndex32 + 1\n       \
    \ val vowelsIndex34 = vowelsIndex33 + 1\n        val vowelsIndex35 = vowelsIndex34\
    \ + 1\n        val vowelsIndex36 = vowelsIndex35 + 1\n        val vowelsIndex37\
    \ = vowelsIndex36 + 1\n        val vowelsIndex38\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt9nmfpx0.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9nmfpx0.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.Buffer.empty[\e[35mChar\e[0m]\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpt9nmfpx0.scala:18:40 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = message.count(vowels)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Found:    (vowels : String)\n\
    \e[31m   |\e[0m                                        Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt9nmfpx0.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels(vowelIndex) = letter\n        \
    \        vowel\n            } else {\n                letter\n            }\n\
    \        })\n        val newMessage = newMessageArray.toList\n        newMessage.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp53795cc5.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels(vowelIndex) = letter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel.charAt(0).toUpperCase + vowel.substring(1)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     newMessageArray.toString.reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_8rvou_y.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowel.charAt(\e[31m0\e[0m).toUpperCase\
    \ + vowel.substring(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => letter + letter)\n        val messageWithVowelsAndTwoLettersBeforeAndVowelsReplaced\
    \ = messageWithVowelsAndTwoLettersBefore\n            .map(letter => vowels.indexOf(letter)\
    \ + 1)\n            .map(letter => vowels.indexOf(letter) + 1)\n            .map(letter\
    \ => vowels.indexOf(letter) + 1)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14izmcf3.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp14izmcf3.scala:66:5 ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage2\
    \ = message.map(letter => vowels(vowels.indexOf(letter) + 1))\n        val newMessage3\
    \ = message.map(letter => vowels(vowels.indexOf(letter) + 2))\n        val newMessage4\
    \ = message.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        val\
    \ newMessage5 = message.map(letter => alphabet(alphabet.indexOf(letter) + 3))\n\
    \        val newMessage6 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 4))\n        val newMessage7 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 5))\n        val newMessage8 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 6))\n        val newMessage9 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 7))\n        val newMessage10 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 8))\n        val newMessage11 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 9))\n        val newMessage12 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 10))\n        val newMessage13 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 11))\n        val newMessage14 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 12))\n        val newMessage15 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 13))\n        val newMessage16 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 14))\n        val newMessage17 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 15))\n        val newMessage18 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 16))\n        val newMessage19 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 17))\n        val newMessage20 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 18))\n        val newMessage21 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 19))\n        val newMessage22 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 20))\n        val newMessage23 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 21))\n        val newMessage\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjyxbesqy.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjyxbesqy.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => \n            letter match {\n                case 'a'\
    \ => alphabet(0)\n                case 'b' => alphabet(1)\n                case\
    \ 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n              \
    \  case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n        \
    \        case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n  \
    \              case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case letter => letter\n            }\n        )\n        val\
    \ newMessage2 = newMessage.map(letter => \n            letter match {\n      \
    \          case 'a' => vowels(0)\n                case 'b' => vowels(1)\n    \
    \            case 'c' => vowels(2)\n                case 'd' => vowels(3)\n  \
    \              case 'e' => vowels(4)\n                case 'f' => vowels(5)\n\
    \                case 'g' => vowels(6)\n                case 'h' => vowels(7)\n\
    \                case 'i' => vowels(8)\n                case 'j' => vowels(9)\n\
    \                case 'k' => vowels(10)\n                case 'l' => vowels(11)\n\
    \                case 'm' => vowels(12)\n                case 'n' => vowels(13)\n\
    \                case 'o' => vowels(14)\n                case 'p' => vowels(15)\n\
    \                case 'q' => vowels(16)\n                case 'r' => vowels(17)\n\
    \                case 's' => vowels(18)\n                case 't' => vowels(19)\n\
    \                case 'u' => vowels(20)\n                case 'v' => vowels(21)\n\
    \                case 'w' => vowels(22)\n                case 'x' => vowels(23)\n\
    \                case 'y' => vowels(24)\n                case 'z' => vowels(25)\n\
    \                case letter => letter\n            }\n        )\n        newMessage2.zip(newMessage).map(x\
    \ => x._1 + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9d0bjkmy.scala:79:39\
    \ --------------------\e[0m\e[0m\n\e[31m79 |\e[0m        newMessage2.zip(newMessage).map(\e\
    [36mx\e[0m => x._1 + x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Int]\n\e[31m   |\e[0m       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n                val newIndex = vowels.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    newLetter -> vowels(newIndex)\n\
    \                } else {\n                    letter -> vowel\n             \
    \   }\n            } else {\n                letter -> letter\n            }\n\
    \        })\n        newMessageArray.toList.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg26u8x30.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m).toUpperCase + vowel.substring(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\")( (acc,\
    \ elem) => {\n            val vowelIndex = vowels.indexOf(elem)\n            if(vowelIndex\
    \ != -1){\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel, vowelIndex + 1)\n                if(vowelIndex\
    \ != -1){\n                    acc + (vowel + vowels(vowelIndex))\n          \
    \      }\n                else{\n                    acc + (vowel + elem)\n  \
    \              }\n            }\n            else{\n                acc + (elem)\n\
    \            }\n        })\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpozvklsmw.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel, vowelIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                 Recursive \e[33mvalue\e[0m \e[35mvowel\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(x => x.toLowerCase).map(x\
    \ => x.toUpperCase).map(x => x.replaceAll(vowels, alphabet(alphabet.indexOf(x)\
    \ + 2)))\n        newMessage.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2tbirubs.scala:18:107\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e\
    [0m = messageList.map(\e[36mx\e[0m => x.toLowerCase).map(\e[36mx\e[0m => x.toUpperCase).map(\e\
    [36mx\e[0m => x.replaceAll(vowels, alphabet(alphabet.indexOf(x) + \e[31m2\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    (vowels : List[Char])\n\e\
    [31m   |\e[0m                                         Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2tbirubs.scala:18:123 -------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = messageList.map(\e\
    [36mx\e[0m => x.toLowerCase).map(\e[36mx\e[0m => x.toUpperCase).map(\e[36mx\e\
    [0m => x.replaceAll(vowels, alphabet(alphabet.indexOf(x) + \e[31m2\e[0m)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(x\
    \ => \n            if (vowels.contains(x)) x.toUpperCase\n            else alphabet(alphabet.indexOf(x)\
    \ + 2))\n        newMessage.toString.replace(\"[\", \"\").replace(\"]\", \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmsgq2ojm.scala:24)\n\tat Problem.main(tmpmsgq2ojm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.toCharArray\n        val encodedMessage = messageArray.map {\n   \
    \         case c if vowels.contains(c) => vowels.indexOf(c) + 2\n            case\
    \ c => c\n        }\n        new String(encodedMessage)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpj199mtq0.scala:21:12 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mnew\e[0m \e[35mString\e[0m(encodedMessage)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mconstructor\e[0m \e[35mString\e[0m in \e[33mclass\e[0m\
    \ \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: StringBuilder): String\n\
    \e[31m   |\e[0m (x$0: StringBuffer): String\n\e[31m   |\e[0m (x$0: Array[Byte]):\
    \ String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1: Int, x$2: Int): String\n\e[31m\
    \   |\e[0m (x$0: Array[Byte], x$1: java.nio.charset.Charset): String\n\e[31m \
    \  |\e[0m (x$0: Array[Byte], x$1: String): String\n\e[31m   |\e[0m (x$0: Array[Byte],\
    \ x$1: Int, x$2: Int, x$3: java.nio.charset.Charset): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int, x$2: Int, x$3: String): String\n\e[31m   |\e[0m\
    \ (x$0: Array[Byte], x$1: Int): String\n\e[31m   |\e[0m (x$0: Array[Byte], x$1:\
    \ Int, x$2: Int, x$3: Int): String\n\e[31m   |\e[0m (x$0: Array[Int], x$1: Int,\
    \ x$2: Int): String\n\e[31m   |\e[0m (x$0: Array[Char], x$1: Int, x$2: Int): String\n\
    \e[31m   |\e[0m (x$0: Array[Char]): String\n\e[31m   |\e[0m (x$0: String): String\n\
    \e[31m   |\e[0m (): String\n\e[31m   |\e[0mmatch arguments ((encodedMessage :\
    \ Array[AnyVal]))\n1 error found\n"
  stdout: ''
  timestamp: 1659978850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\"\")\n        val result = new StringBuilder\n        val vowelsMap\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap2 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap3 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap4 = new mutable.HashMap[String, String]()\n        val vowelsMap5\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap6 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap7 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap8 = new mutable.HashMap[String, String]()\n        val vowelsMap9\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap10 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap11 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap12 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap13 = new mutable.HashMap[String, String]()\n        val vowelsMap14\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap15 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap16 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap17 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap18 = new mutable.HashMap[String, String]()\n        val vowelsMap19\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap20 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap21 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap22 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap23 = new mutable.HashMap[String, String]()\n        val vowelsMap24\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap25 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap26 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap27 = new mutable.HashMap[String, String]()\n\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5ycrpfe.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj5ycrpfe.scala:20:29 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsMap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5ycrpfe.scala:21:29\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5ycrpfe.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj5ycrpfe.scala:23:29 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsMap5\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found:\
    \ mutable"
  stdout: ''
  timestamp: 1659978852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31ldxd13.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp31ldxd13.scala:22:118\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp31ldxd13.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n\
    \        val messageWithVowelsAndVowelsTwoAhead = (messageWithVowels zip vowels.drop(1)).map\
    \ { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead zip vowels.drop(2)).map { case (vowel,\
    \ vowelTwoAhead) => vowelTwoAhead + vowel }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead zip vowels.drop(3)).map\
    \ { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead zip\
    \ vowels.drop(4)).map { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel }\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels.drop(5)).map { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel\
    \ }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVow\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwfj_bxhp.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwfj_bxhp.scala:21:118\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels.drop(\e[31m5\e[0m)).map { \e[33mcase\e[0m (vowel, vowelTwoAhead)\
    \ => vowelTwoAhead + vowel }\n\e[31m\e[31m   |\e[0m                          \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwfj_bxhp.scala:22:135 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVow\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: messageWithVowelsAndVowelsTwoAheadAndVow\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwfj_bxhp.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 err"
  stdout: ''
  timestamp: 1659978853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        newMessageArray.toSeq.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk9osrzp0.scala:30)\n\tat Problem.main(tmpk9osrzp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\")( (acc, elem) => {\n \
    \           val index = alphabet.indexOf(elem)\n            val nextIndex = index\
    \ + 2\n            val nextElem = alphabet(nextIndex)\n            val newElem\
    \ = if (nextElem == elem) nextElem else elem\n            acc + newElem\n    \
    \    })\n        newMessage\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp30vccnpp.scala:22:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewElem\e[0m = \e[33mif\e\
    [0m (nextElem == elem) nextElem \e[33melse\e[0m elem\n\e[31m\e[31m   |\e[0m  \
    \                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\")\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet(i + 2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => alphabet(i + 2)\n       \
    \ })\n        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => alphabet(i + 2)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowel\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb08h2int.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb08h2int.scala:32:118\
    \ --------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpb08h2int.scala:33:144 --------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\e\
    [0m = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb08h2int.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |"
  stdout: ''
  timestamp: 1659978854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            letter match {\n                case vowel => vowels.indexOf(vowel)\
    \ + 2\n                case _ => vowels.indexOf(letter) + 2\n            }\n \
    \       ).mkString(\"\")\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20oluosu.scala:26)\n\tat Problem.main(tmp20oluosu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessageArray = messageArray.map { letter =>\n            val index\
    \ = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex\
    \ = vowelIndex + 2\n                alphabet(vowelIndex)\n            } else {\n\
    \                letter\n            }\n        }\n        newMessageArray.toString.replaceAll(\"\
    \\\\s+\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7j4a_n0r.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp7j4a_n0r.scala:23:48 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\"){\
    \ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n            if\
    \ (index != -1) {\n                val newIndex = index - 2\n                val\
    \ newChar = vowels(newIndex)\n                acc + (if (newChar.isUpper) elem.toUpperCase\
    \ else elem.toLowerCase) + newChar\n            } else {\n                acc\
    \ + elem\n            }\n        }\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9v36ykdb.scala:30)\n\tat Problem.main(tmp9v36ykdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) + 2)\n        val newMessage2 =\
    \ message.map(letter => vowels.indexOf(letter) + 1)\n        val newMessage3 =\
    \ message.map(letter => vowels.indexOf(letter))\n        val newMessage4 = message.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val newMessage5 = message.map(letter\
    \ => vowels.indexOf(letter) + 2)\n        val newMessage6 = message.map(letter\
    \ => vowels.indexOf(letter))\n        val newMessage7 = message.map(letter =>\
    \ vowels.indexOf(letter) + 1)\n        val newMessage8 = message.map(letter =>\
    \ vowels.indexOf(letter) + 2)\n        val newMessage9 = message.map(letter =>\
    \ vowels.indexOf(letter))\n        val newMessage10 = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val newMessage11 = message.map(letter => vowels.indexOf(letter)\
    \ + 2)\n        val newMessage12 = message.map(letter => vowels.indexOf(letter))\n\
    \        val newMessage13 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage14 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage15 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage16 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage17 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage18 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage19 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage20 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage21 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage22 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage23 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage24 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage25 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage26 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage27 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage28 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage29 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage30 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage31 = message.map(letter => vowels.indexOf(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_g52uqop.scala:46:64 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnewMessage31\e[0m = message.map(\e\
    [36mletter\e[0m => vowels.indexOf(\n\e[31m\e[31m   |\e[0m                    \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_g52uqop.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { x =>\n\
    \            val index = vowels.indexOf(x)\n            if (index >= 0) {\n  \
    \              val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowel2 = vowels(vowelIndex + 1)\n                val newLetter\
    \ = if (vowelIndex < vowel2.length) vowel \n                    else vowel2\n\
    \                x -> newLetter\n            } else {\n                x\n   \
    \         }\n        }\n        val newMessage = newMessageArray.toList\n    \
    \    val newMessageString = newMessage.toString.replaceAll(\"\\\\s\", \"\")\n\
    \        val newMessageStringArray = newMessageString.split(\"\")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprc25c2y9.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmprc25c2y9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc25c2y9.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc25c2y9.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc25c2y9.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659978855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) \n                vowels(vowelIndex - 2) \n            else \n      \
    \          letter)\n        val newMessage = newMessageArray.toList\n        val\
    \ newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\", \n     \
    \       new StringBuilder(vowels.head).reverse.mkString)\n        newMessageString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptos4t_tt.scala:29)\n\tat Problem.main(tmptos4t_tt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case i => vowels(i + 2)\n        })\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9dmrr9hv.scala:23)\n\tat Problem.main(tmp9dmrr9hv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => \n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val vowel = vowels(vowelIndex)\n     \
    \       val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcpc9gi2f.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcpc9gi2f.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcpc9gi2f.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcpc9gi2f.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcpc9gi2f.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcpc"
  stdout: ''
  timestamp: 1659978855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage = messageArray.toList.mkString(\"\")\n        val newMessageArray2\
    \ = newMessage.split(\"\")\n        val newMessageArray3 = newMessageArray2.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n        val newMessage2\
    \ = newMessageArray3.toList.mkString(\"\")\n        val newMessageArray4 = newMessage2.split(\"\
    \")\n        val newMessageArray5 = newMessageArray4.map(letter => \n        \
    \    if (vowels.contains(letter)) letter else \n                vowels.find(vowel\
    \ => vowel.equals(letter)).get.charAt(2))\n        val newMessage3 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage3.split(\"\")\n        val newMessageArray7\
    \ = newMessageArray6.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage4 = newMessageArray7.toList.mkString(\"\")\n        val\
    \ newMessageArray8 = newMessage4.split(\"\")\n        val newMessageArray9 = newMessageArray8.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n        val newMessage5\
    \ = newMessageArray9.toList.mkString(\"\")\n        val newMessageArray10 = newMessage5.split(\"\
    \")\n        val newMessageArray11 = newMessageArray10.map(letter => \n      \
    \      if (vowels.contains(letter)) letter else \n                vowels.find(vowel\
    \ => vowel.equals(letter)).get.charAt(2))\n        val newMessage6 = newMessageArray11.toList.mkString(\"\
    \")\n        val newMessageArray12 = newMessage6.split(\"\")\n        val newMessageArray13\
    \ = newMessageArray12.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage7 = newMessageArray13.toList.mkString(\"\")\n        val\
    \ newMessageArray14 = newMessage7.split(\"\")\n        val newMessageArray15 =\
    \ newMessageArray14.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyq8ivy_9.scala:53:52 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            \e[33mif\e[0m (vowels.contains(letter)) letter\
    \ \e[33melse\e[0m \n\e[31m\e[31m   |\e[0m                                    \
    \                ^\e[0m\n\e[31m   |\e[0m                                  expression\
    \ expected but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpyq8ivy_9.scala:55:5 ---------------------\e[0m\e\
    [0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978855
