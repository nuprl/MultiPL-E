language: scala
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) => {\n\
    \            val index = letters.indexOf(elem)\n            val nextIndex = letters.indexOf(elem,\
    \ index + 1)\n            val nextLetter = letters(nextIndex)\n            val\
    \ nextVowel = vowels(nextIndex)\n            val nextVowelIndex = letters.indexOf(nextVowel)\n\
    \            val nextVowelNextIndex = letters.indexOf(nextVowel, nextVowelIndex\
    \ + 1)\n            val nextVowelNextLetter = letters(nextVowelNextIndex)\n  \
    \          val nextVowelNextVowel = vowels(nextVowelNextIndex)\n            val\
    \ nextVowelNextVowelIndex = letters.indexOf(nextVowelNextVowel)\n            val\
    \ nextVowelNextVowelNextIndex = letters.indexOf(nextVowelNextVowel, nextVowelNextVowelIndex\
    \ + 1)\n            val nextVowelNextVowelNextLetter = letters(nextVowelNextVowelNextIndex)\n\
    \            val nextVowelNextVowelNextVowel = vowels(nextVowelNextVowelNextIndex)\n\
    \            val nextVowelNextVowelNextVowelIndex = letters.indexOf(nextVowelNextVowelNextVowel)\n\
    \            val nextVowelNextVowelNextVowelNextIndex = letters.indexOf(nextVowelNextVowelNextVowel,\
    \ nextVowelNextVowelNextVowelIndex + 1)\n            val nextVowelNextVowelNextVowelNextLetter\
    \ = letters(nextVowelNextVowelNextVowelNextIndex)\n            val nextVowelNextVowelNextVowelNextVowel\
    \ = vowels(nextVowelNextVowelNextVowelNextIndex)\n            val nextVowelNextVowelNextVowelNextVowelIndex\
    \ = letters.indexOf(nextVowelNextVowelNextVowelNextVowel)\n            val nextVowelNextVowelNextVowelNextVowelNextIndex\
    \ = letters.indexOf(nextVowelNextVowelNextVowelNextVowel, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_xi9_g5.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_xi9_g5.scala:38:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpq_xi9_g5.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_xi9_g5.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_xi9_g5.scala:46:1\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val encodedMessageArray = ArrayBuffer.empty[String]\n        var i =\
    \ 0\n        while (i < messageArrayLength) {\n            val currentChar = messageArray(i)\n\
    \            val currentCharIndex = vowels.indexOf(currentChar)\n            if\
    \ (currentCharIndex != -1) {\n                val nextChar = vowels(currentCharIndex\
    \ + 1)\n                val nextCharIndex = vowels.indexOf(nextChar)\n       \
    \         if (nextCharIndex != -1) {\n                    val encodedChar = nextChar\
    \ + vowels(currentCharIndex + 2)\n                    encodedMessageArray.append(encodedChar)\n\
    \                }\n            }\n            i += 1\n        }\n        encodedMessageArray.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpwti_ut3n.scala:28:40 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    encodedMessageArray.append(encodedChar)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e\
    [0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems:\
    \ String*): \n\e[31m   |\e[0m  (encodedMessageArray : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): \n\e[31m   |\e[0m  (encodedMessageArray : scala.collection.mutable.ArrayBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((encodedChar : Int))\n1 error found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        var newMessage = \"\"\n        var currentLetter\
    \ = messageArray(0)\n        var currentVowel = vowels(0)\n        var currentVowelIndex\
    \ = -1\n        var currentVowelIndex2 = -1\n        var currentVowelIndex3 =\
    \ -1\n        var currentVowelIndex4 = -1\n        var currentVowelIndex5 = -1\n\
    \        var currentVowelIndex6 = -1\n        var currentVowelIndex7 = -1\n  \
    \      var currentVowelIndex8 = -1\n        var currentVowelIndex9 = -1\n    \
    \    var currentVowelIndex10 = -1\n        var currentVowelIndex11 = -1\n    \
    \    var currentVowelIndex12 = -1\n        var currentVowelIndex13 = -1\n    \
    \    var currentVowelIndex14 = -1\n        var currentVowelIndex15 = -1\n    \
    \    var currentVowelIndex16 = -1\n        var currentVowelIndex17 = -1\n    \
    \    var currentVowelIndex18 = -1\n        var currentVowelIndex19 = -1\n    \
    \    var currentVowelIndex20 = -1\n        var currentVowelIndex21 = -1\n    \
    \    var currentVowelIndex22 = -1\n        var currentVowelIndex23 = -1\n    \
    \    var currentVowelIndex24 = -1\n        var currentVowelIndex25 = -1\n    \
    \    var currentVowelIndex26 = -1\n        var currentVowelIndex27 = -1\n    \
    \    var currentVowelIndex28 = -1\n        var currentVowelIndex29 = -1\n    \
    \    var currentVowelIndex30 = -1\n        var currentVowelIndex31 = -1\n    \
    \    var currentVowelIndex32 = -1\n        var currentVowelIndex33 = -1\n    \
    \    var currentVowelIndex34 = -1\n        var currentVowelIndex35 = -1\n    \
    \    var currentVowelIndex36 = -1\n        var currentVowelIndex37 = -1\n    \
    \    var currentVowelIndex38 = -1\n        var currentVowelIndex39 = -1\n    \
    \    var currentVowelIndex40 = -1\n        var currentVowelIndex41 = -1\n    \
    \    var currentVowelIndex42 = -1\n        var currentVowelIndex43 = -1\n    \
    \    var currentVowelIndex44 = -1\n        var currentVowelIndex45 = -1\n    \
    \    var currentVowelIndex46 = -1\n        var currentVowelIndex47 = -1\n    \
    \    var currentVowelIndex48 = -1\n        var currentVowelIndex49 = -1\n    \
    \    var currentVowelIndex50 = -1\n        var currentVowelIndex51 = -1\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfy_9i0mp.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        val messageArray = message.split(\"\")\n        val vowelsArray = vowels.split(\"\
    \")\n        val vowelsSet = mutable.Set[String]()\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArraySet = mutable.Set[String]()\n \
    \       val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14x2ycr0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp14x2ycr0.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsArraySetLength\e[0m = vowelsArraySet.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m \e[35mvowelsArraySetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp14x2ycr0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsArraySetLength\e[0m = vowelsArraySet.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsArraySetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp14x2ycr0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsArraySetLength\e[0m\
    \ = vowelsArraySet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsArraySetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp14x2ycr0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsArraySetLength\e[0m\
    \ = vowelsArraySet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArraySetLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsArraySetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote tha"
  stdout: ''
  timestamp: 1659794068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val encodedMessage = messageList.foldLeft(\"\
    \") { (result, current) =>\n            val currentList = current.toUpperCase().toList\n\
    \            val currentVowels = currentList.filter(vowels.contains)\n       \
    \     val currentVowelsCount = currentVowels.map(_.length).sum\n            val\
    \ currentVowelsIndex = currentList.indexOf(currentVowels.head)\n            val\
    \ currentVowelsIndex2 = currentVowelsIndex + 2\n            val currentVowelsIndex3\
    \ = currentVowelsIndex + 3\n            val currentVowelsIndex4 = currentVowelsIndex\
    \ + 4\n            val currentVowelsIndex5 = currentVowelsIndex + 5\n        \
    \    val currentVowelsIndex6 = currentVowelsIndex + 6\n            val currentVowelsIndex7\
    \ = currentVowelsIndex + 7\n            val currentVowelsIndex8 = currentVowelsIndex\
    \ + 8\n            val currentVowelsIndex9 = currentVowelsIndex + 9\n        \
    \    val currentVowelsIndex10 = currentVowelsIndex + 10\n            val currentVowelsIndex11\
    \ = currentVowelsIndex + 11\n            val currentVowelsIndex12 = currentVowelsIndex\
    \ + 12\n            val currentVowelsIndex13 = currentVowelsIndex + 13\n     \
    \       val currentVowelsIndex14 = currentVowelsIndex + 14\n            val currentVowelsIndex15\
    \ = currentVowelsIndex + 15\n            val currentVowelsIndex16 = currentVowelsIndex\
    \ + 16\n            val currentVowelsIndex17 = currentVowelsIndex + 17\n     \
    \       val currentVowelsIndex18 = currentVowelsIndex + 18\n            val currentVowelsIndex19\
    \ = currentVowelsIndex + 19\n            val currentVowelsIndex20 = currentVowelsIndex\
    \ + 20\n            val currentVowelsIndex21 = currentVowelsIndex + 21\n     \
    \       val currentVowelsIndex22 = currentVowelsIndex + 22\n            val currentVowelsIndex23\
    \ = currentVowelsIndex + 23\n            val current\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpylgtvekr.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpylgtvekr.scala:55:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpylgtvekr.scala:18:38 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcurrentList\e[0m = current.toUpperCase().toList\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value toUpperCase is not a member of\
    \ Null\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpylgtvekr.scala:54:1\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpylgtvekr.scala:46:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel.zip(vowels.drop(vowelIndex)).map\
    \ { case (vowel1, vowel2) => vowel1 -> vowel2 }.toMap\n            } else {\n\
    \                letter -> letter\n            }\n        })\n        newMessageArray.toList.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmxoj6o6v.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowel.zip(vowels.drop(vowelIndex)).map\
    \ { \e[33mcase\e[0m (vowel1, vowel2) => vowel1 -> vowel2 }.toMap\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ zip is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toList\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\".toList\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\")( (acc, curr) => {\n\
    \            val currIndex = letters.indexOf(curr)\n            val currVowelIndex\
    \ = vowels.indexOf(curr)\n            val currVowelIndex2 = vowels.indexOf(curr\
    \ + 1, currIndex + 1)\n            val currVowelIndex3 = vowels.indexOf(curr +\
    \ 2, currIndex + 2)\n            val currVowelIndex4 = vowels.indexOf(curr + 3,\
    \ currIndex + 3)\n            val currVowelIndex5 = vowels.indexOf(curr + 4, currIndex\
    \ + 4)\n            val currVowelIndex6 = vowels.indexOf(curr + 5, currIndex +\
    \ 5)\n            val currVowelIndex7 = vowels.indexOf(curr + 6, currIndex + 6)\n\
    \            val currVowelIndex8 = vowels.indexOf(curr + 7, currIndex + 7)\n \
    \           val currVowelIndex9 = vowels.indexOf(curr + 8, currIndex + 8)\n  \
    \          val currVowelIndex10 = vowels.indexOf(curr + 9, currIndex + 9)\n  \
    \          val currVowelIndex11 = vowels.indexOf(curr + 10, currIndex + 10)\n\
    \            val currVowelIndex12 = vowels.indexOf(curr + 11, currIndex + 11)\n\
    \            val currVowelIndex13 = vowels.indexOf(curr + 12, currIndex + 12)\n\
    \            val currVowelIndex14 = vowels.indexOf(curr + 13, currIndex + 13)\n\
    \            val currVowelIndex15 = vowels.indexOf(curr + 14, currIndex + 14)\n\
    \            val currVowelIndex16 = vowels.indexOf(curr + 15, currIndex + 15)\n\
    \            val currVowelIndex17 = vowels.indexOf(curr + 16, currIndex + 16)\n\
    \            val currVowelIndex18 = vowels.indexOf(curr + 17, currIndex + 17)\n\
    \            val currVowelIndex19 = vowels.indexOf(curr + 18, currIndex + 18)\n\
    \            val currVowelIndex20 = vowels.indexOf(curr + 19, currIndex + 19)\n\
    \            val currVowelIndex21 = vowels.indexOf(curr + 20, currIndex + 20)\n\
    \            val currVowelIndex22 = vowels.indexOf(curr + 21, currIndex + 21)\n\
    \            val currVowelIndex23 = vowels.indexOf(curr + 22, currIndex + 22)\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyzmp5zv8.scala:43:15 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyzmp5zv8.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpyzmp5zv8.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyzmp5zv8.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyzmp5zv8.scala:53:1 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray\
    \ = message.toCharArray\n        val result = new StringBuilder\n        var i\
    \ = 0\n        while (i < messageArray.length) {\n            val letter = messageArray(i)\n\
    \            if (vowels(i) == letter) {\n                val nextLetter = messageArray(i\
    \ + 1)\n                val index = vowels.indexOf(letter)\n                if\
    \ (index != -1) {\n                    result.append(vowels(index))\n        \
    \            result.append(nextLetter)\n                }\n            }\n   \
    \         i += 1\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_i8a7q_.scala:34)\n\tat Problem.main(tmpa_i8a7q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            if (vowels.contains(letter)) {\n \
    \               vowels.find(vowel => vowel == letter).map(_ + letter).head\n \
    \           } else {\n                letter\n            }\n        }).mkString(\"\
    \")\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_0ivasg.scala:27)\n\tat Problem.main(tmp9_0ivasg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        }).mkString\n        val encodedMessageLength = encodedMessage.length\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp_gqgi0tu.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_gqgi0tu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(x => x.toUpperCase).mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\").toList\n        val newMessageList2\
    \ = newMessageList.map(x => vowels.indexOf(x) + 1).map(x => vowels(x)).mkString(\"\
    \")\n        val newMessageList3 = newMessageList2.split(\"\").toList\n      \
    \  val newMessageList4 = newMessageList3.map(x => vowels.indexOf(x) + 1).map(x\
    \ => vowels(x)).mkString(\"\")\n        val newMessageList5 = newMessageList4.split(\"\
    \").toList\n        val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList7 = newMessageList6.split(\"\
    \").toList\n        val newMessageList8 = newMessageList7.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList9 = newMessageList8.split(\"\
    \").toList\n        val newMessageList10 = newMessageList9.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList11 = newMessageList10.split(\"\
    \").toList\n        val newMessageList12 = newMessageList11.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList13 = newMessageList12.split(\"\
    \").toList\n        val newMessageList14 = newMessageList13.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList15 = newMessageList14.split(\"\
    \").toList\n        val newMessageList16 = newMessageList15.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList17 = newMessageList16.split(\"\
    \").toList\n        val newMessageList18 = newMessageList17.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList19 = newMessageList18.split(\"\
    \").toList\n        val newMessageList20 = newMessageList19.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList21 = newMessageList20.split(\"\
    \").toList\n        val newMessageList22 = newMessageList21.map(x \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo4hvqeeu.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo4hvqeeu.scala:39:52\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessageList22\e[0m = newMessageList21.map(x \n\e[31m\e[31m   |\e[0m   \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                                Not found: x\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4hvqeeu.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n      \
    \      val newElem = if (index != -1) alphabet(index - 1) else elem\n        \
    \    acc + (if (vowels.contains(elem)) elem else newElem)\n        })\n      \
    \  newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg87fw4xr.scala:26)\n\tat Problem.main(tmpg87fw4xr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2vlw53h.scala:22)\n\tat Problem.main(tmpu2vlw53h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndTwoCharsBefore\
    \ = messageWithVowels.replaceAll(vowels.charAt(2), vowels.charAt(3))\n       \
    \ val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfter = messageWithVowelsAndTwoCharsBefore.replaceAll(vowels.charAt(3),\
    \ vowels.charAt(4))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfter.replaceAll(vowels.charAt(4),\
    \ vowels.charAt(5))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(5),\
    \ vowels.charAt(6))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(6),\
    \ vowels.charAt(7))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(7),\
    \ vowels.charAt(8))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(8),\
    \ vowels.charAt(9))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBefore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:16:72\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e\
    [0m = message.replaceAll(vowels, vowels.charAt(\e[31m2\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:17:91\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoCharsBefore\e\
    [0m = messageWithVowels.replaceAll(vowels.charAt(\e[31m2\e[0m), vowels.charAt(\e\
    [31m3\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                      Found:    Char\n\e[31m\
    \   |\e[0m                                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:17:109\
    \ -------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoCharsBefore\e\
    [0m = messageWithVowels.replaceAll(vowels.charAt(\e[31m2\e[0m), vowels.charAt(\e\
    [31m3\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                      ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_4v_x2.scala:18:124\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndTwoCharsBeforeAndTwoCharsA"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n    \
    \    val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList\
    \ = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    )( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n        \
    \    if (index != -1) {\n                val vowelIndex = vowels.indexOf(elem)\n\
    \                if (vowelIndex != -1) {\n                    val vowel = vowels(vowelIndex)\n\
    \                    val vowelIndex = vowels.indexOf(vowel)\n                \
    \    val vowelIndex = vowelIndex + 2\n                    if (vowelIndex < vowels.length)\
    \ acc + (vowels(vowelIndex))\n                    else acc + (elem)\n        \
    \        } else acc + (elem)\n            } else acc + (elem)\n        })\n  \
    \      encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzjs9h66.scala:25:24 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mval\e[0m \e[36mvowelIndex\e\
    [0m = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpjzjs9h66.scala:24:52 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                    \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m                                        Recursive \e[33mvalue\e\
    [0m \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (index != -1 && vowelIndex != -1) {\n                val vowel\
    \ = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(index)\n\
    \            } else {\n                letter\n            }\n        }).mkString\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw7q7byro.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpw7q7byro.scala:23:48 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => \n            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(2)) + elem.toLowerCase().replaceAll(vowels, elem.toLowerCase().charAt(2))\
    \ ) \n        )\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphehgehta.scala:18:82\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(\e[31m2\e[0m)) + elem.toLowerCase().replaceAll(vowels,\
    \ elem.toLowerCase().charAt(\e[31m2\e[0m)) ) \n\e[31m\e[31m   |\e[0m         \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphehgehta.scala:18:152\
    \ -------------------\e[0m\e[0m\n\e[31m18 |\e[0m            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(\e[31m2\e[0m)) + elem.toLowerCase().replaceAll(vowels,\
    \ elem.toLowerCase().charAt(\e[31m2\e[0m)) ) \n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e[0m                                                   \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : vowels.find(letter => letter != letter + 2) match {\n           \
    \ case Some(vowel) => vowel\n            case None => letter\n        })\n   \
    \     val messageWithVowelsAndLetters = messageWithVowels.map(letter => vowels.find(letter\
    \ => letter != letter + 2) match {\n            case Some(vowel) => vowel\n  \
    \          case None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowels\
    \ = messageWithVowelsAndLetters.map(letter => vowels.find(letter => letter !=\
    \ letter + 2) match {\n            case Some(vowel) => vowel\n            case\
    \ None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowels.map(letter => vowels.find(letter\
    \ => letter != letter + 2) match {\n            case Some(vowel) => vowel\n  \
    \          case None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31yz1w3g.scala:16:100 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m =\
    \ message.map(\e[36mletter\e[0m => vowels.contains(letter) ? letter : vowels.find(letter\
    \ => letter != letter + \e[31m2\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                ')' expected, but '(' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp31yz1w3g.scala:16:70 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowels\e[0m = message.map(\e[36mletter\e\
    [0m => vowels.contains(letter) ? letter : vowels.find(letter => letter != letter\
    \ + \e[31m2\e[0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                  \
    \                                                    ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (letter : Char)\n\e\
    [31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp31yz1w3g.scala:36:126\
    \ --------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\e\
    [0m = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels.map(\e\
    [36mletter\e[0m => vowels.find(\e[36mletter\e[0m => letter != letter + \e[31m2\e\
    [0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling "
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        newMessage.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjjs1h9rk.scala:21)\n\tat Problem.main(tmpjjs1h9rk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
    \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String)\
    \ : String = {\n        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\")\n\
    \        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(letter)\n            \
    \    case letter => alphabet.indexOf(letter) + 2\n            }\n        )\n \
    \       val newMessage = messageArray.toList.mkString(\"\")\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpauhk48v_.scala:28)\n\tat Problem.main(tmpauhk48v_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794069
