name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n \
  \   // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n \
  \   def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        val sum = 0\n        lst.foreach(x => {\n            if (x\
    \ % 3 == 0) {\n                sum += x * x\n            } else if (x % 4 == 0)\
    \ {\n                sum += x * x\n            } else {\n                sum +=\
    \ x\n            }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            val isMultipleOf3 = x % 3 == 0\n            val isMultipleOf4\
    \ = x % 4 == 0\n            if (isMultipleOf3 && isMultipleOf4) {\n          \
    \      sum += x\n            } else if (isMultipleOf3) {\n                sum\
    \ += x * x\n            } else if (isMultipleOf4) {\n                sum += x\
    \ * x * x\n            }\n        })\n        sum", "        val sum = 0\n   \
    \     lst.foreach(i => {\n            if (i % 3 == 0) {\n                sum +=\
    \ i * i\n            } else if (i % 4 == 0) {\n                sum += i * i\n\
    \            } else {\n                sum += i\n            }\n        })\n \
    \       sum", "        val squares = lst.filter(x => x % 3 == 0).map(x => x *\
    \ x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x * x)\n  \
    \      squares.sum + cubes.sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                newList\
    \ += x * x\n            } else if (x % 4 == 0) {\n                newList += x\
    \ * x * x\n            } else {\n                newList += x\n            }\n\
    \        })\n        newList.sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x\n            }\
    \ else if (x % 4 == 0) {\n                sum += x\n            } else {\n   \
    \             sum += x * x\n            }\n        })\n        sum", "       \
    \ var sum = 0\n        var count = 0\n        for (i <- 0 until lst.size) {\n\
    \            if (i.toLong % 3 == 0) {\n                sum += lst(i).toLong *\
    \ lst(i).toLong\n                count += 1\n            } else if (i.toLong %\
    \ 4 == 0) {\n                sum += lst(i).toLong * lst(i).toLong\n          \
    \      count += 1\n            } else {\n                sum += lst(i).toLong\n\
    \                count += 1\n            }\n        }\n        sum", "       \
    \ val sum = 0L\n        lst.foreach(i => {\n            if (i % 3 == 0) {\n  \
    \              sum += i * i\n            } else if (i % 4 == 0) {\n          \
    \      sum += i * i\n            } else {\n                sum += i\n        \
    \    }\n        })\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{x => \n            if (x % 3 == 0) newList += x * x\n   \
    \         if (x % 4 == 0) newList += x * x * x\n            if (x % 3 != 0 &&\
    \ x % 4 != 0) newList += x\n        }\n        newList.sum", "        val result\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach { i =>\n            if (i\
    \ % 3 == 0) {\n                result += i * i\n            } else if (i % 4 ==\
    \ 0) {\n                result += i * i * i\n            } else {\n          \
    \      result += i\n            }\n        }\n        result.sum", "        var\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n\
    \            val value = lst(i)\n            if(index % 3 == 0) {\n          \
    \      sum += value * value\n            }\n            if(index % 4 == 0) {\n\
    \                sum += value * value\n            }\n        }\n        sum",
  "        val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            } else if (x % 4 == 0) {\n        \
    \        sum += x * x\n            } else {\n                sum += x\n      \
    \      }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        })\n        sum", "    \
    \    val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 3 == 0) sum += lst(i)\n            else if (i % 4 == 0) sum += lst(i) * lst(i)\n\
    \            else sum += lst(i)\n        }\n        sum", "        val sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (lst(i) % 3 == 0L || lst(i)\
    \ % 4 == 0L) {\n                sum += lst(i)\n            }\n        }\n    \
    \    sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n      \
    \      val index = i / 3\n            val value = lst(i)\n            if(index\
    \ % 3 == 0) {\n                sum += value * value\n            }\n         \
    \   else if(index % 4 == 0) {\n                sum += value * value * value\n\
    \            }\n            else {\n                sum += value\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            if(index % 3 == 0) {\n       \
    \         sum += lst(i) * lst(i)\n            }\n            else if(index % 4\
    \ == 0) {\n                sum += lst(i) * lst(i)\n            }\n           \
    \ else {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_\
    \ % 4 == 0)\n        squares.sum + cubes.sum", "        val sum = 0\n        val\
    \ squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n\
    \        squares foreach { x => sum += x * x }\n        cubes foreach { x => sum\
    \ += x * x }\n        sum", "        // Your code here\n        val sum = 0\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum\
    \ += x\n            } else if (x % 4 == 0) {\n                sum += x\n     \
    \       } else {\n                sum += x * x\n            }\n        })\n  \
    \      sum", "        val sum = 0\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                sum += x\n            } else if (x % 4 == 0)\
    \ {\n                sum += x\n            } else {\n                sum *= x\n\
    \            }\n        })\n        sum", "        // Your code here\n       \
    \ val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes\
    \ = lst.filter(x => x % 4 == 0).map(x => x * x)\n        squares.reduce(_ + _)\
    \ + cubes.reduce(_ + _)", "        val sum = 0L\n        lst.foreach{\n      \
    \      x => \n                if (x % 3 == 0) \n                    sum += x*x\n\
    \                else if (x % 4 == 0)\n                    sum += x*x*x\n    \
    \            else\n                    sum += x*x*x*x\n        }\n        sum",
  "        val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            } else if (x % 4 == 0) {\n        \
    \        sum += x * x\n            } else {\n                sum += x\n      \
    \      }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        })\n        sum", "    \
    \    val sum = 0\n        for (i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if (index != -1)\
    \ {\n                sum += lst(index) * lst(index)\n            }\n        }\n\
    \        sum", "        val sum = 0\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                sum += x * x\n            } else if (x % 4 ==\
    \ 0) {\n                sum += x * x\n            } else {\n                sum\
    \ += x\n            }\n        })\n        sum", "        val sum = 0\n      \
    \  for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            val square = if (index != -1) lst(index)\
    \ * lst(index) else 0\n            sum += square\n        }\n        sum", " \
    \       val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                val square = lst(index) * lst(index)\n                sum\
    \ += square\n            }\n        }\n        sum", "        val sum = 0\n  \
    \      lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum\
    \ += x * x\n            } else if (x % 4 == 0) {\n                sum += x * x\n\
    \            } else {\n                sum += x\n            }\n        })\n \
    \       sum", "        var sum = 0\n        for (i <- 0 until lst.size) {\n  \
    \          if (i % 3 == 0 && i % 4 == 0) {\n                sum += lst(i)\n  \
    \          } else if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i)\
    \ * lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        lst.foreach{ i =>\n  \
    \          if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0) sum += i\
    \ * i\n        }\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                newList\
    \ += x * x\n            } else if (x % 4 == 0) {\n                newList += x\
    \ * x * x\n            } else {\n                newList += x\n            }\n\
    \        })\n        newList.sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = i / 3\n            if(index % 3 == 0) {\n\
    \                sum += lst(i)\n            }\n            else if(index % 4 ==\
    \ 0) {\n                sum += lst(i)\n            }\n            else {\n   \
    \             sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        val sum = 0L\n        val lst2 = lst.filter(_ % 3 == 0)\n        val lst3\
    \ = lst.filter(_ % 4 == 0)\n        val lst4 = lst.filter(_ % 3 != 0 || _ % 4\
    \ != 0)\n        lst2.foreach(x => sum += x * x)\n        lst3.foreach(x => sum\
    \ += x * x)\n        lst4.foreach(x => sum += x * x)\n        sum", "        val\
    \ sum = 0\n        lst.foreach{x => \n            if (x % 3 == 0) sum += x*x\n\
    \            if (x % 4 == 0) sum += x*x\n        }\n        sum", "        val\
    \ squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        var sum = 0\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n      \
    \          sum += lst(i)\n            } else if (i % 4 == 0) {\n             \
    \   sum += lst(i)\n            } else {\n                sum += lst(i) * lst(i)\n\
    \            }\n        }\n        sum", "        // Your code here\n        val\
    \ sum = 0\n        lst.foreach(x => {\n            val y = if (x % 3 == 0) x *\
    \ x else x * x * x\n            sum += y\n        })\n        sum", "        var\
    \ sum = 0\n        var square = 0\n        var cube = 0\n        for(i <- 0 until\
    \ lst.size) {\n            if((i %% 3) == 0) {\n                square = lst(i)\
    \ * lst(i)\n            }\n            if((i %% 4) == 0) {\n                cube\
    \ = lst(i) * lst(i)\n            }\n            sum += lst(i)\n        }\n   \
    \     sum + square + cube", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index) * lst(index)\n\
    \            }\n        }\n        sum", "        var sum = 0\n        var count\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val x = lst(i)\n    \
    \        val y = lst(i + 1)\n            val z = lst(i + 2)\n            if((x\
    \ % 3 == 0) && (y % 4 == 0) && (z % 4 == 0)) {\n                sum += x * x *\
    \ x\n                count += 1\n            }\n        }\n        sum", "   \
    \     val sum = 0\n        lst.foreach{ x =>\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            } else if (x % 4 == 0) {\n        \
    \        sum += x * x\n            } else {\n                sum += x\n      \
    \      }\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        })\n        sum", "    \
    \    val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst(index).square\n                val cube = lst(index).cube\n\
    \                sum += square\n                sum += cube\n            }\n \
    \       }\n        sum", "        var sum = 0\n        var count = 0\n       \
    \ for (i <- 0 until lst.size) {\n            if (i % 3 == 0) {\n             \
    \   sum += lst(i)\n                count += 1\n            } else if (i % 4 ==\
    \ 0) {\n                sum += lst(i)\n                count += 1\n          \
    \  } else {\n                lst(i) = lst(i) * lst(i)\n                count +=\
    \ 1\n            }\n        }\n        sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val square = if (lst(i) % 3 == 0) lst(i)\
    \ * lst(i) else lst(i) * lst(i) * lst(i)\n            sum += square\n        }\n\
    \        sum", "        val squares = lst.filter(x => x % 3 == 0).map(x => x *\
    \ x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x)\n      \
    \  squares.sum + cubes.sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(i % 3 == 0) {\n                sum += lst(i)\n           \
    \ }\n            if(i % 4 == 0) {\n                sum += lst(i)\n           \
    \ }\n        }\n        sum", "        // Your code here\n        val sum = 0\n\
    \        lst.foreach{\n            x =>\n                val y = if (x % 3 ==\
    \ 0) x * x else x * x * x\n                sum += y\n        }\n        sum",
  "        var sum = 0\n        var i = 0\n        while (i < lst.size) {\n      \
    \      if (i % 3 == 0) {\n                sum += lst(i)\n            }\n     \
    \       else if (i % 4 == 0) {\n                sum += lst(i)\n            }\n\
    \            else {\n                sum += lst(i) * lst(i)\n            }\n \
    \           i += 1\n        }\n        sum", "        val sum = 0L\n        lst.foreach(i\
    \ => {\n            if (i % 3 == 0) {\n                sum += i * i\n        \
    \    } else if (i % 4 == 0) {\n                sum += i * i\n            } else\
    \ {\n                sum += i\n            }\n        })\n        sum", "    \
    \    val newList = mutable.ListBuffer[Long]()\n        lst.foreach{\n        \
    \    x =>\n                if (x % 3 == 0) {\n                    newList += x\
    \ * x\n                }\n                else if (x % 4 == 0) {\n           \
    \         newList += x * x * x\n                }\n                else {\n  \
    \                  newList += x\n                }\n        }\n        newList.sum",
  "        val squares = lst.filter(i => i % 3 == 0).map(i => i * i).toList\n    \
    \    val cubes = lst.filter(i => i % 4 == 0).map(i => i * i).toList\n        squares.sum\
    \ + cubes.sum", "        val squares = lst.filter(i => i % 3 == 0)\n        val\
    \ cubes = lst.filter(i => i % 4 == 0)\n        squares.sum + cubes.sum", "   \
    \     val sum = 0\n        for(i <- 0 until lst.size) {\n            if(i % 3\
    \ == 0) {\n                sum += lst(i)\n            }\n            if(i % 4\
    \ == 0) {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        // Your code goes here\n        val sum = 0\n        lst.foreach{\n   \
    \         x =>\n                if(x % 3 == 0){\n                    sum += x*x\n\
    \                }\n                if(x % 4 == 0){\n                    sum +=\
    \ x*x*x\n                }\n        }\n        sum", "        val sum = 0\n  \
    \      lst.foreach(x => if (x % 3 == 0) sum += x*x else if (x % 4 == 0) sum +=\
    \ x*x*x else sum += x))\n        sum", "        // Write your code here\n    \
    \    val sum = 0\n        for(i <- 0 until lst.size) {\n            val index\
    \ = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index != -1)\
    \ {\n                sum += lst(index) * lst(index)\n            }\n        }\n\
    \        sum", "        var sum = 0\n        for(i <- 0 until lst.size) {\n  \
    \          val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n       \
    \     if(index != -1) {\n                sum += lst(index) * lst(index)\n    \
    \        }\n        }\n        sum", "        val sum = 0\n        lst.foreach\
    \ { x =>\n            if (x % 3 == 0 && x % 4 == 0) sum += x\n            if (x\
    \ % 3 == 0) sum += x * x\n            if (x % 4 == 0) sum += x * x * x\n     \
    \   }\n        sum", "        val sum = 0L\n        lst.foreach(i => {\n     \
    \       if (i % 3 == 0) {\n                sum += i * i\n            } else if\
    \ (i % 4 == 0) {\n                sum += i * i\n            } else {\n       \
    \         sum += i\n            }\n        })\n        sum", "        val sum\
    \ = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) sum += x * x\n\
    \            if (x % 4 == 0) sum += x * x\n        })\n        sum", "       \
    \ // Your code goes here\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{\n            x =>\n                if (x % 3 == 0) {\n \
    \                   result += x * x\n                }\n                else if\
    \ (x % 4 == 0) {\n                    result += x * x\n                }\n   \
    \             else {\n                    result += x\n                }\n   \
    \     }\n        result.sum", "        val sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i)\n       \
    \     } else {\n                sum += lst(i) * lst(i)\n            }\n      \
    \  }\n        sum", "        var sum = 0\n        var square = 0\n        var\
    \ cube = 0\n        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            val value = lst.apply(index)\n   \
    \         sum += value\n            square += value * value\n            cube\
    \ += value * value * value\n        }\n        sum", "        val sum = 0\n  \
    \      for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst.apply(index).square\n                val cube = lst.apply(index).cube\n\
    \                sum += square\n                sum += cube\n            }\n \
    \       }\n        sum", "        val sum = 0\n        lst.foreach(x => if (x\
    \ % 3 == 0) sum += x * x else if (x % 4 == 0) sum += x * x * x else sum += x))\n\
    \        sum", "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach{x\
    \ => \n            val isMultipleOf3 = x % 3 == 0\n            val isMultipleOf4\
    \ = x % 4 == 0\n            if(isMultipleOf3 || isMultipleOf4){\n            \
    \    result += x\n            }\n        }\n        result.sum", "        val\
    \ sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n       \
    \         val square = x * x\n                sum += square\n            }\n \
    \           if (x % 4 == 0) {\n                val cube = x * x\n            \
    \    sum += cube\n            }\n        })\n        sum", "        val sum =\
    \ 0L\n        val lst2 = lst.filter(_ % 3 == 0)\n        val lst3 = lst.filter(_\
    \ % 4 == 0)\n        lst2.foreach(x => sum += x * x)\n        lst3.foreach(x =>\
    \ sum += x * x)\n        sum", "        // Write your code here\n        val sum\
    \ = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n           \
    \     sum += x * x\n            }\n            if (x % 4 == 0) {\n           \
    \     sum += x * x\n            }\n        })\n        sum", "        var sum\
    \ = 0\n        for (i <- 0 until lst.size) {\n            if (lst(i) % 3 == 0\
    \ || lst(i) % 4 == 0) {\n                sum += lst(i)\n            }\n      \
    \  }\n        sum", "        val sum = 0L\n        val lst2 = lst.filter(_ % 3\
    \ == 0 || _ % 4 == 0).map(_ * _)\n        lst.foreach{x => sum += x}\n       \
    \ lst2.foreach{x => sum += x}\n        sum", "        val squares = lst.filter(x\
    \ => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x => x % 4 ==\
    \ 0).map(x => x * x * x)\n        squares.sum + cubes.sum", "        // Your code\
    \ here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n          \
    \  val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n            if(index\
    \ != -1) {\n                val value = lst(index)\n                if(value %\
    \ 3 == 0 || value % 4 == 0) {\n                    sum += value * value\n    \
    \            }\n            }\n        }\n        sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val index = i / 3\n       \
    \     if(index == 0) sum += lst(i)\n            else if(index == 1) sum += lst(i)\
    \ * lst(i)\n            else if(index == 2) sum += lst(i) * lst(i) * lst(i)\n\
    \            else sum += lst(i) * lst(i) * lst(i) * lst(i)\n        }\n      \
    \  sum", "        val sum = 0\n        for (i <- 0 until lst.size) {\n       \
    \     if (i % 3 == 0) {\n                sum += lst(i)\n            } else if\
    \ (i % 4 == 0) {\n                sum += lst(i)\n            } else {\n      \
    \          sum += lst(i) * lst(i)\n            }\n        }\n        sum", " \
    \       val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares + cubes", "        val squares = lst.filter(_\
    \ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n        squares.sum +\
    \ cubes.sum", "        var sum = 0\n        for(i <- 0 until lst.size) {\n   \
    \         val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n        \
    \    if(index != -1) {\n                sum += lst(index) * lst(index)\n     \
    \       }\n        }\n        sum", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) newList += x * x\n  \
    \          if (x % 4 == 0) newList += x * x\n            if (x % 3 != 0 && x %\
    \ 4 != 0) newList += x * x\n        })\n        newList.sum", "        val sum\
    \ = 0\n        lst.foreach{i =>\n            if (i % 3 == 0 && i % 4 == 0) sum\
    \ += i\n            if (i % 3 == 0) sum += i * i\n            if (i % 4 == 0)\
    \ sum += i * i * i\n        }\n        sum", "        val squares = lst.filter(x\
    \ => x % 3 == 0).map(x => x * x)\n        val cubes = lst.filter(x => x % 4 ==\
    \ 0).map(x => x * x)\n        squares.sum + cubes.sum", "        val squares =\
    \ lst.map(x => if (x % 3 == 0) x * x else x * x * x)\n        val cubes = lst.map(x\
    \ => if (x % 4 == 0) x * x * x else x * x * x * x)\n        squares.sum + cubes.sum",
  "        val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val\
    \ cubes = lst.filter(x => x % 4 == 0).map(x => x * x)\n        squares.sum + cubes.sum",
  "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach{\n   \
    \         i =>\n                if (i % 3 == 0) result += i * i\n            \
    \    if (i % 4 == 0) result += i * i\n                if (i % 3 != 0 || i % 4\
    \ != 0) result -= i * i\n        }\n        result.sum", "        val squares\
    \ = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n     \
    \   squares.sum + cubes.sum", "        val sum = 0\n        lst.foreach(i => {\n\
    \            if (i % 3 == 0) {\n                sum += i * i\n            } else\
    \ if (i % 4 == 0) {\n                sum += i * i\n            } else {\n    \
    \            sum += i\n            }\n        })\n        sum", "        val sum\
    \ = 0\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n \
    \           val mod = i %% 3\n            if(mod != 0 && mod != 1) {\n       \
    \         sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        for (i <- 0 until lst.size) {\n            if (i % 3 == 0)\
    \ {\n                sum += lst(i)\n            }\n            if (i % 4 == 0)\
    \ {\n                sum += lst(i)\n            }\n        }\n        sum", " \
    \       val sum = 0\n        lst.foreach{i =>\n            if (i % 3 == 0) {\n\
    \                sum += i * i\n            }\n            if (i % 4 == 0) {\n\
    \                sum += i * i\n            }\n        }\n        sum", "     \
    \   val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val squares\
    \ = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n     \
    \   squares.sum + cubes.sum", "        val sum = 0\n        val sq = lst.map(x\
    \ => if (x % 3 == 0) x * x else x * x * x)\n        val cu = lst.map(x => if (x\
    \ % 4 == 0) x * x else x * x * x * x)\n        val res = sq.sum + cu.sum\n   \
    \     res", "        // Your code here\n        val sum = 0\n        lst.foreach(x\
    \ => {\n            val index = x % 3\n            if (index == 0) sum += x\n\
    \            else if (index == 1) sum += x * x\n            else if (index ==\
    \ 2) sum += x * x * x\n        })\n        sum", "        val sum = 0\n      \
    \  lst.foreach{\n            x =>\n                if (x % 3 == 0) sum += x *\
    \ x\n                else if (x % 4 == 0) sum += x * x\n                else if\
    \ (x % 3 == 0 && x % 4 == 0) sum += x * x\n                else sum += x\n   \
    \     }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                sum += lst(index) * lst(index)\n\
    \            }\n        }\n        sum", "        val sum = 0\n        lst.foreach\
    \ { x =>\n            if (x % 3 == 0) sum += x * x\n            if (x % 4 == 0)\
    \ sum += x * x\n        }\n        sum", "        val squares = lst.filter(_ %\
    \ 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        squares.sum + cubes.sum", "        var sum = 0\n        var sumOfSquares\
    \ = 0\n        var squareOfSum = 0\n        var squareOfSumOfSquares = 0\n   \
    \     var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n   \
    \     var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n   \
    \     var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n   \
    \     var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n   \
    \     var y = 0\n        var z = 0\n        var count = 0\n        var sumOfSquares\
    \ = 0\n        var squareOfSum = 0\n        var squareOfSumOfSquares = 0\n   \
    \     var squareOfSquareOfSum = 0\n        var squareOfSquareOfSumOfSquares =\
    \ 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOfSquares\
    \ = 0\n        var squareOfSquareOfSumOfSquares = 0\n        var squareOfSquareOfSumOf",
  "        val sum = 0L\n        lst.foreach{x => if (x % 3 == 0 || x % 4 == 0) sum\
    \ += x * x else sum += x * x * x}\n        sum", "        val sum = 0\n      \
    \  for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x\
    \ % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n                val\
    \ value = lst(index)\n                if(value % 3 == 0 || value % 4 == 0) {\n\
    \                    sum += value * value\n                }\n            }\n\
    \        }\n        sum", "        // Your code here\n        val sum = 0\n  \
    \      for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst(index).square\n                val cube = lst(index).cube\n\
    \                sum = sum + lst(index) + square\n                sum = sum +\
    \ cube + square\n            }\n        }\n        sum", "        // Write your\
    \ code here\n        var sum = 0\n        var square = 0\n        var cube = 0\n\
    \        var temp = 0\n        for(i <- 0 until lst.size) {\n            temp\
    \ = lst(i)\n            if(i % 3 == 0) {\n                square = temp * temp\n\
    \                sum += square\n            }\n            if(i % 4 == 0) {\n\
    \                cube = temp * temp * temp\n                sum += cube\n    \
    \        }\n        }\n        return sum", "        val sum = 0\n        val\
    \ lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0)\n        lst2.foreach(x => sum +=\
    \ x * x)\n        sum", "        val squares = lst.filter(x => x % 3 == 0).map(x\
    \ => x * x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x *\
    \ x)\n        squares.sum + cubes.sum", "        val sum = 0\n        val lst2\
    \ = lst.filter(_ % 3 == 0)\n        val lst3 = lst.filter(_ % 4 == 0)\n      \
    \  val lst4 = lst.filter(_ % 4 != 0)\n        lst2.foreach(x => sum += x * x)\n\
    \        lst3.foreach(x => sum += x * x)\n        lst4.foreach(x => sum += x *\
    \ x)\n        sum", "        val sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0 && i % 4 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 3 == 0) {\n                sum += lst(i) * lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i)\
    \ * lst(i)\n            } else {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        lst.foreach(x => {\n \
    \           val isMultipleOf3 = x % 3 == 0\n            val isMultipleOf4 = x\
    \ % 4 == 0\n            if (isMultipleOf3 && isMultipleOf4) {\n              \
    \  sum += x\n            } else if (isMultipleOf3) {\n                sum += x\
    \ * x\n            } else if (isMultipleOf4) {\n                sum += x * x *\
    \ x\n            }\n        })\n        sum", "        val sum = 0\n        lst.foreach{\n\
    \            x => if (x % 3 == 0) x*x else x*x*x\n        }\n        sum", " \
    \       val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val\
    \ cubes = lst.filter(x => x % 4 == 0).map(x => x * x)\n        squares.sum + cubes.sum",
  "        val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(i => {\n            if (i % 3 == 0) {\n                squares\
    \ += i\n            } else if (i % 4 == 0) {\n                cubes += i\n   \
    \         } else {\n                squares += i * i\n                cubes +=\
    \ i * i * i\n            }\n        })\n        squares.sum", "        val sum\
    \ = 0\n        lst.foreach(i => if (i % 3 == 0) sum += i * i else sum += i * i\
    \ * i)\n        sum", "        val result = mutable.ListBuffer[Long]()\n     \
    \   lst.foreach(x => {\n            if (x % 3 == 0) {\n                result\
    \ += x * x\n            } else if (x % 4 == 0) {\n                result += x\
    \ * x\n            } else {\n                result += x\n            }\n    \
    \    })\n        result.sum", "        val sum = 0\n        lst.foreach{\n   \
    \         x => if (x % 3 == 0) x * x else x * x * x\n        }\n        sum",
  "        var sum = 0\n        var count = 0\n        lst.foreach{\n            x\
    \ => {\n                if((x % 3) == 0){\n                    sum += x\n    \
    \                count += 1\n                }\n                if((x % 4) ==\
    \ 0){\n                    sum += x\n                    count += 1\n        \
    \        }\n            }\n        }\n        sum", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 0 until lst.size) {\n            if (i % 3 == 0 && i % 4 ==\
    \ 0) {\n                newList += lst(i)\n            } else if (i % 3 == 0)\
    \ {\n                newList += lst(i) * lst(i)\n            } else if (i % 4\
    \ == 0) {\n                newList += lst(i) * lst(i) * lst(i)\n            }\
    \ else {\n                newList += lst(i)\n            }\n        }\n      \
    \  newList.sum", "        val newList = mutable.ListBuffer.empty[Long]\n     \
    \   lst.foreach { i =>\n            if (i % 3 == 0) newList += i * i\n       \
    \     if (i % 4 == 0) newList += i * i\n            if (i % 3 != 0 && i % 4 !=\
    \ 0) newList += i * i\n        }\n        newList.sum", "        val sum = 0\n\
    \        lst.foreach{x => \n            if (x % 3 == 0) \n                sum\
    \ += x*x\n            else if (x % 4 == 0) \n                sum += x*x*x\n  \
    \          else \n                sum += x*x*x*x\n        }\n        sum", " \
    \       val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0\n\
    \        lst.foreach { x =>\n            if (x % 3 == 0) {\n                sum\
    \ += x * x\n            } else if (x % 4 == 0) {\n                sum += x * x\n\
    \            } else {\n                sum += x\n            }\n        }\n  \
    \      sum", "        val sum = 0L\n        for (i <- 0 until lst.size) {\n  \
    \          if (i % 3 == 0) {\n                sum += lst(i)\n            } else\
    \ if (i % 4 == 0) {\n                sum += lst(i)\n            } else {\n   \
    \             sum += lst(i) * lst(i)\n            }\n        }\n        sum",
  "        val newList = mutable.ListBuffer.empty[Long]\n        lst.foreach{i =>\n\
    \            if (i % 3 == 0) newList += i * i\n            if (i % 4 == 0) newList\
    \ += i * i * i\n            newList += i\n        }\n        newList.sum", " \
    \       val squares = mutable.ListBuffer[Long]()\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if((i % 3) == 0) {\n      \
    \          squares += lst(i)\n            } else if((i % 4) == 0) {\n        \
    \        cubes += lst(i)\n            } else {\n                lst(i) match {\n\
    \                    case x if x % 3 == 0 => squares += lst(i)\n             \
    \       case x if x % 4 == 0 => cubes += lst(i)\n                    case _ =>\
    \ lst(i) match {\n                        case x if x % 3 == 0 => squares += lst(i)\n\
    \                        case x if x % 4 == 0 => cubes += lst(i)\n           \
    \             case _ => squares += lst(i)\n                    }\n           \
    \     }\n            }\n        }\n        squares.sum", "        // Your code\
    \ here\n        val sum = 0\n        lst.foreach(x => {\n            if (x % 3\
    \ == 0) {\n                sum += x * x\n            } else if (x % 4 == 0) {\n\
    \                sum += x * x\n            } else {\n                sum += x\n\
    \            }\n        })\n        sum", "        val squares = lst.filter(_\
    \ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_ % 4 == 0).map(_ * _)\n\
    \        squares.sum + cubes.sum", "        // Your code here\n        val result\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => {\n            if\
    \ (x % 3 == 0) {\n                result += x * x\n            } else if (x %\
    \ 4 == 0) {\n                result += x * x\n            } else {\n         \
    \       result += x\n            }\n        })\n        result.sum", "       \
    \ val sum = 0\n        lst.foreach(i => {\n            if (i % 3 == 0) {\n   \
    \             sum += i * i\n            } else if (i % 4 == 0) {\n           \
    \     sum += i * i\n            } else {\n                sum += i\n         \
    \   }\n        })\n        sum", "        val sum = 0L\n        lst.foreach(i\
    \ => {\n            if (i % 3 == 0) {\n                sum += i * i\n        \
    \    } else if (i % 4 == 0) {\n                sum += i * i * i\n            }\
    \ else {\n                sum += i\n            }\n        })\n        sum", " \
    \       val sum = 0L\n        lst.foreach(x => {\n            if (x % 3 == 0 ||\
    \ x % 4 == 0) sum += x\n        })\n        sum", "        val sum = 0L\n    \
    \    lst.foreach(i => {\n            if (i % 3 == 0) sum += i * i\n          \
    \  if (i % 4 == 0) sum += i * i\n        })\n        sum", "        val sum =\
    \ 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n             \
    \   sum += x * x\n            } else if (x % 4 == 0) {\n                sum +=\
    \ x * x\n            } else {\n                sum += x\n            }\n     \
    \   })\n        sum", "        var sum = 0L\n        var count = 0L\n        for(i\
    \ <- 0 until lst.size) {\n            if((i %% 3) == 0) {\n                sum\
    \ += lst(i)\n                count += 1\n            }\n            else if((i\
    \ %% 4) == 0) {\n                sum += lst(i)\n                count += 1\n \
    \           }\n            else {\n                sum += lst(i)\n           \
    \     count += 1\n            }\n        }\n        sum", "        val sum = 0L\n\
    \        val lst2 = lst.filter(_ % 3 == 0 || _ % 4 == 0).map(_ * _)\n        lst2.foreach(x\
    \ => sum += x)\n        sum", "        // Your code here\n        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            if(i % 3 == 0) {\n        \
    \        sum += lst(i)\n            }\n            if(i % 4 == 0) {\n        \
    \        sum += lst(i)\n            }\n        }\n        sum", "        val squares\
    \ = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n     \
    \   squares.sum + cubes.sum", "        var sum = 0\n        var i = 0\n      \
    \  while (i < lst.size) {\n            val x = lst(i)\n            if (x % 3 ==\
    \ 0) {\n                sum += x * x\n            } else if (x % 4 == 0) {\n \
    \               sum += x * x\n            } else {\n                sum += x\n\
    \            }\n            i += 1\n        }\n        sum", "        val sum\
    \ = 0\n        lst.foreach(i => if (i % 3 == 0 || i % 4 == 0) sum += i * i else\
    \ sum += i * i * i)\n        sum", "        var sum = 0\n        lst.foreach{x\
    \ =>\n            if (x % 3 == 0 && x % 4 == 0)\n                sum += x\n  \
    \          else if (x % 3 == 0)\n                sum += x * x\n            else\
    \ if (x % 4 == 0)\n                sum += x * x * x\n        }\n        sum",
  "        val squares = lst.map(x => if (x % 3 == 0) x * x else x * x * x)\n    \
    \    val cubes = lst.map(x => if (x % 4 == 0) x * x * x else x * x * x * x)\n\
    \        squares.sum + cubes.sum", "        val sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i%3 == 0 && i%4 == 0) sum += lst(i)\n         \
    \   if (i%3 == 0) sum += lst(i)*lst(i)\n            if (i%4 == 0) sum += lst(i)*lst(i)*lst(i)\n\
    \        }\n        sum", "        val sum = 0\n        lst.foreach{\n       \
    \     x => if (x % 3 == 0) x*x else x*x*x\n        }\n        sum", "        val\
    \ sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) sum += x*x\n\
    \            if (x % 4 == 0) sum += x*x*x\n        })\n        sum", "       \
    \ val sum = 0\n        for (i <- 0 until lst.size) {\n            if (lst(i) %\
    \ 3 == 0 || lst(i) % 4 == 0) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \  } else if (i % 4 == 0) {\n                sum += lst(i) * lst(i)\n        \
    \    } else {\n                sum += lst(i) * lst(i) * lst(i)\n            }\n\
    \        }\n        sum", "        var sum = 0\n        var count = 0\n      \
    \  lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum += x\
    \ * x\n                count += 1\n            } else if (x % 4 == 0) {\n    \
    \            sum += x * x\n                count += 1\n            } else {\n\
    \                sum += x\n                count += 1\n            }\n       \
    \ })\n        sum", "        // Your code goes here\n        val sum = 0\n   \
    \     lst.foreach{\n            x =>\n                if (x % 3 == 0) sum += x*x\n\
    \                else if (x % 4 == 0) sum += x*x*x\n                else sum +=\
    \ x*x*x*x\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4\
    \ == 0)\n            if(index != -1) {\n                val value = lst(index)\n\
    \                if(value % 3 == 0 || value % 4 == 0) {\n                    sum\
    \ += value * value\n                }\n            }\n        }\n        sum",
  "        val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_\
    \ % 4 == 0)\n        squares.sum + cubes.sum", "        var sum = 0\n        var\
    \ count = 0\n        for (i <- lst) {\n            if (i % 3 == 0) {\n       \
    \         sum += i\n                count += 1\n            } else if (i % 4 ==\
    \ 0) {\n                sum += i\n                count += 1\n            } else\
    \ {\n                sum += i * i\n                count += 1\n            }\n\
    \        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = lst.indexWhere(x => x % 3 == 0 || x % 4 == 0)\n \
    \           if(index != -1) {\n                val value = lst(index)\n      \
    \          sum += value * value\n            }\n        }\n        sum", "   \
    \     val squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val entry = lst(index)\n                val square = if (entry % 3 == 0) entry\
    \ * entry else entry * entry * entry\n                val cube = if (entry % 4\
    \ == 0) entry * entry * entry else entry * entry * entry * entry\n           \
    \     sum += square\n                sum += cube\n            }\n        }\n \
    \       sum", "        // Your code goes here\n        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 ==\
    \ 0 || x % 4 == 0)\n            if(index != -1) {\n                val square\
    \ = lst.apply(index).square\n                val cube = lst.apply(index).cube\n\
    \                sum = sum + square + cube\n            }\n        }\n       \
    \ sum", "        val newList = mutable.ListBuffer.empty[Long]\n        for (i\
    \ <- 0 until lst.size) {\n            if (i % 3 == 0) {\n                newList\
    \ += lst(i) * lst(i)\n            } else if (i % 4 == 0) {\n                newList\
    \ += lst(i) * lst(i)\n            } else {\n                newList += lst(i)\n\
    \            }\n        }\n        newList.sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) newList += x * x else\
    \ newList += x * x * x)\n        newList.sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{\n            x =>\n                if (x % 3 == 0) result\
    \ += x * x\n                if (x % 4 == 0) result += x * x\n        }\n     \
    \   result.sum", "        val sum = 0\n        lst.foreach{\n            x =>\n\
    \                if (x % 3 == 0) \n                    sum += x * x\n        \
    \        else if (x % 4 == 0)\n                    sum += x * x * x\n        \
    \        else\n                    sum += x\n        }\n        sum", "      \
    \  val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n  \
    \              sum += x * x\n            } else if (x % 4 == 0) {\n          \
    \      sum += x * x\n            } else {\n                sum += x\n        \
    \    }\n        })\n        sum", "        val sum = 0\n        for (i <- 0 until\
    \ lst.size) {\n            if (i % 3 == 0) {\n                sum += lst(i)\n\
    \            } else if (i % 4 == 0) {\n                sum += lst(i)\n       \
    \     } else {\n                sum += lst(i) * lst(i)\n            }\n      \
    \  }\n        sum", "        val squares = lst.filter(_ % 3 == 0)\n        val\
    \ cubes = lst.filter(_ % 4 == 0)\n        squares.sum + cubes.sum", "        val\
    \ squares = lst.filter(_ % 3 == 0).map(_ * _)\n        val cubes = lst.filter(_\
    \ % 4 == 0).map(_ * _)\n        squares.sum + cubes.sum", "        val sum = 0\n\
    \        for(i <- 0 until lst.size) {\n            val index = lst.indexWhere(x\
    \ => x % 3 == 0 || x % 4 == 0)\n            if(index != -1) {\n              \
    \  val square = lst.apply(index).square\n                val cube = lst.apply(index).cube\n\
    \                sum += square\n                sum += cube\n            }\n \
    \       }\n        sum", "        val squares = lst.filter(i => i % 3 == 0)\n\
    \        val cubes = lst.filter(i => i % 4 == 0)\n        val sums = squares.map(_\
    \ * _) + cubes.map(_ * _)\n        sums.sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{ x =>\n            if (x % 3 == 0) result += x * x\n    \
    \        if (x % 4 == 0) result += x * x\n        }\n        result.sum", "  \
    \      val sum = 0\n        lst.foreach{\n            x =>\n                if\
    \ (x % 3 == 0 || x % 4 == 0) sum += x\n        }\n        sum", "        val squares\
    \ = lst.filter(x => x % 3 == 0)\n        val cubes = lst.filter(x => x % 4 ==\
    \ 0)\n        squares.sum + cubes.sum", "        var sum = 0\n        var count\
    \ = 0\n        lst.foreach{\n            x =>\n                if((x % 3) == 0){\n\
    \                    sum += x * x\n                    count += 1\n          \
    \      }\n                if((x % 4) == 0){\n                    sum += x * x\n\
    \                    count += 1\n                }\n                if((x % 3)\
    \ != 0){\n                    sum += x * x\n                    count += 1\n \
    \               }\n                if((x % 4) != 0){\n                    sum\
    \ += x * x\n                    count += 1\n                }\n        }\n   \
    \     sum", "        // Your code here\n        val sum = 0\n        for (i <-\
    \ 0 until lst.size) {\n            if (i%3 == 0 && i%4 == 0) sum += lst(i)\n \
    \           if (i%3 == 0) sum += lst(i)\n            if (i%4 == 0) sum += lst(i)\n\
    \        }\n        sum", "        val sum = 0L\n        for (i <- 0 until lst.size)\
    \ {\n            if (i % 3 == 0) {\n                sum += lst(i)\n          \
    \  } else if (i % 4 == 0) {\n                sum += lst(i)\n            } else\
    \ {\n                sum += lst(i) * lst(i)\n            }\n        }\n      \
    \  sum", "        val sum = 0\n        val lst2 = lst.filter(_ % 3 == 0)\n   \
    \     val lst3 = lst.filter(_ % 4 == 0)\n        val lst4 = lst.filter(_ % 3 !=\
    \ 0 || _ % 4 != 0)\n        lst2.foreach(x => sum += x * x)\n        lst3.foreach(x\
    \ => sum += x * x)\n        lst4.foreach(x => sum += x * x)\n        sum", " \
    \       val sum = 0\n        lst.foreach{\n            x => \n               \
    \ val y = if (x % 3 == 0) x * x else x * x * x\n                sum = sum + y\n\
    \        }\n        sum", "        val sum = 0\n        lst.foreach(x => if (x\
    \ % 3 == 0) sum += x * x else if (x % 4 == 0) sum += x * x * x else sum += x))\n\
    \        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n  \
    \          if(i % 3 == 0) {\n                sum += lst(i)\n            }\n  \
    \          if(i % 4 == 0) {\n                sum += lst(i)\n            }\n  \
    \      }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            if(index % 3 == 0) {\n       \
    \         sum += lst(i)\n            }\n            else if(index % 4 == 0) {\n\
    \                sum += lst(i)\n            }\n            else {\n          \
    \      sum += lst(i) * lst(i)\n            }\n        }\n        sum", "     \
    \   val squares = lst.filter(x => x % 3 == 0).map(x => x * x)\n        val cubes\
    \ = lst.filter(x => x % 4 == 0).map(x => x * x * x)\n        lst.filterNot(x =>\
    \ x % 3 == 0 || x % 4 == 0).sum + squares.sum + cubes.sum", "        val sum =\
    \ 0\n        lst.foreach(x => {\n            if (x % 3 == 0) sum += x * x\n  \
    \          if (x % 4 == 0) sum += x * x\n        })\n        sum", "        val\
    \ sum = 0\n        lst.foreach{i => \n            if (i % 3 == 0) sum += i * i\n\
    \            if (i % 4 == 0) sum += i * i\n        }\n        sum", "        val\
    \ sum = 0L\n        lst.foreach{x => \n            if (x % 3 == 0 && x % 4 ==\
    \ 0) sum += x\n            if (x % 3 == 0) sum += x\n            if (x % 4 ==\
    \ 0) sum += x\n        }\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => if (x % 3 == 0 || x % 4 == 0) result += x * x else result\
    \ += x * x * x)\n        result.sum", "        val sum = 0\n        lst.foreach{\n\
    \            x =>\n                if (x % 3 == 0 && x % 4 == 0)\n           \
    \         sum += x\n                else if (x % 3 == 0)\n                   \
    \ sum += x * x\n                else if (x % 4 == 0)\n                    sum\
    \ += x * x * x\n                else\n                    sum += x * x * x * x\n\
    \        }\n        sum", "        val sum = 0\n        for (i <- lst) {\n   \
    \         if (i % 3 == 0) sum += i\n            if (i % 4 == 0) sum += i * i\n\
    \        }\n        sum", "        val newList = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach{ x =>\n            if (x % 3 == 0) newList += x * x\n   \
    \         if (x % 4 == 0) newList += x * x * x\n            if (x % 3 != 0 &&\
    \ x % 4 != 0) newList += x\n        }\n        newList.sum", "        // Your\
    \ code goes here\n        val sum = 0\n        lst.foreach{\n            x =>\
    \ {\n                if (x % 3 == 0) {\n                    sum = sum + x\n  \
    \              }\n                if (x % 4 == 0) {\n                    sum =\
    \ sum + x\n                }\n            }\n        }\n        sum", "      \
    \  val sum = 0L\n        lst.foreach{\n            i =>\n                if (i\
    \ % 3 == 0) sum += i * i\n                if (i % 4 == 0) sum += i * i\n     \
    \   }\n        sum", "        // Your code goes here\n        val sum = 0\n  \
    \      lst.foreach(x => {\n            if (x % 3 == 0) {\n                val\
    \ y = x * x\n                sum += y\n            } else if (x % 4 == 0) {\n\
    \                val y = x * x * x\n                sum += y\n            } else\
    \ {\n                val y = x * x * x * x\n                sum += y\n       \
    \     }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) sum += x * x\n            if (x % 4 == 0)\
    \ sum += x * x\n        })\n        sum", "        val sum = 0\n        for(i\
    \ <- 0 until lst.size) {\n            val index = lst.indexWhere(x => x % 3 ==\
    \ 0 || x % 4 == 0)\n            if(index != -1) {\n                sum += lst(index)\
    \ * lst(index)\n            }\n        }\n        sum", "        val sum = 0\n\
    \        lst.foreach { x =>\n            if (x % 3 == 0) {\n                sum\
    \ += x\n            } else if (x % 4 == 0) {\n                sum += x\n     \
    \       } else {\n                sum *= x\n            }\n        }\n       \
    \ sum", "        val sum = 0\n        lst.foreach(x => {\n            if (x %\
    \ 3 == 0) sum += x * x\n            if (x % 4 == 0) sum += x * x\n        })\n\
    \        sum", "        val result = mutable.ListBuffer.empty[Long]\n        lst.foreach{\
    \ x =>\n            val isMultipleOf3 = x % 3 == 0\n            val isMultipleOf4\
    \ = x % 4 == 0\n            val isMultipleOf3And4 = x % 3 == 0 && x % 4 == 0\n\
    \            if (isMultipleOf3 || isMultipleOf4 || isMultipleOf3And4) {\n    \
    \            result += x * x\n            }\n        }\n        result.sum", " \
    \       val sum = 0L\n        lst.foreach{ x =>\n            if (x % 3 == 0) sum\
    \ += x*x\n            if (x % 4 == 0) sum += x*x*x\n        }\n        sum", " \
    \       val squares = lst.filter(x => x % 3 == 0)\n        val cubes = lst.filter(x\
    \ => x % 4 == 0)\n        squares.sum + cubes.sum", "        // Write your code\
    \ here\n        val sum = 0\n        for(i <- 0 until lst.size) {\n          \
    \  if(i % 3 == 0) {\n                sum += lst(i)\n            }\n          \
    \  if(i % 4 == 0) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n  \
    \          if(i % 3 == 0 && i % 4 == 0) {\n                sum += lst(i)\n   \
    \         }\n            else if(i % 3 == 0) {\n                sum += lst(i)\
    \ * lst(i)\n            }\n            else if(i % 4 == 0) {\n               \
    \ sum += lst(i) * lst(i) * lst(i)\n            }\n            else {\n       \
    \         sum += lst(i)\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n       \
    \         sum += x * x\n            } else if (x % 4 == 0) {\n               \
    \ sum += x * x\n            } else {\n                sum += x\n            }\n\
    \        })\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{\n            i =>\n                if (i % 3 == 0) newList\
    \ += i * i\n                if (i % 4 == 0) newList += i * i\n               \
    \ newList += i\n        }\n        newList.sum", "        val sum = 0\n      \
    \  lst.foreach{\n            x => if (x % 3 == 0) x * x else x * x * x\n     \
    \   }\n        sum"]
stop_tokens:
- "\n    }\n"
