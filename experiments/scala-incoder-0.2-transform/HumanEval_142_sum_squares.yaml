name: HumanEval_142_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"\n    // This function will take a list of integers. For all entries in\
  \ the list, the function shall square the integer entry if its index is a \n   \
  \ // multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    // change the entries in\
  \ the list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n \
  \   // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n \
  \   def sumSquares(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (6l));\n    assert(sumSquares((List[Long](1l.toLong,\
  \ 4l.toLong, 9l.toLong))) == (14l));\n    assert(sumSquares((List[Long]())) == (0l));\n\
  \    assert(sumSquares((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))) == (9l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong, -1l.toLong,\
  \ -1l.toLong))) == (-3l));\n    assert(sumSquares((List[Long](0l.toLong))) == (0l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong,\
  \ -5l.toLong))) == (-126l));\n    assert(sumSquares((List[Long](-56l.toLong, -99l.toLong,\
  \ 1l.toLong, 0l.toLong, -2l.toLong))) == (3030l));\n    assert(sumSquares((List[Long](-1l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, -1l.toLong)))\
  \ == (0l));\n    assert(sumSquares((List[Long](-16l.toLong, -9l.toLong, -2l.toLong,\
  \ 36l.toLong, 36l.toLong, 26l.toLong, -20l.toLong, 25l.toLong, -40l.toLong, 20l.toLong,\
  \ -4l.toLong, 12l.toLong, -26l.toLong, 35l.toLong, 37l.toLong))) == (-14196l));\n\
  \    assert(sumSquares((List[Long](-1l.toLong, -3l.toLong, 17l.toLong, -1l.toLong,\
  \ -15l.toLong, 13l.toLong, -1l.toLong, 14l.toLong, -14l.toLong, -12l.toLong, -5l.toLong,\
  \ 14l.toLong, -14l.toLong, 6l.toLong, 13l.toLong, 11l.toLong, 16l.toLong, 16l.toLong,\
  \ 4l.toLong, 10l.toLong))) == (-1448l));\n    }\n\n}\n"
completions: ["        val sum = 0\n        lst.foreach(x => {\n            if (x\
    \ % 3 == 0) {\n                sum += x * x\n            } else if (x % 4 == 0)\
    \ {\n                sum += x * x\n            } else {\n                sum +=\
    \ x\n            }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            val isMultipleOf3 = x % 3 == 0\n            val isMultipleOf4\
    \ = x % 4 == 0\n            if (isMultipleOf3 && isMultipleOf4) {\n          \
    \      sum += x\n            } else if (isMultipleOf3) {\n                sum\
    \ += x * x\n            } else if (isMultipleOf4) {\n                sum += x\
    \ * x * x\n            }\n        })\n        sum", "        val sum = 0\n   \
    \     lst.foreach(i => {\n            if (i % 3 == 0) {\n                sum +=\
    \ i * i\n            } else if (i % 4 == 0) {\n                sum += i * i\n\
    \            } else {\n                sum += i\n            }\n        })\n \
    \       sum", "        val squares = lst.filter(x => x % 3 == 0).map(x => x *\
    \ x)\n        val cubes = lst.filter(x => x % 4 == 0).map(x => x * x * x)\n  \
    \      squares.sum + cubes.sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                newList\
    \ += x * x\n            } else if (x % 4 == 0) {\n                newList += x\
    \ * x * x\n            } else {\n                newList += x\n            }\n\
    \        })\n        newList.sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x\n            }\
    \ else if (x % 4 == 0) {\n                sum += x\n            } else {\n   \
    \             sum += x * x\n            }\n        })\n        sum", "       \
    \ var sum = 0\n        var count = 0\n        for (i <- 0 until lst.size) {\n\
    \            if (i.toLong % 3 == 0) {\n                sum += lst(i).toLong *\
    \ lst(i).toLong\n                count += 1\n            } else if (i.toLong %\
    \ 4 == 0) {\n                sum += lst(i).toLong * lst(i).toLong\n          \
    \      count += 1\n            } else {\n                sum += lst(i).toLong\n\
    \                count += 1\n            }\n        }\n        sum", "       \
    \ val sum = 0L\n        lst.foreach(i => {\n            if (i % 3 == 0) {\n  \
    \              sum += i * i\n            } else if (i % 4 == 0) {\n          \
    \      sum += i * i\n            } else {\n                sum += i\n        \
    \    }\n        })\n        sum", "        val newList = mutable.ListBuffer[Long]()\n\
    \        lst.foreach{x => \n            if (x % 3 == 0) newList += x * x\n   \
    \         if (x % 4 == 0) newList += x * x * x\n            if (x % 3 != 0 &&\
    \ x % 4 != 0) newList += x\n        }\n        newList.sum", "        val result\
    \ = mutable.ListBuffer[Long]()\n        lst.foreach { i =>\n            if (i\
    \ % 3 == 0) {\n                result += i * i\n            } else if (i % 4 ==\
    \ 0) {\n                result += i * i * i\n            } else {\n          \
    \      result += i\n            }\n        }\n        result.sum", "        var\
    \ sum = 0\n        for(i <- 0 until lst.size) {\n            val index = i / 3\n\
    \            val value = lst(i)\n            if(index % 3 == 0) {\n          \
    \      sum += value * value\n            }\n            if(index % 4 == 0) {\n\
    \                sum += value * value\n            }\n        }\n        sum",
  "        val sum = 0\n        lst.foreach(x => {\n            if (x % 3 == 0) {\n\
    \                sum += x * x\n            } else if (x % 4 == 0) {\n        \
    \        sum += x * x\n            } else {\n                sum += x\n      \
    \      }\n        })\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => {\n            if (x % 3 == 0) {\n                sum += x * x\n        \
    \    } else if (x % 4 == 0) {\n                sum += x * x\n            } else\
    \ {\n                sum += x\n            }\n        })\n        sum", "    \
    \    val sum = 0L\n        for (i <- 0 until lst.size) {\n            if (i %\
    \ 3 == 0) sum += lst(i)\n            else if (i % 4 == 0) sum += lst(i) * lst(i)\n\
    \            else sum += lst(i)\n        }\n        sum", "        val sum = 0L\n\
    \        for (i <- 0 until lst.size) {\n            if (lst(i) % 3 == 0L || lst(i)\
    \ % 4 == 0L) {\n                sum += lst(i)\n            }\n        }\n    \
    \    sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n      \
    \      val index = i / 3\n            val value = lst(i)\n            if(index\
    \ % 3 == 0) {\n                sum += value * value\n            }\n         \
    \   else if(index % 4 == 0) {\n                sum += value * value * value\n\
    \            }\n            else {\n                sum += value\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val index = i / 3\n            if(index % 3 == 0) {\n       \
    \         sum += lst(i) * lst(i)\n            }\n            else if(index % 4\
    \ == 0) {\n                sum += lst(i) * lst(i)\n            }\n           \
    \ else {\n                sum += lst(i)\n            }\n        }\n        sum",
  "        val squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_\
    \ % 4 == 0)\n        squares.sum + cubes.sum", "        val sum = 0\n        val\
    \ squares = lst.filter(_ % 3 == 0)\n        val cubes = lst.filter(_ % 4 == 0)\n\
    \        squares foreach { x => sum += x * x }\n        cubes foreach { x => sum\
    \ += x * x }\n        sum", "        // Your code here\n        val sum = 0\n\
    \        lst.foreach(x => {\n            if (x % 3 == 0) {\n                sum\
    \ += x\n            } else if (x % 4 == 0) {\n                sum += x\n     \
    \       } else {\n                sum += x * x\n            }\n        })\n  \
    \      sum"]
stop_tokens:
- "\n    }\n"
