name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n\
  \    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => extensions_map(a) - extensions_map(b))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_",
  "        var strength = 0\n        var extension = \"\"\n        var extension_found\
    \ = false\n        for(extension <- extensions) {\n            val cap = extension.filter(x\
    \ => x.isUpper).length\n            val sm = extension.filter(x => x.isLower).length\n\
    \            val strength = cap - sm\n            if(strength > 0) {\n       \
    \         extension_found = true\n                extension = extension\n    \
    \            strength = strength\n            }\n        }\n        if(!extension_found)\
    \ {\n            val cap = extension.filter(x => x.isUpper).length\n         \
    \   val sm = extension.filter(x => x.isLower).length\n            val strength\
    \ = cap - sm\n            if(strength > 0) {\n                extension = extension\n\
    \                strength = strength\n            }\n        }\n        val class_name\
    \ = class_name.replaceAll(\"[^A-Z]\", \"\")\n        val class_name_with_extension\
    \ = class_name + extension\n        val class_name_with_extension_lowercase =\
    \ class_name_with_extension.toLowerCase()\n        val class_name_with_extension_lowercase\
    \ = class_name_with_extension_lowercase.replaceAll(\"[^a-z]\", \"\")\n       \
    \ val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase)\n        val extensions_count = extensions_map.filter(_._2\
    \ > 0).map(_._2).sum\n        val extensions_strength = extensions_map.filter(_._2\
    \ > 0).map(_._1).sum\n        val extensions_strength_fraction = extensions_strength.toDouble\
    \ / extensions_count.toDouble\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val max_strength = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_value)\n        val max_key_class_name =\
    \ class_name_map.get(max_key_value)\n        val max_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name)\n        val max_key_class_name_key_value\
    \ = extensions_map.get(max_key_class_name)\n        val max_key_class_name_key_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name\
    \ = class_name_map.get(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name)\n        val\
    \ max_key_class_name_key_class_name_key_value = extensions_map.get(max_key_class_name_key_class_name)\n\
    \        val max_key_class_name_key_class_name_key_key_index = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_index = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val max_key = extensions_map.maxBy(_._1)._1\n        val max_value = extensions_map.maxBy(_._1)._2\n\
    \        val max_key = class_name_map.maxBy(_._1)._1\n        val max_value =\
    \ class_name_map.maxBy(_._1)._2\n        val max_key = max_key.map(x => x.toString.toUpperCase.size)\n\
    \        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n   \
    \     val max_key = max_key.max\n        val max_value = max_value.max\n     \
    \   val max_key = max_key.map(x => x.toString.toUpperCase.size)\n        val max_value\
    \ = max_value.map(x => x.toString.toUpperCase.size)\n        val max_key = max_key.max\n\
    \        val max_value = max_value.max\n        val max_key = max_key.map(x =>\
    \ x.toString.toUpperCase.size)\n        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n\
    \        val max_key = max_key.max\n        val max_value = max_value.max\n  \
    \      val max_key = max_key.map(x => x.toString.toUpperCase.size)\n        val\
    \ max_value = max_value.map(x => x.toString.toUpperCase.size)\n        val max_key\
    \ = max_key.max\n        val max_value = max_value.max\n        val max_key =\
    \ max_key.map(x => x.toString.toUpperCase.size)\n        val max_value = max_value.map(x\
    \ => x.toString.toUpperCase.size)\n        val max_key = max_key.max\n       \
    \ val max_value = max_value.max\n        val max_key = max_key.map(x => x.toString.toUpperCase.size)\n\
    \        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n   \
    \     val max_key = max_key.max\n        val max_value = max_value.max\n     \
    \   val max_key = max_key.map(x => x.toString.toUpperCase.size)\n        val max_value\
    \ = max_value.map(x => x.toString.toUpperCase.size)\n        val max_key = max_key.max\n\
    \        val max_value = max_value.max\n        val max_key = max_key.map(x =>\
    \ x.toString.toUpperCase.size)\n        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n\
    \        val max_key = max_key.max\n        val max_value = max_value.max\n  \
    \      val max_key = max_key.map(x => x.toString.to", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0)((a, b) => (class_name_map.get(b) - class_name_map.get(a)).toInt)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._", "        val\
    \ extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n        val\
    \ class_name_map = class_name.zipWithIndex.toMap\n        val extensions_count\
    \ = extensions_map.size\n        val class_name_count = class_name_map.size\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val class_name_sorted =\
    \ class_name_map.toSeq.sortBy(_._2).reverse\n        val extensions_first = extensions_sorted.head._1\n\
    \        val class_name_first = class_name_sorted.head._1\n        val extensions_last\
    \ = extensions_sorted.last._1\n        val class_name_last = class_name_sorted.last._1\n\
    \        val extensions_first_index = extensions_sorted.indexOf((class_name_first,\
    \ extensions_first))\n        val class_name_first_index = class_name_sorted.indexOf((class_name_first,\
    \ extensions_first))\n        val extensions_last_index = extensions_sorted.indexOf((class_name_last,\
    \ extensions_last))\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last,\
    \ extensions_last))\n        val extensions_first_value = extensions_sorted.apply(extensions_first_index)._2\n\
    \        val class_name_first_value = class_name_sorted.apply(class_name_first_index)._2\n\
    \        val extensions_last_value = extensions_sorted.apply(extensions_last_index)._2\n\
    \        val class_name_last_value = class_name_sorted.apply(class_name_last_index)._2\n\
    \        val extensions_first_key = extensions_sorted.apply(extensions_first_index)._1\n\
    \        val class_name_first_key = class_name_sorted.apply(class_name_first_index)._1\n\
    \        val extensions_last_key = extensions_sorted.apply(extensions_last_index)._1\n\
    \        val class_name_last_key = class_name_sorted.apply(class_name_last_index)._1\n\
    \        val extensions_first_index = extensions_sorted.indexOf((class_name_first_value,\
    \ extensions_first_key))\n        val class_name_first_index = class_name_sorted.indexOf((class_name_first_value,\
    \ extensions_first_key))\n        val extensions_last_index = extensions_sorted.indexOf((class_name_last_value,\
    \ extensions_last_key))\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last_value,\
    \ extensions_last_key))\n        val extensions_first_value = extensions_sorted.apply(extensions_first_index)._2\n\
    \        val class_name_first_value = class_name_sorted.apply(class_name_first_index)._2\n\
    \        val extensions_last_value = extensions_sorted.apply(extensions_last_",
  "        val extensions_map = extensions.map(e => (e.toUpperCase, e.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(c => (c.toUpperCase, c.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((s, e) => s + (class_name_map(e._1)\
    \ - class_name_map(e._2)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_class_name\
    \ = extensions_sorted.head._1\n        if (strength == extension_strength) {\n\
    \            class_name + \".\" + extension_class_name\n        } else {\n   \
    \         class_name + \".\" + extension_class_name + \".\" + extension_strength\n\
    \        }", "        val extensions_count = extensions.map(_.length).sum\n  \
    \      val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength.toDouble / extensions_count.toDouble\n    \
    \    val strength_lower = strength.toDouble / extensions_count.toDouble\n    \
    \    val extensions_count_sum = extensions_count.toDouble\n        val extensions_count_sum_upper\
    \ = extensions_count_sum.toDouble / extensions_count.toDouble\n        val extensions_count_sum_lower\
    \ = extensions_count_sum.toDouble / extensions_count.toDouble\n        val extensions_count_sum_sum\
    \ = extensions_count_sum.toDouble\n        val extensions_count_sum_sum_upper\
    \ = extensions_count_sum_sum.toDouble / extensions_count.toDouble\n        val\
    \ extensions_count_sum_sum_lower = extensions_count_sum_sum.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sum_sum_sum = extensions_count_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_upper = extensions_count_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum.toDouble / extensions_count.toDouble\n      \
    \  val extensions_count_sum_sum_sum_sum = extensions_count_sum_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_upper = extensions_count_sum_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum_sum.toDouble / extensions_count.toDouble\n  \
    \      val extensions_count_sum_sum_sum_sum_sum = extensions_count_sum_sum_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_sum_upper = extensions_count_sum_sum_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum_sum_sum.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_sum_sum = extensions_count_sum_sum_sum_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_sum_sum_upper = extensions_count_sum_sum_sum_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum_sum_sum_sum.toDouble / extension", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).reduce(_\
    \ + _)\n        val strongest_extension = extensions_map.values.filter(x => x\
    \ == strength).head\n        class_name + \".\" + strongest_extension", "    \
    \    val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') -\
    \ e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n     \
    \   val strength = extensions_map.values.max\n        val extensions_sorted =\
    \ extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength =\
    \ extensions_sorted.head._2\n        val extension_name = extensions_sorted.head._1\n\
    \        val extension_class = extension_strength * class_name + extension_name\n\
    \        extension_class", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extension = extensions.sortWith(_ < _).head\n\
    \        val extension_length = extension.length\n        val class_name_length\
    \ = class_name.length\n        val strength_length = strength.length\n       \
    \ val extension_start = extension_length - class_name_length\n        val extension_end\
    \ = extension_start + extension_length\n        val class_name_start = class_name_length\
    \ - strength_length\n        val class_name_end = class_name_start + class_name_length\n\
    \        val strength_start = strength_length - class_name_length\n        val\
    \ strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_length\n\
    \        val strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_length\n\
    \        val strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_length\n\
    \        val strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toString.toString.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split(\"\
    \\\\.\").toList.map(x => x.capitalize).mkString\n        val strength = extensions_map.getOrElse(class_name_map,\
    \ -1)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_._2 > 0).mkString(\"\
    .\") + \".\"\n        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length).dropRight(strength.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length).drop(strength.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(strength.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(strength.length)\n   \
    \     val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sor", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((x, y) => (x._2 - y._2))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 > strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.map(x => class_name_map(x._1))\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\") + \".\"\n \
    \       extensions_sorted.mkString(class_name_map(class_name))", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1)\n        val extensions_sorted = extensions_sorted.take(strength).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\")\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(e => (e.toUpperCase,\
    \ e.toLowerCase)).toMap\n        val class_name_map = class_name.map(c => (c.toUpperCase,\
    \ c.toLowerCase)).toMap\n        val strengths = extensions_map.values.map(_.length\
    \ - class_name_map.values.map(_.length))\n        val max_strength = strengths.max\n\
    \        val max_key = extensions_map.keys.find(k => strengths.contains(k.length\
    \ - max_strength))\n        val max_value = extensions_map.get(max_key)\n    \
    \    max_key match {\n            case Some(key) => key + max_value\n        \
    \    case None => class_name\n        }", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => x)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x <\
    \ strength)\n        val extensions_sorted = extensions_sorted.reverse\n     \
    \   val extensions_sorted = extensions_sorted.mkString(\"\")\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map(x._1) - class_name_map(x._2)).sum\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(x => x._1 - x._2)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x._1 < strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => class_name_map(x._1) + x._2)\n        extensions_sorted.head",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_str = if (strength == 0) \"0\"\
    \ else strength.toString\n        val extensions_str = extensions.map(_.toString).mkString(\"\
    .\")\n        val class_name_str = class_name.substring(0, class_name.length -\
    \ extensions_str.length)\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val strength_str = if (strength == 0) \"0\" else\
    \ strength.toString\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1)).mkString(\".\")\n        val extensions_name_str = extensions.map(_.substring(0,\
    \ 1))", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a < b)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.mkString(\"\"\
    ) + \".\" + extensions_sorted.last\n        className + \".\" + extensions_sorted",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.filter(_._2.length == class_name_map.get(_._1)).length\n\
    \        val extension = extensions_map.filter(_._2.length == class_name_map.get(_._1)).minBy(_._2)\n\
    \        val extension_class = class_name_map.get(extension._1)\n        val extension_name\
    \ = extension._2\n        val extension_class_name = extension_class.substring(extension_class.lastIndexOf(\"\
    .\") + 1)\n        val extension_class_name_with_extension = extension_class_name\
    \ + \".\" + extension_name\n        val extension_class_name_without_extension\
    \ = extension_class_name.substring(0, extension_class_name.lastIndexOf(\".\"))\n\
    \        val extension_class_name_with_extension_without_extension = extension_class_name_without_extension\
    \ + \".\" + extension_name\n        val extension_class_name_with_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension + \".\" + extension_name\n\
    \        val extension_class_name_with_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_with_extension_without_extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.getOrElse(class_name, 0)\n        val strongest_extension\
    \ = extensions_map.values.max\n        val class_name_with_strongest_extension\
    \ = class_name + strongest_extension.mkString(\".\") + \".\"\n        val strongest_extension_name\
    \ = strongest_extension.mkString\n        val class_name_with_strongest_extension_with_strongest_extension_name\
    \ = class_name_with_strongest_extension + strongest_extension_name\n        val\
    \ class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name\
    \ = class_name_with_strongest_extension_with_strongest_extension_name + strongest_extension_name\n\
    \        val class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ = class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name\
    \ + strongest_extension_name + strongest_extension_name\n        val class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ = class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ + strongest_extension_name + strongest_extension_name + strongest_extension_name\n\
    \        val class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ = class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ + strongest_extension_name + strongest_extension_name + strongest_extension_name\
    \ + strongest_extension_name + strongest_extension_name\n        val class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ = class_name_with_strongest_extension_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name_with_strongest_extension_name\
    \ + strongest_extension_name + strongest_extension_name + strongest_extension_name\
    \ + strongest_extension_name + strongest_extension_name + strongest_extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_low",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => (class_name_map(x._1) - class_name_map(x._2)).sum)\n        val strongest_extension\
    \ = extensions_map.values.find(x => x._2 == strength)._1.toString\n        strongest_extension",
  "        val extensions_map = extensions.map(e => e.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val extensions_count\
    \ = extensions_map.size\n        val class_name_count = class_name_map.size\n\
    \        val extensions_strength = extensions_count - class_name_count\n     \
    \   val class_name_strength = class_name_map.get(class_name_strength).map(_._2)\n\
    \        val extensions_strength_sorted = extensions_strength.sorted\n       \
    \ val class_name_strength_sorted = class_name_strength.sorted\n        val extensions_strength_sorted.headOption.map(e\
    \ => class_name_strength_sorted.find(_ > e).get)", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count - extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n    \
    \    val extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val\
    \ strength_upper = extensions_count_upper - extensions_count_lower\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase).sum\n        val strength_lower\
    \ = extensions_count_lower - extensions_count_upper\n        if (strength_upper\
    \ > strength_lower) {\n            class_name + extensions.map(_.toUpperCase).sum\
    \ + \".\" + extensions.map(_.toLowerCase).sum\n        } else {\n            class_name\
    \ + extensions.map(_.toLowerCase).sum + \".\" + extensions.map(_.toUpperCase).sum\n\
    \        }", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.foldLeft(0)((acc,\
    \ x) => acc + (class_name_map(x._1) - class_name_map(x._2)))\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(x => x._2).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x._2 != class_name_map(x._1))\n        val\
    \ extensions_sorted = extensions_sorted.map(x => class_name_map(x._1) + x._2)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\")\n        val\
    \ extensions_sorted = extensions_sorted.dropRight(class_name_map(extensions_sorted.last).length)\n\
    \        extensions_sorted + class_name_map(extensions_sorted.last)", "      \
    \  val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val first_extension_strength\
    \ = extensions_map.getOrElse(first_extension, 0)\n        val first_extension_strength_diff\
    \ = first_extension_strength - strength\n        if (first_extension_strength_diff\
    \ == 0) {\n            class_name\n        } else if (first_extension_strength_diff\
    \ < 0) {\n            class_name + \".\" + first_extension\n        } else {\n\
    \            class_name + \".\" + first_extension + sorted_extensions.last\n \
    \       }", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs).max\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => x - class_name_map.get(x))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x < strength)\n        val extensions_sorted = extensions_sorted.mkString(\"\
    .\")\n        extensions_sorted + class_name_map.get(extensions_sorted.last)",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val class_name_with_strength = class_name_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).foldLeft(\"\")((x, y) => x + \".\" + y)\n\
    \        val strength_of_extension = extensions_map.values.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).foldLeft(0)((x, y) => math.max(x, y))\n        val strength_of_class\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val strength_of_extension_of_class = class_name_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x, y) => math.max(x, y))\n \
    \       val strength_of_extension_of_class_with_strength = class_name_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x, y) => math.max(x, y))\n \
    \       val strength_of_extension_of_class_with_strength_of_extension = class_name_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x, y) => math.max(x, y))\n \
    \       val strength_of_extension_of_class_with_strength_of_extension_of_class\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val strength_of_extension_of_class_with_strength_of_extension_of_class_with_strength\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val strength_of_extension_of_class_with_strength_of_extension_of_class_with_strength_of_extension\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val strength_of_extension_of_class_with_strength_of_extension_of_class_with_strength_of_extension_of_class\
    \ = class_name_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val strength_of_extension_of_class_with_strength_of_extension_of_class_with_strength_of_extension_of_class_with_strength\
    \ = class_name_map.", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"\\\\W\",\
    \ \"\")\n        class_name + extensions_sorted", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x.toUpperCase, x.toLowerCase)).foldLeft(0)((x,\
    \ y) => math.max(x, y))\n        val class_name_with_strength = class_name_map.values.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).foldLeft(\"\")((x, y) => x + \".\" + y)\n\
    \        val strength_str = strength.map(x => x.toUpperCase).foldLeft(\"\")((x,\
    \ y) => x + \".\" + y)\n        val class_name_with_strength_str = class_name_with_strength.map(x\
    \ => x.toUpperCase).foldLeft(\"\")((x, y) => x + \".\" + y)\n        val strength_str_with_extension\
    \ = strength_str + class_name_with_strength_str\n        val class_name_with_strength_str_with_extension\
    \ = class_name_with_strength_str + strength_str\n        val strength_str_with_extension_str\
    \ = strength_str_with_extension + class_name_with_strength_str_with_extension\n\
    \        val class_name_with_strength_str_with_extension_str = class_name_with_strength_str_with_extension\
    \ + strength_str_with_extension\n        val strength_str_with_extension_str_with_extension\
    \ = strength_str_with_extension_str + class_name_with_strength_str_with_extension_str\n\
    \        val class_name_with_strength_str_with_extension_str_with_extension =\
    \ class_name_with_strength_str_with_extension_str_with_extension + strength_str_with_extension_str_with_extension\n\
    \        val strength_str_with_extension_str_with_extension_str = strength_str_with_extension_str_with_extension\
    \ + class_name_with_strength_str_with_extension_str_with_extension\n        val\
    \ class_name_with_strength_str_with_extension_str_with_extension_str = class_name_with_strength_str_with_extension_str_with_extension\
    \ + strength_str_with_extension_str_with_extension_str\n        val strength_str_with_extension_str_with_extension_str_with_extension\
    \ = strength_str_with_extension_str_with_extension_str + class_name_with_strength_str_with_extension_str_with_extension_str\n\
    \        val class_name_with_strength_str_with_extension_str_with_extension_str_with_extension\
    \ = class_name_with_strength_str_with_extension_str_with_extension_str + strength_str_with_extension_str_with_extension_str_with_extension\n\
    \        val strength_str_with_extension_str_with_extension_str_with_extension_str\
    \ = strength_", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n\
    \        class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\".\")\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n   \
    \     val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        class_name + extensions_sorted", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        if (strength > 0) class_name_map(extensions_map.maxBy(_._2)._1)\n\
    \        else class_name_map(extensions_map.minBy(_._2)._1)", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.max\n        val extensions_sorted =\
    \ extensions_map.values.sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.mkString(\"\"\
    ) + extensions_sorted.last\n        class_name + \".\" + extensions_sorted", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_cap\
    \ = extensions.map(_.toUpperCase.length).sum - extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_sm = extensions.map(_.toLowerCase.length).sum -\
    \ extensions.map(_.toUpperCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower - extensions_count_cap - extensions_count_sm\n    \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_sorted = extensions_sorted.take(1)\n   \
    \     val extensions_sorted = extensions_sorted.mkString(\".\") + \".\" + extensions_sorted.mkString(\"\
    .\") + \".\"\n        class_name + extensions_sorted", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n \
    \       val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n  \
    \      val extension_first = extensions_sorted.head._2\n        val extension_last\
    \ = extensions_sorted.last._2\n        val extension_strength = extensions_sorted.map(x\
    \ => x._1).reduce((a, b) => math.max(a, b))\n        val extension_strength_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.min(a, b))\n      \
    \  val extension_strength_last = extensions_sorted.map(x => x._1).reduce((a, b)\
    \ => math.max(a, b))\n        val extension_strength_first_last = extensions_sorted.map(x\
    \ => x._1).reduce((a, b) => math.min(a, b))\n        val extension_strength_first_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.max(a, b))\n      \
    \  val extension_strength_first_last_last_first = extensions_sorted.map(x => x._1).reduce((a,\
    \ b) => math.min(a, b))\n        val extension_strength_first_last_last_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.max(a, b))\n      \
    \  val extension_strength_first_last_last_last_last_first = extensions_sorted.map(x\
    \ => x._1).reduce((a, b) => math.min(a, b))\n        val extension_strength_first_last_last_last_last_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.max(a, b))\n      \
    \  val extension_strength_first_last_last_last_last_last_last_first = extensions_sorted.map(x\
    \ => x._1).reduce((a, b) => math.min(a, b))\n        val extension_strength_first_last_last_last_last_last_last_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.max(a, b))\n      \
    \  val extension_strength_first_last_last_last_last_last_last_last_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.min(a, b))\n      \
    \  val extension_strength_first_last_last_last_last_last_last_last_last_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.max(a, b))\n      \
    \  val extension_strength_first_last_last_last_last_last_last_last_last_last_first\
    \ = extensions_sorted.map(x => x._1).reduce((a, b) => math.min(a, b))\n      \
    \  ", "        val extensions_count = extensions.map(_.length).sum\n        val\
    \ extensions_count_sorted = extensions.map(_.length).sort\n        val extensions_count_sorted_reversed\
    \ = extensions_count_sorted.reverse\n        val extensions_count_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed.sort\n        val extensions_count_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted.reverse\n        val extensions_count_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed.sort\n        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted.reverse\n        val\
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reverse",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => x.toDouble - y.toDouble)\n\
    \        val strongest_extension = extensions_map.values.minBy(x => x._1)._2\n\
    \        val class_name_with_strongest_extension = class_name + \".\" + strongest_extension\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension.toLowerCase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension.toUpperCase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_with_strongest_extension_uppercase\n\
    \        val class_name_with_strongest_extension_lowercase = class_name_with_strongest_extension_lowercase\n\
    \        val class_name_with_strongest_extension_uppercase = class_name_", " \
    \       val extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n\
    \        val class_name_map = class_name.zipWithIndex.toMap\n        val extensions_count\
    \ = extensions_map.size\n        val class_name_count = class_name_map.size\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val class_name_sorted =\
    \ class_name_map.toSeq.sortBy(_._2).reverse\n        val extensions_first = extensions_sorted.head._1\n\
    \        val class_name_first = class_name_sorted.head._1\n        val extensions_last\
    \ = extensions_sorted.last._1\n        val class_name_last = class_name_sorted.last._1\n\
    \        val extensions_first_index = extensions_sorted.indexOf((extensions_first,\
    \ 0))\n        val class_name_first_index = class_name_sorted.indexOf((class_name_first,\
    \ 0))\n        val extensions_last_index = extensions_sorted.indexOf((extensions_last,\
    \ 0))\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last,\
    \ 0))\n        val extensions_first_strength = extensions_sorted.take(extensions_first_index).last._2\n\
    \        val class_name_first_strength = class_name_sorted.take(class_name_first_index).last._2\n\
    \        val extensions_last_strength = extensions_sorted.take(extensions_last_index).last._2\n\
    \        val class_name_last_strength = class_name_sorted.take(class_name_last_index).last._2\n\
    \        val extensions_first_strength_int = extensions_first_strength.toInt\n\
    \        val class_name_first_strength_int = class_name_first_strength.toInt\n\
    \        val extensions_last_strength_int = extensions_last_strength.toInt\n \
    \       val class_name_last_strength_int = class_name_last_strength.toInt\n  \
    \      val strength_int = strength.toInt\n        val extensions_first_strength_str\
    \ = extensions_first_strength_int.toString\n        val class_name_first_strength_str\
    \ = class_name_first_strength_int.toString\n        val extensions_last_strength_str\
    \ = extensions_last_strength_int.toString\n        val class_name_last_strength_str\
    \ = class_name_last_strength_int.toString\n        val extensions_first_strength_str_upper\
    \ = extensions_first_strength_str.toUpperCase\n        val class_name_first_strength_str_upper\
    \ = class_name_first_strength_str.toUpperCase\n        val extensions_last_strength_str_upper\
    \ = extensions_last_strength_str.toUpperCase\n        val class_name_last_strength_str_upper\
    \ = class_name_last_strength_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase).zipWithIndex.toMap\n        val class_name_map = class_name.zipWithIndex.toMap\n\
    \        val strength = extensions_map.foldLeft(0)((s, e) => s + (class_name_map(e._2)\
    \ - class_name_map(e._1)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 != strength)\n\
    \        val extensions_sorted = extensions_sorted.map(_._1).toList + extensions_sorted.last\n\
    \        extensions_sorted.mkString(class_name + \".\")", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val strength = extensions_map.getOrElse(class_name, 0)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_first = extensions_sorted.head._2\n\
    \        val extension_last = extensions_sorted.last._2\n        val extension_strength\
    \ = extensions_map.getOrElse(class_name, 0)\n        val extension_strength_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength_first\
    \ = extensions_strength_sorted.head._2\n        val extension_strength_last =\
    \ extensions_strength_sorted.last._2\n        val extension_strength_strength\
    \ = extensions_map.getOrElse(class_name, 0)\n        val extension_strength_strength_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength_strength_first\
    \ = extensions_strength_strength_sorted.head._2\n        val extension_strength_strength_last\
    \ = extensions_strength_strength_sorted.last._2\n        val extension_strength_strength_strength\
    \ = extensions_map.getOrElse(class_name, 0)\n        val extension_strength_strength_strength_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength_strength_strength_first\
    \ = extensions_strength_strength_strength_sorted.head._2\n        val extension_strength_strength_strength_last\
    \ = extensions_strength_strength_strength_sorted.last._2\n        val extension_strength_strength_strength_strength\
    \ = extensions_map.getOrElse(class_name, 0)\n        val extension_strength_strength_strength_strength_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength_strength_strength_strength_first\
    \ = extensions_strength_strength_strength_strength_sorted.head._2\n        val\
    \ extension_strength_strength_strength_strength_last = extensions_strength_strength_strength_sorted.last._2\n\
    \        val extension_strength_strength_strength_strength_strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extension_strength_strength_strength_strength_strength_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength_strength_strength_strength_strength_first\
    \ = extensions_strength_", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_class\
    \ = extensions_sorted.head._1\n        val extension_class_name = extension_class.split(\"\
    \\\\W\").last\n        val extension_class_name_with_extension = extension_class_name\
    \ + extension_extension\n        val extension_class_name_with_extension_strength\
    \ = extension_class_name_with_extension + extension_strength\n        val extension_class_name_with_extension_strength_sorted\
    \ = extension_class_name_with_extension_strength.split(\"\\\\W\").last\n     \
    \   val extension_class_name_with_extension_strength_sorted_with_extension = extension_class_name_with_extension_strength_sorted\
    \ + extension_extension\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted\
    \ = extension_class_name_with_extension_strength_sorted_with_extension.split(\"\
    \\\\W\").last\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_sorted\
    \ + extension_extension\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension\
    \ + extension_extension\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted_with_extension\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted\
    \ + extension_extension\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted_with_extension_sorted\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted_with_extension\
    \ + extension_extension\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted_with_extension_sorted_with_extension\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted_with_extension_sorted_with_extension\
    \ + extension_extension\n        val extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_sorted_with_extension_sorted_with_extension_sorted_with_extension\
    \ = extension_class_name_with_extension_strength_sorted_with_extension_sorted_with_extension_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (acc, x) => acc + (x._2 -\
    \ x._1) }\n        val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2).reverse\n\
    \        val extension_strength = extensions_sorted.foldLeft(0) { (acc, x) =>\
    \ acc + (x._2 - x._1) }\n        val strength_diff = strength - extension_strength\n\
    \        val extension_sorted = extensions_sorted.takeWhile(x => strength_diff\
    \ >= x._2).reverse\n        val extension_sorted = extension_sorted.take(1).mkString.concat(\"\
    .\").concat(extension_sorted.last)\n        class_name_map.get(extension_sorted)",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.filter(_._2 > class_name_map.get(_._2)).map(_._1).length\n\
    \        val extension = extensions_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase - x.toLowerCase -> x)).toMap\n        val class_name_map =\
    \ class_name.map(x => (x.toUpperCase - x.toLowerCase -> x)).toMap\n        val\
    \ strength = extensions_map.values.foldLeft(0)((x, y) => if (x == -1) y else x\
    \ + y)\n        val class_name_with_strength = class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._1).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._1).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._1).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._1).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._1).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._1).mkString(\"\
    .\") + extensions_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + class_name_map.filter(_._2 > strength).sortBy(_._1).map(_._2).mkString(\"\
    .\") + extensions_", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val first_extension = sorted_extensions.head._1\n\
    \        val second_extension = sorted_extensions.last._1\n        if (strength\
    \ == 0) first_extension\n        else if (strength == 1) second_extension\n  \
    \      else class_name + \".\" + first_extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.get(x) - x.toUpperCase.length).max\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count_upper - extensions_count_diff\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_diff\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper -\
    \ extensions_count_diff_lower\n        val extensions_count_diff_diff_lower =\
    \ extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_map_sorted = extensions_map.toSeq.sortWith(_._2 > _._2)\n   \
    \     val extensions_map_sorted = extensions_map_sorted.toMap\n        val extensions_map_sorted\
    \ = extensions_map_sorted.filter(_._2 > 0)\n        val extensions_map_sorted\
    \ = extensions_map_sorted.toSeq.sortWith(_._1 > _._1)\n        val extensions_map_sorted\
    \ = extensions_map_sorted.toMap\n        val extensions_map_sorted = extensions_map_sorted.filter(_._1\
    \ > 0)\n        val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._2\
    \ > _._2)\n        val extensions_map_sorted = extensions_map_sorted.toMap\n \
    \       val extensions_map_sorted = extensions_map_sorted.filter(_._2 > 0)\n \
    \       val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._1\
    \ > _._1)\n        val extensions_map_sorted = extensions_map_sorted.toMap\n \
    \       val extensions_map_sorted = extensions_map_sorted.filter(_._1 > 0)\n \
    \       val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._2\
    \ > _._2)\n        val extensions_map_sorted = extensions_map_sorted.toMap\n \
    \       val extensions_map_sorted = extensions_map_sorted.filter(_._2 > 0)\n \
    \       val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._1\
    \ > _._1)\n        val extensions_map_sorted = extensions_map_sorted.toMap\n \
    \       val extensions_map_sorted = extensions_map_sorted.filter(_._1 > 0)\n \
    \       val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._2\
    \ > _._2)\n        val extensions_map_sorted = extensions_map_sorted.toMap\n \
    \       val extensions_map_sorted = extensions_map_sorted.filter(_._2 > 0)\n \
    \       val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._1\
    \ > _._1)\n        val extensions_map_sorted = extensions_map_sorted.toMap\n \
    \       val extensions_map_sorted = extensions_map_sorted.filter(_._1 > 0)\n \
    \       val extensions_map_sorted = extensions_map_sorted.toSeq.sortWith(_._2\
    \ > _._2)", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase).toMap\n        val class_name_map =\
    \ class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.map(e => class_name_map.get(e) -\
    \ class_name_map.get(e.head)).sum\n        val extension = extensions_map.values.find(e\
    \ => class_name_map.get(e) == strength).get\n        s\"$class_name.$extension\"",
  "        val extensions_map = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 ", "       \
    \ val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2)\n        val\
    \ extensions_sorted = extensions_sorted.takeWhile(_._2 != extensions_sorted.last._2).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.map(e => class_name + \".\"\
    \ + e)\n        extensions_sorted.head", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropRight(1)\n       \
    \ class_name + \".\" + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val extension_length\
    \ = extensions_count.toDouble / class_name_length\n        val strength = extension_length.toInt\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => a.length < b.length)\n\
    \        val extension_sorted = extensions_sorted.head\n        val extension_length\
    \ = extension_sorted.length\n        val extension_strength = extension_length.toDouble\
    \ / class_name_length\n        val extension_strength_rounded = extension_strength.toInt\n\
    \        val extension_strength_rounded_rounded = extension_strength_rounded +\
    \ 1\n        val extension_strength_rounded_rounded_rounded = extension_strength_rounded_rounded\
    \ + 1\n        val extension_strength_rounded_rounded_rounded_rounded = extension_strength_rounded_rounded_rounded\
    \ + 1\n        val extension_strength_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded + 1\n        val extension_strength_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded_rounded + 1\n        val\
    \ extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded =\
    \ extension_strength_rounded_rounded_rounded_rounded_rounded_rounded + 1\n   \
    \     val extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded_rounded_rounded + 1\n \
    \       val extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ + 1\n        val extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ + 1\n        val extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ + 1\n        val extension_strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = extension_strength_rounded_rounded_rounded_rounded_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum = extensions_count_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length = extensions_count_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum = extensions_count_sorted_length_sum_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted = extensions_count_sorted_length_sum_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length.sum\n \
    \       val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).map(_.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).map(_.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = strength.toDouble / extensions_count.toDouble\n\
    \        val strength_lower = strength.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted = extensions.sortWith((a, b) => strength_lower\
    \ > strength_upper)\n        val extensions_count_sorted_upper = extensions_sorted.map(_.toUpperCase).map(_.length).sum\n\
    \        val extensions_count_sorted_lower = extensions_sorted.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_sorted = extensions_count_sorted_upper - extensions_count_sorted_lower\n\
    \        val strength_sorted_upper = strength_sorted.toDouble / extensions_count.toDouble\n\
    \        val strength_sorted_lower = strength_sorted.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sorted_sorted = extensions_sorted.sortWith((a, b)\
    \ => strength_sorted_lower > strength_sorted_upper)\n        val extensions_count_sorted_sorted_upper\
    \ = extensions_sorted_sorted.map(_.toUpperCase).map(_.length).sum\n        val\
    \ extensions_count_sorted_sorted_lower = extensions_sorted_sorted.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_sorted_sorted = extensions_count_sorted_sorted_upper - extensions_count_sorted_sorted_lower\n\
    \        val strength_sorted_sorted_upper = strength_sorted_sorted.toDouble /\
    \ extensions_count.toDouble\n        val strength_sorted_sorted_lower = strength_sorted_sorted.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sorted_sorted_sorted\
    \ = extensions_sorted_sorted.sortWith((a, b) => strength_sorted_sorted_lower >\
    \ strength_sorted_sorted_upper)\n        val extensions_count_sorted_sorted_sorted_upper\
    \ = extensions_sorted_sorted_sorted.map(_.toUpperCase).map(_.length).sum\n   \
    \     val extensions_count_sorted_sorted_sorted_lower = extensions_sorted_sorted_sorted.map(_.toLowerCase).map(_.length).sum\n\
    \        val strength_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_upper\
    \ - extensions_count_sorted_sorted_sorted_lower\n        val strength_sorted_sorted_sorted_upper\
    \ = strength_sorted_sorted_sorted.toDouble / extensions_count.toDouble\n     \
    \   val strength_sorted_sorted_sorted_lower = strength", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.getOrElse(x, 0) - x.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_value = extensions_map.values.max\n        val max_key_lower\
    \ = class_name_map.keys.max\n        val max_value_lower = class_name_map.values.max\n\
    \        val max_key_upper = extensions_map.keys.max\n        val max_value_upper\
    \ = extensions_map.values.max\n        val max_key_upper = extensions_map.keys.max\n\
    \        val max_value_upper = extensions_map.values.max\n        val max_key_lower\
    \ = extensions_map.keys.max\n        val max_value_lower = extensions_map.values.max\n\
    \        val max_key_upper = extensions_map.keys.max\n        val max_value_upper\
    \ = extensions_map.values.max\n        val max_key_lower = extensions_map.keys.max\n\
    \        val max_value_lower = extensions_map.values.max\n        val max_key_upper\
    \ = extensions_map.keys.max\n        val max_value_upper = extensions_map.values.max\n\
    \        val max_key_lower = extensions_map.keys.max\n        val max_value_lower\
    \ = extensions_map.values.max\n        val max_key_upper = extensions_map.keys.max\n\
    \        val max_value_upper = extensions_map.values.max\n        val max_key_lower\
    \ = extensions_map.keys.max\n        val max_value_lower = extensions_map.values.max\n\
    \        val max_key_upper = extensions_map.keys.max\n        val max_value_upper\
    \ = extensions_map.values.max\n        val max_key_lower = extensions_map.keys.max\n\
    \        val max_value_lower = extensions_map.values.max\n        val max_key_upper\
    \ = extensions_map.keys.max\n        val max_value_upper = extensions_map.values.max\n\
    \        val max_key_lower = extensions_map.keys.max\n        val max_value_lower\
    \ = extensions_map.values.max\n        val max_key_upper = extensions_map.keys.max\n\
    \        val max_value_upper = extensions_map.values.max\n        val max_key_lower\
    \ = extensions_map.keys.max\n        val max_value_lower = extensions_map.values.max\n\
    \        val max_key_upper = extensions_map.keys.max\n        val max_value_upper\
    \ = extensions_map.values.max\n        val max_key_lower = extensions_map.", " \
    \       val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val extensions_sorted = extensions_map.toSeq.sortWith((a, b) => extensions_map(b)\
    \ - extensions_map(a))\n        val strongest_extension = extensions_sorted.head\n\
    \        class_name + \".\" + strongest_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((s, c) => s + extensions_map.getOrElse(c,\
    \ 0))\n        val extensions_sorted = extensions.sortWith((a, b) => strength\
    \ - extensions_map.getOrElse(b, 0))\n        val extensions_sorted = extensions_sorted.map(e\
    \ => class_name_map.getOrElse(e, e)).mkString(\".\") + extensions_sorted.last",
  "        val extensions_count = extensions.count\n        val extensions_count_upper\
    \ = extensions.count(_.toUpperCase == _)\n        val extensions_count_lower =\
    \ extensions.count(_.toLowerCase == _)\n        val extensions_count_diff = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_diff_upper = extensions_count_diff\
    \ / extensions_count_upper\n        val extensions_count_diff_lower = extensions_count_diff\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_upper = extensions_count_diff_upper\
    \ / extensions_count_upper\n        val extensions_count_diff_diff_lower = extensions_count_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper / extensions_count_upper\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_diff_lower / extensions_count_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper / extensions_count_upper\n        val\
    \ extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper / extensions_count_upper\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_diff_upper\
    \ = ", "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n\
    \        val extensions_sorted = extensions_map.values.sortWith((x, y) => strength\
    \ - y)\n        val extensions_sorted = extensions_sorted.take(1)\n        class_name\
    \ match {\n            case x if x.toUpperCase == extensions_sorted.head => extensions_sorted.head\n\
    \            case _ => \"\"\n        }", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_sorted_sorted\
    \ = extensions_sorted.sortBy(_._1).reverse\n        val extensions_sorted_sorted_sorted\
    \ = extensions_sorted_sorted.sortBy(_._1).reverse\n        val extensions_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted.sortBy(_._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n     \
    \   val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_._1).reverse\n\
    \        val extensions_sorted_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = extensions_count_upper - strength\n        val strength_lower\
    \ = extensions_count_lower - strength\n        val extensions_count_upper = extensions.map(_.toUpperCase).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase).sum\n    \
    \    val strength_upper = extensions_count_upper - strength_upper\n        val\
    \ strength_lower = extensions_count_lower - strength_lower\n        if (strength_upper\
    \ > strength_lower) {\n            class_name + extensions.map(_.toUpperCase).reduce(_\
    \ + _)\n        } else {\n            class_name + extensions.map(_.toLowerCase).reduce(_\
    \ + _)\n        }", "        var strongest_extension = \"\"\n        var strongest_extension_strength\
    \ = -1\n        var extension_strength = 0\n        var extension_strength_counter\
    \ = 0\n        var extension_strength_counter2 = 0\n        var extension_strength_counter3\
    \ = 0\n        var extension_strength_counter4 = 0\n        var extension_strength_counter5\
    \ = 0\n        var extension_strength_counter6 = 0\n        var extension_strength_counter7\
    \ = 0\n        var extension_strength_counter8 = 0\n        var extension_strength_counter9\
    \ = 0\n        var extension_strength_counter10 = 0\n        var extension_strength_counter11\
    \ = 0\n        var extension_strength_counter12 = 0\n        var extension_strength_counter13\
    \ = 0\n        var extension_strength_counter14 = 0\n        var extension_strength_counter15\
    \ = 0\n        var extension_strength_counter16 = 0\n        var extension_strength_counter17\
    \ = 0\n        var extension_strength_counter18 = 0\n        var extension_strength_counter19\
    \ = 0\n        var extension_strength_counter20 = 0\n        var extension_strength_counter21\
    \ = 0\n        var extension_strength_counter22 = 0\n        var extension_strength_counter23\
    \ = 0\n        var extension_strength_counter24 = 0\n        var extension_strength_counter25\
    \ = 0\n        var extension_strength_counter26 = 0\n        var extension_strength_counter27\
    \ = 0\n        var extension_strength_counter28 = 0\n        var extension_strength_counter29\
    \ = 0\n        var extension_strength_counter30 = 0\n        var extension_strength_counter31\
    \ = 0\n        var extension_strength_counter32 = 0\n        var extension_strength_counter33\
    \ = 0\n        var extension_strength_counter34 = 0\n        var extension_strength_counter35\
    \ = 0\n        var extension_strength_counter36 = 0\n        var extension_strength_counter37\
    \ = 0\n        var extension_strength_counter38 = 0\n        var extension_strength_counter39\
    \ = 0\n        var extension_strength_counter40 = 0\n        var extension_strength_counter41\
    \ = 0\n        var extension_strength_counter42 = 0\n        var extension_strength_counter43\
    \ = 0\n        var extension_strength_counter44 = 0\n        var extension_strength_counter45\
    \ = 0\n        var extension_strength_counter46 = 0\n        var extension_strength_counter47\
    \ = 0\n        var extension_strength_counter48 = 0\n        var extension_strength_counter49\
    \ = 0\n        var extension_strength_counter50 = 0\n        var extension_strength_counter51\
    \ = 0\n        var extension_strength_counter52 = 0\n        var extension_strength_counter53\
    \ = 0\n        var extension_strength_counter54 = 0\n        var extension_strength_counter",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_count = extensions.map(e => extensions_map(e).size)\n\
    \        val extensions_sum = extensions_count.sum\n        val strength = extensions_sum\
    \ / extensions_count.size\n        val extensions_sorted = extensions_count.sortWith(_\
    \ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.take(extensions_sorted.size\
    \ - 1).sortWith(_ < _)\n        val extensions_sorted = ", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortWith(_.length > _.length)\n    \
    \    val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith(_.length > _.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_.length\
    \ > _.length)\n        val extensions_count_sorted_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_count = class_name.length\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions.sortWith(_.length > _.length)\n        val extensions_first_sorted\
    \ = extensions_sorted.head\n        val extensions_first_sorted_length = extensions_first_sorted.length\n\
    \        val extensions_first_sorted_first_letter = extensions_first_sorted.charAt(0)\n\
    \        val extensions_first_sorted_first_letter_count = extensions_first_sorted_first_letter.length\n\
    \        val extensions_first_sorted_first_letter_strength = extensions_first_sorted_first_letter.toCharArray().map(_.toUpperCase).count(_\
    \ == 'A') - extensions_first_sorted_first_letter.toCharArray().map(_.toLowerCase).count(_\
    \ == 'a')\n        val extensions_first_sorted_first_letter_strength_sum = extensions_first_sorted_first_letter_strength\
    \ * extensions_first_sorted_first_letter_count\n        val extensions_first_sorted_first_letter_strength_product\
    \ = extensions_first_sorted_first_letter_strength_sum / extensions_first_sorted_first_letter_count\n\
    \        val extensions_first_sorted_first_letter_strength_product2 = extensions_first_sorted_first_letter_strength_product\
    \ * extensions_first_sorted_first_letter_count\n        val extensions_first_sorted_first_letter_strength_product3\
    \ = extensions_first_sorted_first_letter_strength_product2 * extensions_first_sorted_first_letter_count\n\
    \        val extensions_first_sorted_first_letter_strength_product4 = extensions_first_sorted_first_letter_strength_product3\
    \ * extensions_first_sorted_first_letter_count\n        val extensions_first_sorted_first_letter_strength_product5\
    \ = extensions_first_sorted_first_letter_strength_product4 * extensions_first_sorted_first_letter_count\n\
    \        val extensions_first_sorted_first_letter_strength_product6 = extensions_first_sorted_first_letter_strength_product5\
    \ * extensions_first_sorted_first_letter_count\n        val extensions_first_sorted_first_letter_strength_product7\
    \ = extensions_first_sorted_first_letter_strength_product6 * extensions_first_sorted_first_letter_count\n\
    \        val extensions_first_sorted_first_letter_strength_product8 = extensions_first_sorted_first_letter_strength_product7\
    \ * extensions_first_sorted_first_letter_count\n        val extensions_first_sorted_first_letter_strength_product9\
    \ = extensions_first_sorted_first_letter_strength_product8 * extensions_first_sorted_first_letter_count\n\
    \        val extensions_first_sorted_first_letter_strength_product10 = extensions_first_sorted_first_letter_strength_product9\
    \ * extensions_first_sorted_first_letter_count\n        val extensions_first_sorted_first_letter_strength_product11\
    \ = extensions_first_sorted_first_letter_strength_product10 * extensions_", " \
    \       val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name_map.size\n        val strength = extensions_count - class_name_count\n\
    \        if (strength == 0) class_name\n        else if (strength == -1) class_name\
    \ + extensions_map.keys.toList.head\n        else class_name + extensions_map.keys.toList.take(strength).mkString(\"\
    .\")", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => math.max(a, b))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_name\
    \ = extensions_sorted.head._1\n        val extension_class = extension_strength.toDouble\
    \ / strength.toDouble\n        val extension_class_name = extension_class * class_name\
    \ + extension_name\n        extension_class_name", "        val extensions_map\
    \ = extensions.map(e => (e.toUpperCase - e.toLowerCase + 1)).toMap\n        val\
    \ strength = extensions_map.values.max\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        if (extensions_count > 1) {\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.sortBy(_.toUpperCase)\n      \
    \      val extensions_sorted = extensions.sortBy(_.toLowerCase)\n            val\
    \ extensions_sorted = extensions.sortBy(_.length)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted = extensions.sortBy(_.toLowerCase)\n\
    \            val extensions_sorted = extensions.sortBy(_.length)\n           \
    \ val extensions_sorted = extensions.sortBy(_.toUpperCase)\n            val extensions_sorted\
    \ = extensions.sortBy(_.toLowerCase)\n            val extensions_sorted = extensions.sortBy(_.length)\n\
    \            val extensions_sorted = extensions.", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.getOrElse(x, 0) - x.toString.toUpperCase.length).toArray\n\
    \        val max_strength = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = extensions_map.keys.toArray.max\n\
    \        val max_value = strength.max\n        val max_key = class_name_map.keys.toArray.max\n\
    \        val max_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortBy(_.length).reverse\n \
    \       val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum = extensions_count_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted = extensions_count_sorted_length.sortBy(_.sum).reverse\n\
    \        val extensions_count_sorted_length_sum_sorted_length = extensions_count_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum = extensions_count_sorted_length_sum_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted = extensions_count_sorted_length_sum_sorted_length.sortBy(_.sum).reverse\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length.sum\n \
    \       val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length.sortBy(_.sum).reverse\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length.sum\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length.sortBy(_.sum).reverse\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum\
    \ = extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum.map(_.length)\n\
    \        val extensions_count_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_sum_sorted_length_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n\
    \        val extension = extensions_map.get(strength)\n        extension.getOrElse(class_name)",
  "        val extensions_map = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > strength)\n\
    \        val extensions_sorted = extensions_sorted.map(_._1).mkString(\".\")\n\
    \        val extensions_sorted = extensions_sorted.replaceAll(\"\\\\.\", \"\"\
    )\n        class_name + extensions_sorted", "        val extensions_count = extensions.count\n\
    \        val extensions_count_upper = extensions.count(x => x.toUpperCase.size\
    \ == x.length).toDouble\n        val extensions_count_lower = extensions.count(x\
    \ => x.toLowerCase.size == x.length).toDouble\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_frac\
    \ = extensions_count_diff / extensions_count_upper\n        val extensions_count_diff_frac_floor\
    \ = Math.floor(extensions_count_diff_frac)\n        val extensions_count_diff_frac_ceil\
    \ = Math.ceil(extensions_count_diff_frac)\n        val extensions_count_diff_frac_ceil\
    \ = extensions_count_diff_frac_ceil.toInt\n        val extensions_count_diff_frac_floor\
    \ = extensions_count_diff_frac_floor.toInt\n        val extensions_count_diff_frac_ceil\
    \ = extensions_count_diff_frac_ceil - extensions_count_diff_frac_floor\n     \
    \   val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_frac.toInt\n \
    \       val extensions_count_diff_frac_floor = extensions_count_diff_frac_floor.toInt\n\
    \        val extensions_count_diff_frac = extensions_count_diff_fra", "      \
    \  var strength = 0\n        var strongest_extension = \"\"\n        for(extension\
    \ <- extensions) {\n            val cap = extension.filter(_.isUpper).length\n\
    \            val sm = extension.filter(_.isLower).length\n            val strength\
    \ = cap - sm\n            if(strength > 0) {\n                strongest_extension\
    \ = extension\n                strength = cap - sm\n            }\n        }\n\
    \        class_name + \".\" + strongest_extension", "        var strongest_extension\
    \ = \"\"\n        var strongest_extension_strength = -1\n        var extension_strength\
    \ = 0\n        var extension_strength_counter = 0\n        var extension_strength_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter = 0\n        var\
    \ extension_strength_counter_counter_counter_counter = 0\n        var extension_strength_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n        var extension_strength_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_",
  "        val extensions_map = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val extensions_sorted = extensions_map.values.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < strength)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2).mkString(\".\")\n\
    \        className + \".\" + extensions_sorted", "        val extensions_map =\
    \ extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n      \
    \  val class_name_map = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val max_strength = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_value)\n        val max_key_class_name =\
    \ class_name_map.get(max_key_value)\n        val max_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name)\n        val max_key_class_name_key_value\
    \ = extensions_map.get(max_key_class_name)\n        val max_key_class_name_key_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name\
    \ = class_name_map.get(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name)\n        val\
    \ max_key_class_name_key_class_name_key_value = extensions_map.get(max_key_class_name_key_class_name)\n\
    \        val max_key_class_name_key_class_name_key_key_index = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_index = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val extensions_sorted = extensions_sorted.take(extensions_sorted.length\
    \ - 1).map(_._1)\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + \".\" + e)\n        extensions_sorted.head", "        val extensions_map =\
    \ extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.filter(_._2 > class_name_map.get(_._2)).map(_._1).sum\n   \
    \     val extension = extensions_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n\
    \        val max_strength = strength.max\n        val max_key = strength.maxBy(x\
    \ => x)\n        val max_key_index = strength.indexOf(max_key)\n        val max_key_value\
    \ = extensions_map.get(max_key)\n        val max_key_key_value = max_key_value._1\n\
    \        val max_key_key_index = max_key_value._2\n        val max_key_key_value\
    \ = max_key_value._1\n        val max_key_key_index = max_key_value._2\n     \
    \   val max_key_key_value = max_key_value._1\n        val max_key_key_index =\
    \ max_key_value._2\n        val max_key_key_value = max_key_value._1\n       \
    \ val max_key_key_index = max_key_value._2\n        val max_key_key_value = max_key_value._1\n\
    \        val max_key_key_index = max_key_value._2\n        val max_key_key_value\
    \ = max_key_value._1\n        val max_key_key_index = max_key_value._2\n     \
    \   val max_key_key_value = max_key_value._1\n        val max_key_key_index =\
    \ max_key_value._2\n        val max_key_key_value = max_key_value._1\n       \
    \ val max_key_key_index = max_key_value._2\n        val max_key_key_value = max_key_value._1\n\
    \        val max_key_key_index = max_key_value._2\n        val max_key_key_value\
    \ = max_key_value._1\n        val max_key_key_index = max_key_value._2\n     \
    \   val max_key_key_value = max_key_value._1\n        val max_key_key_index =\
    \ max_key_value._2\n        val max_key_key_value = max_key_value._1\n       \
    \ val max_key_key_index = max_key_value._2\n        val max_key_key_value = max_key_value._1\n\
    \        val max_key_key_index = max_key_value._2\n        val max_key_key_value\
    \ = max_key_value._1\n        val max_key_key_index = max_key_value._2\n     \
    \   val max_key_key_value = max_key_value._1\n        val max_key_key_index =\
    \ max_key_value._2\n        val max_key_key_value = max_key_value._1\n       \
    \ val max_key_key_index = max_key_value._2\n        val max_key_key_value = max_key_value._1\n\
    \        val max_key_key_index = max_key_value._2\n", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.values.max\n\
    \        val extension = extensions_map.values.min\n        val extension_str\
    \ = extensions_map.values.mkString(\".\")\n        val class_name_str = class_name.split(\"\
    .\").last\n        val class_name_str = class_name_str.substring(0, class_name_str.lastIndexOf(\"\
    .\"))\n        val class_name_str = class_name_str.replaceAll(\"_\", \"\")\n \
    \       val class_name_str = class_name_str.replaceAll(\"[^A-Z]\", \"\")\n   \
    \     val class_name_str = class_name_str.replaceAll(\"^\", \"\")\n        val\
    \ class_name_str = class_name_str.replaceAll(\"$\", \"\")\n        val class_name_str\
    \ = class_name_str.replaceAll(\"\\\\s\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\
    \\\\W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\\
    W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\W\",\
    \ \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\"\
    )\n        val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n \
    \       val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n    \
    \    val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n       \
    \ val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n        val\
    \ class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n        val class_name_str\
    \ = class_name_str.replaceAll(\"\\\\W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\
    \\\\W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\\
    W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\W\",\
    \ \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\"\
    )\n        val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n \
    \       val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n    \
    \    val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n       \
    \ val class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n        val\
    \ class_name_str = class_name_str.replaceAll(\"\\\\W\", \"\")\n        val class_name_str\
    \ = class_name_str.replaceAll(\"\\\\W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\
    \\\\W\", \"\")\n        val class_name_str = class_name_str.replaceAll(\"\\\\\
    W\", \"\")\n        val class_name_str = class_", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_frac = extensions_count_diff / extensions_count_upper\n\
    \        val extensions_count_diff_frac_max = extensions_count_diff_frac.max\n\
    \        val extensions_count_diff_frac_max_index = extensions_count_diff_frac.indexWhere(_\
    \ == extensions_count_diff_frac_max)\n        val extensions_count_diff_frac_max_index\
    \ = extensions_count_diff_frac_max_index + extensions_count_diff_frac_max\n  \
    \      val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ / extensions_count_upper\n        val extensions_count_diff_frac_max_index =\
    \ extensions_count_diff_frac_max_index + 1\n        val extensions_count_diff_frac_max_index\
    \ = extensions_count_diff_frac_max_index / extensions_count_upper\n        val\
    \ extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ / extensions_count_upper\n        val extensions_count_diff_frac_max_index =\
    \ extensions_count_diff_frac_max_index + 1\n        val extensions_count_diff_frac_max_index\
    \ = extensions_count_diff_frac_max_index / extensions_count_upper\n        val\
    \ extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ / extensions_count_upper\n        val extensions_count_diff_frac_max_index =\
    \ extensions_count_diff_frac_max_index + 1\n        val extensions_count_diff_frac_max_index\
    \ = extensions_count_diff_frac_max_index / extensions_count_upper\n        val\
    \ extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ / extensions_count_upper\n        val extensions_count_diff_frac_max_index =\
    \ extensions_count_diff_frac_max_index + 1\n        val extensions_count_diff_frac_max_index\
    \ = extensions_count_diff_frac_max_index / extensions_count_upper\n        val\
    \ extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_", "    \
    \    val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.foldLeft(0) { (acc, x) => acc + (x._1 -\
    \ x._2) }\n        val class_name_with_strength = class_name_map + (strength ->\
    \ class_name)\n        val max_strength = extensions_map.maxBy(x => x._1)._2\n\
    \        val max_class_name = class_name_map.maxBy(x => x._1)._2\n        val\
    \ max_class_name_with_strength = class_name_with_strength.maxBy(x => x._1)._2\n\
    \        val max_extension = extensions_map.maxBy(x => x._1)._2\n        val max_extension_with_strength\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength = extensions_map.maxBy(x\
    \ => x._1)._2\n        val max_extension_strength_with_strength = extensions_map.maxBy(x\
    \ => x._1)._2\n        val max_extension_strength_with_strength_class_name = extensions_map.maxBy(x\
    \ => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension_with_strength\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension_with_strength_extension\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension_with_strength_extension_extension\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension_with_strength_extension_extension_extension\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension_with_strength_extension_extension_extension_extension\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength_class_name_with_strength_extension_with_strength_extension_extension_extension_extension_extension\
    \ = extensions_map.maxBy(x => x._1)._2\n        val max_extension_strength_with_strength",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toInt - class_name_map.get(x).toInt,\
    \ x))\n        val strength_sorted = strength.sortBy(x => x._1).reverse\n    \
    \    strength_sorted.head._2", "        var strongest_extension = \"\"\n     \
    \   var strongest_extension_strength = -1\n        var extensions_with_same_strength\
    \ = List[String]()\n        for(extension <- extensions){\n            val cap\
    \ = extension.filter(x => x.isUpper).length\n            val sm = extension.filter(x\
    \ => x.isLower).length\n            val strength = cap - sm\n            if(strength\
    \ > strongest_extension_strength){\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \            else if(strength == strongest_extension_strength){\n            \
    \    extensions_with_same_strength += extension\n            }\n        }\n  \
    \      if(extensions_with_same_strength.length > 1){\n            extensions_with_same_strength.sortWith((x,y)\
    \ => x.toString.compareTo(y.toString))\n            strongest_extension = extensions_with_same_strength(0)\n\
    \        }\n        class_name + \".\" + strongest_extension", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_count = class_name.length\n\
    \        val strength = extensions_count - class_name_count\n        if (strength\
    \ > 0) extensions(0) else \"\"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val extension_length\
    \ = extensions_count.toDouble / class_name_length\n        val extension_strength\
    \ = extension_length - extensions_count.toDouble\n        val extension_strength_str\
    \ = extension_strength.toString.replaceAll(\"\\\\.\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"\\\\D\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^0\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_str\
    \ = extension_strength_str.replaceAll(\"^-\", \"\")\n        val extension_strength_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.values.sortWith(_ < _)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.mkString(\"\"\
    ) + \".\"\n        val extensions_sorted = extensions_sorted.dropRight(1)\n  \
    \      class_name + extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase - e.toLowerCase -> 1)).toMap\n        val class_name_map =\
    \ class_name.map(c => (c.toUpperCase -> 1)).toMap\n        val max_strength =\
    \ extensions_map.values.max\n        val max_key = extensions_map.keys.max\n \
    \       val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_value_map =\
    \ max_key_value.map(c => (c.toUpperCase -> 1)).toMap\n        val max_key_value_map_keys\
    \ = max_key_value_map.keys\n        val max_key_value_map_values = max_key_value_map.values\n\
    \        val max_key_value_map_keys_index = max_key_value_map_keys.indexOf(max_key_value)\n\
    \        val max_key_value_map_values_index = max_key_value_map_values.indexOf(max_key_value)\n\
    \        val max_key_value_map_keys_value = max_key_value_map_keys.get(max_key_value_map_keys_index)\n\
    \        val max_key_value_map_values_value = max_key_value_map_values.get(max_key_value_map_values_index)\n\
    \        val max_key_value_map_keys_value_map = max_key_value_map_keys_value.map(c\
    \ => (c.toUpperCase -> 1)).toMap\n        val max_key_value_map_keys_value_map_keys\
    \ = max_key_value_map_keys_value_map.keys\n        val max_key_value_map_keys_value_map_values\
    \ = max_key_value_map_keys_value_map.values\n        val max_key_value_map_keys_value_map_keys_index\
    \ = max_key_value_map_keys_value_map_keys.indexOf(max_key_value_map_values_value)\n\
    \        val max_key_value_map_keys_value_map_values_index = max_key_value_map_keys_value_map_values.indexOf(max_key_value_map_values_value)\n\
    \        val max_key_value_map_keys_value_map_keys_value = max_key_value_map_keys_value_map_keys.get(max_key_value_map_keys_value_map_keys_index)\n\
    \        val max_key_value_map_keys_value_map_values_value = max_key_value_map_keys_value_map_values.get(max_key_value_map_keys_value_map_values_index)\n\
    \        val max_key_value_map_keys_value_map_keys_value_map = max_key_value_map_keys_value_map_keys_value.map(c\
    \ => (c.toUpperCase -> 1)).toMap\n        val max_key_value_map_keys_value_map_keys_value_map_keys\
    \ = max_key_value_map_keys_value_map_keys_value_map.keys\n        val max_key_value_map_keys_value_map_keys_value_map_values\
    \ = max_key_value_map_keys_value_map_keys_value_map.values\n        val max_key_value_map_keys_value_map_keys_value_map_keys_index\
    \ = max_key_value_map_keys_value_map_keys_value_map_keys.indexOf(max_key_value_map_keys_value_map_values_value)\n\
    \        ", "        val extensions_count = extensions.map(_.length).sum\n   \
    \     val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val extensions_count_ratio = extensions_count_upper / extensions_count_lower\n\
    \        val extensions_count_ratio2 = extensions_count_upper_ratio / extensions_count_lower_ratio\n\
    \        val extensions_count_ratio3 = extensions_count_ratio * extensions_count_ratio2\n\
    \        val extensions_count_ratio4 = extensions_count_ratio3 * extensions_count_ratio\n\
    \        val extensions_count_ratio5 = extensions_count_ratio4 * extensions_count_ratio3\n\
    \        val extensions_count_ratio6 = extensions_count_ratio5 * extensions_count_ratio4\n\
    \        val extensions_count_ratio7 = extensions_count_ratio6 * extensions_count_ratio5\n\
    \        val extensions_count_ratio8 = extensions_count_ratio7 * extensions_count_ratio6\n\
    \        val extensions_count_ratio9 = extensions_count_ratio8 * extensions_count_ratio7\n\
    \        val extensions_count_ratio10 = extensions_count_ratio9 * extensions_count_ratio8\n\
    \        val extensions_count_ratio11 = extensions_count_ratio10 * extensions_count_ratio9\n\
    \        val extensions_count_ratio12 = extensions_count_ratio11 * extensions_count_ratio10\n\
    \        val extensions_count_ratio13 = extensions_count_ratio12 * extensions_count_ratio11\n\
    \        val extensions_count_ratio14 = extensions_count_ratio13 * extensions_count_ratio12\n\
    \        val extensions_count_ratio15 = extensions_count_ratio14 * extensions_count_ratio13\n\
    \        val extensions_count_ratio16 = extensions_count_ratio15 * extensions_count_ratio14\n\
    \        val extensions_count_ratio17 = extensions_count_ratio16 * extensions_count_ratio15\n\
    \        val extensions_count_ratio18 = extensions_count_ratio17 * extensions_count_ratio16\n\
    \        val extensions_count_ratio19 = extensions_count_ratio18 * extensions_count_ratio17\n\
    \        val extensions_count_ratio20 = extensions_count_ratio19 * extensions_count_ratio18\n\
    \        val extensions_count_ratio21 = extensions_count_ratio20 * extensions_count_ratio19\n\
    \        val extensions_count_ratio22 = extensions_count_ratio21 * extensions_count_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sorted_sorted = extensions_count_sorted.sort\n\
    \        val extensions_count_sorted_sorted_sorted = extensions_count_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n     \
    \   val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.reverse\n\
    \        val extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        extension", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split(\"\
    \\\\.\").toMap\n        val strength = class_name_map.getOrElse(\"\", \"\").length\n\
    \        val extensions_strength = extensions_map.getOrElse(\"\", \"\").length\n\
    \        val strength_diff = strength - extensions_strength\n        val extensions_names\
    \ = extensions_map.keys.toList\n        val extensions_names_sorted = extensions_names.sortWith((a,\
    \ b) => strength_diff * a.compareTo(b))\n        val extensions_names_sorted =\
    \ extensions_names_sorted.takeWhile(x => class_name_map.getOrElse(x, \"\").length\
    \ != 0).mkString(\".\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    \\\\.\", \"\")\n        val extensions_names_sorted = extensions_names_sorted.replaceFirst(\"\
    ^\", \"\")\n        val extension", "        val extensions_count = extensions.count\n\
    \        val extensions_count_upper = extensions.count(_.toUpperCase)\n      \
    \  val extensions_count_lower = extensions.count(_.toLowerCase)\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_upper\
    \ = extensions_count_diff / extensions_count_upper\n        val extensions_count_diff_lower\
    \ = extensions_count_diff / extensions_count_lower\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper / extensions_count_upper\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower / extensions_count_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper / extensions_count_upper\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_diff_lower / extensions_count_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper / extensions_count_upper\n        val\
    \ extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper / extensions_count_upper\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper / extensions_count_upper\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_lower\
    \ / extensions_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase - x.toLowerCase + 1)).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.values.toList.sortWith(_\
    \ < _)\n        val first_extension = sorted_extensions.head\n        val class_name_with_first_extension\
    \ = class_name + first_extension\n        val class_name_with_first_extension_strength\
    \ = class_name_with_first_extension + first_extension.substring(class_name_with_first_extension.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength = class_name_with_first_extension_strength\
    \ + first_extension.substring(class_name_with_first_extension_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength\
    \ = class_name_with_first_extension_strength_strength + first_extension.substring(class_name_with_first_extension_strength_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength_strength\
    \ = class_name_with_first_extension_strength_strength_strength + first_extension.substring(class_name_with_first_extension_strength_strength_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength_strength_strength\
    \ = class_name_with_first_extension_strength_strength_strength_strength + first_extension.substring(class_name_with_first_extension_strength_strength_strength_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength_strength_strength_strength\
    \ = class_name_with_first_extension_strength_strength_strength_strength_strength\
    \ + first_extension.substring(class_name_with_first_extension_strength_strength_strength_strength_strength_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength\
    \ = class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength\
    \ + first_extension.substring(class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength_strength\
    \ + first_extension.substring(class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength.length\
    \ - 1)\n        val class_name_with_first_extension_strength_strength_strength_strength_strength_strength_strength_strength_strength_strength\
    \ = class_name_", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toUpperCase.length).max\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(x => x.toUpperCase.length).reverse\n        val\
    \ extensions_sorted_sorted = extensions_sorted.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val extensions_sorted_sorted_sorted = extensions_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x.toUpperCase.length).reverse\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toUpperCase.length).reverse\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val extensions_sorted = extensions_map.values.sortWith((a, b) => a >\
    \ b)\n        val extensions_sorted = extensions_sorted.takeWhile(_ > 0).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 3).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 4).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 5).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 6).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 7).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 8).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 9).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 10).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 11).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 12).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 13).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 14).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 15).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 16).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 17).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 18).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 19).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 20).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 21).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 22).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_ < 23).reverse\n\
    \        val extensions_sorted = extensions_sor", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortBy(_.length)\n\
    \        val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length = extensions_count_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum = extensions_count_sorted_reversed_length.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted = extensions_count_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed = extensions_count_sorted_reversed_length_sum_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sum\n \
    \       val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum.sum\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.sortBy(_.sum)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed.reverse\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length\
    \ = extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length.map(_.length)\n\
    \        val extensions_count_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum_sorted_reversed_length_sum\
    \ = extensions_count_sorted_reversed_length_sum_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n        val\
    \ max_strength = strength.max\n        val max_key = strength.indexWhere(x =>\
    \ x == max_strength)\n        val max_key = max_key match {\n            case\
    \ Some(i) => extensions_map.getOrElse(extensions_map.keys.apply(i), \"\")\n  \
    \          case None => \"\"\n        }\n        val max_key = max_key match {\n\
    \            case Some(class_name) => class_name\n            case None => \"\"\
    \n        }\n        max_key + extensions_map.getOrElse(max_key, \"\")", "   \
    \     val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.filter(_._2.length == class_name_map.get(_._2)).length\n\
    \        val extension = extensions_map.filter(_._2.length == class_name_map.get(_._2)).head._1\n\
    \        val extension_map = extensions_map.filter(_._2.length == class_name_map.get(_._2)).head._2\n\
    \        val extension_strength = extension_map.filter(_._2.length == class_name_map.get(_._2)).length\n\
    \        val extension_strength_map = extension_map.filter(_._2.length == class_name_map.get(_._2)).head._2\n\
    \        val extension_strength_map_sorted = extension_strength_map.sortBy(x =>\
    \ x._1)\n        val extension_strength_map_sorted_sorted = extension_strength_map_sorted.sortBy(x\
    \ => x._2)\n        val extension_strength_map_sorted_sorted_sorted = extension_strength_map_sorted_sorted.sortBy(x\
    \ => x._1)\n        val extension_strength_map_sorted_sorted_sorted_sorted = extension_strength_map_sorted_sorted_sorted.sortBy(x\
    \ => x._2)\n        val extension_strength_map_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_map_sorted_sorted_sorted_sorted.sortBy(x => x._1)\n   \
    \     val extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted = extension_strength_map_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._2)\n        val extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1)\n        val extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._2)\n        val extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._1)\n        val extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x._2)\n        val extension_strength_map_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extension_strength_map_sorted_sorted_sorted_sorted_sorted_", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase).map(_.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase).map(_.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val class_name_upper = class_name.toUpperCase\n\
    \        val class_name_lower = class_name.toLowerCase\n        val extensions_count_upper_lower\
    \ = extensions.map(_.toUpperCase).map(_.toLowerCase).map(_.length).sum\n     \
    \   val extensions_count_lower_upper = extensions.map(_.toLowerCase).map(_.toUpperCase).map(_.length).sum\n\
    \        val strength_lower = extensions_count_lower_upper - extensions_count_upper\n\
    \        val strength_upper = extensions_count_upper - extensions_count_lower\n\
    \        val strength_upper_to_lower = extensions_count_upper_lower - extensions_count_lower\n\
    \        val strength_lower_to_upper = extensions_count_lower_upper - extensions_count_upper\n\
    \        val strength_upper_to_lower_to_lower = extensions_count_upper_lower_lower\
    \ - extensions_count_lower_upper\n        val strength_lower_to_upper_to_lower\
    \ = extensions_count_lower_upper_lower - extensions_count_upper_lower\n      \
    \  val strength_upper_to_lower_to_lower_to_upper = extensions_count_upper_lower_lower_upper\
    \ - extensions_count_lower_upper_lower\n        val strength_lower_to_upper_to_lower_to_upper\
    \ = extensions_count_lower_upper_lower_upper - extensions_count_upper_lower_lower\n\
    \        val strength_upper_to_lower_to_lower_to_upper_to_lower = extensions_count_upper_lower_lower_upper_lower\
    \ - extensions_count_lower_upper_lower_upper\n        val strength_lower_to_upper_to_lower_to_upper_to_lower_to_upper\
    \ = extensions_count_lower_upper_lower_upper_lower_upper - extensions_count_upper_lower_lower_upper_lower\n\
    \        val strength_upper_to_lower_to_lower_to_upper_to_lower_to_upper_to_lower\
    \ = extensions_count_upper_lower_lower_upper_lower_upper_lower - extensions_count_upper_lower_lower_upper_lower_upper\n\
    \        val strength_lower_to_upper_to_lower_to_upper_to_lower_to_upper_to_lower_to_upper\
    \ = extensions_count_lower_upper_lower_upper_lower_upper_lower_upper_lower - extensions_count_upper_lower_lower_upper_lower_upper_lower_upper\n\
    \        val strength_upper_to_lower_to_lower_to_upper_to_lower_to_upper_to_lower_to_upper_to_lower\
    \ = extensions_count_upper_lower_lower_upper_lower_upper_lower_upper_lower - extensions_count_upper_lower_lower_upper_lower_upper_lower_upper\n\
    \        val strength_lower_to_upper_to_lower_to_upper_to_lower_to_upper", " \
    \       val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A')\
    \ - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n   \
    \     val strength = extensions_map.getOrElse(class_name, 0)\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortWith((a, b) => strength - a._2).map(_._1)\n     \
    \   val extensions_sorted = extensions_sorted.take(1).mkString.concat(\".\").concat(extensions_sorted.last)\n\
    \        extensions_sorted", "        val extensions_map = extensions.map(e =>\
    \ e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val sorted_extensions = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val first_extension = sorted_extensions.head\n        val extension_str\
    \ = first_extension._1 + \".\" + first_extension._2\n        if (strength == 0)\
    \ extension_str\n        else if (strength > 0) extension_str\n        else if\
    \ (strength < 0) extension_str + extensions_map.getOrElse(class_name, \"\")\n\
    \        else \"\"", "        val extensions_map = extensions.map(x => (x.toUpperCase.size,\
    \ x.toLowerCase.size)).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\"\")\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val ", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_upper\
    \ = extensions_count_upper - extensions_count_diff\n        val extensions_count_diff_lower\
    \ = extensions_count_lower - extensions_count_diff\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper - extensions_count_diff_lower\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_lower\
    \ = class_name.toLowerCase\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val class_name_upper = class_name.toUpperCase\n        val class_name_low",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).toArray\n        val max_strength = strength.max\n\
    \        val max_key = extensions_map.keys.toArray.max\n        val max_value\
    \ = strength.max\n        val max_key_value = class_name_map.getOrElse(max_key,\
    \ 0)\n        val max_key_value_length = max_key_value.length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = max_key_value_length + max_key_value_length\n        val max_key_value_length\
    \ = ", "        val extensions_count = extensions.map(_.length).sum\n        val\
    \ extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n        val\
    \ extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n        val\
    \ strength = extensions_count_upper - extensions_count_lower\n        val extensions_sorted\
    \ = extensions.sortWith(_.length > _.length)\n        val extensions_sorted =\
    \ extensions.sortWith(_.toUpperCase.length > _.toUpperCase.length)\n        val\
    \ extensions_sorted = extensions.sortWith(_.toLowerCase.length > _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.length < _.length)\n  \
    \      val extensions_sorted = extensions.sortWith(_.toUpperCase.length < _.toUpperCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(_.toLowerCase.length < _.toLowerCase.length)\n\
    \        val extensions_sorted = extensions.sortWith(", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.map(e => class_name + \".\"\
    \ + e)\n        extensions_sorted.head", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\".\")\n        val\
    \ extensions_sorted = extensions_sorted.dropWhile(_ == '_').drop(1)\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.filter(_._2 > class_name_map.get(_._2)).map(_._1).sum\n\
    \        val extension = extensions_map.filter(_._2 == class_name_map.get(_._2)).map(_._1).head\n\
    \        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strengths = extensions_map.filter(_._2\
    \ > class_name_map.get(_._2)).map(_._1)\n        val strength = strengths.maxBy(x\
    \ => x.length)\n        val class_name = class_name_map.getOrElse(strength, \"\
    \")\n        val extension = extensions_map.getOrElse(strength, \"\")\n      \
    \  class_name + extension", "        val extensions_map = extensions.map(x =>\
    \ (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.toList\n        val extensions_sorted = extensions_sorted.map(x\
    \ => class_name + x).mkString(\".\")\n        extensions_sorted.head", "     \
    \   val extensions_map = extensions.map(e => (e.toUpperCase, e.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(c => (c.toUpperCase, c.toLowerCase)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n \
    \       val class_name_sorted = class_name_map.toSeq.sortBy(_._2).reverse\n  \
    \      val class_name_length = class_name_sorted.head._2.length\n        val extensions_length\
    \ = extensions_sorted.head._2.length\n        val strength = extensions_length\
    \ - class_name_length\n        if (strength == 0) class_name_sorted.head._1\n\
    \        else if (strength > 0) class_name_sorted.head._1\n        else extensions_sorted.head._1",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.replaceAll(\"(.)\\\\1\"\
    , \"$1\")\n        class_name + \".\" + extensions_sorted", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strengths\
    \ = extensions_map.values.map(x => (x, class_name_map.get(x)))\n        val max_strength\
    \ = strengths.maxBy(x => x._1)\n        val max_key = max_strength._2\n      \
    \  val max_value = max_strength._1\n        val max_key = max_key.substring(0,\
    \ max_key.indexOf(\"_\"))\n        val max_value = max_value.substring(0, max_value.indexOf(\"\
    _\"))\n        class_name + \".\" + max_key + max_value", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0) { (acc, x) => acc + (class_name_map(x._1) - class_name_map(x._2))\
    \ }\n        val strongest_extension = extensions_map.maxBy(_._1)\n        val\
    \ strongest_extension_class = class_name_map(strongest_extension._1)\n       \
    \ val strongest_extension_strength = strongest_extension._2\n        val strongest_extension_class_name\
    \ = strongest_extension_class + \".\" + strongest_extension_strength\n       \
    \ val strongest_extension_class_name_map = strongest_extension_class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength\
    \ = strongest_extension_class_name_map(strongest_extension_strength)\n       \
    \ val strongest_extension_class_name_strength_map = strongest_extension_class_name_strength.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength_strength\
    \ = strongest_extension_class_name_strength_map(strongest_extension_strength)\n\
    \        val strongest_extension_class_name_strength_strength_map = strongest_extension_class_name_strength_strength.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength_strength_strength_map\
    \ = strongest_extension_class_name_strength_strength_strength.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength_strength_strength_map\
    \ = strongest_extension_class_name_strength_strength_strength.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength_strength_strength_map\
    \ = strongest_extension_class_name_strength_strength_strength.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength_strength_strength_map\
    \ = strongest_extension_class_name_strength_strength_strength.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strongest_extension_class_name_strength_strength_strength_map\
    \ = strongest_extension_class_name_strength_strength_strength.map(x => (x.toUpperCase,\
    \ x.toLowerCase", "        val extensions_map = extensions.map(x => (x.toUpperCase\
    \ - x.toLowerCase -> x)).toMap\n        val extensions_list_sorted = extensions_map.values.toList.sortWith(_._1\
    \ < _._1)\n        val extensions_list_sorted = extensions_list_sorted.take(extensions_list_sorted.length-1)\n\
    \        val extensions_list_sorted.map(x => class_name + x._1).mkString(\".\"\
    ) + \".\" + extensions_list_sorted.map(x => x._2).mkString", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_sorted = extensions.sortWith((a, b) => strength - a.length\
    \ - b.length)\n        val extensions_sorted = extensions.sortWith((a, b) => strength\
    \ - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)", "        val extensions_map = extensions.map(e\
    \ => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._1 < strength)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2).mkString(\"\")\n\
    \        class_name + \".\" + extensions_sorted", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.filter(_._2.length == class_name_map.getOrElse(_._2, 0)).length\n\
    \        val extension = extensions_map.filter(_._2.length == class_name_map.getOrElse(_._2,\
    \ 0)).head._1\n        class_name_map.getOrElse(extension, \"\") + extension",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((x, y) => x.toDouble - y.toDouble)\n\
    \        val extensions_sorted = extensions_map.values.sortBy(x => -x)\n     \
    \   val extensions_sorted = extensions_sorted.takeWhile(x => x < strength)\n \
    \       val extensions_sorted = extensions_sorted.map(x => class_name + x.toString)\n\
    \        extensions_sorted.head", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strengths = extensions_map.map(x\
    \ => class_name_map(x._1) - x._2).toList\n        val strengths_sorted = strengths.sortWith(_\
    \ < _)\n        val strengths_sorted = strengths_sorted.takeWhile(_ > 0).reverse\n\
    \        val strengths_sorted.headOption.getOrElse(class_name_map(class_name_map.keys.head))",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0) { (s, x) =>\n            val\
    \ extension = extensions_map.getOrElse(x, \"\")\n            val extension_length\
    \ = extension.length\n            val class_name_length = x.length\n         \
    \   val strength_length = extension_length - class_name_length\n            s\
    \ + strength_length\n        }\n        val class_name_with_strength = class_name_map.foldLeft(\"\
    \") { (s, x) =>\n            val extension = extensions_map.getOrElse(x, \"\"\
    )\n            val extension_length = extension.length\n            val class_name_length\
    \ = x.length\n            val strength_length = extension_length - class_name_length\n\
    \            s + x.toUpperCase + extension.substring(class_name_length) + x.toLowerCase\n\
    \        }\n        val strength_str = strength.toString\n        val class_name_with_strength_str\
    \ = class_name_with_strength + strength_str\n        class_name_with_strength_str",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_.length < _.length)\n        val extensions_count_sorted_length\
    \ = extensions_count_sorted.map(_.length).sum\n        val extensions_count_sorted_length_sorted\
    \ = extensions_count_sorted.sortWith(_.length < _.length)\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_",
  "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n\
    \        val extensions_sorted = extensions_sorted.map(e => class_name + \".\"\
    \ + e)\n        extensions_sorted.head", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.sortWith((a, b) => b.length\
    \ - a.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith((a, b) => b.length - a.length)\n \
    \       val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortWith((a, b) => b.length -\
    \ a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith((a, b) => b.length\
    \ - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith((a, b)\
    \ => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_", "       \
    \ val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size,\
    \ x)).toMap\n        val strength = extensions_map.values.reduce((a, b) => if\
    \ (a > b) a else b)\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a > b)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ < strength)\n        val extensions_sorted.map(x => class_name + x._1 + x._2).mkString(\"\
    .\") + \".\"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_length = class_name.length\n        val strength = extensions_count\
    \ - class_name_length\n        val extensions_sorted = extensions.sortWith(_.length\
    \ > _.length)\n        val extension_length = extensions_sorted.map(_.length).sum\n\
    \        val extension_strength = extension_length - class_name_length\n     \
    \   val extension_sorted = extensions_sorted.sortWith(_.length > _.length)\n \
    \       val extension_first = extension_sorted.head\n        val extension_last\
    \ = extension_sorted.last\n        val extension_first = extension_first.toLowerCase\
    \ + extension_first\n        val extension_last = extension_last.toLowerCase +\
    \ extension_last\n        val extension_strength_first = extension_strength -\
    \ class_name_length\n        val extension_strength_last = extension_strength\
    \ - extension_first.length\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_strength_last = extension_strength_last.toLowerCase\
    \ + extension_strength_last\n        val extension_strength_first = extension_strength_first.toLowerCase\
    \ + extension_strength_first\n        val extension_", "        val extensions_map\
    \ = extensions.map(e => (e.toUpperCase.size, e.toLowerCase.size)).toMap\n    \
    \    val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n     \
    \   val extensions_sorted = extensions_sorted.takeWhile(_._1 < extensions_sorted.last._1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\".\")\n        class_name + extensions_sorted",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted =\
    \ extensions_sorted.takeWhile(_._2 > strength).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\"\") + \".\" + extensions_sorted.last\n      \
    \  class_name+\".\"+extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val strongest_extension = extensions_sorted.head._2\n        class_name\
    \ + \".\" + strongest_extension", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x\
    \ => class_name_map.getOrElse(x, 0) - x.toString.toUpperCase.length).max\n   \
    \     val extensions_sorted = extensions_map.values.sortBy(x => x.toString.toUpperCase.length).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length\
    \ <= strength).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.toString.toUpperCase.length <= strength).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length <= strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length\
    \ <= strength).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.toString.toUpperCase.length <= strength).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length <= strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length\
    \ <= strength).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.toString.toUpperCase.length <= strength).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length <= strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length\
    \ <= strength).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.toString.toUpperCase.length <= strength).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length <= strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length\
    \ <= strength).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x.toString.toUpperCase.length <= strength).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length <= strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x.toString.toUpperCase.length\
    \ <= strength).reverse\n        val extensions_sor", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length)\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_.length\
    \ < _.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_.length < _.length)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val strength_upper = strength / extensions_count_upper\n\
    \        val strength_lower = strength / extensions_count_lower\n        val strength_sum\
    \ = strength_upper + strength_lower\n        val strength_max = if (strength_sum\
    \ > 0) strength_sum else 0\n        val strength_min = if (strength_sum < 0) -strength_sum\
    \ else 0\n        val strength_average = if (strength_sum > 0) (strength_sum /\
    \ extensions_count_upper) else 0\n        val strength_average_lower = if (strength_sum\
    \ < 0) (strength_sum / extensions_count_lower) else 0\n        val strength_average_max\
    \ = if (strength_sum > 0) (strength_sum / extensions_count_upper) else 0\n   \
    \     val strength_average_min = if (strength_sum < 0) (strength_sum / extensions_count_lower)\
    \ else 0\n        val strength_average_average = if (strength_sum > 0) (strength_sum\
    \ / extensions_count_upper) else 0\n        val strength_average_average_lower\
    \ = if (strength_sum < 0) (strength_sum / extensions_count_lower) else 0\n   \
    \     val strength_average_average_max = if (strength_sum > 0) (strength_sum /\
    \ extensions_count_upper) else 0\n        val strength_average_average_min = if\
    \ (strength_sum < 0) (strength_sum / extensions_count_lower) else 0\n        val\
    \ strength_average_average_average = if (strength_sum > 0) (strength_sum / extensions_count_upper)\
    \ else 0\n        val strength_average_average_average_lower = if (strength_sum\
    \ < 0) (strength_sum / extensions_count_lower) else 0\n        val strength_average_average_average_max\
    \ = if (strength_sum > 0) (strength_sum / extensions_count_upper) else 0\n   \
    \     val strength_average_average_average_min = if (strength_sum < 0) (strength_sum\
    \ / extensions_count_lower) else 0\n        val strength_average_average_average_average\
    \ = if (strength_sum > 0) (strength_sum / extensions_count_upper) else 0\n   \
    \     val strength_average_average_average_average_lower = if (strength_sum <\
    \ 0) (strength_sum / extensions_count_lower) else 0\n        val strength_average_average_average_average_max\
    \ = if (strength_sum > 0) (strength_sum / extensions_count_", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs)\n        val\
    \ strength_sorted = strength.sortWith((x, y) => x < y)\n        val strength_sorted_list\
    \ = strength_sorted.toList\n        val strength_sorted_list_sorted = strength_sorted_list.sortWith((x,\
    \ y) => x < y)\n        val strength_sorted_list_sorted_first = strength_sorted_list_sorted.head\n\
    \        val strength_sorted_list_sorted_first_upper = strength_sorted_list_sorted.map(x\
    \ => x.toUpperCase).head\n        val strength_sorted_list_sorted_first_lower\
    \ = strength_sorted_list_sorted.map(x => x.toLowerCase).head\n        val strength_sorted_list_sorted_first_first_upper\
    \ = strength_sorted_list_sorted.map(x => x.toUpperCase).map(x => x.toUpperCase).head\n\
    \        val strength_sorted_list_sorted_first_first_lower = strength_sorted_list_sorted.map(x\
    \ => x.toLowerCase).map(x => x.toLowerCase).head\n        val strength_sorted_list_sorted_first_first_first_upper\
    \ = strength_sorted_list_sorted.map(x => x.toUpperCase).map(x => x.toUpperCase).map(x\
    \ => x.toUpperCase).head\n        val strength_sorted_list_sorted_first_first_first_lower\
    \ = strength_sorted_list_sorted.map(x => x.toLowerCase).map(x => x.toLowerCase).map(x\
    \ => x.toLowerCase).head\n        val strength_sorted_list_sorted_first_first_first_first_upper\
    \ = strength_sorted_list_sorted.map(x => x.toUpperCase).map(x => x.toUpperCase).map(x\
    \ => x.toUpperCase).map(x => x.toUpperCase).head\n        val strength_sorted_list_sorted_first_first_first_lower\
    \ = strength_sorted_list_sorted.map(x => x.toLowerCase).map(x => x.toLowerCase).map(x\
    \ => x.toLowerCase).map(x => x.toLowerCase).head\n        val strength_sorted_list_sorted_first_first_first_first_upper\
    \ = strength_sorted_list_sorted.map(x => x.toUpperCase).map(x => x.toUpperCase).map(x\
    \ => x.toUpperCase).map(x => x.toUpperCase).map(x => x.toUpperCase).head\n   \
    \     val strength_sorted_list_sorted_first_first_first_lower = strength_sorted_list_sorted.map(x\
    \ => x.toLowerCase).map(x => x.toLowerCase).map(x => x.toLowerCase).map(x => x.toLowerCase).map(x\
    \ => x.", "        val extensions_count = extensions.count\n        val extensions_count_upper\
    \ = extensions.count(_.toUpperCase == _)\n        val extensions_count_lower =\
    \ extensions.count(_.toLowerCase == _)\n        val extensions_count_diff = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_diff_frac = extensions_count_diff\
    \ / extensions_count\n        val extensions_count_diff_frac_max = extensions_count_diff_frac.max\n\
    \        val extensions_count_diff_frac_max_index = extensions_count_diff_frac.indexOf(extensions_count_diff_frac_max)\n\
    \        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ - 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_max_index\
    \ + 1\n        val extensions_count_diff_frac_max_index = extensions_count_diff_frac_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (class_name_map.get(x)\
    \ - extensions_map.get(x)).abs).reduce(_ + _)\n        val strongest_extension\
    \ = extensions_map.values.filter(x => class_name_map.get(x) == x).head\n     \
    \   s\"$class_name.$strongest_extension\"", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val extensions_count_sorted_reversed = extensions_count_sorted.reverse\n   \
    \     val extensions_count_sorted_reversed_sorted = extensions_count_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed = extensions_count_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted.reverse\n        val\
    \ extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = extensions_count_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toUpperCase.length).max\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => class_name_map.getOrElse(x, 0) - x.toUpperCase.length)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x.toUpperCase.length <= class_name_map.getOrElse(x,\
    \ 0) - strength)\n        val extensions_sorted = extensions_sorted.map(x => class_name_map.getOrElse(x,\
    \ 0) + x.toUpperCase.length).mkString(\".\") + extensions_sorted.last\n      \
    \  extensions_sorted", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map.getOrElse(x, 0) - x.toString.toString.toUpperCase.length).max\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val extensions_count_upper_ratio = extensions_count_upper / extensions_count.toDouble\n\
    \        val extensions_count_lower_ratio = extensions_count_lower / extensions_count.toDouble\n\
    \        val extensions_count_ratio = extensions_count_upper / extensions_count_lower\n\
    \        val extensions_count_ratio2 = extensions_count_upper_ratio / extensions_count_lower_ratio\n\
    \        val extensions_count_ratio3 = extensions_count_ratio / extensions_count_ratio2\n\
    \        val extensions_count_ratio4 = extensions_count_ratio3 / extensions_count_ratio\n\
    \        val extensions_count_ratio5 = extensions_count_ratio4 / extensions_count_ratio3\n\
    \        val extensions_count_ratio6 = extensions_count_ratio5 / extensions_count_ratio4\n\
    \        val extensions_count_ratio7 = extensions_count_ratio6 / extensions_count_ratio5\n\
    \        val extensions_count_ratio8 = extensions_count_ratio7 / extensions_count_ratio6\n\
    \        val extensions_count_ratio9 = extensions_count_ratio8 / extensions_count_ratio7\n\
    \        val extensions_count_ratio10 = extensions_count_ratio9 / extensions_count_ratio8\n\
    \        val extensions_count_ratio11 = extensions_count_ratio10 / extensions_count_ratio9\n\
    \        val extensions_count_ratio12 = extensions_count_ratio11 / extensions_count_ratio10\n\
    \        val extensions_count_ratio13 = extensions_count_ratio12 / extensions_count_ratio11\n\
    \        val extensions_count_ratio14 = extensions_count_ratio13 / extensions_count_ratio12\n\
    \        val extensions_count_ratio15 = extensions_count_ratio14 / extensions_count_ratio13\n\
    \        val extensions_count_ratio16 = extensions_count_ratio15 / extensions_count_ratio14\n\
    \        val extensions_count_ratio17 = extensions_count_ratio16 / extensions_count_ratio15\n\
    \        val extensions_count_ratio18 = extensions_count_ratio17 / extensions_count_ratio16\n\
    \        val extensions_count_ratio19 = extensions_count_ratio18 / extensions_count_ratio17\n\
    \        val extensions_count_ratio20 = extensions_count_ratio19 / extensions_count_ratio18\n\
    \        val extensions_count_ratio21 = extensions_count_ratio20 / extensions_count_ratio19\n\
    \        val extensions_count_ratio22 = extensions_count_ratio", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.split(\"\\\\.\").toMap\n        val class_name_length\
    \ = class_name_map.size\n        val extensions_length = extensions_map.size\n\
    \        val strength = extensions_length - class_name_length\n        if (strength\
    \ > 0) {\n            val extension_strength = extensions_map.getOrElse(class_name_map.getOrElse(class_name_length,\
    \ -1), 0)\n            val extension_strength_sum = extension_strength * strength\n\
    \            val extension_strength_max = extension_strength_sum / extensions_length\n\
    \            val extension_strength_max_index = extensions_map.values.toList.zipWithIndex.\n\
    \                filter(_._2 == extension_strength_max).map(_._1).min\n      \
    \      val extension_strength_max_key = extensions_map.get(extension_strength_max_index)\n\
    \            val extension_strength_max_value = extension_strength_max_key._2\n\
    \            val extension_strength_max_key_length = extension_strength_max_key._1.length\n\
    \            val extension_strength_max_value_length = extension_strength_max_value.length\n\
    \            val extension_strength_max_key_length_diff = extension_strength_max_key_length\
    \ - extension_strength_max_value_length\n            val extension_strength_max_value_length_diff\
    \ = extension_strength_max_value_length - extension_strength_max_key_length_diff\n\
    \            val extension_strength_max_key_length_diff_percent = extension_strength_max_key_length_diff\
    \ / extension_strength_max_key_length\n            val extension_strength_max_value_length_diff_percent\
    \ = extension_strength_max_value_length_diff / extension_strength_max_value_length\n\
    \            val extension_strength_max_key_length_diff_percent_sum = extension_strength_max_key_length_diff_percent\
    \ * extension_strength_max_key_length\n            val extension_strength_max_value_length_diff_percent_sum\
    \ = extension_strength_max_value_length_diff_percent * extension_strength_max_value_length\n\
    \            val extension_strength_max_key_length_diff_percent_sum_diff = extension_strength_max_key_length_diff_percent_sum\
    \ - extension_strength_max_value_length_diff_percent_sum\n            val extension_strength_max_value_length_diff_percent_sum_diff\
    \ = extension_strength_max_value_length_diff_percent_sum - extension_strength_max_key_length_diff_percent_sum_diff\n\
    \            val extension_strength_max_key_length_diff_percent_sum_diff_percent\
    \ = extension_strength_max_key_length_diff_percent_sum_diff / extension_strength_max_key_length_diff_percent\n\
    \            val extension", "        val extensions_map = extensions.map(e =>\
    \ (e.toUpperCase, e.toLowerCase)).toMap\n        val class_name_map = class_name.map(c\
    \ => (c.toUpperCase, c.toLowerCase)).toMap\n        val extensions_count = extensions_map.size\n\
    \        val class_name_count = class_name_map.size\n        val strength = extensions_count\
    \ - class_name_count\n        val extension = extensions_map.getOrElse(class_name_map.getOrElse(\"\
    \", \"\"))\n        val extension_str = extension.mkString.toLowerCase\n     \
    \   val class_name = class_name_map.getOrElse(\"\", \"\")\n        val class_name_str\
    \ = class_name.mkString.toLowerCase\n        if (extension_str != class_name_str)\
    \ {\n            val strength_str = strength.mkString.toLowerCase\n          \
    \  val extension_str = extension.mkString.toLowerCase\n            val class_name_str\
    \ = class_name.mkString.toLowerCase\n            val strength_str = strength_str.substring(0,\
    \ strength_str.lastIndexOf(\".\"))\n            val extension_str = extension_str.substring(0,\
    \ extension_str.lastIndexOf(\".\"))\n            val class_name_str = class_name_str.substring(0,\
    \ class_name_str.lastIndexOf(\".\"))\n            val strength_str = strength_str\
    \ + \".\" + extension_str + \".\" + class_name_str\n            val class_name_str\
    \ = class_name_str + \".\" + extension_str + \".\" + strength_str\n          \
    \  val extension_str = extension_str + \".\" + strength_str + \".\" + class_name_str\n\
    \            val class_name_str = class_name_str + \".\" + extension_str + \"\
    .\" + strength_str\n            val extension_str = extension_str + \".\" + strength_str\
    \ + \".\" + class_name_str\n            val class_name_str = class_name_str +\
    \ \".\" + extension_str + \".\" + strength_str\n            val extension_str\
    \ = extension_str + \".\" + strength_str + \".\" + class_name_str\n          \
    \  val class_name_str = class_name_str + \".\" + extension_str + \".\" + strength_str\n\
    \            val extension_str = extension_str + \".\" + strength_str + \".\"\
    \ + class_name_str\n            val class_name_str = class_name_str + \".\" +\
    \ extension_str + \".\" + strength_str\n            val extension_str = extension_str\
    \ + \".\" + strength_str + \".\" + class_name_str\n            val class_name_str\
    \ = class_name_str + \".\" + extension_str + \".\" + strength_str\n          \
    \  val extension_str = extension_str + \".\" + strength_str + \".\" + class_name_str\n\
    \            val class_name_str = class_name_str + \".\" + extension_str + \"\
    .\" + strength_str\n            val extension_str = extension_str + \".\" + strength_str\
    \ + \".\" + class_name_str\n            val class_name_str = ", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_count = class_name.length\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength - a.length - b.length)\n        val\
    \ extensions_sorted = extensions_sorted.take(1)\n        val extensions_sorted\
    \ = extensions_sorted.mkString(\".\") + extensions_sorted.last\n        class_name+\"\
    .\"+extensions_sorted", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val first_extension = sorted_extensions.head\n\
    \        val first_extension_strength = extensions_map.get(first_extension)\n\
    \        if (first_extension_strength == strength) {\n            class_name +\
    \ first_extension\n        } else {\n            class_name + first_extension\
    \ + sorted_extensions.last\n        }", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n \
    \       val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.map(c => class_name_map.get(c) -\
    \ class_name_map.get(c)).reduce(_ + _)\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_map.get(c))\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(c => class_name_map.get(c) - class_name_map.get(c))\n\
    \        val extensions_sorted = extensions_map.values.sortBy(c => class_name_map.get(c)\
    \ - class_name_map.get(c))\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_map.get(c))\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(c => class_name_map.get(c) - class_name_map.get(c))\n\
    \        val extensions_sorted = extensions_map.values.sortBy(c => class_name_map.get(c)\
    \ - class_name_map.get(c))\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_map.get(c))\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(c => class_name_map.get(c) - class_name_map.get(c))\n\
    \        val extensions_sorted = extensions_map.values.sortBy(c => class_name_map.get(c)\
    \ - class_name_map.get(c))\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_map.get(c))\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(c => class_name_map.get(c) - class_name_map.get(c))\n\
    \        val extensions_sorted = extensions_map.values.sortBy(c => class_name_map.get(c)\
    \ - class_name_map.get(c))\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_map.get(c))\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(c => class_name_map.get(c) - class_name_map.get(c))\n\
    \        val extensions_sorted = extensions_map.values.sortBy(c => class_name_map.get(c)\
    \ - class_name_map.get(c))\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase).zipWithIndex.toMap\n        val class_name_map = class_name.zipWithIndex.toMap\n\
    \        val extensions_count = extensions_map.size\n        val class_name_count\
    \ = class_name_map.size\n        val extensions_strength = extensions_count -\
    \ class_name_count\n        val class_name_strength = class_name_map.get(extensions_strength).getOrElse(-1)\n\
    \        val extensions_strength_str = extensions_strength.toString\n        val\
    \ class_name_strength_str = class_name_strength.toString\n        val class_name_strength_str_with_extension\
    \ = class_name_strength_str + extensions_strength_str\n        class_name_map.get(class_name_strength_str_with_extension).getOrElse(class_name)",
  "        val extensions_map = extensions.map(e => (e.toUpperCase - e.toLowerCase\
    \ -> 1)).toMap\n        val class_name_map = class_name.map(c => (c.toUpperCase\
    \ - c.toLowerCase -> 1)).toMap\n        val max_strength = extensions_map.values.max\n\
    \        val max_extension = extensions_map.keys.max\n        val max_class_name\
    \ = class_name_map.keys.max\n        val max_extension_name = extensions_map.keys.max\n\
    \        val max_extension_strength = extensions_map.values.max\n        val max_extension_class_name\
    \ = class_name_map.values.max\n        val max_extension_extension = extensions_map.values.max\n\
    \        val max_extension_class_name_extension = class_name_map.values.max\n\
    \        val max_extension_class_name_extension_extension = extensions_map.values.max\n\
    \        val max_extension_class_name_extension_extension_extension = extensions_map.values.max\n\
    \        val max_extension_class_name_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension\
    \ = extensions_map.values.max\n        val max_extension_class_name_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        var strongest_extension = \"\"\n        var strength\
    \ = -1\n        extensions.foreach(e => {\n            val c = e.toUpperCase\n\
    \            val l = e.toLowerCase\n            val cap = c.length\n         \
    \   val sm = l.length\n            val strength = cap - sm\n            if (strength\
    \ > 0) {\n                if (strength > strongest_extension.length) {\n     \
    \               strongest_extension = e\n                }\n            }\n  \
    \      })\n        class_name + strongest_extension", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortWith((a, b) =>\
    \ strength - a._2).map(e => s\"$class_name.$e\")\n        if (extensions_sorted.size\
    \ == 1) extensions_sorted.head else extensions_sorted.head", "        val extensions_map\
    \ = extensions.map(e => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val class_name_map = class_name.map(c => c.toUpperCase.charAt(0) -> c.toUpperCase.charAt(1).toLowerCase).toMap\n\
    \        val strength = extensions_map.values.map(c => class_name_map.get(c) -\
    \ class_name_map.get(c)).sum\n        val extensions_sorted = extensions_map.values.sortBy(c\
    \ => class_name_map.get(c) - class_name_map.get(c))\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(c => class_name_map.get(c) - class_name_map.get(c)\
    \ > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c => class_name_map.get(c)\
    \ - class_name_map.get(c) > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c\
    \ => class_name_map.get(c) - class_name_map.get(c) > 0)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(c => class_name_map.get(c) - class_name_map.get(c)\
    \ > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c => class_name_map.get(c)\
    \ - class_name_map.get(c) > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c\
    \ => class_name_map.get(c) - class_name_map.get(c) > 0)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(c => class_name_map.get(c) - class_name_map.get(c)\
    \ > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c => class_name_map.get(c)\
    \ - class_name_map.get(c) > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c\
    \ => class_name_map.get(c) - class_name_map.get(c) > 0)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(c => class_name_map.get(c) - class_name_map.get(c)\
    \ > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c => class_name_map.get(c)\
    \ - class_name_map.get(c) > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c\
    \ => class_name_map.get(c) - class_name_map.get(c) > 0)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(c => class_name_map.get(c) - class_name_map.get(c)\
    \ > 0)\n        val extensions_sorted = extensions_sorted.takeWhile(c => class_name_map.get(c)\
    \ - class_name_map.get(c", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs).max\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => x - class_name_map.get(x))\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x < strength).mkString(\".\")\n        extensions_sorted + class_name", " \
    \       val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count\
    \ - extensions_count_upper - extensions_count_lower\n        val extensions_sorted\
    \ = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n      \
    \  val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b) => strength.compareTo(a.compareTo(b)))\n\
    \        val extensions_sorted = extensions.sortWith((a, b", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_cap = extensions.map(_.toUpperCase.length).sum -\
    \ extensions.map(_.toLowerCase.length).sum\n        val extensions_count_sm =\
    \ extensions.map(_.toLowerCase.length).sum - extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count_upper - extensions_count_cap\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_sm\n\
    \        val extensions_count_diff_diff = extensions_count_diff_upper - extensions_count_diff_lower\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper -\
    \ extensions_count_diff\n        val extensions_count_diff_diff_lower = extensions_count_diff_lower\
    \ - extensions_count_diff\n        val extensions_count_diff_diff_diff = extensions_count_diff_diff_upper\
    \ - extensions_count_diff_diff_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff\n        val\
    \ extensions_count_diff_diff_lower = extensions_count_diff_diff_lower - extensions_count_diff_diff\n\
    \        val extensions_count_diff_diff_diff = extensions_count_diff_diff_diff_upper\
    \ - extensions_count_diff_diff_diff_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff\n        val extensions_count_diff_diff_diff_diff\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_upper\
    \ - extensions_count_diff_diff_diff_diff_lower\n        val extensions_count_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_lower - extensions_count_diff_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_diff_upper\
    \ - extensions_count_diff_diff_diff_diff_diff_lower\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_diff_lower - extensions_count_diff_diff_diff_diff_diff_diff\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith((a, b) => b.length - a.length)\n        val extensions_count_sorted_length\
    \ = extensions_count_sorted.map(_.length).sum\n        val extensions_count_sorted_length_sorted\
    \ = extensions_count_sorted.sortWith((a, b) => b.length - a.length)\n        val\
    \ extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted.sortWith((a, b) => b.length - a.length)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length = extensions_count_sorted_length_sorted_length.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted.sortWith((a, b) => b.length\
    \ - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith((a, b)\
    \ => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith((a,\
    \ b) => b.length - a.length)\n        val extensions_count_sorted_", "       \
    \ val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map(x._1) -\
    \ class_name_map(x._2)).sum\n        val extensions_sorted = extensions_map.toSeq.sortBy(x\
    \ => x._1).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_sorted.takeWhile(x\
    \ => x._2 > 0).reverse\n        val extensions_sorted = extensions_", "      \
    \  val extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val strength_sorted = extensions_count_sorted.last\n\
    \        val extensions_count_sorted = extensions.map(_.length).sort\n       \
    \ val strength_sorted = extensions_count_sorted.last\n        val extensions_count_sorted\
    \ = extensions.map(_.length).sort\n        val ", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count_upper - extensions_count_diff\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_diff\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper -\
    \ extensions_count_diff_lower\n        val extensions_count_diff_diff_lower =\
    \ extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_count = extensions.count\n\
    \        val extensions_count_upper = extensions.count(_.toUpperCase.size == extensions_count)\n\
    \        val extensions_count_lower = extensions.count(_.toLowerCase.size == extensions_count)\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count_diff / extensions_count\n\
    \        val extensions_count_diff_lower = extensions_count_diff % extensions_count\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper /\
    \ extensions_count_lower\n        val extensions_count_diff_diff_lower = extensions_count_diff_lower\
    \ % extensions_count_lower\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper / extensions_count_count_lower\n        val\
    \ extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower % extensions_count_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_upper\
    \ / extensions_count_count_count_lower\n        val extensions_count_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_lower % extensions_count_count_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_upper\
    \ / extensions_count_count_count_count_lower\n        val extensions_count_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_lower % extensions_count_count_count_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_diff_upper\
    \ / extensions_count_count_count_count_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_diff_lower % extensions_count_count_count_count_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ / extensions_count_count_count_count_count_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_lower % extensions_count_count_count_count_count_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper\
    \ / extensions_count_count_count_count_count_count_count_lower\n        val extensions_count_diff_diff_diff_diff_diff_diff_lower\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower % extensions_count_count_count_count_count_count_count_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_diff_upper = extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val strength = extensions_map.values.reduce((a, b) => math.max(a, b))\n\
    \        val strongest_extension = extensions_map.values.find(x => x == strength).head\n\
    \        s\"$class_name.$strongest_extension\"", "        val extensions_map =\
    \ extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => class_name_map.get(x) - x.toUpperCase.length).max\n\
    \        val extension = extensions_map.getOrElse(strength, \"\")\n        class_name\
    \ + extension", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs)\n        val max_strength = strength.max\n\
    \        val max_key = strength.maxBy(x => x)\n        val max_key_index = strength.indexOf(max_key)\n\
    \        val max_key_name = extensions_map.get(max_key_index)\n        val max_key_name_map\
    \ = max_key_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val max_key_name_strength\
    \ = max_key_name_map.values.map(x => (x - class_name_map.get(x)).abs)\n      \
    \  val max_key_name_max_strength = max_key_name_strength.max\n        val max_key_name_max_key\
    \ = max_key_name_strength.maxBy(x => x)\n        val max_key_name_max_key_index\
    \ = max_key_name_strength.indexOf(max_key_name_max_key)\n        val max_key_name_max_key_name\
    \ = extensions_map.get(max_key_name_max_key_index)\n        val max_key_name_max_key_name_map\
    \ = max_key_name_max_key_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val max_key_name_max_key_name_strength = max_key_name_max_key_name_map.values.map(x\
    \ => (x - class_name_map.get(x)).abs)\n        val max_key_name_max_key_name_max_strength\
    \ = max_key_name_max_key_name_max_strength.max\n        val max_key_name_max_key_name_max_key\
    \ = max_key_name_max_key_name_max_strength.maxBy(x => x)\n        val max_key_name_max_key_name_max_key_index\
    \ = max_key_name_max_key_name_max_strength.indexOf(max_key_name_max_key_name_max_key)\n\
    \        val max_key_name_max_key_name_max_key_name = extensions_map.get(max_key_name_max_key_name_max_key_index)\n\
    \        val max_key_name_max_key_name_max_key_name_map = max_key_name_max_key_name_max_key_name.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val max_key_name_max_key_name_max_key_name_strength\
    \ = max_key_name_max_key_name_max_key_name_max_key_name_map.values.map(x => (x\
    \ - class_name_map.get(x)).abs)\n        val max_key_name_max_key_name_max_key_name_max_strength\
    \ = max_key_name_max_key_name_max_key_name_max_key_name_max_strength.max\n   \
    \     val max_key_name_max_key_name_max_key_name_max_key = max_key_name_max_key_name_max_key_name_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x.toInt - class_name_map.get(x).toInt,\
    \ x))\n        strength.sortBy(x => x._1).head._2", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase - x.toLowerCase + 1).toInt)\n        val\
    \ max_strength = extensions_map.max\n        val max_extension = extensions_map.filter(_\
    \ == max_strength).head\n        s\"$class_name.$max_extension\"", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase - x.toLowerCase + 1)).toMap\n\
    \        val strength = extensions_map.getOrElse(class_name, 0)\n        val sorted_extensions\
    \ = extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_name = sorted_extensions.head._2\n\
    \        val extension_strength = sorted_extensions.head._1\n        val class_name_with_extension\
    \ = class_name + extension_name\n        val extension_class_name = extension_name\
    \ + class_name\n        if (extension_strength > strength) {\n            class_name_with_extension\n\
    \        } else if (extension_strength == strength) {\n            extension_class_name\n\
    \        } else {\n            StrongestExtension(class_name_with_extension, extensions)\n\
    \        }", "        val extensions_map = extensions.map(e => (e.toUpperCase.size,\
    \ e.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((a,\
    \ b) => if (a > b) a else b)\n        val extensions_sorted = extensions_map.values.sortWith((a,\
    \ b) => a > b)\n        val extensions_sorted = extensions_sorted.takeWhile(_\
    \ < strength)\n        val extensions_sorted = extensions_sorted.mkString(\".\"\
    )\n        class_name + extensions_sorted", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_count = extensions_map.filter(_._2.toInt == 0).length\n     \
    \   val extensions_count_map = extensions_map.filter(_._2.toInt == 1).map(e =>\
    \ (e._1, e._2.toInt)).toMap\n        val extensions_count_sorted = extensions_count_map.toSeq.sortBy(_._1).reverse\n\
    \        val extensions_count_sorted = extensions_count_sorted.take(extensions_count)\n\
    \        val extensions_count_sorted = extensions_count_sorted.filter(_._2 > 0)\n\
    \        val extensions_count_sorted = extensions_count_sorted.map(_._1)\n   \
    \     val extensions_count_sorted = extensions_count_sorted.toList\n        val\
    \ extensions_count_sorted = extensions_count_sorted.map(e => e + \".\" + extensions_count_map.get(e)._1)\n\
    \        val extensions_count_sorted = extensions_count_sorted.mkString(\"\")\n\
    \        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\\\
    \\.\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\+\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\-\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\?\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\?\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\?\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\?\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\?\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\?\", \"\")\n        val extensions_count_sorted = extensions_count_sorted.replaceAll(\"\
    \\\\*\", \"\")", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x.toInt - class_name_map.get(x).toInt, x))\n        strength.sortBy(x => x._1).head._2",
  "        val extensions_map = extensions.map(e => (e.toUpperCase, e.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(c => (c.toUpperCase, c.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(_.length - class_name_map.values.map(_.length)).sum\n\
    \        val extensions_sorted = extensions_map.values.sortBy(_.length - class_name_map.values.map(_.length).sum)\n\
    \        val class_name_sorted = class_name_map.values.sortBy(_.length)\n    \
    \    val extension_sorted = extensions_sorted.find(e => class_name_sorted.contains(e._1))\n\
    \        val extension_str = extension_sorted._1 + \".\" + extension_sorted._2\n\
    \        extension_str", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ (x - class_name_map.get(x)).abs)\n        val strength_sorted = strength.sortWith(_\
    \ < _)\n        val strength_sorted = strength_sorted.take(1).mkString.concat(\"\
    .\").concat(strength_sorted.last)\n        val strength_sorted = strength_sorted.replaceAll(\"\
    (.)\\\\1\", \"$1\")\n        class_name_map.get(strength_sorted)", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.take(extensions_sorted.length-1)\n\
    \        val extensions_sorted = extensions_sorted.map(_._2).mkString(\".\")\n\
    \        val extensions_sorted = extensions_sorted.replaceAll(\"(.)\", \"$1\"\
    )\n        class_name + extensions_sorted", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_str = if (strength == 0) \"0\" else strength.toString\n    \
    \    val extensions_str = extensions.map(_.toString).mkString(\".\")\n       \
    \ val class_name_str = class_name.replaceAll(\"\\\\.\", \"_\")\n        val class_name_with_extension\
    \ = class_name_str + extensions_str\n        val class_name_with_extension_str\
    \ = class_name_with_extension.replaceAll(\"_\", \"\")\n        val class_name_with_extension_str_with_extension\
    \ = class_name_with_extension_str + extensions_str\n        val class_name_with_extension_str_with_extension_str\
    \ = class_name_with_extension_str_with_extension.replaceAll(\"_\", \"\")\n   \
    \     val class_name_with_extension_str_with_extension_str_with_extension = class_name_with_extension_str_with_extension_str\
    \ + extensions_str\n        val class_name_with_extension_str_with_extension_str_with_extension_str\
    \ = class_name_with_extension_str_with_extension_str_with_extension.replaceAll(\"\
    _\", \"\")\n        val class_name_with_extension_str_with_extension_str_with_extension_str_with_extension\
    \ = class_name_with_extension_str_with_extension_str_with_extension_str + extensions_str\n\
    \        val class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str\
    \ = class_name_with_extension_str_with_extension_str_with_extension_str_with_extension.replaceAll(\"\
    _\", \"\")\n        val class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension\
    \ = class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension.replaceAll(\"\
    _\", \"\")\n        val class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension_str\
    \ = class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension.replaceAll(\"\
    _\", \"\")\n        val class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension\
    \ = class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension_str.replaceAll(\"\
    _\", \"\")\n        val class_name_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension_str_with_extension",
  "        val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower\n        val extensions_count_diff_upper\
    \ = extensions_count_upper - extensions_count_diff\n        val extensions_count_diff_lower\
    \ = extensions_count_lower - extensions_count_diff\n        val extensions_count_diff_diff_upper\
    \ = extensions_count_diff_upper - extensions_count_diff_lower\n        val extensions_count_diff_diff_lower\
    \ = extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val extensions_count_diff = extensions_count_upper - extensions_count_lower\n\
    \        val extensions_count_diff_upper = extensions_count_upper - extensions_count_diff\n\
    \        val extensions_count_diff_lower = extensions_count_lower - extensions_count_diff\n\
    \        val extensions_count_diff_diff_upper = extensions_count_diff_upper -\
    \ extensions_count_diff_lower\n        val extensions_count_diff_diff_lower =\
    \ extensions_count_diff_lower - extensions_count_diff_upper\n        val extensions_count_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_upper - extensions_count_diff_diff_lower\n    \
    \    val extensions_count_diff_diff_diff_lower = extensions_count_diff_diff_lower\
    \ - extensions_count_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_upper - extensions_count_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_upper\n        val extensions_count_diff_diff_diff_diff_diff_diff_upper\
    \ = extensions_count_diff_diff_diff_diff_diff_diff_diff_upper - extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\n\
    \        val extensions_count_diff_diff_diff_diff_diff_diff_lower = extensions_count_diff_diff_diff_diff_diff_diff_diff_lower\
    \ - extensions_count_diff_diff_diff_diff_diff_diff_diff_diff_upper\n        val\
    \ extensions_count_diff_diff_diff_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => if (x == y) x else y - x)\n        val extension = extensions_map.maxBy(x\
    \ => x._1)\n        val extension_name = extension._2\n        val class_name_with_extension\
    \ = class_name + extension_name\n        val extension_strength = extensions_map.get(extension_name)._1\n\
    \        if (extension_strength == strength) class_name_with_extension else class_name\
    \ + extension_name + \".\" + extension_strength", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val class_name_length = class_name.length\n\
    \        val extensions_length_sum = extensions.map(_.length).sum\n        val\
    \ extensions_length_average = extensions_length_sum / extensions_count.toDouble\n\
    \        val extensions_length_difference = extensions_length_average - class_name_length\n\
    \        val strength = extensions_length_difference.toInt\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val extensions_length_difference\
    \ = extensions_length_average - class_name_length\n        val ", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n        val strength = extensions_map.getOrElse(class_name,\
    \ 0)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile(_ == '.').dropRight(1)\n\
    \        val extensions_sorted = extensions_sorted.dropWhile", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase - x.toLowerCase + 1)).toMap\n        val\
    \ class_name_map = class_name.map(x => (x.toUpperCase - x.toLowerCase + 1)).toMap\n\
    \        val max_value = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_value = class_name_map.get(max_key)\n        val max_key_key_value\
    \ = class_name_map.get(max_key_value)\n        val max_key_key_key_value = class_name_map.get(max_key_key_value)\n\
    \        val max_key_key_key_key_value = class_name_map.get(max_key_key_key_value)\n\
    \        val max_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_value = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = class_name_map.get(max_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_key_value)\n\
    \        val ", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => strength - a.length - b.length)\n        extensions_sorted.head", "  \
    \      val extensions_count = extensions.map(_.length).sum\n        val extensions_count_upper\
    \ = extensions.map(_.toUpperCase.length).sum\n        val extensions_count_lower\
    \ = extensions.map(_.toLowerCase.length).sum\n        val strength = extensions_count_upper\
    \ - extensions_count_lower\n        val extensions_count_upper_sm = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count.toDouble\n        val\
    \ extensions_count_lower_sm = extensions_count_lower - extensions_count_upper\
    \ * strength / extensions_count.toDouble\n        val extensions_count_sm = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count.toDouble\n        val\
    \ extensions_count_upper_cap = extensions_count_upper - extensions_count_lower\
    \ * strength / extensions_count.toDouble * extensions_count_sm\n        val extensions_count_lower_cap\
    \ = extensions_count_lower - extensions_count_upper * strength / extensions_count.toDouble\
    \ * extensions_count_sm\n        val extensions_count_cap = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count.toDouble * extensions_count_sm\
    \ * extensions_count_sm\n        val extensions_count_upper_smcap = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count.toDouble * extensions_count_sm\
    \ * extensions_count_cap\n        val extensions_count_lower_smcap = extensions_count_lower\
    \ - extensions_count_upper * strength / extensions_count.toDouble * extensions_count_sm\
    \ * extensions_count_cap\n        val extensions_count_smcap = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count.toDouble * extensions_count_sm\
    \ * extensions_count_cap * extensions_count_cap\n        val extensions_count_upper_capsmcap\
    \ = extensions_count_upper - extensions_count_lower * strength / extensions_count.toDouble\
    \ * extensions_count_sm * extensions_count_cap * extensions_count_cap\n      \
    \  val extensions_count_lower_capsmcap = extensions_count_lower - extensions_count_upper\
    \ * strength / extensions_count.toDouble * extensions_count_sm * extensions_count_cap\
    \ * extensions_count_cap\n        val extensions_count_capsmcap = extensions_count_upper\
    \ - extensions_count_lower * strength / extensions_count.toDouble * extensions_count_sm\
    \ * extensions_count_cap * extensions_count_cap * extensions_count_cap\n     \
    \   val extensions_count_upper_smcapsmcap = extensions_count_upper - extensions_count_lower\
    \ * strength / extension", "        val extensions_map = extensions.map(e => e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortWith((a, b) => strength - a)\n        val extensions_sorted\
    \ = extensions_sorted.take(1).mkString(\".\")\n        class_name + extensions_sorted",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((acc, x) => acc + (extensions_map.getOrElse(x,\
    \ 0) - class_name_map.getOrElse(x, 0)))\n        val strongest_extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        class_name + \".\" + strongest_extension", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).max\n    \
    \    val extensions_sorted = extensions_map.values.sortWith(_ < _)\n        val\
    \ extensions_sorted_sorted = extensions_sorted.sortWith(_ < _)\n        val extensions_sorted_sorted_sorted\
    \ = extensions_sorted_sorted.sortWith(_ < _)\n        val extensions_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted.sortWith(_ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted.sortWith(_ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted.sortWith(_ < _)\n        val\
    \ extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted = extensions_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_ < _)\n\
    \        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = extensions_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortWith(_\
    \ < _)\n        val extensions_sorted_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.charAt(0) -> e.toUpperCase.charAt(1).toLowerCase)\n       \
    \ val extensions_count = extensions.map(e => extensions_map(e).length).sum\n \
    \       val extensions_count_map = extensions.map(e => extensions_map(e).count(_\
    \ == extensions_map(e).head))\n        val extensions_count_map_sorted = extensions_count_map.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_first = extensions_count_map_sorted.head\n\
    \        val extensions_count_map_sorted_first_value = extensions_count_map_sorted_first._2\n\
    \        val extensions_count_map_sorted_first_key = extensions_count_map_sorted_first._1\n\
    \        val extensions_count_map_sorted_first_key_value = extensions_count_map_sorted_first_key._2\n\
    \        val extensions_count_map_sorted_first_key_value_length = extensions_count_map_sorted_first_key_value.length\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted = extensions_count_map_sorted_first_key_value_length.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted_first =\
    \ extensions_count_map_sorted_first_key_value_length_sorted.head\n        val\
    \ extensions_count_map_sorted_first_key_value_length_sorted_first_value = extensions_count_map_sorted_first_key_value_length_sorted_first._2\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted_first_key\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first._1\n     \
    \   val extensions_count_map_sorted_first_key_value_length_sorted_first_key_value\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first_key._2\n \
    \       val extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first_key_value.length\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length.sortBy(_._1).reverse\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted_first\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted.head\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted_first_value\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted_first._2\n\
    \        val extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted_first_key\
    \ = extensions_count_map_sorted_first_key_value_length_sorted_first_key_value_length_sorted_first._1\n\
    \        val extensions_count_map_sorted_", "        val extensions_map = extensions.map(e\
    \ => e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_\
    \ == 'C')).toMap\n        val strength = extensions_map.values.max\n        val\
    \ extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(_._2 > 0).map(_._1)\n        val ", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length.sortWith(_ < _)\n        val\
    \ extensions_count_sorted_length_sorted_length_sorted_length_sorted = extensions_count_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length.sortWith(_ < _)\n\
    \        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length_sorted_length_sorted_length_", "        val\
    \ extensions_count = extensions.map(_.length).sum\n        val extensions_count_sorted\
    \ = extensions.sortWith(_ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_"]
stop_tokens:
- "\n    }\n"
