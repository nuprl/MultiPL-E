name: HumanEval_153_Strongest_Extension
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given the name of a class (a string) and a list of extensions.\n\
  \    // The extensions are to be used to load additional classes to the class. The\n\
  \    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    // in the extension's name, the strength is given by the fraction CAP -\
  \ SM. \n    // You should find the strongest extension and return a string in this\
  \ \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or\
  \ more extensions with the same strength, you should\n    // choose the one that\
  \ comes first in the list.\n    // For example, if you are given \"Slices\" as the\
  \ class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is\
  \ the strongest extension \n    // (its strength is -1).\n    // Example:\n    //\
  \ >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n\
  \    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
  Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
  )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"NazeDa\"\
  , \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"\
  __YESIMHERE\"), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\"\
  , \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\"\
  )));\n    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\"\
  , \"781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"\
  -_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
  finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
  finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"Bb\"\
  , \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (List[String](\"\
  671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase)\n        val extensions_sorted = extensions.sortWith((a,\
    \ b) => extensions_map(a) - extensions_map(b))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_sorted\
    \ = extensions_sorted.map(e => class_name + e).sortWith((a, b) => a.length - b.length)\n\
    \        val extensions_sorted = extensions_sorted.map(e => e.substring(0, e.length\
    \ - 1))\n        val extensions_sorted = extensions_sorted.map(e => class_name\
    \ + e).sortWith((a, b) => a.length - b.length)\n        val extensions_sorted\
    \ = extensions_sorted.map(e => e.substring(0, e.length - 1))\n        val extensions_",
  "        var strength = 0\n        var extension = \"\"\n        var extension_found\
    \ = false\n        for(extension <- extensions) {\n            val cap = extension.filter(x\
    \ => x.isUpper).length\n            val sm = extension.filter(x => x.isLower).length\n\
    \            val strength = cap - sm\n            if(strength > 0) {\n       \
    \         extension_found = true\n                extension = extension\n    \
    \            strength = strength\n            }\n        }\n        if(!extension_found)\
    \ {\n            val cap = extension.filter(x => x.isUpper).length\n         \
    \   val sm = extension.filter(x => x.isLower).length\n            val strength\
    \ = cap - sm\n            if(strength > 0) {\n                extension = extension\n\
    \                strength = strength\n            }\n        }\n        val class_name\
    \ = class_name.replaceAll(\"[^A-Z]\", \"\")\n        val class_name_with_extension\
    \ = class_name + extension\n        val class_name_with_extension_lowercase =\
    \ class_name_with_extension.toLowerCase()\n        val class_name_with_extension_lowercase\
    \ = class_name_with_extension_lowercase.replaceAll(\"[^a-z]\", \"\")\n       \
    \ val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z0-9]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^A-Z]\", \"\")\n        val class_name_with_extension_lowercase = class_name_with_extension_lowercase.replaceAll(\"\
    [^0-9", "        val extensions_map = extensions.map(e => e.toUpperCase.charAt(0)\
    \ -> e.toUpperCase.charAt(1).toLowerCase)\n        val extensions_count = extensions_map.filter(_._2\
    \ > 0).map(_._2).sum\n        val extensions_strength = extensions_map.filter(_._2\
    \ > 0).map(_._1).sum\n        val extensions_strength_fraction = extensions_strength.toDouble\
    \ / extensions_count.toDouble\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_strength_fraction = extensions_strength_fraction.toInt\n\
    \        val extensions_strength_fraction = extensions_strength_fraction.toDouble\
    \ * -1\n        val extensions_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val max_strength = extensions_map.values.max\n        val max_key = extensions_map.keys.max\n\
    \        val max_key_index = extensions_map.keys.indexOf(max_key)\n        val\
    \ max_key_value = extensions_map.get(max_key)\n        val max_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_value)\n        val max_key_class_name =\
    \ class_name_map.get(max_key_value)\n        val max_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name)\n        val max_key_class_name_key_value\
    \ = extensions_map.get(max_key_class_name)\n        val max_key_class_name_key_key_index\
    \ = class_name_map.keys.indexOf(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name\
    \ = class_name_map.get(max_key_class_name_key_value)\n        val max_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name)\n        val\
    \ max_key_class_name_key_class_name_key_value = extensions_map.get(max_key_class_name_key_class_name)\n\
    \        val max_key_class_name_key_class_name_key_key_index = class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_index = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_key_index =\
    \ class_name_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_value)\n\
    \        val max_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_class_name_key_index\
    \ = extensions_map.keys.indexOf(max_", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n    \
    \    val max_key = extensions_map.maxBy(_._1)._1\n        val max_value = extensions_map.maxBy(_._1)._2\n\
    \        val max_key = class_name_map.maxBy(_._1)._1\n        val max_value =\
    \ class_name_map.maxBy(_._1)._2\n        val max_key = max_key.map(x => x.toString.toUpperCase.size)\n\
    \        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n   \
    \     val max_key = max_key.max\n        val max_value = max_value.max\n     \
    \   val max_key = max_key.map(x => x.toString.toUpperCase.size)\n        val max_value\
    \ = max_value.map(x => x.toString.toUpperCase.size)\n        val max_key = max_key.max\n\
    \        val max_value = max_value.max\n        val max_key = max_key.map(x =>\
    \ x.toString.toUpperCase.size)\n        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n\
    \        val max_key = max_key.max\n        val max_value = max_value.max\n  \
    \      val max_key = max_key.map(x => x.toString.toUpperCase.size)\n        val\
    \ max_value = max_value.map(x => x.toString.toUpperCase.size)\n        val max_key\
    \ = max_key.max\n        val max_value = max_value.max\n        val max_key =\
    \ max_key.map(x => x.toString.toUpperCase.size)\n        val max_value = max_value.map(x\
    \ => x.toString.toUpperCase.size)\n        val max_key = max_key.max\n       \
    \ val max_value = max_value.max\n        val max_key = max_key.map(x => x.toString.toUpperCase.size)\n\
    \        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n   \
    \     val max_key = max_key.max\n        val max_value = max_value.max\n     \
    \   val max_key = max_key.map(x => x.toString.toUpperCase.size)\n        val max_value\
    \ = max_value.map(x => x.toString.toUpperCase.size)\n        val max_key = max_key.max\n\
    \        val max_value = max_value.max\n        val max_key = max_key.map(x =>\
    \ x.toString.toUpperCase.size)\n        val max_value = max_value.map(x => x.toString.toUpperCase.size)\n\
    \        val max_key = max_key.max\n        val max_value = max_value.max\n  \
    \      val max_key = max_key.map(x => x.toString.to", "        val extensions_map\
    \ = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map\
    \ = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n        val strength\
    \ = extensions_map.foldLeft(0)((a, b) => (class_name_map.get(b) - class_name_map.get(a)).toInt)\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n \
    \       val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).toList\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._", "        val\
    \ extensions_map = extensions.map(_.toUpperCase).zipWithIndex.toMap\n        val\
    \ class_name_map = class_name.zipWithIndex.toMap\n        val extensions_count\
    \ = extensions_map.size\n        val class_name_count = class_name_map.size\n\
    \        val strength = extensions_count - class_name_count\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._2).reverse\n        val class_name_sorted =\
    \ class_name_map.toSeq.sortBy(_._2).reverse\n        val extensions_first = extensions_sorted.head._1\n\
    \        val class_name_first = class_name_sorted.head._1\n        val extensions_last\
    \ = extensions_sorted.last._1\n        val class_name_last = class_name_sorted.last._1\n\
    \        val extensions_first_index = extensions_sorted.indexOf((class_name_first,\
    \ extensions_first))\n        val class_name_first_index = class_name_sorted.indexOf((class_name_first,\
    \ extensions_first))\n        val extensions_last_index = extensions_sorted.indexOf((class_name_last,\
    \ extensions_last))\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last,\
    \ extensions_last))\n        val extensions_first_value = extensions_sorted.apply(extensions_first_index)._2\n\
    \        val class_name_first_value = class_name_sorted.apply(class_name_first_index)._2\n\
    \        val extensions_last_value = extensions_sorted.apply(extensions_last_index)._2\n\
    \        val class_name_last_value = class_name_sorted.apply(class_name_last_index)._2\n\
    \        val extensions_first_key = extensions_sorted.apply(extensions_first_index)._1\n\
    \        val class_name_first_key = class_name_sorted.apply(class_name_first_index)._1\n\
    \        val extensions_last_key = extensions_sorted.apply(extensions_last_index)._1\n\
    \        val class_name_last_key = class_name_sorted.apply(class_name_last_index)._1\n\
    \        val extensions_first_index = extensions_sorted.indexOf((class_name_first_value,\
    \ extensions_first_key))\n        val class_name_first_index = class_name_sorted.indexOf((class_name_first_value,\
    \ extensions_first_key))\n        val extensions_last_index = extensions_sorted.indexOf((class_name_last_value,\
    \ extensions_last_key))\n        val class_name_last_index = class_name_sorted.indexOf((class_name_last_value,\
    \ extensions_last_key))\n        val extensions_first_value = extensions_sorted.apply(extensions_first_index)._2\n\
    \        val class_name_first_value = class_name_sorted.apply(class_name_first_index)._2\n\
    \        val extensions_last_value = extensions_sorted.apply(extensions_last_",
  "        val extensions_map = extensions.map(e => (e.toUpperCase, e.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(c => (c.toUpperCase, c.toLowerCase)).toMap\n\
    \        val strength = extensions_map.foldLeft(0)((s, e) => s + (class_name_map(e._1)\
    \ - class_name_map(e._2)))\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._1).reverse\n\
    \        val extension_strength = extensions_sorted.head._2\n        val extension_class_name\
    \ = extensions_sorted.head._1\n        if (strength == extension_strength) {\n\
    \            class_name + \".\" + extension_class_name\n        } else {\n   \
    \         class_name + \".\" + extension_class_name + \".\" + extension_strength\n\
    \        }", "        val extensions_count = extensions.map(_.length).sum\n  \
    \      val extensions_count_upper = extensions.map(_.toUpperCase.length).sum\n\
    \        val extensions_count_lower = extensions.map(_.toLowerCase.length).sum\n\
    \        val strength = extensions_count_upper - extensions_count_lower\n    \
    \    val strength_upper = strength.toDouble / extensions_count.toDouble\n    \
    \    val strength_lower = strength.toDouble / extensions_count.toDouble\n    \
    \    val extensions_count_sum = extensions_count.toDouble\n        val extensions_count_sum_upper\
    \ = extensions_count_sum.toDouble / extensions_count.toDouble\n        val extensions_count_sum_lower\
    \ = extensions_count_sum.toDouble / extensions_count.toDouble\n        val extensions_count_sum_sum\
    \ = extensions_count_sum.toDouble\n        val extensions_count_sum_sum_upper\
    \ = extensions_count_sum_sum.toDouble / extensions_count.toDouble\n        val\
    \ extensions_count_sum_sum_lower = extensions_count_sum_sum.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sum_sum_sum = extensions_count_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_upper = extensions_count_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum.toDouble / extensions_count.toDouble\n      \
    \  val extensions_count_sum_sum_sum_sum = extensions_count_sum_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_upper = extensions_count_sum_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum_sum.toDouble / extensions_count.toDouble\n  \
    \      val extensions_count_sum_sum_sum_sum_sum = extensions_count_sum_sum_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_sum_upper = extensions_count_sum_sum_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum_sum_sum.toDouble / extensions_count.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_sum_sum = extensions_count_sum_sum_sum_sum_sum.toDouble\n\
    \        val extensions_count_sum_sum_sum_sum_sum_sum_upper = extensions_count_sum_sum_sum_sum_sum_sum.toDouble\
    \ / extensions_count.toDouble\n        val extensions_count_sum_sum_sum_sum_sum_sum_lower\
    \ = extensions_count_sum_sum_sum_sum_sum_sum.toDouble / extension", "        val\
    \ extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => (x - class_name_map.get(x)).abs).reduce(_\
    \ + _)\n        val strongest_extension = extensions_map.values.filter(x => x\
    \ == strength).head\n        class_name + \".\" + strongest_extension", "    \
    \    val extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') -\
    \ e.toUpperCase.count(_ == 'B') - e.toUpperCase.count(_ == 'C')).toMap\n     \
    \   val strength = extensions_map.values.max\n        val extensions_sorted =\
    \ extensions_map.toSeq.sortBy(_._1).reverse\n        val extension_strength =\
    \ extensions_sorted.head._2\n        val extension_name = extensions_sorted.head._1\n\
    \        val extension_class = extension_strength * class_name + extension_name\n\
    \        extension_class", "        val extensions_count = extensions.map(_.length).sum\n\
    \        val class_name_count = class_name.length\n        val strength = extensions_count\
    \ - class_name_count\n        val extension = extensions.sortWith(_ < _).head\n\
    \        val extension_length = extension.length\n        val class_name_length\
    \ = class_name.length\n        val strength_length = strength.length\n       \
    \ val extension_start = extension_length - class_name_length\n        val extension_end\
    \ = extension_start + extension_length\n        val class_name_start = class_name_length\
    \ - strength_length\n        val class_name_end = class_name_start + class_name_length\n\
    \        val strength_start = strength_length - class_name_length\n        val\
    \ strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_length\n\
    \        val strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_length\n\
    \        val strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_length\n\
    \        val strength_end = strength_start + strength_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val extension_start = extension_length - class_name_length\n\
    \        val extension_end = extension_start + extension_length\n        val class_name_start\
    \ = class_name_length - strength_length\n        val class_name_end = class_name_start\
    \ + class_name_length\n        val strength_start = strength_length - class_name_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = extensions_map.values.map(x => class_name_map.getOrElse(x,\
    \ 0) - x.toString.toString.toUpperCase.length).max\n        val extension = extensions_map.getOrElse(strength,\
    \ \"\")\n        s\"$class_name.$extension\"", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase, x.toLowerCase)).toMap\n        val class_name_map = class_name.split(\"\
    \\\\.\").toList.map(x => x.capitalize).mkString\n        val strength = extensions_map.getOrElse(class_name_map,\
    \ -1)\n        val extensions_sorted = extensions_map.toSeq.sortBy(_._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(_._2 > 0).map(_._1).mkString(\"\
    .\")\n        val extensions_sorted = extensions_sorted.dropWhile(_._2 > 0).mkString(\"\
    .\") + \".\"\n        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length).dropRight(strength.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length).drop(strength.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(strength.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(strength.length)\n   \
    \     val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.drop(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sorted.dropRight(class_name_map.length)\n\
    \        val extensions_sorted = extensions_sor", "        val extensions_count\
    \ = extensions.map(_.length).sum\n        val extensions_count_sorted = extensions.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length = extensions_count_sorted.map(_.length).sum\n\
    \        val extensions_count_sorted_length_sorted = extensions_count_sorted.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted = extensions_count_sorted_length.sortWith(_\
    \ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = extensions_count_sorted_length.sortWith(_ < _)\n        val extensions_count_sorted_length_sorted_length_sorted_length_",
  "        val extensions_map = extensions.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val class_name_map = class_name.map(x => (x.toUpperCase, x.toLowerCase)).toMap\n\
    \        val strength = class_name_map.foldLeft(0)((x, y) => (x._2 - y._2))\n\
    \        val extensions_sorted = extensions_map.toSeq.sortBy(x => x._2).reverse\n\
    \        val extensions_sorted = extensions_sorted.takeWhile(x => x._2 > strength).reverse\n\
    \        val extensions_sorted = extensions_sorted.map(x => class_name_map(x._1))\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\") + \".\"\n \
    \       extensions_sorted.mkString(class_name_map(class_name))", "        val\
    \ extensions_map = extensions.map(e => e.toUpperCase.count(_ == 'A') / e.toUpperCase.count(_\
    \ == 'B') - e.toUpperCase.count(_ == 'C') / e.toUpperCase.count(_ == 'D')).toMap\n\
    \        val strength = extensions_map.values.max\n        val extensions_sorted\
    \ = extensions_map.toSeq.sortBy(_._1)\n        val extensions_sorted = extensions_sorted.take(strength).map(_._2)\n\
    \        val extensions_sorted = extensions_sorted.mkString(\".\")\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(e => (e.toUpperCase,\
    \ e.toLowerCase)).toMap\n        val class_name_map = class_name.map(c => (c.toUpperCase,\
    \ c.toLowerCase)).toMap\n        val strengths = extensions_map.values.map(_.length\
    \ - class_name_map.values.map(_.length))\n        val max_strength = strengths.max\n\
    \        val max_key = extensions_map.keys.find(k => strengths.contains(k.length\
    \ - max_strength))\n        val max_value = extensions_map.get(max_key)\n    \
    \    max_key match {\n            case Some(key) => key + max_value\n        \
    \    case None => class_name\n        }", "        val extensions_map = extensions.map(x\
    \ => (x.toUpperCase.size, x.toLowerCase.size)).toMap\n        val strength = extensions_map.values.reduce((x,\
    \ y) => x - y)\n        val extensions_sorted = extensions_map.values.sortBy(x\
    \ => x)\n        val extensions_sorted = extensions_sorted.takeWhile(x => x <\
    \ strength)\n        val extensions_sorted = extensions_sorted.reverse\n     \
    \   val extensions_sorted = extensions_sorted.mkString(\"\")\n        class_name\
    \ + extensions_sorted", "        val extensions_map = extensions.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val class_name_map = class_name.map(x => (x.toUpperCase,\
    \ x.toLowerCase)).toMap\n        val strength = extensions_map.values.map(x =>\
    \ class_name_map(x._1) - class_name_map(x._2)).sum\n        val extensions_sorted\
    \ = extensions_map.values.sortBy(x => x._1 - x._2)\n        val extensions_sorted\
    \ = extensions_sorted.takeWhile(x => x._1 < strength)\n        val extensions_sorted\
    \ = extensions_sorted.map(x => class_name_map(x._1) + x._2)\n        extensions_sorted.head"]
stop_tokens:
- "\n    }\n"
