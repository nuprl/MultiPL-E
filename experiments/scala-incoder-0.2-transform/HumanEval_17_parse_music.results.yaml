language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val restLength = rest.length\n           \
    \ val restNote = rest(0)\n            val restRest = rest(1)\n            val\
    \ restRestLength = restRest.length\n            val restRestNote = restRest(0)\n\
    \            val restRestRest = restRest(1)\n            val restRestRestLength\
    \ = restRestRest.length\n            val restRestRestNote = restRestRest(0)\n\
    \            val restRestRestRest = restRestRest(1)\n            val restRestRestRestLength\
    \ = restRestRestRest.length\n            val restRestRestRestNote = restRestRestRest(0)\n\
    \            val restRestRestRestRest = restRestRestRest(1)\n            val restRestRestRestRestLength\
    \ = restRestRestRestRest.length\n            val restRestRestRestRestNote = restRestRestRestRest(0)\n\
    \            val restRestRestRestRestRest = restRestRestRestRest(1)\n        \
    \    val restRestRestRestRestRestLength = restRestRestRestRestRest.length\n  \
    \          val restRestRestRestRestRestNote = restRestRestRestRestRest(0)\n  \
    \          val restRestRestRestRestRestRest = restRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestLength = restRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestNote = restRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpubx0588h.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpubx0588h.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpubx0588h.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mrestRestLength\e[0m\
    \ = restRest.length\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Char\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpubx0588h.scala:21:31 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mrestRestNote\e[0m =\
    \ restRest(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m\
    \ \e[35mrestRest\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpubx0588h.scala:22:31 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mrestRestRest\e[0m =\
    \ restRest(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m\
    \ \e[35mrestRest\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpubx0588h.scala:43:55 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \e[36mrestRestRestRestRestRestRestRestRest\e\
    [0m = restRestRestRestRestRestRestRestRestRest(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not fou"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n\
    \        val notes_count = notes.count\n        val notes_beats = notes.map(n\
    \ => n.length.toLong).sum\n        val notes_last_beats = notes_beats - notes_count\n\
    \        val notes_last_beats_count = notes_last_beats / 4\n        val notes_last_beats_count_2\
    \ = notes_last_beats_count * 2\n        val notes_last_beats_count_3 = notes_last_beats_count_2\
    \ * 2\n        val notes_last_beats_count_4 = notes_last_beats_count_3 * 2\n \
    \       val notes_last_beats_count_5 = notes_last_beats_count_4 * 2\n        val\
    \ notes_last_beats_count_6 = notes_last_beats_count_5 * 2\n        val notes_last_beats_count_7\
    \ = notes_last_beats_count_6 * 2\n        val notes_last_beats_count_8 = notes_last_beats_count_7\
    \ * 2\n        val notes_last_beats_count_9 = notes_last_beats_count_8 * 2\n \
    \       val notes_last_beats_count_10 = notes_last_beats_count_9 * 2\n       \
    \ val notes_last_beats_count_11 = notes_last_beats_count_10 * 2\n        val notes_last_beats_count_12\
    \ = notes_last_beats_count_11 * 2\n        val notes_last_beats_count_13 = notes_last_beats_count_12\
    \ * 2\n        val notes_last_beats_count_14 = notes_last_beats_count_13 * 2\n\
    \        val notes_last_beats_count_15 = notes_last_beats_count_14 * 2\n     \
    \   val notes_last_beats_count_16 = notes_last_beats_count_15 * 2\n        val\
    \ notes_last_beats_count_17 = notes_last_beats_count_16 * 2\n        val notes_last_beats_count_18\
    \ = notes_last_beats_count_17 * 2\n        val notes_last_beats_count_19 = notes_last_beats_count_18\
    \ * 2\n        val notes_last_beats_count_20 = notes_last_beats_count_19 * 2\n\
    \        val notes_last_beats_count_21 = notes_last_beats_count_20 * 2\n     \
    \   val notes_last_beats_count_22 = notes_last_beats_count_21 * 2\n        val\
    \ notes_last_beats_count_23 = notes_last_beats_count_22 * 2\n        val notes_last_beats_count_24\
    \ = notes_last_beats_count_23 * \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv0hb138_.scala:41:67 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_count_24\e\
    [0m = notes_last_beats_count_23 * \n\e[31m\e[31m   |\e[0m                    \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpv0hb138_.scala:17:43 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats\e[0m =\
    \ notes_beats - notes_count\n\e[31m\e[31m   |\e[0m                           \
    \    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((notes_count : (String => Boolean) => Int))\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv0hb138_.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.charAt(0)\n            val music_length\
    \ = music_string.substring(1).length\n            val music_beats = music_length.toLong\n\
    \            val music_last_beat = music_beats - music_note.length.toLong\n  \
    \          music_last_beat\n        }).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo81c14_z.scala:18:59 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mmusic_last_beat\e[0m\
    \ = music_beats - music_note.length.toLong\n\e[31m\e[31m   |\e[0m            \
    \                                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                   value length is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmpo81c14_z.scala:20:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        }).distinct\n\e[31m\e[31m   |\e[0m          ^\e\
    [0m\n\e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_array = notes.map(x => x.toInt)\n\
    \        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyaxke8hr.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyaxke8hr.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes_array.filter(\e[36mx\e[0m => x != \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyaxke8hr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyaxke8hr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.filter(\e\
    [36mx\e[0m => x != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyaxke8hr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded m"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n\
    \        val notes = music_list.zipWithIndex.filter(_._1 == 0).map(_._2)\n   \
    \     val notes_length = notes.map(_.toString.length).sum\n        val notes_last_beat\
    \ = notes.map(_.toString).map(_.last).toList\n        val notes_last_beats = notes_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_length = notes_last_beats.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beat = notes_last_beats.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_length = notes_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beat = notes_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_length\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat\
    \ = notes_last_beats_last_beats_last_beats_last_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp79r29j5g.scala:19:55 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_length\e\
    [0m = notes_last_beats.map(_.toString.length).sum\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                     value map is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp79r29j5g.scala:20:58 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_last_beat\e\
    [0m = notes_last_beats.map(_.last).toList\n\e[31m\e[31m   |\e[0m             \
    \                            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                  value map is not a member of Int\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp79r29j5g.scala:30:96 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnotes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat\e\
    [0m = notes_last_beats_last_beats_last_beats_last_\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                 Not found: notes_last_beats_last_beats_last_beats_last_\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79r29j5g.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length()\
    \ > 0)\n        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size.toLong\n        val\
    \ music_list_size_quarter2 = music_list_size_quarter / 2\n        val music_list_size_quarter4\
    \ = music_list_size_quarter / 4\n        val music_list_size_whole2 = music_list_size_whole\
    \ / 2\n        val music_list_size_whole4 = music_list_size_whole / 4\n      \
    \  val music_list_size_whole8 = music_list_size_whole / 8\n        val music_list_size_whole16\
    \ = music_list_size_whole / 16\n        val music_list_size_whole32 = music_list_size_whole\
    \ / 32\n        val music_list_size_whole64 = music_list_size_whole / 64\n   \
    \     val music_list_size_whole128 = music_list_size_whole / 128\n        val\
    \ music_list_size_whole256 = music_list_size_whole / 256\n        val music_list_size_whole512\
    \ = music_list_size_whole / 512\n        val music_list_size_whole1024 = music_list_size_whole\
    \ / 1024\n        val music_list_size_whole2048 = music_list_size_whole / 2048\n\
    \        val music_list_size_whole4096 = music_list_size_whole / 4096\n      \
    \  val music_list_size_whole8192 = music_list_size_whole / 8192\n        val music_list_size_whole16384\
    \ = music_list_size_whole / 16384\n        val music_list_size_whole32768 = music_list_size_whole\
    \ / 32768\n        val music_list_size_whole65536 = music_list_size_whole / 65536\n\
    \        val music_list_size_whole131072 = music_list_size_whole / 131072\n  \
    \      val music_list_size_whole262144 = music_list_size_whole / 262144\n    \
    \    val music_list_size_whole524288 = music_list_size_whole / 524288\n      \
    \  val music_list_size_whole1048576 = music_list_size_whole / 1048576\n      \
    \  val music_list_size_whole2097152 = music_list_size_whole / 2097152\n      \
    \  \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbsqfg977.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val restLength = rest.length\n           \
    \ val restNote = rest(0)\n            val restRest = rest(1)\n            val\
    \ restRestLength = restRest.length\n            val restRestNote = restRest(0)\n\
    \            val restRestRest = restRest(1)\n            val restRestRestLength\
    \ = restRestRest.length\n            val restRestRestNote = restRestRest(0)\n\
    \            val restRestRestRest = restRestRest(1)\n            val restRestRestRestLength\
    \ = restRestRestRest.length\n            val restRestRestRestNote = restRestRestRest(0)\n\
    \            val restRestRestRestRest = restRestRestRest(1)\n            val restRestRestRestRestLength\
    \ = restRestRestRestRest.length\n            val restRestRestRestRestNote = restRestRestRestRest(0)\n\
    \            val restRestRestRestRestRest = restRestRestRestRest(1)\n        \
    \    val restRestRestRestRestRestLength = restRestRestRestRestRest.length\n  \
    \          val restRestRestRestRestRestNote = restRestRestRestRestRest(0)\n  \
    \          val restRestRestRestRestRestRest = restRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestLength = restRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestNote = restRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpubx0588h.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpubx0588h.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpubx0588h.scala:20:42 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mrestRestLength\e[0m\
    \ = restRest.length\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value length is not a member\
    \ of Char\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpubx0588h.scala:21:31 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mrestRestNote\e[0m =\
    \ restRest(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m\
    \ \e[35mrestRest\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpubx0588h.scala:22:31 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mrestRestRest\e[0m =\
    \ restRest(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \ ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \e[33mvalue\e[0m\
    \ \e[35mrestRest\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpubx0588h.scala:43:55 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \e[36mrestRestRestRestRestRestRestRestRest\e\
    [0m = restRestRestRestRestRestRestRestRestRest(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not fou"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val music_note = music_string.charAt(0)\n            val music_type\
    \ = music_string.charAt(1)\n            val music_length = music_string.charAt(2)\n\
    \            val music_beats = music_string.charAt(3)\n            val music_rest\
    \ = music_string.substring(4)\n            val music_rest2 = music_rest.split(\"\
    \").map(music_rest => {\n                val music_rest3 = music_rest.charAt(0)\n\
    \                val music_rest4 = music_rest.charAt(1)\n                val music_rest5\
    \ = music_rest.charAt(2)\n                val music_rest6 = music_rest.charAt(3)\n\
    \                val music_rest7 = music_rest.charAt(4)\n                val music_rest8\
    \ = music_rest.charAt(5)\n                val music_rest9 = music_rest.charAt(6)\n\
    \                val music_rest10 = music_rest.charAt(7)\n                val\
    \ music_rest11 = music_rest.charAt(8)\n                val music_rest12 = music_rest.charAt(9)\n\
    \                val music_rest13 = music_rest.charAt(10)\n                val\
    \ music_rest14 = music_rest.charAt(11)\n                val music_rest15 = music_rest.charAt(12)\n\
    \                val music_rest16 = music_rest.charAt(13)\n                val\
    \ music_rest17 = music_rest.charAt(14)\n                val music_rest18 = music_rest.charAt(15)\n\
    \                val music_rest19 = music_rest.charAt(16)\n                val\
    \ music_rest20 = music_rest.charAt(17)\n                val music_rest21 = music_rest.charAt(18)\n\
    \                val music_rest22 = music_rest.charAt(19)\n                val\
    \ music_rest23 = music_rest.charAt(20)\n                val music_rest24 = music_rest.charAt(21)\n\
    \                val music_rest25 = music_rest.charAt(22)\n                val\
    \ music_rest26 = music_rest.charAt(23)\n                val music_rest27 = music_rest.charAt(24)\n\
    \                val music_rest28 = music_rest.charAt(25)\n                val\
    \ music_rest29 = music_rest.charAt(26)\n                val music_rest30 = music_rest.charAt(27)\n\
    \                val music_rest31 = music_rest.charAt(28)\n                val\
    \ music_rest32 = music_rest.charAt(29)\n                val music_rest33 = music_rest.charAt(30)\n\
    \                val music_rest34 = music_rest.charAt(31)\n                val\
    \ music_rest35 = music_rest.\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy5p34vni.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpy5p34vni.scala:55:4 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy5p34vni.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val notes = music_string.split(\"|\").map(music_string => {\n   \
    \             val note = music_string.split(\"o\").map(music_string => {\n   \
    \                 val beats = music_string.split(\"|\").map(music_string => {\n\
    \                        val beat = music_string.split(\".\").map(music_string\
    \ => {\n                            music_string.toLong\n                    \
    \    }).sum\n                        beat.asInstanceOf[Long]\n               \
    \     }).sum\n                    beat.asInstanceOf[Long]\n                }).sum\n\
    \                note.asInstanceOf[Long]\n            }).sum\n            notes.asInstanceOf[Long]\n\
    \        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcb270dxt.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    beat.asInstanceOf[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: beat\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpcb270dxt.scala:24:18\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \         }).sum\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e\
    [0m                  No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                  where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpcb270dxt.scala:26:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpcb270dxt.scala:28:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ }).sum\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a\
    \ type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n\
    \        val music_notes_length = music_notes.length\n        val music_notes_beats\
    \ = music_notes.map(music_note => music_note.split(\"o\"))\n        val music_notes_beats_length\
    \ = music_notes_beats.length\n        val music_notes_beats_beats = music_notes_beats.map(music_notes_beat\
    \ => music_notes_beat.length)\n        val music_notes_beats_beats_length = music_notes_beats_beats.length\n\
    \        val music_notes_beats_beats_beats = music_notes_beats_beats.map(music_notes_beats_beat\
    \ => music_notes_beats_beat.length)\n        val music_notes_beats_beats_beats_length\
    \ = music_notes_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats\
    \ = music_notes_beats_beats_beats.map(music_notes_beats_beats_beat => music_notes_beats_beats_beat.length)\n\
    \        val music_notes_beats_beats_beats_beats_length = music_notes_beats_beats_beats_beats.length\n\
    \        val music_notes_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beat\
    \ => music_notes_beats_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_beats_length\
    \ = music_notes_beats_beats_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats_beats_beats\
    \ = music_notes_beats_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beats_beat\
    \ => music_notes_beats_beats_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_beats_beats_length\
    \ = music_notes_beats_beats_beats_beats_beats_beats_beats.length\n        val\
    \ music_notes_beats_beats_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beats_beats_beats_beat\
    \ => music_notes_beat\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp491oats4.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp491oats4.scala:20:121\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_notes_beats_beats_beats\e[0m = music_notes_beats_beats.map(\e[36mmusic_notes_beats_beat\e\
    [0m => music_notes_beats_beat.length)\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 value length is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmp491oats4.scala:20:128\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e\
    [33mval\e[0m \e[36mmusic_notes_beats_beats_beats\e[0m = music_notes_beats_beats.map(\e\
    [36mmusic_notes_beats_beat\e[0m => music_notes_beats_beat.length)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                          No ClassTag available for B\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                                          where:\
    \    B is a type variable\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp491oats4.scala:28:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_beats_beats_beats_beats_beats_beats_beats\e[0m = music_notes_beats_beats_beats_beats_beats_beats_beats.map(\e\
    [36mmusic_notes_beats_beats_beats_beats_beats_beats_beat\e[0m => music_notes_beat\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmusic_notes_beats_beats_beats_beats_beats_beats_beats\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp491oats4.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e["
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_list_length = music_list.length\n        val music_list_beats\
    \ = music_list.map(music_string => music_string.split(\"o|\"))\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_length = music_list_beats_length\
    \ / 2\n        val music_list_beats_length = music_list_beats_length.toInt\n \
    \       val music_list_beats_length = music_list_beats_length * 4\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length\
    \ * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of tople"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1, music_string.length)\n             \
    \   beat.toLong * rest.split(\"o\").length\n            }).sum\n            note\
    \ -> beats\n        }).groupBy(music_string => {\n            music_string._1\n\
    \        }).values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8www5fu7.scala:25:18\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\
    \e[31m18 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m20 |\e\
    [0m                beat.toLong * rest.split(\e[31m\"o\"\e[0m).length\n\e[31m21\
    \ |\e[0m            }).sum\n\e[31m22 |\e[0m            note -> beats\n\e[31m23\
    \ |\e[0m        }).groupBy(\e[36mmusic_string\e[0m => {\n\e[31m24 |\e[0m     \
    \       music_string._1\n\e[31m25 |\e[0m        }).values.toList\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mArray\e\
    [0m\e[1m\e[31m[\e[0m\e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e[0m\e\
    [1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n\
    \        val notes_beats_count = notes_beats.sum\n        val notes_beats_count_without_last_note\
    \ = notes_beats_count - notes_beats(notes_count - 1)\n        val notes_beats_count_without_last_note\
    \ = notes_beats_count_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note - notes_beats(notes_count - 2)\n     \
    \   val notes_beats_count_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note - notes_beats(notes_count\
    \ - 3)\n        val notes_beats_count_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwrhexng0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_without_last_note\e\
    [0m = notes_beats_count_without_last_note.toLong\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_without_last_note is already defined as\
    \ \e[33mvalue\e[0m \e[35mnotes_beats_count_without_last_note\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwrhexng0.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_count_without_last_note_without_last_note\e[0m = notes_beats_count_without_last_note_without_last_note.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_without_last_note_without_last_note is already\
    \ defined as \e[33mvalue\e[0m \e[35mnotes_beats_count_without_last_note_without_last_note\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwrhexng0.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_without_last_note_without_last_note_without_last_note\e\
    [0m = notes_beats_count_without_last_note_without_last_note_without_last_note.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_count_without_last_note_without_last_note_without_last_note\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_count_without_last_note_without_last_note_without_last_note\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in th"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n\
    \        val music_list_size = music_list.size\n        val music_list_size_half\
    \ = music_list_size / 2\n        val music_list_size_quarter = music_list_size\
    \ / 4\n        val music_list_size_whole = music_list_size.toLong\n        val\
    \ music_list_size_whole_half = music_list_size_whole / 2\n        val music_list_size_whole_quarter\
    \ = music_list_size_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole\
    \ / 8\n        val music_list_size_whole_whole_half = music_list_size_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_half\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_half\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0g8g9idh.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m4\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_quarter is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0g8g9idh.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m8\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0g8g9idh.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n \
    \       val music_length = music_list.length\n        val music_notes = music_list.map(music_note\
    \ => music_note.split(\"o\"))\n        val music_notes_length = music_notes.length\n\
    \        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_note\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsuayfk0.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_length\e[0m = music_notes_length / \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m \e[35mmusic_notes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprsuayfk0.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m = music_notes_length.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote t"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n\
    \        val notes_count = notes.map(n => n.length).sum\n        val notes_count_per_beat\
    \ = notes_count / 4\n        val notes_count_per_half_beat = notes_count_per_beat\
    \ * 2\n        val notes_count_per_quater_beat = notes_count_per_beat * 4\n  \
    \      val notes_count_per_whole_note = notes_count_per_beat * 8\n        val\
    \ notes_count_per_half_note = notes_count_per_half_beat * 2\n        val notes_count_per_quater_note\
    \ = notes_count_per_quater_beat * 4\n        val notes_count_per_whole_note_2\
    \ = notes_count_per_whole_note * 2\n        val notes_count_per_half_note_2 =\
    \ notes_count_per_half_note * 2\n        val notes_count_per_quater_note_2 = notes_count_per_quater_note\
    \ * 4\n        val notes_count_per_whole_note_3 = notes_count_per_whole_note_2\
    \ * 3\n        val notes_count_per_half_note_3 = notes_count_per_half_note_2 *\
    \ 3\n        val notes_count_per_quater_note_3 = notes_count_per_quater_note_2\
    \ * 4\n        val notes_count_per_whole_note_4 = notes_count_per_whole_note_3\
    \ * 4\n        val notes_count_per_half_note_4 = notes_count_per_half_note_3 *\
    \ 4\n        val notes_count_per_quater_note_4 = notes_count_per_quater_note_3\
    \ * 4\n        val notes_count_per_whole_note_5 = notes_count_per_whole_note_4\
    \ * 5\n        val notes_count_per_half_note_5 = notes_count_per_half_note_4 *\
    \ 5\n        val notes_count_per_quater_note_5 = notes_count_per_quater_note_4\
    \ * 5\n        val notes_count_per_whole_note_6 = notes_count_per_whole_note_5\
    \ * 6\n        val notes_count_per_half_note_6 = notes_count_per_half_note_5 *\
    \ 6\n        val notes_count_per_quater_note_6 = notes_count_per_quater_note_5\
    \ * 6\n        val notes_count_per_whole_note_7 = notes_count_per_whole_note_6\
    \ * 7\n        val notes_count_per_half_note_7 = notes_count_per_half_note_6 *\
    \ 7\n        val notes_count_per_quater_note_7 = notes_count_per_quater_note_6\
    \ * 7\n        val notes_count_per_whole_note_8 = notes_count_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11do7cly.scala:40:43 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnotes_count_per_whole_note_8\e\
    [0m = notes_count_\n\e[31m\e[31m   |\e[0m                                    \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \        Not found: notes_count_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp11do7cly.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val beats =\
    \ music_string.substring(1).split(\"|\").map(music_string => {\n             \
    \   val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n\
    \                beat.toLong * rest.length\n            }).sum\n            note.toLong\
    \ * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjadz4yn9.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m19 |\e[0m                beat.toLong\
    \ * rest.length\n\e[31m20 |\e[0m            }).sum\n\e[31m21 |\e[0m          \
    \  note.toLong * beats\n\e[31m22 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong)\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val halfNote\
    \ = beats.map(_.toLong).take(2).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi7htjoxn.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpi7htjoxn.scala:48:4 ----------------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi7htjoxn.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi7htjoxn.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mwholeNote\e[0m = beats.map(_.toLong).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwholeNote is already defined as \e[33mvalue\e[0m \e[35mwholeNote\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi7htjoxn.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mquarterNote\e[0m = beats.map(_.toLong).take(\e\
    [31m3\e[0m).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mquarterNote is already defined as \e[33mvalue\e[0m \e[35mquarterNote\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi7htjoxn.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mwholeNote\e[0m = beats.map(_.toLong).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwholeNote is already defined as \e[33mvalue\e[0m \e[35mwholeNote\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1).trim\n\
    \                beat.charAt(0).toLong * 12 + beat.charAt(1).toLong\n        \
    \    }).sum\n            note match {\n                case \"o\" => List(beats)\n\
    \                case \"o|\" => List(beats / 2, beats)\n                case \"\
    .|\" => List(beats / 4)\n                case _ => throw new Exception(\"Invalid\
    \ music string: \" + music_string)\n            }\n        }).flatten.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmn9r73h5.scala:28:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15 |\e[0m            \e\
    [33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m = music_string.substring(\e\
    [31m1\e[0m).trim\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ rest.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m18 |\e\
    [0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m).trim\n\e[31m20 |\e[0m             \
    \   beat.charAt(\e[31m0\e[0m).toLong * \e[31m12\e[0m + beat.charAt(\e[31m1\e[0m).toLong\n\
    \e[31m21 |\e[0m            }).sum\n\e[31m22 |\e[0m            note \e[33mmatch\e\
    [0m {\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m\"o\"\e[0m => List(beats)\n\
    \e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m\"o|\"\e[0m => List(beats\
    \ / \e[31m2\e[0m, beats)\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m\"\
    .|\"\e[0m => List(beats / \e[31m4\e[0m)\n\e[31m26 |\e[0m                \e[33mcase\e\
    [0m _ => \e[33mthrow\e[0m \e[33mnew\e[0m \e[35mException\e[0m(\e[31m\"Invalid\
    \ music string: \"\e[0m + music_string)\n\e[31m27 |\e[0m            }\n\e[31m28\
    \ |\e[0m        }).flatten.distinct\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e[31m   |\e[0m     \
    \   Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n\
    \            beats * note.toLong\n        }).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ghlgdui.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mrest\e[0m\
    \ = music_string.substring(\e[31m1\e[0m, music_string.length)\n\e[31m17 |\e[0m\
    \            \e[33mval\e[0m \e[36mbeats\e[0m = rest.split(\e[31m\"|\"\e[0m).map(_.toLong).sum\n\
    \e[31m18 |\e[0m            beats * note.toLong\n\e[31m19 |\e[0m        }).sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800151
