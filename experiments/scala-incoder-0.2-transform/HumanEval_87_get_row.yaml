name: HumanEval_87_get_row
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a 2 dimensional data, as a nested lists,\n    // which is\
  \ similar to matrix, however, unlike matrices,\n    // each row may contain a different\
  \ number of columns.\n    // Given lst, and integer x, find integers x in the list,\n\
  \    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
  \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
  \ initially by rows in ascending order.\n    // Also, sort coordinates of the row\
  \ by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()),\
  \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n\
  \    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]],\
  \ x : Long) : List[Tuple2[Long, Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l,\
  \ 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()),\
  \ (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))),\
  \ (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long,\
  \ Long]]((2l, 2l)))));\n    }\n\n}\n"
completions: ["        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = lst.map(row => row.zipWithIndex.filter(x => x == x).map(x\
    \ => (x._2, x._1)).toList)\n        val rows = result.map(_.size)\n        val\
    \ cols = result.map(_.head.length)\n        val sorted = result.sortWith((x, y)\
    \ => x._1 < y._1)\n        val sortedRows = sorted.map(_.size)\n        val sortedCols\
    \ = sorted.map(_.head.length)\n        val sortedRowsCols = sorted.map(row =>\
    \ row.zipWithIndex.filter(x => x == x).map(x => (x._2, x._1)).toList)\n      \
    \  val sortedRowsColsSorted = sortedRowsCols.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRowsColsSortedRows = sortedRowsColsSorted.map(_.size)\n   \
    \     val sortedRowsColsSortedCols = sortedRowsColsSorted.map(_.head.length)\n\
    \        val sortedRowsColsSortedRowsCols = sortedRowsColsSorted.map(row => row.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        val sortedRowsColsSortedRowsColsSorted\
    \ = sortedRowsColsSortedRowsCols.sortWith((x, y) => x._1 < y._1)\n        val\
    \ sortedRowsColsSortedRowsColsSortedRows = sortedRowsColsSortedRowsColsSorted.map(_.size)\n\
    \        val sortedRowsColsSortedRowsColsSortedCols = sortedRowsColsSortedRowsColsSorted.map(_.head.length)\n\
    \        val sortedRowsColsSortedRowsColsSortedRowsCols = sortedRowsColsSortedRowsColsSorted.map(row\
    \ => row.zipWithIndex.filter(x => x == x).map(x => (x._2, x._1)).toList)\n   \
    \     val sortedRowsColsSortedRowsColsSortedRowsColsSorted = sortedRowsColsSortedRowsColsSortedRowsColsSorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsColsSortedRowsColsSortedRowsColsSortedRows\
    \ = sortedRowsColsSortedRowsColsSortedRowsColsSortedRowsCols.map(_.size)\n   \
    \     val sortedRowsColsSortedRow", "        val lst1 = lst.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x) > 0)\n        val lst3\
    \ = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4 = lst3.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x) < 0)\n        val lst6\
    \ = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7 = lst6.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x) > 0)\n        val lst9\
    \ = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10 = lst9.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x) < 0)\n        val lst12\
    \ = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13 = lst12.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x) > 0)\n        val lst15\
    \ = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16 = lst15.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x) < 0)\n        val lst18\
    \ = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19 = lst18.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x) > 0)\n        val lst21\
    \ = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22 = lst21.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x) < 0)\n        val lst24\
    \ = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25 = lst24.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x) > 0)\n        val lst27\
    \ = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28 = lst27.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x) < 0)\n        val lst30\
    \ = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31 = lst30.sortWith(_.compareTo(x",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for (i <-\
    \ 0 until rows) {\n            for (j <- 0 until cols) {\n                val\
    \ index = i * cols + j\n                if (lst(index).contains(x)) {\n      \
    \              result.append((i, j))\n                }\n            }\n     \
    \   }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "        val\
    \ row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(x.toLong)))\n\
    \        val sortedRow = row.sortBy(row => row._1)\n        val sortedRowReversed\
    \ = sortedRow.reverse\n        val sortedColumnReversed = sortedRowReversed.map(row\
    \ => row._2).reverse\n        val sortedColumnReversedReversed = sortedColumnReversed.reverse\n\
    \        val tuples: List[Tuple2[Long, Long]] = sortedColumnReversedReversed.map(row\
    \ => Tuple2(row._1, row._2))\n        return tuples", "        val rows = lst.map(_.toList)\n\
    \        val rows = rows.sortBy(_(0))\n        val rows = rows.sortBy(_(1)).reverse\n\
    \        val rows = rows.map(x => (x, x)).filter(x => x != x)\n        val rows\
    \ = rows.map(x => (x._1, x._2))\n        rows", "        val lst2 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val coords = lst.map(row =>\
    \ row.zipWithIndex.sortBy(_._1).reverse.sortBy(_._2).reverse)\n        val rows\
    \ = coords.map(_.map(_.head).sum)\n        val cols = coords.map(_.map(_.last).sum)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_",
  "        val rows = lst.map(row => row.map(x => Tuple2(x, x)))\n        val sortedRows\
    \ = rows.sortBy(row => row._1)\n        val sortedRowsReversed = sortedRows.reverse\n\
    \        val sortedRowsReversedSorted = sortedRowsReversed.sortBy(row => row._2)\n\
    \        val result = sortedRowsReversedSorted.map(row => Tuple2(row._1, row._2)).filter(row\
    \ => row._1 == x).map(row => Tuple2(row._1, row._2))\n        result", "     \
    \   val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n  \
    \      val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < rows) {\n            var j = 0\n            while\
    \ (j < cols) {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val row: List[Long] = lst.map(row => row(x)).sortWith(_ < _)\n        val\
    \ col: List[Long] = lst.map(row => row.map(x => x(x)).sortWith(_ < _)).flatten\n\
    \        val coord: List[Tuple2[Long, Long]] = row.zip(col).map(x => (x._1, x._2))\n\
    \        coord.sortBy(x => x._1).reverse.sortBy(x => x._2).reverse", "       \
    \ val lst1 = lst.sortWith(_.toLong < x.toLong)\n        val lst2 = lst1.sortWith(_.toLong\
    \ > x.toLong)\n        val lst3 = lst2.sortWith(_.toLong < x.toLong)\n       \
    \ val lst4 = lst3.sortWith(_.toLong > x.toLong)\n        val lst5 = lst4.sortWith(_.toLong\
    \ < x.toLong)\n        val lst6 = lst5.sortWith(_.toLong > x.toLong)\n       \
    \ val lst7 = lst6.sortWith(_.toLong < x.toLong)\n        val lst8 = lst7.sortWith(_.toLong\
    \ > x.toLong)\n        val lst9 = lst8.sortWith(_.toLong < x.toLong)\n       \
    \ val lst10 = lst9.sortWith(_.toLong > x.toLong)\n        val lst11 = lst10.sortWith(_.toLong\
    \ < x.toLong)\n        val lst12 = lst11.sortWith(_.toLong > x.toLong)\n     \
    \   val lst13 = lst12.sortWith(_.toLong < x.toLong)\n        val lst14 = lst13.sortWith(_.toLong\
    \ > x.toLong)\n        val lst15 = lst14.sortWith(_.toLong < x.toLong)\n     \
    \   val lst16 = lst15.sortWith(_.toLong > x.toLong)\n        val lst17 = lst16.sortWith(_.toLong\
    \ < x.toLong)\n        val lst18 = lst17.sortWith(_.toLong > x.toLong)\n     \
    \   val lst19 = lst18.sortWith(_.toLong < x.toLong)\n        val lst20 = lst19.sortWith(_.toLong\
    \ > x.toLong)\n        val lst21 = lst20.sortWith(_.toLong < x.toLong)\n     \
    \   val lst22 = lst21.sortWith(_.toLong > x.toLong)\n        val lst23 = lst22.sortWith(_.toLong\
    \ < x.toLong)\n        val lst24 = lst23.sortWith(_.toLong > x.toLong)\n     \
    \   val lst25 = lst24.sortWith(_.toLong < x.toLong)\n        val lst26 = lst25.sortWith(_.toLong\
    \ > x.toLong)\n        val lst27 = lst26.sortWith(_.toLong < x.toLong)\n     \
    \   val lst28 = lst27.sortWith(_.", "        val m = lst.size\n        val n =\
    \ lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        var i = 0\n        var j = 0\n        while(i < m && j < n) {\n     \
    \       val rowI = lst(i).indexOf(x)\n            val colJ = lst(j).indexOf(lst(i)(rowI))\n\
    \            val tuple = (rowI, colJ)\n            if(tuple.equals(Tuple.empty))\
    \ {\n                i += 1\n                j += 1\n            } else {\n  \
    \              result += tuple\n                i += 1\n                j += 1\n\
    \            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result", "        val rows = lst.map(_.toList)\n\
    \        val columns = rows.map(_.size)\n        val result = rows.map(row =>\
    \ {\n            val colIndex = columns.indexOf(x)\n            (row.toSeq.sortBy(_.toLong).reverse,\
    \ colIndex.toLong)\n        })\n        result.sortBy(_._1).reverse", "      \
    \  val rowList = lst.map(row => row.map(i => Tuple2(i.toLong, i.toLong)))\n  \
    \      val rowMap = new mutable.HashMap[Long, mutable.HashMap[Long, Long]]()\n\
    \        rowList.foreach(row => {\n            val rowKey = row.head\n       \
    \     val rowValue = row.tail\n            rowMap.put(rowKey, rowValue)\n    \
    \    })\n        val rowMapSorted = rowMap.sortBy(_._1).reverse\n        val rowMapSortedRow\
    \ = rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse", "        val row: List[List[Long]] = lst.sortBy(_.toLong).reverse\n\
    \        val col: List[List[Long]] = row.map(_.sortBy(_.toLong))\n        val\
    \ rowMap: Map[Long, List[Long]] = row.map(x => x -> 1).toMap\n        val colMap:\
    \ Map[Long, List[Long]] = col.map(x => x -> 1).toMap\n        val result: List[Tuple2[Long,\
    \ Long]] = rowMap.keys.toList.flatMap(x => colMap.get(x).map(y => (x, y))).sortBy(_._1).reverse\n\
    \        result.filter(x => x._1 == x).map(x => (x._2, x._1))", "        val lst1\
    \ = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n \
    \       val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val row: List[Long]\
    \ = lst.map(row => row.toLong).sortWith(_ < _)\n        val col: List[Long] =\
    \ lst.map(row => row.toLong).sortWith(_ < _).reverse\n        val coord: List[Tuple2[Long,\
    \ Long]] = row.map(i => Tuple2(i.toLong, col(i.toLong)))\n        coord.filter(i\
    \ => i.1 == x).sortBy(i => i.1).reverse.map(i => Tuple2(i._1, i._2))", "     \
    \   val rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n    \
    \    val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst.map(_.apply(row))\n       \
    \     val colValue = lst.map(_.apply(col))\n            if(rowValue contains x)\
    \ {\n                result.+=(Tuple2(rowValue, colValue))\n            }\n  \
    \          row += 1\n            col += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result.map(x => (x._1,\
    \ x._2))", "        val m = lst.map(_.size).max\n        val n = lst.map(_.size).min\n\
    \        val rows = lst.map(_.toList).map(_.toLong).zipWithIndex.sortBy(_._1).map(x\
    \ => (x._2, x._1))\n        val cols = lst.map(_.toList).map(_.toLong).zipWithIndex.sortBy(_._2).map(x\
    \ => (x._1, x._2))\n        val result = rows.map(x => (x._1, x._2)).filter(x\
    \ => x._1 == x).sortBy(x => x._1).map(x => (x._2, x._1)).filter(x => x._2 == x).sortBy(x\
    \ => x._2).map(x => (x._1, x._2)).filter(x => x._1 == x._2).map(x => (x._2, x._1))\n\
    \        result.map(x => (x._1, x._2)).filter(x => x._1 == x).sortBy(x => x._1).map(x\
    \ => (x._2, x._1)).filter(x => x._2 == x).sortBy(x => x._2).map(x => (x._1, x._2)).filter(x\
    \ => x._1 == x._2).map(x => (x._2, x._1))", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val rows =\
    \ lst.map(_.toList)\n        val rows = rows.sortWith(_.toLong < x.toLong)\n \
    \       val cols = rows.map(_.toList)\n        val cols = cols.sortWith(_.toLong\
    \ < x.toLong)\n        val coords = rows.map(row => (row, cols.map(col => (col,\
    \ row)))).sortBy(_._1)\n        coords.map(coord => (coord._1, coord._2.map(coord._2._1).max))",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n \
    \       val coords = rows.zipWithIndex.map { case (row, rowIndex) =>\n       \
    \     val coord = row.zipWithIndex.map { case (col, colIndex) =>\n           \
    \     val coord = if (colIndex == 0) x\n                else if (colIndex == cols.length\
    \ - 1) rowIndex\n                else if (colIndex < cols.length - 1) colIndex\n\
    \                else colIndex - 1\n                coord\n            }\n   \
    \         coord\n        }\n        coords.sortBy(_._1).sortBy(_._2).map(t =>\
    \ (t._1, t._2))", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val rows = lst.map(row => row.map(i => Tuple2(i.toLong,\
    \ i.toLong)))\n        val rows = rows.sortBy(row => row._1)\n        val cols\
    \ = rows.map(row => row._2).sortBy(col => -col).reverse\n        val rows = rows.map(row\
    \ => row._1)\n        val cols = cols.map(col => col.toLong)\n        val rows\
    \ = rows.map(row => Tuple2(row, cols.find(col => col == row).map(col => col +\
    \ 1l)))\n        val rows = rows.sortBy(row => row._1)\n        val cols = rows.map(row\
    \ => row._2).sortBy(col => -col).reverse\n        val rows = rows.map(row => row._1)\n\
    \        val cols = cols.map(col => col.toLong)\n        val rows = rows.map(row\
    \ => Tuple2(row, cols.find(col => col == row).map(col => col + 1l)))\n       \
    \ val rows = rows.sortBy(row => row._1)\n        val cols = rows.map(row => row._2).sortBy(col\
    \ => -col).reverse\n        val rows = rows.map(row => row._1)\n        val cols\
    \ = cols.map(col => col.toLong)\n        val rows = rows.map(row => Tuple2(row,\
    \ cols.find(col => col == row).map(col => col + 1l)))\n        val rows = rows.sortBy(row\
    \ => row._1)\n        val cols = rows.map(row => row._2).sortBy(col => -col).reverse\n\
    \        val rows = rows.map(row => row._1)\n        val cols = cols.map(col =>\
    \ col.toLong)\n        val rows = rows.map(row => Tuple2(row, cols.find(col =>\
    \ col == row).map(col => col + 1l)))\n        val rows = rows.sortBy(row => row._1)\n\
    \        val cols = rows.map(row => row._2).sortBy(col => -col).reverse\n    \
    \    val rows = rows.map(row => row._1)\n        val cols = cols.map(col => col.toLong)\n\
    \        val rows = rows.map(row => Tuple2(row, cols.find(col => col == row).map(col\
    \ => col + 1l)))\n        val rows = rows.sortBy(row => row._1)\n        val cols\
    \ = rows.map(row => row._2).sortBy(col => -col).reverse\n        val rows = rows.map(row\
    \ => row._1)\n        val cols = cols.map(col => col.toLong)\n        val rows\
    \ = rows.map(row => Tuple2(row, cols.find(col => col == row).map(col => col +\
    \ 1l", "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < rows.length) {\n            val row = lst(i)\n   \
    \         var j = 0\n            while (j < cols.length) {\n                val\
    \ col = lst(i).head\n                if (row == x && col == x) {\n           \
    \         result.add((i, j))\n                }\n                j += 1\n    \
    \        }\n            i += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n \
    \       val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ rows = lst.map(_.length)\n        val cols = lst(0).length\n        val result\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for (i <- 0 until rows)\
    \ {\n            for (j <- 0 until cols) {\n                if (lst(i)(j) == x)\
    \ {\n                    result.append((i, j))\n                }\n          \
    \  }\n        }\n        result.sortBy(_._1).reverse", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong < y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong < y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong < y.toLong)", "        val lst1 =\
    \ lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "       \
    \ val rows = lst.map(_.toList).flatten\n        val cols = rows.map(_.size).max\n\
    \        val result = rows.map(row => row.zipWithIndex.filter(_._1 == x).map(_._2))\n\
    \        val sorted = result.sortWith((x, y) => x._1 < y._1)\n        val reversed\
    \ = sorted.reverse\n        reversed.map(x => (x._2, x._1))", "        val lst2\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val\
    \ row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(row.indexOf(x))))\n\
    \        val sortedRow: List[Tuple2[Long, Long]] = row.sortBy(row => row._1)\n\
    \        val sortedRowReverse: List[Tuple2[Long, Long]] = sortedRow.reverse\n\
    \        sortedRowReverse.map(row => Tuple2(row._2, row._1))", "        val rows\
    \ = lst.map(_.toList)\n        val cols = rows.map(_.length)\n        val result\
    \ = rows.map(row => {\n            val coords = row.zipWithIndex.sortBy(_._1).reverse\n\
    \            coords.map(c => (c._2, c._1))\n        })\n        val rowCoords\
    \ = result.map(_.sortBy(_._1).reverse).flatten\n        val colCoords = result.map(_.sortBy(_._2).reverse).flatten\n\
    \        val coords = rowCoords.zip(colCoords).sortBy(_._1).reverse\n        coords.map(c\
    \ => (c._2, c._1)).filter(_._1 == x).map(c => (c._1, c._2))", "        val rows\
    \ = lst.map(row => row.map(x => Tuple2(x, x)))\n        val sorted = rows.sortWith((x,\
    \ y) => x._1 < y._1)\n        val rows = sorted.map(row => row.map(x => Tuple2(x,\
    \ x._2))).sortWith((x, y) => y._1 < x._1)\n        val result = rows.map(row =>\
    \ row.map(x => Tuple2(x, x._1))).filter(row => row._1 == x).sortWith((x, y) =>\
    \ y._2 < x._2)\n        result.map(row => row.map(x => Tuple2(x, x._2))).sortWith((x,\
    \ y) => y._1 < x._2)", "        val rows = lst.map(row => row.zipWithIndex.toList)\n\
    \        val rows = rows.sortBy(row => row._1)\n        val rows = rows.sortBy(row\
    \ => row._2.reverse)\n        val rows = rows.filter(row => row._1 == x)\n   \
    \     val rows = rows.map(row => (row._2.toLong, row._1.toLong))\n        rows",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n   \
    \     val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i\
    \ = 0\n        while (i < rows.size) {\n            var j = 0\n            while\
    \ (j < cols.size) {\n                if (rows(i) == cols(j)) {\n             \
    \       result.add(Tuple2(i, j))\n                }\n                j += 1\n\
    \            }\n            i += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head).max\n  \
    \      val coords = lst.map(_.toList)\n        val rows = coords.map(_.size)\n\
    \        val cols = coords.map(_.head).max\n        val coords = coords.map(_.toList)\n\
    \        val rowCoords = coords.map(_.toList)\n        val colCoords = coords.map(_.toList)\n\
    \        val rowCoordsSorted = rowCoords.sortWith((x, y) => x > y)\n        val\
    \ colCoordsSorted = colCoords.sortWith((x, y) => x > y)\n        val coords =\
    \ coords.map(x => Tuple2(x._1, x._2))\n        val rows = coords.map(x => x._1)\n\
    \        val cols = coords.map(x => x._2)\n        val rowCoords = coords.map(x\
    \ => x._1)\n        val colCoords = coords.map(x => x._2)\n        val rowCoordsSorted\
    \ = rowCoords.sortWith((x, y) => x > y)\n        val colCoordsSorted = colCoords.sortWith((x,\
    \ y) => x > y)\n        val coords = coords.map(x => Tuple2(x._1, x._2))\n   \
    \     val rows = coords.map(x => x._1)\n        val cols = coords.map(x => x._2)\n\
    \        val rowCoords = coords.map(x => x._1)\n        val colCoords = coords.map(x\
    \ => x._2)\n        val rowCoordsSorted = rowCoords.sortWith((x, y) => x > y)\n\
    \        val colCoordsSorted = colCoords.sortWith((x, y) => x > y)\n        val\
    \ coords = coords.map(x => Tuple2(x._1, x._2))\n        val rows = coords.map(x\
    \ => x._1)\n        val cols = coords.map(x => x._2)\n        val rowCoords =\
    \ coords.map(x => x._1)\n        val colCoords = coords.map(x => x._2)\n     \
    \   val rowCoordsSorted = rowCoords.sortWith((x, y) => x > y)\n        val colCoordsSorted\
    \ = colCoords.sortWith((x, y) => x > y)\n        val coords = coords.map(x =>\
    \ Tuple2(x._1, x._2))\n        val rows = coords.map(x => x._1)\n        val cols\
    \ = coords.map(x => x._2)\n        val rowCoords = coords.map(x => x._1)\n   \
    \     val colCoords = coords.map(x => x._2)\n        val rowCoordsSorted = rowCoords.sortWith((x,\
    \ y) => x > y)\n        val colCoordsSorted = colCoord", "        val lst1 = lst.sortBy(_(0))\n\
    \        val lst2 = lst1.sortBy(_(1)) //descending order\n        val lst3 = lst2.sortBy(_(0))\
    \ //descending order\n        val lst4 = lst3.sortBy(_(1)) //descending order\n\
    \        val lst5 = lst4.sortBy(_(0)) //descending order\n        val lst6 = lst5.sortBy(_(1))\
    \ //descending order\n        val lst7 = lst6.sortBy(_(0)) //descending order\n\
    \        val lst8 = lst7.sortBy(_(1)) //descending order\n        val lst9 = lst8.sortBy(_(0))\
    \ //descending order\n        val lst10 = lst9.sortBy(_(1)) //descending order\n\
    \        val lst11 = lst10.sortBy(_(0)) //descending order\n        val lst12\
    \ = lst11.sortBy(_(1)) //descending order\n        val lst13 = lst12.sortBy(_(0))\
    \ //descending order\n        val lst14 = lst13.sortBy(_(1)) //descending order\n\
    \        val lst15 = lst14.sortBy(_(0)) //descending order\n        val lst16\
    \ = lst15.sortBy(_(1)) //descending order\n        val lst17 = lst16.sortBy(_(0))\
    \ //descending order\n        val lst18 = lst17.sortBy(_(1)) //descending order\n\
    \        val lst19 = lst18.sortBy(_(0)) //descending order\n        val lst20\
    \ = lst19.sortBy(_(1)) //descending order\n        val lst21 = lst20.sortBy(_(0))\
    \ //descending order\n        val lst22 = lst21.sortBy(_(1)) //descending order\n\
    \        val lst23 = lst22.sortBy(_(0)) //descending order\n        val lst24\
    \ = lst23.sortBy(_(1)) //descending order\n        val lst25 = lst24.sortBy(_(0))\
    \ //descending order\n        val lst26 = lst25.sortBy(_(1)) //descending order\n\
    \        val lst27 = lst26.sortBy(_(0)) //descending order\n        val lst28\
    \ = lst27.sortBy(_(1)) //descending order\n        val lst29 = lst28.sortBy(_(0))\
    \ //descending order\n        val lst30 = lst29.sortBy(_(1)) //descending order\n\
    \        val lst31 = lst30.sortBy(_(0)) //descending order\n        val ", " \
    \       val rowList = lst.map(row => row.map(i => Tuple2(i.toLong, i.toLong)))\n\
    \        val rowTuples = rowList.map(row => row.map(i => Tuple2(i._1, i._2)))\n\
    \        val rowTuplesSorted = rowTuples.sortBy(row => row._1)\n        val rowTuplesSortedReversed\
    \ = rowTuplesSorted.sortBy(row => row._2, descending = true)\n        val rowTuplesSortedReversedSorted\
    \ = rowTuplesSortedReversed.sortBy(row => row._1)\n        val rowTuplesSortedReversedSortedWithIndex\
    \ = rowTuplesSortedReversedSorted.map(row => row._1 + row._2)\n        val rowTuplesSortedReversedSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndex.sortBy(row => row._1)\n        val\
    \ rowTuplesSortedReversedSortedWithIndexSortedWithIndex = rowTuplesSortedReversedSortedWithIndexSorted.map(row\
    \ => row._1 + row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndex.sortBy(row => row._1)\n\
    \        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSorted.map(row => row._1\
    \ + row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(row\
    \ => row._1)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(row\
    \ => row._1 + row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(row\
    \ => row._1)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(row\
    \ => row._1 + row._2)\n        val rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowTuplesSortedReversedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i =\
    \ 0\n        while (i < rows) {\n            val row = lst(i)\n            val\
    \ rowIndex = i\n            val col = 0\n            while (col < cols) {\n  \
    \              if (row(col) == x) {\n                    result.add(Tuple2(rowIndex,\
    \ col))\n                }\n                col += 1\n            }\n        \
    \    i += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result.toList", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < rows) {\n            val row = lst(i)\n          \
    \  val j = 0\n            while (j < cols) {\n                if (row(i) == x)\
    \ { result.add(Tuple2(i, j)) }\n                j += 1\n            }\n      \
    \      i += 1\n        }\n        result.sortBy(_._1).reverse", "        val lst2\
    \ = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n        val lst4\
    \ = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n        val lst6\
    \ = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n        val lst8\
    \ = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n        val lst10\
    \ = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n        val lst12\
    \ = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n        val\
    \ lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n     \
    \   val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val lst2\
    \ = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n        val lst4\
    \ = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n        val lst6\
    \ = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n        val lst8\
    \ = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n        val lst10\
    \ = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n        val lst12\
    \ = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n        val\
    \ lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n     \
    \   val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val rowList\
    \ = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val columnList = mutable.ListBuffer[Long]()\n\
    \        val rowIndexList = mutable.ListBuffer[Long]()\n        val columnIndexList\
    \ = mutable.ListBuffer[Long]()\n        val rowCount = lst.size\n        val columnCount\
    \ = lst(0).size\n        val rowIndex = 0\n        val columnIndex = 0\n     \
    \   while(rowIndex < rowCount) {\n            val rowList = lst(rowIndex)\n  \
    \          val columnList = rowList.drop(rowIndex).reverse\n            val rowIndex\
    \ = rowIndex + 1\n            val columnIndex = 0\n            while(columnIndex\
    \ < columnCount) {\n                val columnIndex = columnIndex + 1\n      \
    \          val rowValue = columnList.head\n                val columnValue = columnList.last\n\
    \                val rowIndex = rowIndex - 1\n                val columnIndex\
    \ = columnIndex - 1\n                rowIndexList.add(rowIndex)\n            \
    \    columnIndexList.add(columnIndex)\n                rowList.drop(rowIndex).reverse.foreach(rowList::add)\n\
    \                columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            }\n            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n\
    \            rowIndexList.add(rowIndex)\n            columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n          \
    \  rowIndexList.add(rowIndex)\n            columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n          \
    \  rowIndexList.add(rowIndex)\n            columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n          \
    \  rowIndexList.add(rowIndex)\n            columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n          \
    \  rowIndexList.add(rowIndex)\n            columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n          \
    \  rowIndexList.add(rowIndex)\n            columnList.drop(columnIndex).reverse.foreach(columnList::add)\n\
    \            rowList.drop(rowIndex).reverse.foreach(rowList::add)\n          \
    \  rowIndexList.add(rowIndex)\n            column", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows) {\n            var j =\
    \ 0\n            while (j < cols) {\n                if (lst(i)(j) == x) {\n \
    \                   result.append((i, j))\n                }\n               \
    \ j += 1\n            }\n            i += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val rows = lst.map(row => row.map(i => Tuple2(i.toLong, i.toLong)))\n \
    \       val rows = rows.sortBy(row => row._1)\n        val rows = rows.sortBy(row\
    \ => row._2, descending = true)\n        val rows = rows.filter(row => row._1\
    \ == x)\n        val rows = rows.map(row => Tuple2(row._1, row._2))\n        rows",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        for (i <- 0 until m)\
    \ {\n            row.append(i)\n            col.append(0)\n        }\n       \
    \ for (i <- 0 until n) {\n            col.append(i)\n        }\n        val rowSorted\
    \ = row.sortWith((x, y) => x > y)\n        val colSorted = col.sortWith((x, y)\
    \ => x > y)\n        for (i <- 0 until rowSorted.length) {\n            for (j\
    \ <- 0 until colSorted.length) {\n                if (rowSorted(i) == colSorted(j))\
    \ {\n                    val tuple = Tuple2(rowSorted(i), colSorted(j))\n    \
    \                result.add(tuple)\n                }\n            }\n       \
    \ }\n        result.toList", "        val rowList = mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val columnList = mutable.ListBuffer[Long]()\n        val rowMap\
    \ = mutable.Map[Long, List[Long]]()\n        val columnMap = mutable.Map[Long,\
    \ List[Long]]()\n        lst.foreach(row => {\n            row.foreach(col =>\
    \ {\n                if (rowMap.contains(col)) {\n                    rowMap(col)\
    \ += col\n                } else {\n                    rowMap(col) = List(col)\n\
    \                }\n                if (columnMap.contains(col)) {\n         \
    \           columnMap(col) += col\n                } else {\n                \
    \    columnMap(col) = List(col)\n                }\n            })\n        })\n\
    \        rowMap.foreach(row => {\n            columnMap.foreach(col => {\n   \
    \             val rowList = rowMap(col)\n                val columnList = columnMap(col)\n\
    \                if (rowList.contains(x)) {\n                    rowList += x\n\
    \                    columnList += x\n                } else {\n             \
    \       rowList += x\n                    columnList += x\n                }\n\
    \            })\n        })\n        rowMap.foreach(row => {\n            columnMap.foreach(col\
    \ => {\n                val rowList = rowMap(col)\n                val columnList\
    \ = columnMap(col)\n                if (rowList.contains(x)) {\n             \
    \       rowList += x\n                    columnList += x\n                } else\
    \ {\n                    rowList += x\n                    columnList += x\n \
    \               }\n            })\n        })\n        rowMap.foreach(row => {\n\
    \            columnMap.foreach(col => {\n                val rowList = rowMap(col)\n\
    \                val columnList = columnMap(col)\n                if (rowList.contains(x))\
    \ {\n                    rowList += x\n                    columnList += x\n \
    \               } else {\n                    rowList += x\n                 \
    \   columnList += x\n                }\n            })\n        })\n        rowMap.foreach(row\
    \ => {\n            columnMap.foreach(col => {\n                val rowList =\
    \ rowMap(col)\n                val columnList = columnMap(col)\n             \
    \   if (rowList.contains(x)) {\n                    rowList += x\n           \
    \         columnList += x\n                } else {\n                    rowList\
    \ += x\n                    columnList += x\n                }\n            })\n\
    \        })\n        rowMap.foreach(row => {\n            columnMap.foreach(col\
    \ => {\n                val rowList = rowMap(col)\n                val columnList\
    \ = columnMap(col)\n                if (rowList.contains(x)) {\n             \
    \       rowList += x\n                    columnList += x\n                } else\
    \ {\n                    rowList += x\n                    columnList += x\n \
    \               }\n            })\n        })\n        rowMap.foreach(row => {\n\
    \            columnMap.foreach(col => {\n                val rowList = rowMap(col)\n\
    \                val columnList = columnMap(col)\n                if (", "   \
    \     val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowMap = new mutable.HashMap[Long,\
    \ Long]()\n        val colMap = new mutable.HashMap[Long, Long]()\n        val\
    \ rowMap2 = new mutable.HashMap[Long, Long]()\n        val colMap2 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowMap3 = new mutable.HashMap[Long, Long]()\n        val\
    \ colMap3 = new mutable.HashMap[Long, Long]()\n        val rowMap4 = new mutable.HashMap[Long,\
    \ Long]()\n        val colMap4 = new mutable.HashMap[Long, Long]()\n        val\
    \ rowMap5 = new mutable.HashMap[Long, Long]()\n        val colMap5 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowMap6 = new mutable.HashMap[Long, Long]()\n        val\
    \ colMap6 = new mutable.HashMap[Long, Long]()\n        val rowMap7 = new mutable.HashMap[Long,\
    \ Long]()\n        val colMap7 = new mutable.HashMap[Long, Long]()\n        val\
    \ rowMap8 = new mutable.HashMap[Long, Long]()\n        val colMap8 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowMap9 = new mutable.HashMap[Long, Long]()\n        val\
    \ colMap9 = new mutable.HashMap[Long, Long]()\n        val rowMap10 = new mutable.HashMap[Long,\
    \ Long]()\n        val colMap10 = new mutable.HashMap[Long, Long]()\n        val\
    \ rowMap11 = new mutable.HashMap[Long, Long]()\n        val colMap11 = new mutable.HashMap[Long,\
    \ Long]()\n        val rowMap12 = new mutable.HashMap[Long, Long]()\n        val\
    \ colMap12 = new mutable.HashMap[Long, Long]()\n        val rowMap13 = new mutable.HashMap[Long,\
    \ Long]()\n        val colMap13 = new mutable.HashMap[Long, Long]()\n        val\
    \ rowMap14 = new mutable.HashMap[Long, Long]()", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val rows =\
    \ lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val result\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(", "        val lst1 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x,\
    \ y) => x.toLong > y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x,\
    \ y) => x.toLong > y.toLong)", "        val rows = lst.map(_.toList)\n       \
    \ val cols = rows.map(_.size)\n        val rows = rows.map(_.sortBy(_.toLong))\n\
    \        val cols = cols.map(_.sortBy(_.toLong.reverse))\n        val rows = rows.map(_.map(i\
    \ => (i, 0l)))\n        val cols = cols.map(_.map(i => (i, 0l)))\n        val\
    \ rows = rows.map(_.sortBy(_._1))\n        val cols = cols.map(_.sortBy(_._1))\n\
    \        val rows = rows.map(_.sortBy(_._2))\n        val cols = cols.map(_.sortBy(_._2))\n\
    \        val rows = rows.map(_.map(i => (i, i)))\n        val cols = cols.map(_.map(i\
    \ => (i, i)))\n        val rows = rows.map(_.sortBy(_._1))\n        val cols =\
    \ cols.map(_.sortBy(_._1))\n        val rows = rows.map(_.sortBy(_._2))\n    \
    \    val cols = cols.map(_.sortBy(_._2))\n        val rows = rows.map(_.map(i\
    \ => (i, i)))\n        val cols = cols.map(_.map(i => (i, i)))\n        val rows\
    \ = rows.map(_.sortBy(_._1))\n        val cols = cols.map(_.sortBy(_._1))\n  \
    \      val rows = rows.map(_.sortBy(_._2))\n        val cols = cols.map(_.sortBy(_._2))\n\
    \        val rows = rows.map(_.map(i => (i, i)))\n        val cols = cols.map(_.map(i\
    \ => (i, i)))\n        val rows = rows.map(_.sortBy(_._1))\n        val cols =\
    \ cols.map(_.sortBy(_._1))\n        val rows = rows.map(_.sortBy(_._2))\n    \
    \    val cols = cols.map(_.sortBy(_._2))\n        val rows = rows.map(_.map(i\
    \ => (i, i)))\n        val cols = cols.map(_.map(i => (i, i)))\n        val rows\
    \ = rows.map(_.sortBy(_._1))\n        val cols = cols.map(_.sortBy(_._1))\n  \
    \      val rows = rows.map(_.sortBy(_._2))\n        val cols = cols.map(_.sortBy(_._2))\n\
    \        val rows = rows.map(_.map(i => (i, i)))\n        val cols = cols.map(_.map(i\
    \ => (i, i)))\n        val rows = rows.map(_.sortBy(_._1))\n        val cols =\
    \ cols.map(_.sortBy(_._1))\n        val rows = rows.map(_.sortBy(_._2))\n    \
    \    val cols = cols.map(_.sortBy(_._2))\n        val ", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val coords = lst.map(_.map(i\
    \ => Tuple2(i, i)))\n        val rows = coords.map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap).map(_.swap",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x => x :+ x)\n\
    \        val lst4 = lst3.map(x => x :+ x.last)\n        val lst5 = lst4.map(x\
    \ => x :+ x.last)\n        val lst6 = lst5.map(x => x :+ x.last)\n        val\
    \ lst7 = lst6.map(x => x :+ x.last)\n        val lst8 = lst7.map(x => x :+ x.last)\n\
    \        val lst9 = lst8.map(x => x :+ x.last)\n        val lst10 = lst9.map(x\
    \ => x :+ x.last)\n        val lst11 = lst10.map(x => x :+ x.last)\n        val\
    \ lst12 = lst11.map(x => x :+ x.last)\n        val lst13 = lst12.map(x => x :+\
    \ x.last)\n        val lst14 = lst13.map(x => x :+ x.last)\n        val lst15\
    \ = lst14.map(x => x :+ x.last)\n        val lst16 = lst15.map(x => x :+ x.last)\n\
    \        val lst17 = lst16.map(x => x :+ x.last)\n        val lst18 = lst17.map(x\
    \ => x :+ x.last)\n        val lst19 = lst18.map(x => x :+ x.last)\n        val\
    \ lst20 = lst19.map(x => x :+ x.last)\n        val lst21 = lst20.map(x => x :+\
    \ x.last)\n        val lst22 = lst21.map(x => x :+ x.last)\n        val lst23\
    \ = lst22.map(x => x :+ x.last)\n        val lst24 = lst23.map(x => x :+ x.last)\n\
    \        val lst25 = lst24.map(x => x :+ x.last)\n        val lst26 = lst25.map(x\
    \ => x :+ x.last)\n        val lst27 = lst26.map(x => x :+ x.last)\n        val\
    \ lst28 = lst27.map(x => x :+ x.last)\n        val lst29 = lst28.map(x => x :+\
    \ x.last)\n        val lst30 = lst29.map(x => x :+ x.last)\n        val lst31\
    \ = lst30.map(x => x :+ x.last)\n        val lst32 = lst31.map(x => x :+ x.last)\n\
    \        val lst", "        val lst2 = lst.map(x => x.map(_ => x).toList)\n  \
    \      val lst3 = lst2.map(x => x.map(y => (y, x)))\n        val lst4 = lst3.map(x\
    \ => x.map(y => (y._1, y._2)))\n        val lst5 = lst4.map(x => x.map(y => (y._1,\
    \ y._2)))\n        val lst6 = lst5.map(x => x.map(y => (y._1, y._2)))\n      \
    \  val lst7 = lst6.map(x => x.map(y => (y._1, y._2)))\n        val lst8 = lst7.map(x\
    \ => x.map(y => (y._1, y._2)))\n        val lst9 = lst8.map(x => x.map(y => (y._1,\
    \ y._2)))\n        val lst10 = lst9.map(x => x.map(y => (y._1, y._2)))\n     \
    \   val lst11 = lst10.map(x => x.map(y => (y._1, y._2)))\n        val lst12 =\
    \ lst11.map(x => x.map(y => (y._1, y._2)))\n        val lst13 = lst12.map(x =>\
    \ x.map(y => (y._1, y._2)))\n        val lst14 = lst13.map(x => x.map(y => (y._1,\
    \ y._2)))\n        val lst15 = lst14.map(x => x.map(y => (y._1, y._2)))\n    \
    \    val lst16 = lst15.map(x => x.map(y => (y._1, y._2)))\n        val lst17 =\
    \ lst16.map(x => x.map(y => (y._1, y._2)))\n        val lst18 = lst17.map(x =>\
    \ x.map(y => (y._1, y._2)))\n        val lst19 = lst18.map(x => x.map(y => (y._1,\
    \ y._2)))\n        val lst20 = lst19.map(x => x.map(y => (y._1, y._2)))\n    \
    \    val lst21 = lst20.map(x => x.map(y => (y._1, y._2)))\n        val lst22 =\
    \ lst21.map(x => x.map(y => (y._1, y._2)))\n        val lst23 = lst22.map(x =>\
    \ x.map(y => (y._1, y._2)))\n        val lst24 = lst23.map(x => x.map(y => (y._1,\
    \ y._2)))\n        val lst25 = lst24.map(x => x.map(y => (y._1, y._2)))\n    \
    \    val lst26 = lst25.map(x => x.map(y => (y._1, y._2)))\n        val lst", " \
    \       val rows = lst.map(row => row.zipWithIndex.sortBy(_._1).reverse)\n   \
    \     val cols = rows.map(row => row.zipWithIndex.sortBy(_._2).reverse)\n    \
    \    val result = rows.map(row => row.map(x => (x, row.indexOf(x))))\n       \
    \     .flatMap(row => row.map(x => Tuple2(x, row.indexOf(x))))\n            .filter(x\
    \ => x._1 == x)\n            .map(x => (x._2, x._1))\n            .sortBy(_._1)\n\
    \            .sortBy(_._2)\n        val result2 = cols.map(col => col.map(x =>\
    \ (x, col.indexOf(x))))\n            .flatMap(col => col.map(x => Tuple2(x, col.indexOf(x))))\n\
    \            .filter(x => x._1 == x)\n            .map(x => (x._2, x._1))\n  \
    \          .sortBy(_._1)\n            .sortBy(_._2)\n        result.zip(result2)",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n   \
    \     val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until rows.size) {\n            row += rows(i)\n        \
    \    col += cols(i)\n        }\n        val rowSorted = row.sortWith(_ < _)\n\
    \        val colSorted = col.sortWith(_ < _)\n        for (i <- 0 until rowSorted.size)\
    \ {\n            val rowIndex = rowSorted(i)\n            val colIndex = colSorted(i)\n\
    \            if (rowIndex == x) {\n                for (j <- 0 until colSorted.size)\
    \ {\n                    val colIndex = colSorted(j)\n                    if (colIndex\
    \ == x) {\n                        result += (Tuple2(rowIndex, colIndex))\n  \
    \                  }\n                }\n            }\n        }\n        result.toList",
  "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n   \
    \     val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n \
    \       val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n\
    \        val rows = rows.map(_.toList)\n        val cols = cols.map(_.toList)\n",
  "        val lst1 = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n \
    \       val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ m = lst.size\n        val n = lst(0).size\n        val r = new Array[Tuple2[Long,\
    \ Long]](m)\n        var i = 0\n        while (i < m) {\n            var j = 0\n\
    \            while (j < n) {\n                if (lst(i)(j) == x) {\n        \
    \            r(i) = Tuple2((i + 1), (j + 1))\n                }\n            \
    \    j += 1\n            }\n            i += 1\n        }\n        r.sortWith((x,\
    \ y) => x._1 < y._1)\n        r.sortWith((x, y) => x._2 < y._2)\n        r", " \
    \       val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n\
    \        val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val row:\
    \ List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(row.indexOf(x))))\n\
    \        val sortedRow = row.sortBy(row => row._1)\n        val sortedRowReversed\
    \ = sortedRow.reverse\n        val sortedColumnReversed = sortedRowReversed.map(row\
    \ => row._2)\n        val sortedColumnReversedReversed = sortedColumnReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversed = sortedColumnReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversed = sortedColumnReversedReversedReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversed.reverse\n   \
    \     val sortedColumnReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColumnReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        ", "        val lst1 = lst.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong < y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong < y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ < y.toLong)", "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val coords = lst.map(_.map(x -> x)).sortBy(_._1).sortBy(_._2).map(x =>\
    \ (x._1, x._2))\n        val rows = coords.map(x => x._1).distinct\n        val\
    \ cols = coords.map(x => x._2).distinct\n        val result = coords.map(x =>\
    \ (x._1, x._2)).filter(x => rows.contains(x._1) && cols.contains(x._2))\n    \
    \    result.sortBy(_._1).map(x => (x._1, x._2))", "        val rows = lst.map(row\
    \ => row.map(i => Tuple2(i.toLong, i.toLong)))\n        val cols = rows.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols\
    \ = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i => Tuple2(i._1,\
    \ i._2)))\n        val cols = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i\
    \ => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n    \
    \    val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols\
    \ = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i => Tuple2(i._1,\
    \ i._2)))\n        val cols = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i\
    \ => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n    \
    \    val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols\
    \ = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i => Tuple2(i._1,\
    \ i._2)))\n        val cols = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i\
    \ => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n    \
    \    val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n\
    \        val rows = rows.map(_.map(i => Tuple2(i._1, i._2)))\n        val cols\
    \ = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i => Tuple2(i._1,\
    \ i._2)))\n        val cols = cols.map(_.map(_.toLong))\n        val rows = rows.map(_.map(i\
    \ => Tuple2(i._1, i._2)))\n        val cols = cols.map(_.map(_.toLong))\n    \
    \    val rows = rows.map(_.map(i => Tuple2(i._", "        val lst2 = lst.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = lst43.map(_.toList)\n\
    \        val lst", "        val rows = lst.map(row => row.map(i => Tuple2(i.toLong,\
    \ i.toLong)))\n        val rows = rows.sortBy(row => row._1)\n        val rows\
    \ = rows.sortBy(row => row._2, Ordering[Long].reverse)\n        val rows = rows.filter(row\
    \ => row._1 == x)\n        val rows = rows.map(row => Tuple2(row._1, row._2))\n\
    \        rows", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n\
    \        val rows = rows.sortBy(_.toInt)\n        val cols = cols.sortBy(_.toInt)\n\
    \        val result = rows.map(row => {\n            val cols = row.map(_.toInt)\n\
    \            (cols.indexOf(x), cols.lastIndexOf(x))\n        })\n        result.sortBy(_._1).reverse.map(x\
    \ => (x._1, x._2))", "        val row: List[Tuple2[Long, Long]] = lst.map(row\
    \ => Tuple2(row(0), row(x)))\n        val rowSorted = row.sortBy(row => row._1)\n\
    \        val rowSortedSorted = rowSorted.sortBy(row => row._2)\n        rowSortedSorted",
  "        val lst1 = lst.sortBy(_.toInt)\n        val lst2 = lst1.sortBy(_.toInt).reverse\n\
    \        val lst3 = lst2.sortBy(_.toInt).reverse\n        val lst4 = lst3.sortBy(_.toInt).reverse\n\
    \        val lst5 = lst4.sortBy(_.toInt).reverse\n        val lst6 = lst5.sortBy(_.toInt).reverse\n\
    \        val lst7 = lst6.sortBy(_.toInt).reverse\n        val lst8 = lst7.sortBy(_.toInt).reverse\n\
    \        val lst9 = lst8.sortBy(_.toInt).reverse\n        val lst10 = lst9.sortBy(_.toInt).reverse\n\
    \        val lst11 = lst10.sortBy(_.toInt).reverse\n        val lst12 = lst11.sortBy(_.toInt).reverse\n\
    \        val lst13 = lst12.sortBy(_.toInt).reverse\n        val lst14 = lst13.sortBy(_.toInt).reverse\n\
    \        val lst15 = lst14.sortBy(_.toInt).reverse\n        val lst16 = lst15.sortBy(_.toInt).reverse\n\
    \        val lst17 = lst16.sortBy(_.toInt).reverse\n        val lst18 = lst17.sortBy(_.toInt).reverse\n\
    \        val lst19 = lst18.sortBy(_.toInt).reverse\n        val lst20 = lst19.sortBy(_.toInt).reverse\n\
    \        val lst21 = lst20.sortBy(_.toInt).reverse\n        val lst22 = lst21.sortBy(_.toInt).reverse\n\
    \        val lst23 = lst22.sortBy(_.toInt).reverse\n        val lst24 = lst23.sortBy(_.toInt).reverse\n\
    \        val lst25 = lst24.sortBy(_.toInt).reverse\n        val lst26 = lst25.sortBy(_.toInt).reverse\n\
    \        val lst27 = lst26.sortBy(_.toInt).reverse\n        val lst28 = lst27.sortBy(_.toInt).reverse\n\
    \        val lst29 = lst28.sortBy(_.toInt).reverse\n        val lst30 = lst29.sortBy(_.toInt).reverse\n\
    \        val lst31 = lst30.sortBy(_.toInt).reverse\n        val lst32 = lst31.sortBy(_.toInt).reverse\n\
    \        val lst33 = lst32.sortBy(_.toInt).reverse\n        val lst34 = lst33.sortBy(_.toInt).reverse\n\
    \        val lst35 = lst34.sortBy(_.toInt).reverse\n", "        val rows = lst.map(row\
    \ => row.map(x => Tuple2(x, x)))\n        val rows = rows.sortBy(row => row._1)\n\
    \        val rows = rows.sortBy(row => row._2, descending = true)\n        val\
    \ rows = rows.map(row => Tuple2(row._1, row._2))\n        rows", "        val\
    \ lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "       \
    \ val m = lst.size\n        val n = lst(0).size\n        val r = lst.map(_.size)\n\
    \        val c = lst.map(_.head).max\n        val r = r.map(_.toLong)\n      \
    \  val c = c.toLong\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(x => x.toLong)\n        val c = c.map(x\
    \ => x.toLong)\n        val r = r.map(", "        val rows = lst.map(_.length)\n\
    \        val cols = lst.map(_.head.length)\n        val result = lst.map(row =>\
    \ {\n            val rowTuple = row.zipWithIndex.sortBy(_._1).reverse\n      \
    \      val colTuple = row.zipWithIndex.sortBy(_._2).reverse\n            val tuple\
    \ = rowTuple.zip(colTuple).filter(_._1 == x).map(x => (x._2, x._1))\n        \
    \    tuple\n        })\n        result.sortBy(_._1).reverse", "        val lst1\
    \ = lst.sortWith(_.compareTo(x) < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst3 = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4\
    \ = lst3.sortWith(_.compareTo(x) > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst6 = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7\
    \ = lst6.sortWith(_.compareTo(x) < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst9 = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10\
    \ = lst9.sortWith(_.compareTo(x) > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst12 = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13\
    \ = lst12.sortWith(_.compareTo(x) < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst15 = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16\
    \ = lst15.sortWith(_.compareTo(x) > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst18 = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19\
    \ = lst18.sortWith(_.compareTo(x) < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst21 = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22\
    \ = lst21.sortWith(_.compareTo(x) > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst24 = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25\
    \ = lst24.sortWith(_.compareTo(x) < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst27 = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28\
    \ = lst27.sortWith(_.compareTo(x) > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst30 = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31\
    \ = lst30.sortWith(_.compareTo(x", "        val rows = lst.map(_.size)\n     \
    \   val cols = lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val rowIndex = new\
    \ mutable.ListBuffer[Long]()\n        val colIndex = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val rowIndex = new mutable.ListBuffer[Long]()\n        val colIndex =\
    \ new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer", "        val rows = lst.map(_.toList).map(_.toLong)\n\
    \        val cols = rows.map(_.length)\n        val rows = rows.map(i => i ->\
    \ cols.map(j => rows(j - j + i)))\n        val rows = rows.map(i => i -> i.sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val rows = rows.map(i => i -> i.filter(i => i._1 == x).toList.sortBy(_._1).reverse)\n\
    \        rows.map(i => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i =>\
    \ i -> i._2.map(j => i._1(j - j + i._1.length))).map(i => i -> i._2.map(j => i._1(j\
    \ - j + i._1.length))).map(i => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i\
    \ => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i => i -> i._2.map(j =>\
    \ i._1(j - j + i._1.length))).map(i => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i\
    \ => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i => i -> i._2.map(j =>\
    \ i._1(j - j + i._1.length))).map(i => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i\
    \ => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i => i -> i._2.map(j =>\
    \ i._1(j - j + i._1.length))).map(i => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i\
    \ => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i => i -> i._2.map(j =>\
    \ i._1(j - j + i._1.length))).map(i => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i\
    \ => i -> i._2.map(j => i._1(j - j + i._1.length))).map(i => ", "        val row:\
    \ List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(row.indexOf(x))))\n\
    \        val sorted = row.sortBy(row => row._1)\n        val sortedRow = sorted.sortBy(row\
    \ => row._2)\n        sortedRow.map(row => Tuple2(row._1, row._2))", "       \
    \ val lst1 = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n\
    \        val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val rowList =\
    \ mutable.ListBuffer.empty[Tuple2[Long, Long]]\n        val columnList = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(row => {\n            row.foreach(col => {\n            \
    \    columnList += col\n            })\n            rowList += Tuple2(row, columnList.max)\n\
    \            columnList.clear()\n        })\n        rowList.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n\
    \        val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val row: List[Long]\
    \ = lst.map(_.get(x))\n        val column: List[Long] = lst.map(_.get(x - 1l))\n\
    \        val tuples: List[Tuple2[Long, Long]] = row.zip(column).sortBy(_._1).sortBy(_._2).map(t\
    \ => (t._1, t._2))\n        tuples.toList", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.size)\n        val coords = rows.zipWithIndex.map\
    \ { case (row, i) => i -> row.zipWithIndex.map { case (c, j) => j.toLong -> (c.toLong\
    \ * cols(j) + row(i).toLong) } }\n        coords.sortBy(_._1).map(x => (x._2,\
    \ x._1))", "        val lst1 = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n\
    \        val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ rowList = mutable.ListBuffer[Tuple2[Long, Long]]()\n        val columnList =\
    \ mutable.ListBuffer[Long]()\n        lst.foreach(row => {\n            row.foreach(col\
    \ => {\n                columnList += col\n            })\n            rowList\
    \ += Tuple2(row, columnList.max)\n            columnList.clear()\n        })\n\
    \        rowList.sortBy(_._1).reverse.sortBy(_._2).reverse", "        val lst2\
    \ = lst.map(_.toList)\n        val lst3 = lst2.map(x => x :: x).sortWith((x, y)\
    \ => x.toLong > y.toLong)\n        val lst4 = lst3.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst11 = lst10.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst21 = lst20.map(x => x :: x).sortWith((x,\
    \ y) => x.toLong > y.toLong", "        val rows = lst.map(_.length)\n        val\
    \ cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 0 until rows) {\n       \
    \     row.append(i)\n            for(j <- 0 until cols) {\n                col.append(j)\n\
    \                val index = row.indexOf(j)\n                val value = lst(index).indexOf(x)\n\
    \                if(value != -1) {\n                    result.append((i, j))\n\
    \                }\n            }\n        }\n        result.sortBy(_._1).reverse\n\
    \        result.sortBy(_._2).reverse\n        result.map(x => (x._1, x._2))",
  "        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.head.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val rows = lst.map(_.length)\n        ", "        val lst1 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => y.toLong > x.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => y.toLong > x.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val row: List[List[Long]]\
    \ = lst.map(_.toList)\n        val rowMap: Map[Long, List[Long]] = row.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val colMap: Map[Long, List[Long]] = row.zipWithIndex.map(x\
    \ => (x._1, x._2)).toMap\n        val sortedRow = row.sortWith(x => x._1 < x._2)\n\
    \        val sortedCol = row.sortWith(x => x._2 < x._1)\n        val sortedRowMap\
    \ = sortedRow.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val sortedColMap\
    \ = sortedCol.zipWithIndex.map(x => (x._1, x._2)).toMap\n        val result: List[Tuple2[Long,\
    \ Long]] = sortedRowMap.flatMap {\n            case (rowIndex, rowValue) =>\n\
    \                val sortedColIndex = sortedColMap(rowIndex)\n               \
    \ val sortedColValue = sortedColMap(sortedColIndex)\n                val sortedRowIndex\
    \ = sortedRowMap(rowIndex)\n                val sortedRowValue = sortedRowMap(sortedRowIndex)\n\
    \                val result: List[Tuple2[Long, Long]] = sortedColValue.flatMap\
    \ {\n                    case (colIndex, colValue) =>\n                      \
    \  val sortedRowIndex = sortedRowMap(rowIndex)\n                        val sortedRowValue\
    \ = sortedRowMap(sortedRowIndex)\n                        val result: List[Tuple2[Long,\
    \ Long]] = sortedRowValue.map {\n                            case (rowIndex, rowValue)\
    \ =>\n                                val result: List[Tuple2[Long, Long]] = sortedRowIndex.map\
    \ {\n                                    case (rowIndex, rowValue) =>\n      \
    \                                  val result: List[Tuple2[Long, Long]] = sortedColIndex.map\
    \ {\n                                            case (colIndex, colValue) =>\n\
    \                                                val result: List[Tuple2[Long,\
    \ Long]] = x.map {\n                                                    case xValue\
    \ =>\n                                                        val result: List[Tuple2[Long,\
    \ Long]] = rowIndex.map {\n                                                  \
    \          case rowIndex =>\n                                                \
    \                val result: List[Tuple2[Long, Long]] = colIndex.map {\n     \
    \                                                               case colIndex\
    \ =>\n                                                                       \
    \ val result: List[Tuple2[Long, Long]] = xValue.map {\n                      \
    \                                                      case xValue =>\n      \
    \                                                                          val\
    \ result: List[Tuple2[Long, Long]] = rowValue.map {\n                        \
    \                                                            case rowValue =>\n\
    \                                                                            \
    \            val result: List[Tuple2[Long, Long]] = colValue.map {\n         \
    \                                                                            \
    \       case colValue =>\n                                                   \
    \                                             val result: List[Tuple2[Long, Long]]\
    \ = xValue.map {\n                                                           \
    \                                         case xValue =>\n                   \
    \                                                                            \
    \         ", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val row: List[Long] = lst.map(row => row(x)).sortWith((a,\
    \ b) => a.compareTo(b))\n        val column: List[Long] = lst.map(row => row.map(x\
    \ => x(x)).sortWith((a, b) => a.compareTo(b))).flatten.sortWith((a, b) => a.compareTo(b)).reverse\n\
    \        val coordinates: List[Tuple2[Long, Long]] = row.zip(column).map(x =>\
    \ (x._1, x._2))\n        coordinates.sortWith((a, b) => a.compareTo(b)).reverse",
  "        val rowList = lst.map(_.toList)\n        val rowListWithIndex = rowList.zipWithIndex\n\
    \        val rowWithIndex = rowListWithIndex.filter(x => x._2 == x).sortBy(x =>\
    \ x._1)\n        val rowWithIndexWithIndex = rowWithIndex.map(x => (x._2, x._1))\n\
    \        val rowWithIndexWithIndexWithIndex = rowWithIndexWithIndex.map(x => (x._1,\
    \ x._2))\n        val rowWithIndexWithIndexWithIndexWithIndex = rowWithIndexWithIndexWithIndex.map(x\
    \ => (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndex.map(x => (x._1, x._2))\n        val\
    \ rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex.map(x\
    \ => (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex.map(x =>\
    \ (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex.map(x\
    \ => (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex.map(x\
    \ => (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWith.map(x\
    \ => (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWith.map(x\
    \ => (x._1, x._2))\n        val rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = rowWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex",
  "        val lst1 = lst.sortWith(_.compareTo(x) < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst3 = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4\
    \ = lst3.sortWith(_.compareTo(x) > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst6 = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7\
    \ = lst6.sortWith(_.compareTo(x) < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst9 = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10\
    \ = lst9.sortWith(_.compareTo(x) > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst12 = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13\
    \ = lst12.sortWith(_.compareTo(x) < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst15 = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16\
    \ = lst15.sortWith(_.compareTo(x) > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst18 = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19\
    \ = lst18.sortWith(_.compareTo(x) < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst21 = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22\
    \ = lst21.sortWith(_.compareTo(x) > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst24 = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25\
    \ = lst24.sortWith(_.compareTo(x) < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst27 = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28\
    \ = lst27.sortWith(_.compareTo(x) > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst30 = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31\
    \ = lst30.sortWith(_.compareTo(x", "        val rows = lst.map(_.length)\n   \
    \     val cols = lst.map(_.head.length)\n        val result = lst.map(row => row.zipWithIndex.filter(i\
    \ => i._1 == x).map(i => Tuple2(i._2, i._1 + rows.length)))\n        val sortedResult\
    \ = result.sortWith((a, b) => a._1 < b._1)\n        val sortedRows = sortedResult.map(row\
    \ => row.map(i => i._2))\n        val sortedCols = sortedResult.map(row => row.map(i\
    \ => i._1))\n        val sortedColsReversed = sortedCols.map(col => col.reverse)\n\
    \        val sortedRowsReversed = sortedRows.map(row => row.reverse)\n       \
    \ val sortedColsReversedReversed = sortedColsReversed.map(col => col.reverse)\n\
    \        val sortedRowsReversedReversedReversed = sortedRowsReversedReversed.map(row\
    \ => row.reverse)\n        val sortedColsReversedReversedReversedReversed = sortedColsReversedReversedReversed.map(col\
    \ => col.reverse)\n        val sortedRowsReversedReversedReversedReversedReversed\
    \ = sortedRowsReversedReversedReversedReversed.map(row => row.reverse)\n     \
    \   val sortedColsReversedReversedReversedReversedReversedReversed = sortedColsReversedReversedReversedReversedReversed.map(col\
    \ => col.reverse)\n        val sortedRowsReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowsReversedReversedReversedReversedReversedReversed.map(row => row.reverse)\n\
    \        val sortedColsReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColsReversedReversedReversedReversedReversedReversedReversed.map(col\
    \ => col.reverse)\n        val sortedRowsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedRowsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(row\
    \ => row.reverse)\n        val sortedColsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sortedColsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(col\
    \ => col.reverse)\n        val sortedRowsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse",
  "        val m = lst.size\n        val n = lst(0).size\n        val result = new\
    \ mutable.ListBuffer[Tuple2[Long, Long]]()\n        var i = 0\n        while (i\
    \ < m) {\n            val row = lst(i)\n            var j = 0\n            while\
    \ (j < n) {\n                if (row(x) == j) result += ((i, x), (i + 1, x))\n\
    \                j += 1\n            }\n            i += 1\n        }\n      \
    \  result.sortBy(_._1).reverse.sortBy(_._2).reverse", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows) {\n            val row\
    \ = lst(i).zipWithIndex.sortBy(_._1).reverse\n            val colIndex = row.indexWhere(_._1\
    \ == x)\n            if (colIndex >= 0) {\n                val col = cols(colIndex)\n\
    \                result.add(Tuple2(i, col))\n            }\n            i += 1\n\
    \        }\n        result.sortBy(_._1).reverse", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rows = rows.toSet\n  \
    \      val cols = cols.toSet\n        val result = lst.map(row => row.zipWithIndex.filter(x\
    \ => rows.contains(x._1)).sortBy(x => x._1).sortBy(x => x._2).map(x => (x._2,\
    \ x._1))).filter(row => row.contains(x)).sortBy(row => row._1).sortBy(row => row._2).map(row\
    \ => (row._2, row._1))\n        result.map(row => (row._1, row._2))", "      \
    \  val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n   \
    \     val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < rows.size) {\n            val r = rows(i)\n\
    \            val c = cols(i)\n            val row = i\n            val col = i\n\
    \            while (i < rows.size) {\n                val r1 = rows(i)\n     \
    \           val c1 = cols(i)\n                if (r == r1 && c == c1) {\n    \
    \                result.append((row, col))\n                    row.clear()\n\
    \                    col.clear()\n                    i += 1\n               \
    \ } else {\n                    i += 1\n                }\n            }\n   \
    \     }\n        result.sortBy(_._1)\n        result.sortBy(_._2, false)\n   \
    \     result.reverse", "        val rows = lst.map(_.toList)\n        val cols\
    \ = rows.map(_.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var row = 0\n        var col = 0\n        while(row < rows.length){\n\
    \            while(col < cols.length){\n                if(rows(row).contains(x)){\n\
    \                    result.append((row, col))\n                }\n          \
    \      col += 1\n            }\n            row += 1\n            col = 0\n  \
    \      }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result.toList", "        val rows = lst.map(_.toList)\n   \
    \     val cols = rows.map(_.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows.length){\n\
    \            val rowCols = rows(row)\n            val colIndex = 0\n         \
    \   while(colIndex < cols.length){\n                val colValue = rowCols(colIndex)\n\
    \                if(colValue == x){\n                    result.append((row, col))\n\
    \                }\n                colIndex += 1\n            }\n           \
    \ row += 1\n        }\n        result.sortBy(_._1).reverse", "        val rows\
    \ = lst.map(_.toList)\n        val cols = rows.map(_.size)\n        val result\
    \ = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val rowIndex = new mutable.ListBuffer[Long]()\n\
    \        val colIndex = new mutable.ListBuffer[Long]()\n        val rowIndexMap\
    \ = rows.zipWithIndex.toMap\n        val colIndexMap = cols.zipWithIndex.toMap\n\
    \        val rowIndexMap = rowIndexMap.filter(_._2 > 0).map(_._1)\n        val\
    \ colIndexMap = colIndexMap.filter(_._2 > 0).map(_._1)\n        val rowIndexMapSorted\
    \ = rowIndexMap.sortWith(_ < _)\n        val colIndexMapSorted = colIndexMap.sortWith(_\
    \ < _)\n        val rowIndexMapSorted = rowIndexMapSorted.toList\n        val\
    \ colIndexMapSorted = colIndexMapSorted.toList\n        val rowIndexMapSorted\
    \ = rowIndexMapSorted.reverse\n        val colIndexMapSorted = colIndexMapSorted.reverse\n\
    \        val rowIndexMapSorted = rowIndexMapSorted.take(x)\n        val colIndexMapSorted\
    \ = colIndexMapSorted.take(x)\n        val rowIndexMapSorted = rowIndexMapSorted.reverse\n\
    \        val colIndexMapSorted = colIndexMapSorted.reverse\n        val rowIndexMapSorted\
    \ = rowIndexMapSorted.take(x)\n        val colIndexMapSorted = colIndexMapSorted.take(x)\n\
    \        val rowIndexMapSorted = rowIndexMapSorted.reverse\n        val colIndexMapSorted\
    \ = colIndexMapSorted.reverse\n        val rowIndexMapSorted = rowIndexMapSorted.take(x)\n\
    \        val colIndexMapSorted = colIndexMapSorted.take(x)\n        val rowIndexMapSorted\
    \ = rowIndexMapSorted.reverse\n        val colIndexMapSorted = colIndexMapSorted.reverse\n\
    \        val rowIndexMapSorted = rowIndexMapSorted.take(x)\n        val colIndexMapSorted\
    \ = colIndexMapSorted.take(x)\n        val rowIndexMapSorted = rowIndexMapSorted.reverse\n\
    \        val colIndexMapSorted = colIndexMapSorted.reverse\n        val rowIndexMapSorted\
    \ = rowIndexMapSorted.take(x)\n        val colIndexMapSorted = colIndexMapSorted.take(x)\n\
    \        val rowIndexMapSorted = rowIndexMapSorted.reverse\n        val colIndexMapSorted\
    \ = colIndexMapSorted.reverse\n        val rowIndex", "        val rows = lst.map(_.toList).map(_.toLong)\n\
    \        val columns = lst.map(_.size).max\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        var i = 0\n        while (i < rows.size) {\n            val\
    \ row = rows(i)\n            val j = i\n            while (j < rows.size) {\n\
    \                if (rows(j) < row) {\n                    j++\n             \
    \   } else {\n                    val k = j\n                    while (k < rows.size)\
    \ {\n                        if (rows(k) > row) {\n                          \
    \  k++\n                        } else {\n                            val x =\
    \ rows(k)\n                            val y = rows(j)\n                     \
    \       result.add(Tuple2(x - x, y - y))\n                            k++\n  \
    \                      }\n                    }\n                    j++\n   \
    \             }\n            }\n            i++\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = lst.map(row => row.zipWithIndex.filter(x => x == x).map(x\
    \ => (x._1, x._2)).toList)\n        val sortedResult = result.sortWith((x, y)\
    \ => x._1 < y._1).sortWith((x, y) => x._2 < y._2)\n        val sortedRows = sortedResult.map(x\
    \ => x._1).distinct\n        val sortedCols = sortedResult.map(x => x._2).distinct\n\
    \        val sortedResult2 = sortedResult.map(x => x._1).zip(sortedResult.map(x\
    \ => x._2))\n        val sortedRows2 = sortedResult.map(x => x._1).zip(sortedRows)\n\
    \        val sortedCols2 = sortedResult.map(x => x._2).zip(sortedCols)\n     \
    \   val sortedRows3 = sortedResult2.map(x => x._1).zip(sortedRows2)\n        val\
    \ sortedCols3 = sortedResult2.map(x => x._2).zip(sortedCols2)\n        val sortedRows4\
    \ = sortedResult3.map(x => x._1).zip(sortedRows3)\n        val sortedCols4 = sortedResult3.map(x\
    \ => x._2).zip(sortedCols3)\n        val sortedRows5 = sortedResult4.map(x =>\
    \ x._1).zip(sortedRows4)\n        val sortedCols5 = sortedResult4.map(x => x._2).zip(sortedCols4)\n\
    \        val sortedRows6 = sortedResult5.map(x => x._1).zip(sortedRows5)\n   \
    \     val sortedCols6 = sortedResult5.map(x => x._2).zip(sortedCols5)\n      \
    \  val sortedRows7 = sortedResult6.map(x => x._1).zip(sortedRows6)\n        val\
    \ sortedCols7 = sortedResult6.map(x => x._2).zip(sortedCols6)\n        val sortedRows8\
    \ = sortedResult7.map(x => x._1).zip(sortedRows7)\n        val sortedCols8 = sortedResult7.map(x\
    \ => x._2).zip(sortedCols7)\n        val sortedRows9 = sortedResult8.map(x =>\
    \ x._1).zip(sortedRows8)\n        val sortedCols9 = sortedResult8.map(x => x._2).zip(sortedCols8)\n\
    \        val sortedRows10 = sortedResult9.map(x => x._1).zip(sortedRows9)\n  \
    \      val sortedCols10 = sortedResult9.map(x => x._2).zip(sortedCols9)\n    \
    \    val sortedRows11 = sortedResult", "        val lst1 = lst.sortBy(_.toLong)\n\
    \        val lst2 = lst1.sortBy(_.toLong.reverse)\n        val lst3 = lst2.sortBy(_.toLong.reverse)\n\
    \        val lst4 = lst3.sortBy(_.toLong.reverse)\n        val lst5 = lst4.sortBy(_.toLong.reverse)\n\
    \        val lst6 = lst5.sortBy(_.toLong.reverse)\n        val lst7 = lst6.sortBy(_.toLong.reverse)\n\
    \        val lst8 = lst7.sortBy(_.toLong.reverse)\n        val lst9 = lst8.sortBy(_.toLong.reverse)\n\
    \        val lst10 = lst9.sortBy(_.toLong.reverse)\n        val lst11 = lst10.sortBy(_.toLong.reverse)\n\
    \        val lst12 = lst11.sortBy(_.toLong.reverse)\n        val lst13 = lst12.sortBy(_.toLong.reverse)\n\
    \        val lst14 = lst13.sortBy(_.toLong.reverse)\n        val lst15 = lst14.sortBy(_.toLong.reverse)\n\
    \        val lst16 = lst15.sortBy(_.toLong.reverse)\n        val lst17 = lst16.sortBy(_.toLong.reverse)\n\
    \        val lst18 = lst17.sortBy(_.toLong.reverse)\n        val lst19 = lst18.sortBy(_.toLong.reverse)\n\
    \        val lst20 = lst19.sortBy(_.toLong.reverse)\n        val lst21 = lst20.sortBy(_.toLong.reverse)\n\
    \        val lst22 = lst21.sortBy(_.toLong.reverse)\n        val lst23 = lst22.sortBy(_.toLong.reverse)\n\
    \        val lst24 = lst23.sortBy(_.toLong.reverse)\n        val lst25 = lst24.sortBy(_.toLong.reverse)\n\
    \        val lst26 = lst25.sortBy(_.toLong.reverse)\n        val lst27 = lst26.sortBy(_.toLong.reverse)\n\
    \        val lst28 = lst27.sortBy(_.toLong.reverse)\n        val lst29 = lst28.sortBy(_.toLong.reverse)\n\
    \        val lst30 = lst29.sortBy(_.toLong.reverse)\n        val lst31 = lst30.sortBy(_.toLong.reverse)\n\
    \        val lst32 = lst31.sortBy(_.toLong.reverse)\n        val lst33 = lst32.sortBy(_.toLong.reverse)\n\
    \        val lst34 = lst33.sortBy(_.toLong.reverse)\n        val lst35 = lst34.sortBy(_.toLong.reverse)\n",
  "        val lst1 = lst.sortWith(_.toLong < x.toLong)\n        val lst2 = lst1.sortWith(_.toLong\
    \ > x.toLong)\n        val lst3 = lst2.sortWith(_.toLong < x.toLong)\n       \
    \ val lst4 = lst3.sortWith(_.toLong > x.toLong)\n        val lst5 = lst4.sortWith(_.toLong\
    \ < x.toLong)\n        val lst6 = lst5.sortWith(_.toLong > x.toLong)\n       \
    \ val lst7 = lst6.sortWith(_.toLong < x.toLong)\n        val lst8 = lst7.sortWith(_.toLong\
    \ > x.toLong)\n        val lst9 = lst8.sortWith(_.toLong < x.toLong)\n       \
    \ val lst10 = lst9.sortWith(_.toLong > x.toLong)\n        val lst11 = lst10.sortWith(_.toLong\
    \ < x.toLong)\n        val lst12 = lst11.sortWith(_.toLong > x.toLong)\n     \
    \   val lst13 = lst12.sortWith(_.toLong < x.toLong)\n        val lst14 = lst13.sortWith(_.toLong\
    \ > x.toLong)\n        val lst15 = lst14.sortWith(_.toLong < x.toLong)\n     \
    \   val lst16 = lst15.sortWith(_.toLong > x.toLong)\n        val lst17 = lst16.sortWith(_.toLong\
    \ < x.toLong)\n        val lst18 = lst17.sortWith(_.toLong > x.toLong)\n     \
    \   val lst19 = lst18.sortWith(_.toLong < x.toLong)\n        val lst20 = lst19.sortWith(_.toLong\
    \ > x.toLong)\n        val lst21 = lst20.sortWith(_.toLong < x.toLong)\n     \
    \   val lst22 = lst21.sortWith(_.toLong > x.toLong)\n        val lst23 = lst22.sortWith(_.toLong\
    \ < x.toLong)\n        val lst24 = lst23.sortWith(_.toLong > x.toLong)\n     \
    \   val lst25 = lst24.sortWith(_.toLong < x.toLong)\n        val lst26 = lst25.sortWith(_.toLong\
    \ > x.toLong)\n        val lst27 = lst26.sortWith(_.toLong < x.toLong)\n     \
    \   val lst28 = lst27.sortWith(_.", "        val rows = lst.map(row => row.map(x\
    \ => Tuple2(x, x)))\n        val rows = rows.sortBy(row => row._1)\n        val\
    \ cols = rows.map(row => row._2).sortBy(col => -col)\n        val rows = rows.map(row\
    \ => Tuple2(row._1, row._2))\n        val cols = cols.map(col => Tuple2(col._1,\
    \ col._2))\n        val rows = rows.sortBy(row => row._1)\n        val cols =\
    \ cols.map(col => Tuple2(col._1, col._2))\n        val rows = rows.map(row =>\
    \ Tuple2(row._1, row._2))\n        val cols = cols.map(col => Tuple2(col._1, col._2))\n\
    \        val rows = rows.sortBy(row => row._1)\n        val cols = cols.map(col\
    \ => Tuple2(col._1, col._2))\n        val rows = rows.map(row => Tuple2(row._1,\
    \ row._2))\n        val cols = cols.map(col => Tuple2(col._1, col._2))\n     \
    \   val rows = rows.sortBy(row => row._1)\n        val cols = cols.map(col =>\
    \ Tuple2(col._1, col._2))\n        val rows = rows.map(row => Tuple2(row._1, row._2))\n\
    \        val cols = cols.map(col => Tuple2(col._1, col._2))\n        val rows\
    \ = rows.sortBy(row => row._1)\n        val cols = cols.map(col => Tuple2(col._1,\
    \ col._2))\n        val rows = rows.map(row => Tuple2(row._1, row._2))\n     \
    \   val cols = cols.map(col => Tuple2(col._1, col._2))\n        val rows = rows.sortBy(row\
    \ => row._1)\n        val cols = cols.map(col => Tuple2(col._1, col._2))\n   \
    \     val rows = rows.map(row => Tuple2(row._1, row._2))\n        val cols = cols.map(col\
    \ => Tuple2(col._1, col._2))\n        val rows = rows.sortBy(row => row._1)\n\
    \        val cols = cols.map(col => Tuple2(col._1, col._2))\n        val rows\
    \ = rows.map(row => Tuple2(row._1, row._2))\n        val cols = cols.map(col =>\
    \ Tuple2(col._1, col._2))\n        val rows = rows.sortBy(row => row._1)\n   \
    \     val cols = cols.map(col => Tuple2(col._1, col._2))\n        val rows = rows.map(row\
    \ => Tuple2(row._1, row._2))\n        val cols = cols.map(col => Tuple2(col._1,\
    \ col._", "        val lst1 = lst.sortWith((x, y) => x.toLong < y.toLong)\n  \
    \      val lst2 = lst1.sortWith((x, y) => y.toLong < x.toLong)\n        val lst3\
    \ = lst2.sortWith((x, y) => x.toLong < y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => y.toLong < x.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst6 = lst5.sortWith((x, y) => y.toLong < x.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => y.toLong < x.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst10 = lst9.sortWith((x, y) => y.toLong\
    \ < x.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => y.toLong < x.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong < y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => y.toLong < x.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst16 = lst15.sortWith((x, y) => y.toLong < x.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => y.toLong < x.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst20 = lst19.sortWith((x, y) => y.toLong\
    \ < x.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => y.toLong < x.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong < y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => y.toLong < x.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ < y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = lst.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val rows = result.map(", "        val lst1 = lst.sortBy(_.toLong)\n \
    \       val lst2 = lst1.sortBy(_.toLong.reverse)\n        val lst3 = lst2.sortBy(_.toLong.reverse)\n\
    \        val lst4 = lst3.sortBy(_.toLong.reverse)\n        val lst5 = lst4.sortBy(_.toLong.reverse)\n\
    \        val lst6 = lst5.sortBy(_.toLong.reverse)\n        val lst7 = lst6.sortBy(_.toLong.reverse)\n\
    \        val lst8 = lst7.sortBy(_.toLong.reverse)\n        val lst9 = lst8.sortBy(_.toLong.reverse)\n\
    \        val lst10 = lst9.sortBy(_.toLong.reverse)\n        val lst11 = lst10.sortBy(_.toLong.reverse)\n\
    \        val lst12 = lst11.sortBy(_.toLong.reverse)\n        val lst13 = lst12.sortBy(_.toLong.reverse)\n\
    \        val lst14 = lst13.sortBy(_.toLong.reverse)\n        val lst15 = lst14.sortBy(_.toLong.reverse)\n\
    \        val lst16 = lst15.sortBy(_.toLong.reverse)\n        val lst17 = lst16.sortBy(_.toLong.reverse)\n\
    \        val lst18 = lst17.sortBy(_.toLong.reverse)\n        val lst19 = lst18.sortBy(_.toLong.reverse)\n\
    \        val lst20 = lst19.sortBy(_.toLong.reverse)\n        val lst21 = lst20.sortBy(_.toLong.reverse)\n\
    \        val lst22 = lst21.sortBy(_.toLong.reverse)\n        val lst23 = lst22.sortBy(_.toLong.reverse)\n\
    \        val lst24 = lst23.sortBy(_.toLong.reverse)\n        val lst25 = lst24.sortBy(_.toLong.reverse)\n\
    \        val lst26 = lst25.sortBy(_.toLong.reverse)\n        val lst27 = lst26.sortBy(_.toLong.reverse)\n\
    \        val lst28 = lst27.sortBy(_.toLong.reverse)\n        val lst29 = lst28.sortBy(_.toLong.reverse)\n\
    \        val lst30 = lst29.sortBy(_.toLong.reverse)\n        val lst31 = lst30.sortBy(_.toLong.reverse)\n\
    \        val lst32 = lst31.sortBy(_.toLong.reverse)\n        val lst33 = lst32.sortBy(_.toLong.reverse)\n\
    \        val lst34 = lst33.sortBy(_.toLong.reverse)\n        val lst35 = lst34.sortBy(_.toLong.reverse)\n",
  "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val tuples = lst.map(row => row.zipWithIndex.map(x => (x._2, x._1)).toList)\n\
    \        val sortedTuples = tuples.sortWith((x, y) => x._1 < y._1)\n        val\
    \ sortedRows = sortedTuples.map(x => x._2).sortWith((x, y) => y._1 < x._1)\n \
    \       val sortedCols = sortedTuples.map(x => x._1).sortWith((x, y) => y._1 <\
    \ x._1)\n        val result = sortedRows.map(row => sortedCols.map(col => (row,\
    \ col))).filter(x => x._1 == x).map(x => Tuple2(x._2, x._1))\n        result.filter(x\
    \ => x._1 == x).map(x => Tuple2(x._2, x._1))", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.size)\n        val rowIdx = rows.zipWithIndex.filter(_._1\
    \ == x).map(_._2)\n        val colIdx = cols.zipWithIndex.filter(_._1 == x).map(_._2)\n\
    \        val coords = rowIdx.zip(colIdx)\n        coords.sortBy(_._1).sortBy(-_._2)",
  "        val lst1 = lst.map(x => x.map(y => (y, x)))\n        val lst2 = lst1.map(x\
    \ => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n        val lst3 = lst2.map(x =>\
    \ x.map(y => (y, x)))\n        val lst4 = lst3.map(x => x.sortBy(_._1)).map(x\
    \ => x.sortBy(_._2))\n        val lst5 = lst4.map(x => x.map(y => (y, x)))\n \
    \       val lst6 = lst5.map(x => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n  \
    \      val lst7 = lst6.map(x => x.map(y => (y, x)))\n        val lst8 = lst7.map(x\
    \ => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n        val lst9 = lst8.map(x =>\
    \ x.map(y => (y, x)))\n        val lst10 = lst9.map(x => x.sortBy(_._1)).map(x\
    \ => x.sortBy(_._2))\n        val lst11 = lst10.map(x => x.map(y => (y, x)))\n\
    \        val lst12 = lst11.map(x => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n\
    \        val lst13 = lst12.map(x => x.map(y => (y, x)))\n        val lst14 = lst13.map(x\
    \ => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n        val lst15 = lst14.map(x\
    \ => x.map(y => (y, x)))\n        val lst16 = lst15.map(x => x.sortBy(_._1)).map(x\
    \ => x.sortBy(_._2))\n        val lst17 = lst16.map(x => x.map(y => (y, x)))\n\
    \        val lst18 = lst17.map(x => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n\
    \        val lst19 = lst18.map(x => x.map(y => (y, x)))\n        val lst20 = lst19.map(x\
    \ => x.sortBy(_._1)).map(x => x.sortBy(_._2))\n        val lst21 = lst20.map(x\
    \ => x.map(y => (y, x)))\n        val lst22 = lst21.map(x => x.sortBy(_._1)).map(x\
    \ => x.sortBy(_._2))\n        val lst23 = lst22.map(x => x.map(y => (y, x)))\n\
    \        val lst24 = lst23.map(x => x.", "        val rows = lst.map(_.toList).flatten\n\
    \        val rows = rows.sortBy(_._1)\n        val cols = rows.map(_.toList).flatten\n\
    \        val cols = cols.sortBy(_._2)\n        val rows = rows.map(x => (x, x))\n\
    \        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x => (x,\
    \ x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x\
    \ => (x, x))\n        val cols = cols.map(x => (x, x))\n        val rows = rows.map(x ",
  "        val rows = lst.map(_.toList)\n        val rows = rows.sortBy(_(0))\n  \
    \      val rows = rows.sortBy(_(1)).reverse\n        val rows = rows.map(row =>\
    \ row.map(_ - x))\n        val rows = rows.map(row => row.map(x => (x, row.length)))\n\
    \        val rows = rows.map(row => row.map(x => (x, row._2)))\n        val rows\
    \ = rows.map(row => row.map(x => (x, row._1)))\n        val rows = rows.map(row\
    \ => row.map(x => (x, row._1)))\n        val rows = rows.map(row => row.map(x\
    \ => (x, row._1)))\n        val rows = rows.map(row => row.map(x => (x, row._1)))\n\
    \        val rows = rows.map(row => row.map(x => (x, row._1)))\n        val rows\
    \ = rows.map(row => row.map(x => (x, row._1)))\n        val rows = rows.map(row\
    \ => row.map(x => (x, row._1)))\n        val rows = rows.map(row => row.map(x\
    \ => (x, row._1)))\n        val rows = rows.map(row => row.map(x => (x, row._1)))\n\
    \        val rows = rows.map(row => row.map(x => (x, row._1)))\n        val rows\
    \ = rows.map(row => row.map(x => (x, row._1)))\n        val rows = rows.map(row\
    \ => row.map(x => (x, row._1)))\n        val rows = rows.map(row => row.map(x\
    \ => (x, row._1)))\n        val rows = rows.map(row => row.map(x => (x, row._1)))\n\
    \        val rows = rows.map(row => row.map(x => (x, row._1)))\n        val rows\
    \ = rows.map(row => row.map(x => (x, row._1)))\n        val rows = rows.map(row\
    \ => row.map(x => (x, row._1)))\n        val rows = rows.map(row => row.map(x\
    \ => (x, row._1)))\n        val rows = rows.map(row => row.map(x => (x, row._1)))\n\
    \        val rows = rows.map(row => row.map(x => (x, row._1)))\n        val rows\
    \ = rows.map(row => row.map(x => (x, row._1)))\n        val rows = rows.map(row\
    \ => row.map(x => (x, row._1)))\n        val rows = rows.map(row => row.map(x\
    \ => (x, row._1)))\n        val rows = rows.map(row => row.map(x => (x, row._1)))\n\
    \        val rows = rows.map(row => row.map(x => (x, row._1)))\n        val rows\
    \ = rows.map(row => row.map(x => (x, row._1)))\n        val rows = rows.map(row\
    \ => row.map(x => (x, row._1)))\n        val rows = rows.map(row ", "        val\
    \ rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n        val\
    \ rowIdx = rows.zipWithIndex.filter(_._1 == x).map(_._2)\n        val colIdx =\
    \ cols.zipWithIndex.filter(_._1 == x).map(_._2)\n        val coords = rowIdx.zip(colIdx).sortBy(_._1).map(x\
    \ => (x._2, x._1))\n        coords.toList.sortBy(_._1).map(x => (x._2, x._1))",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var row\
    \ = 0\n        var col = 0\n        while (row < rows && col < cols) {\n     \
    \       if (lst(row)(col) == x) {\n                result.+=((row, col))\n   \
    \         }\n            col += 1\n        }\n        result.sortBy(_._1)\n  \
    \      result.sortBy(_._2, descending = true)\n        result.toList", "     \
    \   val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(x => x.toList)\n\
    \        val lst4 = lst3.map(x => x.toList)\n        val lst5 = lst4.map(x =>\
    \ x.toList)\n        val lst6 = lst5.map(x => x.toList)\n        val lst7 = lst6.map(x\
    \ => x.toList)\n        val lst8 = lst7.map(x => x.toList)\n        val lst9 =\
    \ lst8.map(x => x.toList)\n        val lst10 = lst9.map(x => x.toList)\n     \
    \   val lst11 = lst10.map(x => x.toList)\n        val lst12 = lst11.map(x => x.toList)\n\
    \        val lst13 = lst12.map(x => x.toList)\n        val lst14 = lst13.map(x\
    \ => x.toList)\n        val lst15 = lst14.map(x => x.toList)\n        val lst16\
    \ = lst15.map(x => x.toList)\n        val lst17 = lst16.map(x => x.toList)\n \
    \       val lst18 = lst17.map(x => x.toList)\n        val lst19 = lst18.map(x\
    \ => x.toList)\n        val lst20 = lst19.map(x => x.toList)\n        val lst21\
    \ = lst20.map(x => x.toList)\n        val lst22 = lst21.map(x => x.toList)\n \
    \       val lst23 = lst22.map(x => x.toList)\n        val lst24 = lst23.map(x\
    \ => x.toList)\n        val lst25 = lst24.map(x => x.toList)\n        val lst26\
    \ = lst25.map(x => x.toList)\n        val lst27 = lst26.map(x => x.toList)\n \
    \       val lst28 = lst27.map(x => x.toList)\n        val lst29 = lst28.map(x\
    \ => x.toList)\n        val lst30 = lst29.map(x => x.toList)\n        val lst31\
    \ = lst30.map(x => x.toList)\n        val lst32 = lst31.map(x => x.toList)\n \
    \       val lst33 = lst32.map(x => x.toList)\n        val lst34 = lst33.map(x\
    \ => x.toList)\n        val lst35 = lst34.map(x => x.toList)\n        val lst36\
    \ = lst35.map(x => x.toList)\n        val lst37 = lst36.map(x => x.toList)\n \
    \       val lst38 = lst37.map(x => x.toList)\n        val lst39 = lst38", "  \
    \      val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val tuples = lst.map(row => row.map(x => Tuple2(x, x)))\n        val\
    \ sorted = tuples.sortWith((x, y) => x._1 < y._1)\n        val sorted = sorted.sortWith((x,\
    \ y) => y._1 < x._1)\n        val sorted = sorted.sortWith((x, y) => y._2 < x._2)\n\
    \        val sorted = sorted.sortWith((x, y) => y._2 < x._2)\n        val sorted\
    \ = sorted.sortWith((x, y) => y._3 < x._3)\n        val sorted = sorted.sortWith((x,\
    \ y) => y._3 < x._3)\n        val sorted = sorted.sortWith((x, y) => y._4 < x._4)\n\
    \        val sorted = sorted.sortWith((x, y) => y._4 < x._4)\n        val sorted\
    \ = sorted.sortWith((x, y) => y._5 < x._5)\n        val sorted = sorted.sortWith((x,\
    \ y) => y._5 < x._5)\n        val sorted = sorted.sortWith((x, y) => y._6 < x._6)\n\
    \        val sorted = sorted.sortWith((x, y) => y._6 < x._6)\n        val sorted\
    \ = sorted.sortWith((x, y) => y._7 < x._7)\n        val sorted = sorted.sortWith((x,\
    \ y) => y._7 < x._7)\n        val sorted = sorted.sortWith((x, y) => y._8 < x._8)\n\
    \        val sorted = sorted.sortWith((x, y) => y._8 < x._8)\n        val sorted\
    \ = sorted.sortWith((x, y) => y._9 < x._9)\n        val sorted = sorted.sortWith((x,\
    \ y) => y._9 < x._9)\n        val sorted = sorted.sortWith((x, y) => y._10 < x._10)\n\
    \        val sorted = sorted.sortWith((x, y) => y._10 < x._10)\n        val sorted\
    \ = sorted.sortWith((x, y) => y._11 < x._11)\n        val sorted = sorted.sortWith((x,\
    \ y) => y._11 < x._11)\n        val sorted = sorted.sortWith((x, y) => y._12 <\
    \ x._12)\n        val sorted = sorted.sortWith((x, y) => y._12 < x._12)\n    \
    \    val sorted = sorted.sortWith((x, y) => y._13 < x._13)\n        val sorted\
    \ = sorted.", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => y.toLong > x.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => y.toLong > x.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong\
    \ > y.toLong)", "        val m = lst.size\n        val n = lst(0).size\n     \
    \   val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < m) {\n            val row1 = lst(i).indexOf(x)\n\
    \            if (row1 == -1) {\n                val row2 = lst(i).lastIndexOf(x)\n\
    \                if (row2 == -1) {\n                    val row3 = lst(i).length\n\
    \                    val row4 = lst(i).lastIndexOf(x) + 1\n                  \
    \  val row5 = lst(i).indexOf(x) + 1\n                    val row6 = lst(i).indexOf(x)\
    \ + 1\n                    val row7 = lst(i).indexOf(x) + 1\n                \
    \    val row8 = lst(i).indexOf(x) + 1\n                    val row9 = lst(i).indexOf(x)\
    \ + 1\n                    val row10 = lst(i).indexOf(x) + 1\n               \
    \     val row11 = lst(i).indexOf(x) + 1\n                    val row12 = lst(i).indexOf(x)\
    \ + 1\n                    val row13 = lst(i).indexOf(x) + 1\n               \
    \     val row14 = lst(i).indexOf(x) + 1\n                    val row15 = lst(i).indexOf(x)\
    \ + 1\n                    val row16 = lst(i).indexOf(x) + 1\n               \
    \     val row17 = lst(i).indexOf(x) + 1\n                    val row18 = lst(i).indexOf(x)\
    \ + 1\n                    val row19 = lst(i).indexOf(x) + 1\n               \
    \     val row20 = lst(i).indexOf(x) + 1\n                    val row21 = lst(i).indexOf(x)\
    \ + 1\n                    val row22 = lst(i).indexOf(x) + 1\n               \
    \     val row23 = lst(i).indexOf(x) + 1\n                    val row24 = lst(i).indexOf(x)\
    \ + 1\n                    val row25 = lst(i).indexOf(x) + 1\n               \
    \     val row26 = lst(i).indexOf(x) + 1\n                    val row27 = lst(i).indexOf(x)\
    \ + 1\n                    val row28 = lst(i).indexOf(x) + 1\n               \
    \     val row29 = lst(i).indexOf(x) + 1\n                    val row30 = lst(i).indexOf(x)\
    \ + 1\n                    val row31 = lst(i).indexOf(x) + 1\n               \
    \     val row32 = lst(i).indexOf(x) + 1\n                    val row33 = lst(i).indexOf(x)\
    \ + 1\n                    val row34 = lst(i).indexOf(x) + 1\n               \
    \     val row35 = lst(i).indexOf(x) + 1\n                    val row36 = lst(i).indexOf(x)\
    \ + 1\n                    val row37 = lst(i).indexOf(x) + 1\n               \
    \     val row38 = lst(i).", "        val rows = lst.map(_.size)\n        val cols\
    \ = lst.map(_.head).max\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rowIndex = new mutable.ListBuffer[Long]()\n\
    \        val colIndex = new mutable.ListBuffer[Long]()\n        val rowCount =\
    \ new mutable.ListBuffer[Long]()\n        val colCount = new mutable.ListBuffer[Long]()\n\
    \        val rowIndexCount = new mutable.ListBuffer[Long]()\n        val colIndexCount\
    \ = new mutable.ListBuffer[Long]()\n        val rowIndexCountMax = rows.toList.max\n\
    \        val colIndexCountMax = cols.toList.max\n        val rowIndexCountMin\
    \ = rows.toList.min\n        val colIndexCountMin = cols.toList.min\n        val\
    \ rowIndexCountSum = rows.toList.sum\n        val colIndexCountSum = cols.toList.sum\n\
    \        val rowIndexCountProduct = rows.toList.product\n        val colIndexCountProduct\
    \ = cols.toList.product\n        val rowIndexCountProductSum = rows.toList.productSum\n\
    \        val colIndexCountProductSum = cols.toList.productSum\n        val rowIndexCountProductProduct\
    \ = rows.toList.productProduct\n        val colIndexCountProductProduct = cols.toList.productProduct\n\
    \        val rowIndexCountProductProductSum = rows.toList.productProductSum\n\
    \        val colIndexCountProductProductSum = cols.toList.productProductSum\n\
    \        val rowIndexCountProductProductProduct = rows.toList.productProductProduct\n\
    \        val colIndexCountProductProductProduct = cols.toList.productProductProduct\n\
    \        val rowIndexCountProductProductProductSum = rows.toList.productProductProductSum\n\
    \        val colIndexCountProductProductProductSum = cols.toList.productProductProductSum\n\
    \        val rowIndexCountProductProductProductProduct = rows.toList.productProductProductProduct\n\
    \        val colIndexCountProductProductProductProduct = cols.toList.productProductProductProduct\n\
    \        val rowIndexCountProductProductProductProductSum = rows.toList.productProductProductProductSum\n\
    \        val colIndexCountProductProductProductProductSum = cols.toList.productProductProductProductSum\n\
    \        val rowIndexCountProductProductProductProductProduct = rows.toList.productProductProductProductProduct\n\
    \        val colIndex", "        val lst1 = lst.sortWith((x, y) => x.toLong >\
    \ y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val lst25 = lst24.sortWith((x,\
    \ y) => x.toLong > y.toLong)", "        val m = lst.size\n        val n = lst(0).size\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < m) {\n            var j = 0\n            while (j\
    \ < n) {\n                if (lst(i).contains(x)) {\n                    result.add(Tuple2(i,\
    \ j))\n                }\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result", "        val rowList = lst.map(_.toList)\n       \
    \ val rowMap = new mutable.HashMap[Long, List[Long]]()\n        for (row <- rowList)\
    \ {\n            val rowKey = row(0)\n            val rowValue = row(1)\n    \
    \        if (!rowMap.contains(rowKey)) {\n                rowMap.put(rowKey, List())\n\
    \            }\n            rowMap(rowKey) ::= rowValue\n        }\n        val\
    \ rowList = rowMap.values.toList\n        val rowMapSorted = rowList.sortWith((x,\
    \ y) => x._1 < y._1)\n        val rowMapSortedReversed = rowMapSorted.sortWith((x,\
    \ y) => x._1 > y._1)\n        val rowMapSortedReversedWithRow = rowMapSortedReversed.map(x\
    \ => (x._2, x._1))\n        val rowMapSortedReversedWithRowWithColumn = rowMapSortedReversedWithRow.map(x\
    \ => (x._1, x._2))\n        val rowMapSortedReversedWithRowWithColumnWithX = rowMapSortedReversedWithRowWithColumn.map(x\
    \ => (x._1, x))\n        val rowMapSortedReversedWithRowWithColumnWithXWithY =\
    \ rowMapSortedReversedWithRowWithColumnWithX.map(x => (x._2, x))\n        val\
    \ rowMapSortedReversedWithRowWithColumnWithXWithYWithZ = rowMapSortedReversedWithRowWithColumnWithXWithY.map(x\
    \ => (x._3, x))\n        val rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithW\
    \ = rowMapSortedReversedWithRowWithColumnWithXWithYWithZ.map(x => (x._4, x))\n\
    \        val rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithWWithX =\
    \ rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithW.map(x => (x._5, x))\n\
    \        val rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithWWithXWithY\
    \ = rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithWWithX.map(x => (x._6,\
    \ x))\n        val rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithWWithXWithYWithZ\
    \ = rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithWWithXWithY.map(x\
    \ => (x._7, x))\n        val rowMapSortedReversedWithRowWithColumnWithXWithYWithZWithWWithXWithYWithZWith",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n \
    \       val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val lst2\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val\
    \ rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n        val coords\
    \ = rows.zipWithIndex.sortBy(_._1).map(x => (x._2, x._1))\n        val rowsSorted\
    \ = coords.map(x => (x._1, x._2)).sortBy(_._1)\n        val colsSorted = coords.map(x\
    \ => (x._1, x._2)).sortBy(_._2).reverse\n        val result = rowsSorted.flatMap(x\
    \ => colsSorted.map(y => (x._1, x._2, x, y)))\n        result.filter(x => x._2\
    \ == x).map(x => (x._1, x._3, x._4))", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = lst.map(row => row.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        val sortedRows = result.sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sortWith((x, y) => x._1 < y._1).map(x => x._2).sortWith((x,\
    \ y) => x._1 < y._1).map(x => x._2).sort", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rowMap = mutable.HashMap[Long,\
    \ List[Long]]()\n        val colMap = mutable.HashMap[Long, List[Long]]()\n  \
    \      val result = mutable.ListBuffer[Tuple2[Long, Long]]()\n        for(i <-\
    \ 0 until rows){\n            val row = lst.map(_.apply(i))\n            val rowList\
    \ = rowMap.getOrElseUpdate(row(i), mutable.ListBuffer[Long]())\n            rowList\
    \ += i\n            rowMap.put(row(i), rowList)\n        }\n        for(i <- 0\
    \ until cols){\n            val col = lst.map(_.head.apply(i))\n            val\
    \ colList = colMap.getOrElseUpdate(col(i), mutable.ListBuffer[Long]())\n     \
    \       colList += i\n            colMap.put(col(i), colList)\n        }\n   \
    \     for(i <- 0 until rows){\n            val row = lst.map(_.apply(i))\n   \
    \         val rowList = rowMap.getOrElseUpdate(row(i), mutable.ListBuffer[Long]())\n\
    \            val colList = colMap.getOrElseUpdate(row(i), mutable.ListBuffer[Long]())\n\
    \            val rowColList = rowList.zip(colList)\n            val sortedRowColList\
    \ = rowColList.sortBy(_._1).reverse\n            val sortedRowList = sortedRowColList.map(x\
    \ => x._1)\n            val sortedColList = sortedRowColList.map(x => x._2)\n\
    \            val sortedRowColList2 = sortedRowList.zip(sortedColList)\n      \
    \      val sortedRowList2 = sortedRowColList2.sortBy(_._1).reverse\n         \
    \   val sortedColList2 = sortedRowColList2.map(x => x._2)\n            val sortedRowList3\
    \ = sortedRowList2.zip(sortedColList2)\n            val sortedColList3 = sortedRowList3.map(x\
    \ => x._2)\n            val sortedRowList4 = sortedRowList3.zip(sortedColList3)\n\
    \            val sortedColList4 = sortedRowList4.map(x => x._2)\n            val\
    \ sortedRowList5 = sortedRowList4.zip(sortedColList4)\n            val sortedColList5\
    \ = sortedRowList5.map(x => x._2)\n            val sortedRowList6 = sortedRowList5.zip(sortedColList5)\n\
    \            val sortedColList6 = sortedRowList6.map(x => x._2)\n            val\
    \ sortedRowList7 = sortedRowList6.zip(sortedColList6)\n            val sortedColList7\
    \ = sortedRowList7.", "        val lst1 = lst.sortBy(_.toInt)\n        val lst2\
    \ = lst1.sortBy(_.toInt).reverse\n        val lst3 = lst2.sortBy(_.toInt).reverse\n\
    \        val lst4 = lst3.sortBy(_.toInt).reverse\n        val lst5 = lst4.sortBy(_.toInt).reverse\n\
    \        val lst6 = lst5.sortBy(_.toInt).reverse\n        val lst7 = lst6.sortBy(_.toInt).reverse\n\
    \        val lst8 = lst7.sortBy(_.toInt).reverse\n        val lst9 = lst8.sortBy(_.toInt).reverse\n\
    \        val lst10 = lst9.sortBy(_.toInt).reverse\n        val lst11 = lst10.sortBy(_.toInt).reverse\n\
    \        val lst12 = lst11.sortBy(_.toInt).reverse\n        val lst13 = lst12.sortBy(_.toInt).reverse\n\
    \        val lst14 = lst13.sortBy(_.toInt).reverse\n        val lst15 = lst14.sortBy(_.toInt).reverse\n\
    \        val lst16 = lst15.sortBy(_.toInt).reverse\n        val lst17 = lst16.sortBy(_.toInt).reverse\n\
    \        val lst18 = lst17.sortBy(_.toInt).reverse\n        val lst19 = lst18.sortBy(_.toInt).reverse\n\
    \        val lst20 = lst19.sortBy(_.toInt).reverse\n        val lst21 = lst20.sortBy(_.toInt).reverse\n\
    \        val lst22 = lst21.sortBy(_.toInt).reverse\n        val lst23 = lst22.sortBy(_.toInt).reverse\n\
    \        val lst24 = lst23.sortBy(_.toInt).reverse\n        val lst25 = lst24.sortBy(_.toInt).reverse\n\
    \        val lst26 = lst25.sortBy(_.toInt).reverse\n        val lst27 = lst26.sortBy(_.toInt).reverse\n\
    \        val lst28 = lst27.sortBy(_.toInt).reverse\n        val lst29 = lst28.sortBy(_.toInt).reverse\n\
    \        val lst30 = lst29.sortBy(_.toInt).reverse\n        val lst31 = lst30.sortBy(_.toInt).reverse\n\
    \        val lst32 = lst31.sortBy(_.toInt).reverse\n        val lst33 = lst32.sortBy(_.toInt).reverse\n\
    \        val lst34 = lst33.sortBy(_.toInt).reverse\n        val lst35 = lst34.sortBy(_.toInt).reverse\n",
  "        val lst1 = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n\
    \        val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val coords = lst.map(_.toList)\n\
    \        val rowCoords = coords.map(_.toList)\n        val colCoords = coords.map(_.take(cols))\n\
    \        val rowCoordsSorted = rowCoords.sortWith(_ < _)\n        val colCoordsSorted\
    \ = colCoords.sortWith(_ < _.reverse)\n        val coordsToReturn = rowCoordsSorted.zip(colCoordsSorted).map(x\
    \ => (x._1, x._2))\n        val coordsToReturnSorted = coordsToReturn.sortWith(_._1\
    \ < _._1)\n        val coordsToReturnSortedWithIndex = coordsToReturnSorted.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val coordsToReturnSortedWithIndexWithRow = coordsToReturnSortedWithIndex.map(x\
    \ => (x._1, x._2, x._3))\n        val coordsToReturnSortedWithIndexWithRowWithCol\
    \ = coordsToReturnSortedWithIndexWithRow.map(x => (x._1, x._2, x._3, x._4))\n\
    \        val coordsToReturnSortedWithIndexWithRowWithColWithRow = coordsToReturnSortedWithIndexWithRowWithCol.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5))\n        val coordsToReturnSortedWithIndexWithRowWithColWithRowWithCol\
    \ = coordsToReturnSortedWithIndexWithRowWithColWithRow.map(x => (x._1, x._2, x._3,\
    \ x._4, x._5, x._6))\n        val coordsToReturnSortedWithIndexWithRowWithColWithRowWithColWithRow\
    \ = coordsToReturnSortedWithIndexWithRowWithColWithRowWithCol.map(x => (x._1,\
    \ x._2, x._3, x._4, x._5, x._6, x._7))\n        val coordsToReturnSortedWithIndexWithRowWithColWithRowWithColWithRowWithCol\
    \ = coordsToReturnSortedWithIndexWithRowWithColWithRowWithColWithRow.map(x =>\
    \ (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8))\n        val coordsToReturnSortedWithIndexWithRowWithColWithRowWithColWithRowWithColWithRow\
    \ = coordsToReturnSortedWithIndexWithRowWithColWithRowWithColWithRowWithCol.map(x\
    \ => (x._1, x._2, x._3, x._4, x.", "        val rows = lst.map(_.size)\n     \
    \   val cols = lst.map(_.head).max\n        val coords = lst.map(row => row.zipWithIndex.sortBy(_._1).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._2).reverse)\n        val coordsWithIndex = coords.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse)\n        val coordsWithoutIndex =\
    \ coords.map(row => row.zipWithIndex.sortBy(_._2).reverse)\n        val coordsWithoutIndexWithIndex\
    \ = coords.map(row => row.zipWithIndex.sortBy(_._1).reverse).map(row => row.zipWithIndex.sortBy(_._2).reverse)\n\
    \        val coordsWithIndexWithIndex = coords.map(row => row.zipWithIndex.sortBy(_._1).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._2).reverse).map(row => row.zipWithIndex.sortBy(_._3).reverse)\n\
    \        val coordsWithIndexWithIndexWithIndex = coords.map(row => row.zipWithIndex.sortBy(_._1).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._2).reverse).map(row => row.zipWithIndex.sortBy(_._3).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._4).reverse)\n        val coordsWithIndexWithIndexWithIndexWithIndex\
    \ = coords.map(row => row.zipWithIndex.sortBy(_._1).reverse).map(row => row.zipWithIndex.sortBy(_._2).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._3).reverse).map(row => row.zipWithIndex.sortBy(_._4).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._5).reverse)\n        val coordsWithIndexWithIndexWithIndexWithIndexWithIndex\
    \ = coords.map(row => row.zipWithIndex.sortBy(_._1).reverse).map(row => row.zipWithIndex.sortBy(_._2).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._3).reverse).map(row => row.zipWithIndex.sortBy(_._4).reverse).map(row\
    \ => row.zipWithIndex.sortBy(_._5).reverse).map(row => row.zipWithIndex.sortBy(_._6).reverse)\n\
    \        val coordsWithIndexWithIndexWithIndexWithIndexWithIndexWithIndex = coords.map(row\
    \ => row.zipWithIndex.sortBy(_._1).reverse).map(row => row.zipWithIndex.sortBy(_._2).reverse).",
  "        val rows = lst.map(row => row.map(x => Tuple2(x, x)))\n        val rows\
    \ = rows.sortBy(row => row._1)\n        val rows = rows.sortBy(row => row._2,\
    \ descending = true)\n        val rows = rows.map(row => Tuple2(row._1, row._2))\n\
    \        rows", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val\
    \ rows = rows.map(x => (x, x))\n        val cols = cols.map(x => (x, x))\n   \
    \     val rows = rows.sortBy(_._1)\n        val cols = cols.sortBy(_._2)\n   \
    \     for (i <- 0 until rows.length; j <- 0 until cols.length) {\n           \
    \ val row = rows(i)\n            val col = cols(j)\n            if (row.length\
    \ == col.length) {\n                for (k <- 0 until row.length) {\n        \
    \            val x = row(k).toLong\n                    val y = col(k).toLong\n\
    \                    if (x == x) {\n                        result.append((x,\
    \ y))\n                    }\n                }\n            }\n        }\n  \
    \      result.toList", "        val lst1 = lst.map(_.toList)\n        val lst2\
    \ = lst1.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n        val lst4\
    \ = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n        val lst6\
    \ = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n        val lst8\
    \ = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n        val lst10\
    \ = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n        val lst12\
    \ = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n        val\
    \ lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n     \
    \   val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = ", "        val row: List[Tuple2[Long, Long]] = lst.map(row\
    \ => Tuple2(row(0), row(row.indexOf(x))))\n        val sorted = row.sortBy(row\
    \ => row._1)\n        val reversed = sorted.reverse\n        reversed.map(row\
    \ => Tuple2(row._1, row._2))", "        val lst1 = lst.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst4 = lst3.sortWith((x, y) => y.toLong > x.toLong)\n        val lst5 = lst4.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst8 = lst7.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val lst10 = lst9.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst11 = lst10.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst14 = lst13.sortWith((x, y) => y.toLong > x.toLong)\n        val lst15 = lst14.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x, y) => y.toLong\
    \ > x.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst18 = lst17.sortWith((x, y) => y.toLong > x.toLong)\n        val\
    \ lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val lst20 = lst19.sortWith((x,\
    \ y) => y.toLong > x.toLong)\n        val lst21 = lst20.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => y.toLong > x.toLong)\n\
    \        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst24 = lst23.sortWith((x, y) => y.toLong > x.toLong)\n        val lst25 = lst24.sortWith((x,\
    \ y) => x.toLong > y.toLong)", "        val lst2 = lst.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong < y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong < y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val lst26 = lst25.sortWith((x,\
    \ y) => x.toLong < y.toLong", "        val rows = lst.map(_.size)\n        val\
    \ cols = lst.map(_.head.length)\n        val tuples = lst.map(row => row.zipWithIndex.map(x\
    \ => (x._2, x._1)).toList)\n        val result = tuples.filter(x => x._1 == x).map(x\
    \ => (x._2, x._1))\n        result.sortBy(x => x._1).map(x => (x._2, x._1))",
  "        val lst2 = lst.map(x => x.map(y => (y, x)))\n        val lst3 = lst2.map(x\
    \ => x.sortWith(_._1 < _._1))\n        val lst4 = lst3.map(x => x.sortWith(_._2\
    \ > _._2))\n        val lst5 = lst4.map(x => x.map(y => (y, x)))\n        val\
    \ lst6 = lst5.map(x => x.sortWith(_._1 < _._1))\n        val lst7 = lst6.map(x\
    \ => x.sortWith(_._2 > _._2))\n        val lst8 = lst7.map(x => x.map(y => (y,\
    \ x)))\n        val lst9 = lst8.map(x => x.sortWith(_._1 < _._1))\n        val\
    \ lst10 = lst9.map(x => x.sortWith(_._2 > _._2))\n        val lst11 = lst10.map(x\
    \ => x.map(y => (y, x)))\n        val lst12 = lst11.map(x => x.sortWith(_._1 <\
    \ _._1))\n        val lst13 = lst12.map(x => x.sortWith(_._2 > _._2))\n      \
    \  val lst14 = lst13.map(x => x.map(y => (y, x)))\n        val lst15 = lst14.map(x\
    \ => x.sortWith(_._1 < _._1))\n        val lst16 = lst15.map(x => x.sortWith(_._2\
    \ > _._2))\n        val lst17 = lst16.map(x => x.map(y => (y, x)))\n        val\
    \ lst18 = lst17.map(x => x.sortWith(_._1 < _._1))\n        val lst19 = lst18.map(x\
    \ => x.sortWith(_._2 > _._2))\n        val lst20 = lst19.map(x => x.map(y => (y,\
    \ x)))\n        val lst21 = lst20.map(x => x.sortWith(_._1 < _._1))\n        val\
    \ lst22 = lst21.map(x => x.sortWith(_._2 > _._2))\n        val lst23 = lst22.map(x\
    \ => x.map(y => (y, x)))\n        val lst24 = lst23.map(x => x.sortWith(_._1 <\
    \ _._1))\n        val lst25 = lst24.map(x => x.sortWith(_._2 > _._2))\n      \
    \  val lst26 = lst25.map(x => x.map(y => (y, x)))\n        val lst27 = lst26.map(x\
    \ => x.sortWith(_._1 < _._1))\n        val lst28 = lst27.map(x => x.sortWith",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n \
    \       val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val rows\
    \ = lst.map(_.size)\n        val cols = lst.map(_.head).max\n        val coords\
    \ = lst.map(_.toList).map(_.zipWithIndex).sortBy(_._1).map(t => (t._2, t._1))\n\
    \        val rowCoords = coords.map(t => (t._1, t._2))\n        val colCoords\
    \ = coords.map(t => (t._2, t._1))\n        val result = coords.map(t => (t._1,\
    \ t._2)).filter(t => t._1 == x).sortBy(t => t._2).map(t => (t._1, t._2))\n   \
    \     result.sortBy(t => t._1).map(t => (t._1, t._2))", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val r = new Array[Tuple2[Long, Long]](m)\n\
    \        val c = new Array[Long](n)\n        val row = new Array[Long](m)\n  \
    \      val col = new Array[Long](n)\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n  \
    \      var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n  \
    \      var n = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var x = 0\n        var y = 0\n  \
    \      var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n  \
    \      var l = 0\n        var m = 0\n        var n = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n  \
    \      var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n  \
    \      var n = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var x = 0\n        var y = 0\n  \
    \      var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n  \
    \      var l = 0\n        var m = 0\n        var n = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var x = 0\n        var y = 0\n        var z = 0\n        var i = 0\n  \
    \      var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n  \
    \      var n = 0\n        var x = 0\n        var y = 0\n        var z = 0\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n  \
    \      var m = 0\n        var n = 0\n        var x = 0\n        var y = 0\n  \
    \      var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n  \
    \      var l = 0\n        var m = 0\n        var n = 0\n        var x = 0\n  \
    \      var y = 0\n        var z = 0\n        var i = 0\n        var j = 0\n  \
    \      var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n  \
    \      var x = 0\n        var y = 0\n        var z", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val rowIndex = lst.zipWithIndex.filter(_._1\
    \ == x).map(_._2).max\n        val colIndex = lst.zipWithIndex.filter(_._2 ==\
    \ rowIndex).map(_._1).max\n        val row = lst.map(x => Tuple2(rowIndex - x,\
    \ colIndex - x))\n        row.sortBy(_._1).reverse", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst.map(_.apply(row))\n       \
    \     val colValue = lst.map(_.apply(col))\n            if(rowValue == x || colValue\
    \ == x) {\n                result.add(Tuple2(row, col))\n            }\n     \
    \       row += 1\n            col += 1\n        }\n        result.sortBy(_._1).reverse",
  "        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = lst.map(row => row.zipWithIndex.map(x => x._2.toLong ->\
    \ (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n        val cols\
    \ = result.map(_.head.length)\n        val result = result.map(row => row.zipWithIndex.map(x\
    \ => x._2.toLong -> (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n\
    \        val cols = result.map(_.head.length)\n        val result = result.map(row\
    \ => row.zipWithIndex.map(x => x._2.toLong -> (x._1 + x._2)).toList)\n       \
    \ val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => x._2.toLong\
    \ -> (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n        val\
    \ cols = result.map(_.head.length)\n        val result = result.map(row => row.zipWithIndex.map(x\
    \ => x._2.toLong -> (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n\
    \        val cols = result.map(_.head.length)\n        val result = result.map(row\
    \ => row.zipWithIndex.map(x => x._2.toLong -> (x._1 + x._2)).toList)\n       \
    \ val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => x._2.toLong\
    \ -> (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n        val\
    \ cols = result.map(_.head.length)\n        val result = result.map(row => row.zipWithIndex.map(x\
    \ => x._2.toLong -> (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n\
    \        val cols = result.map(_.head.length)\n        val result = result.map(row\
    \ => row.zipWithIndex.map(x => x._2.toLong -> (x._1 + x._2)).toList)\n       \
    \ val rows = result.map(_.size)\n        val cols = result.map(_.head.length)\n\
    \        val result = result.map(row => row.zipWithIndex.map(x => x._2.toLong\
    \ -> (x._1 + x._2)).toList)\n        val rows = result.map(_.size)\n        val\
    \ cols = result.map(_.head.length)\n        ", "        val row: List[Long] =\
    \ lst.map(_.head).sortWith(_ < _).reverse\n        val col: List[Long] = lst.map(_.last).sortWith(_\
    \ < _).reverse\n        val result: List[Tuple2[Long, Long]] = row.zipWithIndex.flatMap\
    \ { case (row, i) =>\n            col.zipWithIndex.map { case (col, j) =>\n  \
    \              val tuple = if (i == 0) (x, col) else (row, col)\n            \
    \    tuple\n            }\n        }\n        result.sortBy(_._1).reverse", " \
    \       val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for\
    \ (i <- 0 until rows) {\n            for (j <- 0 until cols) {\n             \
    \   if (lst(i)(j) == x) {\n                    result.append((i, j))\n       \
    \         }\n            }\n        }\n        result.sortBy(_._1).reverse", " \
    \       val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val lst1 = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n \
    \       val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ m = lst.map(_.size).max\n        val n = lst.map(_.size).min\n        val r\
    \ = lst.map(_.size).sum\n        val c = lst.map(_.size).product\n        val\
    \ rows = lst.map(_.toList).map(_.toLong).sorted\n        val cols = lst.map(_.toList).map(_.toLong).sorted\n\
    \        val coords = lst.map(_.toList).map(x => (x % r, x / r))\n        val\
    \ result = coords.map(x => (x % c, x / c))\n        result.filter(x => x._1 ==\
    \ x).sortBy(x => x._1).reverse.map(x => (x._2, x._1))", "        val rows = lst.map(_.toList)\n\
    \        val cols = rows.map(_.length)\n        val result = rows.map(row => row.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        val sortedRows = result.sortBy(row\
    \ => row._1)\n        val sortedCols = sortedRows.map(row => row._2.sortBy(col\
    \ => col._2))\n        val sortedResult = sortedCols.map(col => col._1.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        val sortedResult2 = sortedResult.sortBy(row\
    \ => row._1)\n        val sortedResult3 = sortedResult2.sortBy(row => row._1)\n\
    \        val sortedResult4 = sortedResult3.sortBy(row => row._1)\n        val\
    \ sortedResult5 = sortedResult4.sortBy(row => row._1)\n        val sortedResult6\
    \ = sortedResult5.sortBy(row => row._1)\n        val sortedResult7 = sortedResult6.sortBy(row\
    \ => row._1)\n        val sortedResult8 = sortedResult7.sortBy(row => row._1)\n\
    \        val sortedResult9 = sortedResult8.sortBy(row => row._1)\n        val\
    \ sortedResult10 = sortedResult9.sortBy(row => row._1)\n        val sortedResult11\
    \ = sortedResult10.sortBy(row => row._1)\n        val sortedResult12 = sortedResult11.sortBy(row\
    \ => row._1)\n        val sortedResult13 = sortedResult12.sortBy(row => row._1)\n\
    \        val sortedResult14 = sortedResult13.sortBy(row => row._1)\n        val\
    \ sortedResult15 = sortedResult14.sortBy(row => row._1)\n        val sortedResult16\
    \ = sortedResult15.sortBy(row => row._1)\n        val sortedResult17 = sortedResult16.sortBy(row\
    \ => row._1)\n        val sortedResult18 = sortedResult17.sortBy(row => row._1)\n\
    \        val sortedResult19 = sortedResult18.sortBy(row => row._1)\n        val\
    \ sortedResult20 = sortedResult19.sortBy(row => row._1)\n        val sortedResult21\
    \ = sortedResult20.sortBy(row => row._1)\n        val sortedResult22 = sortedResult21.sortBy(row\
    \ => row._1)\n        val sortedResult23 = sortedResult22.sortBy(row => row._1)\n\
    \        val sortedResult24 = sortedResult23.sortBy(row => row._1)\n        val\
    \ sortedResult25 = sortedResult24.sortBy(row => row._", "        val m = lst.size\n\
    \        val n = lst(0).size\n        val r = new Array[Tuple2[Long, Long]](m)\n\
    \        var i = 0\n        for(i <- 0 until m) {\n            val j = 0\n   \
    \         for(j <- 0 until n) {\n                if(lst(i)(j) == x) {\n      \
    \              r(i) = Tuple2(i.toLong, j.toLong)\n                }\n        \
    \    }\n        }\n        r.sortWith((x, y) => x._1 < y._1)\n        r.sortWith((x,\
    \ y) => x._2 < y._2)\n        r", "        val row: List[Tuple2[Long, Long]] =\
    \ lst.map(row => Tuple2(row(0), row(x.toLong)))\n        val column: List[Tuple2[Long,\
    \ Long]] = lst.map(column => Tuple2(column.toLong, column(0)))\n        val coordinates:\
    \ List[Tuple2[Long, Long]] = row ++ column\n        coordinates.sortBy(row =>\
    \ row._1)\n        coordinates.sortBy(column => column._2)\n        coordinates.map(coordinate\
    \ => Tuple2(coordinate._1, coordinate._2))", "        val lst1 = lst.sortBy(_(0))\n\
    \        val lst2 = lst1.sortBy(_(1)) //descending order\n        val lst3 = lst2.sortBy(_(0))\
    \ //descending order\n        val lst4 = lst3.sortBy(_(1)) //descending order\n\
    \        val lst5 = lst4.sortBy(_(0)) //descending order\n        val lst6 = lst5.sortBy(_(1))\
    \ //descending order\n        val lst7 = lst6.sortBy(_(0)) //descending order\n\
    \        val lst8 = lst7.sortBy(_(1)) //descending order\n        val lst9 = lst8.sortBy(_(0))\
    \ //descending order\n        val lst10 = lst9.sortBy(_(1)) //descending order\n\
    \        val lst11 = lst10.sortBy(_(0)) //descending order\n        val lst12\
    \ = lst11.sortBy(_(1)) //descending order\n        val lst13 = lst12.sortBy(_(0))\
    \ //descending order\n        val lst14 = lst13.sortBy(_(1)) //descending order\n\
    \        val lst15 = lst14.sortBy(_(0)) //descending order\n        val lst16\
    \ = lst15.sortBy(_(1)) //descending order\n        val lst17 = lst16.sortBy(_(0))\
    \ //descending order\n        val lst18 = lst17.sortBy(_(1)) //descending order\n\
    \        val lst19 = lst18.sortBy(_(0)) //descending order\n        val lst20\
    \ = lst19.sortBy(_(1)) //descending order\n        val lst21 = lst20.sortBy(_(0))\
    \ //descending order\n        val lst22 = lst21.sortBy(_(1)) //descending order\n\
    \        val lst23 = lst22.sortBy(_(0)) //descending order\n        val lst24\
    \ = lst23.sortBy(_(1)) //descending order\n        val lst25 = lst24.sortBy(_(0))\
    \ //descending order\n        val lst26 = lst25.sortBy(_(1)) //descending order\n\
    \        val lst27 = lst26.sortBy(_(0)) //descending order\n        val lst28\
    \ = lst27.sortBy(_(1)) //descending order\n        val lst29 = lst28.sortBy(_(0))\
    \ //descending order\n        val lst30 = lst29.sortBy(_(1)) //descending order\n\
    \        val lst31 = lst30.sortBy(_(0)) //descending order\n        val ", " \
    \       val lst1 = lst.sortBy(x => x.toLong)\n        val lst2 = lst1.sortBy(x\
    \ => -x.toLong)\n        val lst3 = lst2.sortBy(x => -x.toLong)\n        val lst4\
    \ = lst3.sortBy(x => -x.toLong)\n        val lst5 = lst4.sortBy(x => -x.toLong)\n\
    \        val lst6 = lst5.sortBy(x => -x.toLong)\n        val lst7 = lst6.sortBy(x\
    \ => -x.toLong)\n        val lst8 = lst7.sortBy(x => -x.toLong)\n        val lst9\
    \ = lst8.sortBy(x => -x.toLong)\n        val lst10 = lst9.sortBy(x => -x.toLong)\n\
    \        val lst11 = lst10.sortBy(x => -x.toLong)\n        val lst12 = lst11.sortBy(x\
    \ => -x.toLong)\n        val lst13 = lst12.sortBy(x => -x.toLong)\n        val\
    \ lst14 = lst13.sortBy(x => -x.toLong)\n        val lst15 = lst14.sortBy(x =>\
    \ -x.toLong)\n        val lst16 = lst15.sortBy(x => -x.toLong)\n        val lst17\
    \ = lst16.sortBy(x => -x.toLong)\n        val lst18 = lst17.sortBy(x => -x.toLong)\n\
    \        val lst19 = lst18.sortBy(x => -x.toLong)\n        val lst20 = lst19.sortBy(x\
    \ => -x.toLong)\n        val lst21 = lst20.sortBy(x => -x.toLong)\n        val\
    \ lst22 = lst21.sortBy(x => -x.toLong)\n        val lst23 = lst22.sortBy(x =>\
    \ -x.toLong)\n        val lst24 = lst23.sortBy(x => -x.toLong)\n        val lst25\
    \ = lst24.sortBy(x => -x.toLong)\n        val lst26 = lst25.sortBy(x => -x.toLong)\n\
    \        val lst27 = lst26.sortBy(x => -x.toLong)\n        val lst28 = lst27.sortBy(x\
    \ => -x.toLong)\n        val lst29 = lst28.sortBy(x => -x.toLong)\n        val\
    \ lst30 = lst29.sortBy(x => -x.toLong)\n        val lst31 = lst30.sortBy(x =>\
    \ -x.toLong", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n\
    \        val result = rows.map(row => {\n            val colIndex = cols.indexOf(_)\n\
    \            val colValue = col(colIndex)\n            val rowIndex = row.indexOf(x)\n\
    \            val rowValue = row(rowIndex)\n            (rowValue, colValue)\n\
    \        })\n        result.sortBy(row => row._1)\n        result.sortBy(row =>\
    \ row._2, descending = true)\n        result", "        val row: List[Tuple2[Long,\
    \ Long]] = lst.map { row =>\n            val col: List[Long] = row.filter(_ !=\
    \ x).sortWith(_ < _)\n            val rowCol: List[Tuple2[Long, Long]] = col.map\
    \ { col =>\n                val rowCol = row zip col\n                rowCol.sortWith(_._1\
    \ < _._1)\n            }\n            rowCol.sortWith(_._2 < _._2)\n        }\n\
    \        row.sortWith(_._1 < _._1)", "        val lst1 = lst.sortWith((x, y) =>\
    \ x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x, y) => x.toLong >\
    \ y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val lst6 = lst5.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val lst11 = lst10.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val lst16 = lst15.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val lst21 = lst20.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "        val rows =\
    \ lst.map(_.toList)\n        val rows = rows.sortBy(_.toLong)\n        val rows\
    \ = rows.sortBy(-_.toLong)\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex.filter(f\
    \ => f._2 == x).map(f => f._1))\n        val rows = rows.map(row => row.zipWithIndex",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val lst1 = lst.sortWith(_.compareTo(x) < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst3 = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4\
    \ = lst3.sortWith(_.compareTo(x) > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst6 = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7\
    \ = lst6.sortWith(_.compareTo(x) < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst9 = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10\
    \ = lst9.sortWith(_.compareTo(x) > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst12 = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13\
    \ = lst12.sortWith(_.compareTo(x) < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst15 = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16\
    \ = lst15.sortWith(_.compareTo(x) > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst18 = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19\
    \ = lst18.sortWith(_.compareTo(x) < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst21 = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22\
    \ = lst21.sortWith(_.compareTo(x) > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst24 = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25\
    \ = lst24.sortWith(_.compareTo(x) < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst27 = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28\
    \ = lst27.sortWith(_.compareTo(x) > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst30 = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31\
    \ = lst30.sortWith(_.compareTo(x", "        val rows = lst.map(_.toList)\n   \
    \     val cols = rows.map(_.size)\n        val coords = rows.zipWithIndex.map\
    \ { case (row, index) => (index.toLong, row.zipWithIndex.map { case (col, index)\
    \ => (index.toLong, col) })}\n        coords.sortBy(_._1).sortBy(_._2).map { case\
    \ (index, coord) => (index.toLong, coord.map(x => coords.find(_._1 == index).map(_._2).getOrElse(-1l)))\
    \ }", "        val rows = lst.map(_.length)\n        val cols = lst.map(_.head.length)\n\
    \        val coords = lst.map(row => row.zipWithIndex.sortBy(_._1).map(x => (x._2,\
    \ x._1)).sortBy(_._2).map(x => (x._1, x._2)).toList)\n        coords.map(x =>\
    \ (x._1, x._2.map(y => (y, x._2.indexOf(y))).sortBy(_._1).map(x => (x._1, x._2.indexOf(x))))).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x\
    \ => x._2.contains(x)).filter(x => x._2.contains(x)).filter(x => x._2.contains(x)).filter(",
  "        val lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n \
    \       val lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n\
    \        val lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n\
    \        val lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n\
    \        val lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n\
    \        val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val lst2\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val\
    \ lst2 = lst.map(_.toList)\n        val lst3 = lst2.map(_.toList)\n        val\
    \ lst4 = lst3.map(_.toList)\n        val lst5 = lst4.map(_.toList)\n        val\
    \ lst6 = lst5.map(_.toList)\n        val lst7 = lst6.map(_.toList)\n        val\
    \ lst8 = lst7.map(_.toList)\n        val lst9 = lst8.map(_.toList)\n        val\
    \ lst10 = lst9.map(_.toList)\n        val lst11 = lst10.map(_.toList)\n      \
    \  val lst12 = lst11.map(_.toList)\n        val lst13 = lst12.map(_.toList)\n\
    \        val lst14 = lst13.map(_.toList)\n        val lst15 = lst14.map(_.toList)\n\
    \        val lst16 = lst15.map(_.toList)\n        val lst17 = lst16.map(_.toList)\n\
    \        val lst18 = lst17.map(_.toList)\n        val lst19 = lst18.map(_.toList)\n\
    \        val lst20 = lst19.map(_.toList)\n        val lst21 = lst20.map(_.toList)\n\
    \        val lst22 = lst21.map(_.toList)\n        val lst23 = lst22.map(_.toList)\n\
    \        val lst24 = lst23.map(_.toList)\n        val lst25 = lst24.map(_.toList)\n\
    \        val lst26 = lst25.map(_.toList)\n        val lst27 = lst26.map(_.toList)\n\
    \        val lst28 = lst27.map(_.toList)\n        val lst29 = lst28.map(_.toList)\n\
    \        val lst30 = lst29.map(_.toList)\n        val lst31 = lst30.map(_.toList)\n\
    \        val lst32 = lst31.map(_.toList)\n        val lst33 = lst32.map(_.toList)\n\
    \        val lst34 = lst33.map(_.toList)\n        val lst35 = lst34.map(_.toList)\n\
    \        val lst36 = lst35.map(_.toList)\n        val lst37 = lst36.map(_.toList)\n\
    \        val lst38 = lst37.map(_.toList)\n        val lst39 = lst38.map(_.toList)\n\
    \        val lst40 = lst39.map(_.toList)\n        val lst41 = lst40.map(_.toList)\n\
    \        val lst42 = lst41.map(_.toList)\n        val lst43 = lst42.map(_.toList)\n\
    \        val lst44 = lst43.map(_.toList)\n        val lst", "        val lst1\
    \ = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2 = lst1.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)", "       \
    \ val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n        val\
    \ coords = rows.zipWithIndex.map {\n            case (row, index) => (index.toLong,\
    \ row.zipWithIndex.map {\n                case (col, index) => (index.toLong,\
    \ col)\n            }.toList)\n        }.toList\n        coords.sortBy(_._1).map\
    \ {\n            case (index, coord) => (index.toLong, coord.sortBy(_._2).reverse)\n\
    \        }.filter(_._1 == x).map {\n            case (index, coord) => (index.toLong,\
    \ coord.sortBy(_._2).reverse)\n        }", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        var i = 0\n      \
    \  while (i < rows.length) {\n            val rowLength = rows(i)\n          \
    \  val colLength = cols(i)\n            if (rowLength == colLength) {\n      \
    \          for (j <- 0 until rowLength) {\n                    val row = rows(i)\n\
    \                    val col = cols(i)\n                    val x = lst(row)(j)\n\
    \                    if (x == x) {\n                        result.append((row,\
    \ col))\n                    }\n                }\n            }\n           \
    \ i += 1\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2)\n\
    \        result.reverse", "        val rows = lst.map(_.toList)\n        val rows\
    \ = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val rows = rows.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n        val rows = rows.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val rows = rows.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n        val rows = rows.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val rows = rows.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val rows = rows.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ rows = rows.sortWith((x, y) => x.toLong < y.toLong)\n        val rows = rows.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val rows = rows.sortWith((x, y) => x.toLong\
    \ < y.toLong", "        val rows = lst.map(_.toList)\n        val cols = rows.map(_.size)\n\
    \        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < rows.size) {\n            val row = rows(i)\n    \
    \        val cols = cols(i)\n            val index = row.indexOf(x)\n        \
    \    if (index != -1) {\n                val tuple = new Tuple2[Long, Long](i,\
    \ index)\n                result.add(tuple)\n                i += 1\n        \
    \    }\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val rowList = lst.map(_.toList)\n        val rowListWithIndex = rowList.zipWithIndex\n\
    \        val rowListWithIndexSorted = rowListWithIndex.sortBy(_._1).reverse\n\
    \        val rowListWithIndexSortedWithIndex = rowListWithIndexSorted.map(x =>\
    \ (x._2, x._1))\n        val rowListWithIndexSortedWithIndexSorted = rowListWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val rowListWithIndexSortedWithIndexSortedWithIndex = rowListWithIndexSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val rowListWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n    \
    \    val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndex = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1).reverse\n\
    \        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1).reverse\n\
    \        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1).reverse\n\
    \        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.map(x\
    \ => (x._2, x._1))\n        val rowListWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted",
  "        val rows = lst.map(row => row.map(x => Tuple2(x, x)))\n        val sortedRows\
    \ = rows.sortBy(row => row._1)\n        val sortedRowsReversed = sortedRows.reverse\n\
    \        val sortedRowsReversedByColumns = sortedRowsReversed.sortBy(row => row._2)\n\
    \        val result = sortedRowsReversedByColumns.map(row => Tuple2(row._1, row._2)).filter(row\
    \ => row._1 == x).map(row => Tuple2(row._1, row._2))\n        result.sortBy(row\
    \ => row._1).reverse", "        val rows = lst.map(_.size)\n        val cols =\
    \ lst.map(_.head.length)\n        val coords = lst.map(_.zipWithIndex).sortBy(_._1).map(x\
    \ => (x._2, x._1))\n        val rows = coords.map(x => x._2).max\n        val\
    \ cols = coords.map(x => x._1).max\n        val coord = coords.filter(x => x._1\
    \ == x).sortBy(x => x._2).reverse.head\n        val rowCoords = coords.filter(x\
    \ => x._1 == rows).sortBy(x => x._2).reverse.head\n        val colCoords = coords.filter(x\
    \ => x._1 == cols).sortBy(x => x._2).reverse.head\n        val coordTuple = coord.map(x\
    \ => (x, rowCoords.map(y => (y, colCoords.map(z => (z, x._2))).sortBy(_._2).reverse.head))).sortBy(_._1).reverse.head\n\
    \        coordTuple.map(x => (x._2, x._1))", "        val rows = lst.map(row =>\
    \ row.map(i => Tuple2(i.toLong, i.toLong)))\n        val rows = rows.sortBy(row\
    \ => row._1)\n        val rows = rows.sortBy(row => row._2, descending = true)\n\
    \        val rows = rows.filter(row => row._1 == x)\n        val rows = rows.map(row\
    \ => Tuple2(row._1, row._2))\n        rows", "        val rows = lst.map(_.length)\n\
    \        val cols = lst(0).length\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = new mutable.ListBuffer[Long]()\n        val col\
    \ = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]()\n\
    \        val col = new mutable.ListBuffer[Long]()\n        val rows = new mutable.ListBuffer[Long]()\n\
    \        val cols = new mutable.ListBuffer[Long]()\n        val row = new mutable.ListBuffer[Long]",
  "        val row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(x)))\n\
    \        val column: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row, Tuple2(row(x),\
    \ row(0))))\n        val coordinates: List[Tuple2[Long, Long]] = row ::: column\n\
    \        coordinates.sortBy(row => row._1)", "        val lst1 = lst.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x) > 0)\n        val lst3\
    \ = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4 = lst3.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x) < 0)\n        val lst6\
    \ = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7 = lst6.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x) > 0)\n        val lst9\
    \ = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10 = lst9.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x) < 0)\n        val lst12\
    \ = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13 = lst12.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x) > 0)\n        val lst15\
    \ = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16 = lst15.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x) < 0)\n        val lst18\
    \ = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19 = lst18.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x) > 0)\n        val lst21\
    \ = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22 = lst21.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x) < 0)\n        val lst24\
    \ = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25 = lst24.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x) > 0)\n        val lst27\
    \ = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28 = lst27.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x) < 0)\n        val lst30\
    \ = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31 = lst30.sortWith(_.compareTo(x",
  "        val lst2 = lst.map(_.toList).sortBy(_.reverse)\n        val lst3 = lst2.map(_.sortBy(_.reverse))\n\
    \        val lst4 = lst3.map(_.map(x => Tuple2(x, x)))\n        lst4.map(x =>\
    \ (x._1, x._2))", "        val lst1 = lst.sortBy(_.toLong)\n        val lst2 =\
    \ lst1.sortBy(_.toLong.reverse)\n        val lst3 = lst2.sortBy(_.toLong.reverse)\n\
    \        val lst4 = lst3.sortBy(_.toLong.reverse)\n        val lst5 = lst4.sortBy(_.toLong.reverse)\n\
    \        val lst6 = lst5.sortBy(_.toLong.reverse)\n        val lst7 = lst6.sortBy(_.toLong.reverse)\n\
    \        val lst8 = lst7.sortBy(_.toLong.reverse)\n        val lst9 = lst8.sortBy(_.toLong.reverse)\n\
    \        val lst10 = lst9.sortBy(_.toLong.reverse)\n        val lst11 = lst10.sortBy(_.toLong.reverse)\n\
    \        val lst12 = lst11.sortBy(_.toLong.reverse)\n        val lst13 = lst12.sortBy(_.toLong.reverse)\n\
    \        val lst14 = lst13.sortBy(_.toLong.reverse)\n        val lst15 = lst14.sortBy(_.toLong.reverse)\n\
    \        val lst16 = lst15.sortBy(_.toLong.reverse)\n        val lst17 = lst16.sortBy(_.toLong.reverse)\n\
    \        val lst18 = lst17.sortBy(_.toLong.reverse)\n        val lst19 = lst18.sortBy(_.toLong.reverse)\n\
    \        val lst20 = lst19.sortBy(_.toLong.reverse)\n        val lst21 = lst20.sortBy(_.toLong.reverse)\n\
    \        val lst22 = lst21.sortBy(_.toLong.reverse)\n        val lst23 = lst22.sortBy(_.toLong.reverse)\n\
    \        val lst24 = lst23.sortBy(_.toLong.reverse)\n        val lst25 = lst24.sortBy(_.toLong.reverse)\n\
    \        val lst26 = lst25.sortBy(_.toLong.reverse)\n        val lst27 = lst26.sortBy(_.toLong.reverse)\n\
    \        val lst28 = lst27.sortBy(_.toLong.reverse)\n        val lst29 = lst28.sortBy(_.toLong.reverse)\n\
    \        val lst30 = lst29.sortBy(_.toLong.reverse)\n        val lst31 = lst30.sortBy(_.toLong.reverse)\n\
    \        val lst32 = lst31.sortBy(_.toLong.reverse)\n        val lst33 = lst32.sortBy(_.toLong.reverse)\n\
    \        val lst34 = lst33.sortBy(_.toLong.reverse)\n        val lst35 = lst34.sortBy(_.toLong.reverse)\n",
  "        val rows = lst.map(_.toList).sortBy(_.head).reverse\n        val cols =\
    \ rows.map(_.size).max\n        val result = rows.map(row => row.zipWithIndex.filter(_._1\
    \ == x).map(_._2).map(i => (i, row.indexOf(_._2))))\n        result.sortBy(_._1).reverse.map(x\
    \ => (x._2, x._1))", "        val rows = lst.map(_.toList).map(_.toLong)\n   \
    \     val cols = lst.map(_.size).max\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        for (i <- 0 until rows.size) {\n            val row = rows(i)\n\
    \            val cols = cols - rows(i).size\n            for (j <- 0 until cols)\
    \ {\n                val col = (i + 1) * cols + j\n                val rowIndex\
    \ = row.indexOf(x.toLong)\n                val colIndex = col.indexOf(x.toLong)\n\
    \                if (rowIndex >= 0 && colIndex >= 0) {\n                    result.add(Tuple2(rowIndex,\
    \ colIndex))\n                }\n            }\n        }\n        result.sortBy(_._1).reverse",
  "        val lst1 = lst.map(_.toList)\n        val lst2 = lst1.map(_.toList)\n \
    \       val lst3 = lst2.map(_.toList)\n        val lst4 = lst3.map(_.toList)\n\
    \        val lst5 = lst4.map(_.toList)\n        val lst6 = lst5.map(_.toList)\n\
    \        val lst7 = lst6.map(_.toList)\n        val lst8 = lst7.map(_.toList)\n\
    \        val lst9 = lst8.map(_.toList)\n        val lst10 = lst9.map(_.toList)\n\
    \        val lst11 = lst10.map(_.toList)\n        val lst12 = lst11.map(_.toList)\n\
    \        val lst13 = lst12.map(_.toList)\n        val lst14 = lst13.map(_.toList)\n\
    \        val lst15 = lst14.map(_.toList)\n        val lst16 = lst15.map(_.toList)\n\
    \        val lst17 = lst16.map(_.toList)\n        val lst18 = lst17.map(_.toList)\n\
    \        val lst19 = lst18.map(_.toList)\n        val lst20 = lst19.map(_.toList)\n\
    \        val lst21 = lst20.map(_.toList)\n        val lst22 = lst21.map(_.toList)\n\
    \        val lst23 = lst22.map(_.toList)\n        val lst24 = lst23.map(_.toList)\n\
    \        val lst25 = lst24.map(_.toList)\n        val lst26 = lst25.map(_.toList)\n\
    \        val lst27 = lst26.map(_.toList)\n        val lst28 = lst27.map(_.toList)\n\
    \        val lst29 = lst28.map(_.toList)\n        val lst30 = lst29.map(_.toList)\n\
    \        val lst31 = lst30.map(_.toList)\n        val lst32 = lst31.map(_.toList)\n\
    \        val lst33 = lst32.map(_.toList)\n        val lst34 = lst33.map(_.toList)\n\
    \        val lst35 = lst34.map(_.toList)\n        val lst36 = lst35.map(_.toList)\n\
    \        val lst37 = lst36.map(_.toList)\n        val lst38 = lst37.map(_.toList)\n\
    \        val lst39 = lst38.map(_.toList)\n        val lst40 = lst39.map(_.toList)\n\
    \        val lst41 = lst40.map(_.toList)\n        val lst42 = lst41.map(_.toList)\n\
    \        val lst43 = lst42.map(_.toList)\n        val lst44 = ", "        val\
    \ rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n        val\
    \ result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row = 0\n\
    \        val col = 0\n        while(row < rows && col < cols) {\n            val\
    \ value = lst.map(_.apply(row))(col)\n            if(value == x) {\n         \
    \       result.add(Tuple2(row, col))\n            }\n            col += 1\n  \
    \      }\n        result.sortBy(_._1)\n        result.sortBy(_._2, descending\
    \ = true)\n        result.toList", "        val rows = lst.map(_.toList)\n   \
    \     val cols = rows.map(_.size)\n        val result = rows.map(row => row.zipWithIndex.map(x\
    \ => Tuple2(x._2, x._1))).filter(x => x._1 == x).sortBy(x => x._1).map(x => Tuple2(x._2,\
    \ x._1)).sortBy(x => x._2).map(x => Tuple2(x._1, x._2))\n        result.filter(x\
    \ => x._1 == x).map(x => Tuple2(x._2, x._1)).sortBy(x => x._1).map(x => Tuple2(x._2,\
    \ x._1))"]
stop_tokens:
- "\n    }\n"
