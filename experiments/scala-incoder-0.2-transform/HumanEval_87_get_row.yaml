name: HumanEval_87_get_row
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a 2 dimensional data, as a nested lists,\n    // which is\
  \ similar to matrix, however, unlike matrices,\n    // each row may contain a different\
  \ number of columns.\n    // Given lst, and integer x, find integers x in the list,\n\
  \    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each\
  \ tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates\
  \ initially by rows in ascending order.\n    // Also, sort coordinates of the row\
  \ by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()),\
  \ (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n\
  \    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]],\
  \ x : Long) : List[Tuple2[Long, Long]] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))), (2l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 1l), (1l, 1l), (2l, 1l), (3l, 1l), (4l, 1l), (5l, 1l)))));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 1l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l)).equals((List[Tuple2[Long,\
  \ Long]]((0l, 0l), (1l, 0l), (2l, 1l), (2l, 0l), (3l, 2l), (3l, 0l), (4l, 3l), (4l,\
  \ 0l), (5l, 4l), (5l, 0l), (6l, 5l), (6l, 0l)))));\n    assert(getRow((List[List[Long]]()),\
  \ (1l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](1l.toLong))),\
  \ (2l)).equals((List[Tuple2[Long, Long]]())));\n    assert(getRow((List[List[Long]](List[Long](),\
  \ List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l)).equals((List[Tuple2[Long,\
  \ Long]]((2l, 2l)))));\n    }\n\n}\n"
completions: ["        val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n\
    \        val result = lst.map(row => row.zipWithIndex.filter(x => x == x).map(x\
    \ => (x._2, x._1)).toList)\n        val rows = result.map(_.size)\n        val\
    \ cols = result.map(_.head.length)\n        val sorted = result.sortWith((x, y)\
    \ => x._1 < y._1)\n        val sortedRows = sorted.map(_.size)\n        val sortedCols\
    \ = sorted.map(_.head.length)\n        val sortedRowsCols = sorted.map(row =>\
    \ row.zipWithIndex.filter(x => x == x).map(x => (x._2, x._1)).toList)\n      \
    \  val sortedRowsColsSorted = sortedRowsCols.sortWith((x, y) => x._1 < y._1)\n\
    \        val sortedRowsColsSortedRows = sortedRowsColsSorted.map(_.size)\n   \
    \     val sortedRowsColsSortedCols = sortedRowsColsSorted.map(_.head.length)\n\
    \        val sortedRowsColsSortedRowsCols = sortedRowsColsSorted.map(row => row.zipWithIndex.filter(x\
    \ => x == x).map(x => (x._2, x._1)).toList)\n        val sortedRowsColsSortedRowsColsSorted\
    \ = sortedRowsColsSortedRowsCols.sortWith((x, y) => x._1 < y._1)\n        val\
    \ sortedRowsColsSortedRowsColsSortedRows = sortedRowsColsSortedRowsColsSorted.map(_.size)\n\
    \        val sortedRowsColsSortedRowsColsSortedCols = sortedRowsColsSortedRowsColsSorted.map(_.head.length)\n\
    \        val sortedRowsColsSortedRowsColsSortedRowsCols = sortedRowsColsSortedRowsColsSorted.map(row\
    \ => row.zipWithIndex.filter(x => x == x).map(x => (x._2, x._1)).toList)\n   \
    \     val sortedRowsColsSortedRowsColsSortedRowsColsSorted = sortedRowsColsSortedRowsColsSortedRowsColsSorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val sortedRowsColsSortedRowsColsSortedRowsColsSortedRows\
    \ = sortedRowsColsSortedRowsColsSortedRowsColsSortedRowsCols.map(_.size)\n   \
    \     val sortedRowsColsSortedRow", "        val lst1 = lst.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst2 = lst1.sortWith(_.compareTo(x) > 0)\n        val lst3\
    \ = lst2.sortWith(_.compareTo(x) < 0)\n        val lst4 = lst3.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst5 = lst4.sortWith(_.compareTo(x) < 0)\n        val lst6\
    \ = lst5.sortWith(_.compareTo(x) > 0)\n        val lst7 = lst6.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst8 = lst7.sortWith(_.compareTo(x) > 0)\n        val lst9\
    \ = lst8.sortWith(_.compareTo(x) < 0)\n        val lst10 = lst9.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst11 = lst10.sortWith(_.compareTo(x) < 0)\n        val lst12\
    \ = lst11.sortWith(_.compareTo(x) > 0)\n        val lst13 = lst12.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst14 = lst13.sortWith(_.compareTo(x) > 0)\n        val lst15\
    \ = lst14.sortWith(_.compareTo(x) < 0)\n        val lst16 = lst15.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst17 = lst16.sortWith(_.compareTo(x) < 0)\n        val lst18\
    \ = lst17.sortWith(_.compareTo(x) > 0)\n        val lst19 = lst18.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst20 = lst19.sortWith(_.compareTo(x) > 0)\n        val lst21\
    \ = lst20.sortWith(_.compareTo(x) < 0)\n        val lst22 = lst21.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst23 = lst22.sortWith(_.compareTo(x) < 0)\n        val lst24\
    \ = lst23.sortWith(_.compareTo(x) > 0)\n        val lst25 = lst24.sortWith(_.compareTo(x)\
    \ < 0)\n        val lst26 = lst25.sortWith(_.compareTo(x) > 0)\n        val lst27\
    \ = lst26.sortWith(_.compareTo(x) < 0)\n        val lst28 = lst27.sortWith(_.compareTo(x)\
    \ > 0)\n        val lst29 = lst28.sortWith(_.compareTo(x) < 0)\n        val lst30\
    \ = lst29.sortWith(_.compareTo(x) > 0)\n        val lst31 = lst30.sortWith(_.compareTo(x",
  "        val rows = lst.map(_.length)\n        val cols = lst(0).length\n      \
    \  val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        for (i <-\
    \ 0 until rows) {\n            for (j <- 0 until cols) {\n                val\
    \ index = i * cols + j\n                if (lst(index).contains(x)) {\n      \
    \              result.append((i, j))\n                }\n            }\n     \
    \   }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse", "        val\
    \ row: List[Tuple2[Long, Long]] = lst.map(row => Tuple2(row(0), row(x.toLong)))\n\
    \        val sortedRow = row.sortBy(row => row._1)\n        val sortedRowReversed\
    \ = sortedRow.reverse\n        val sortedColumnReversed = sortedRowReversed.map(row\
    \ => row._2).reverse\n        val sortedColumnReversedReversed = sortedColumnReversed.reverse\n\
    \        val tuples: List[Tuple2[Long, Long]] = sortedColumnReversedReversed.map(row\
    \ => Tuple2(row._1, row._2))\n        return tuples", "        val rows = lst.map(_.toList)\n\
    \        val rows = rows.sortBy(_(0))\n        val rows = rows.sortBy(_(1)).reverse\n\
    \        val rows = rows.map(x => (x, x)).filter(x => x != x)\n        val rows\
    \ = rows.map(x => (x._1, x._2))\n        rows", "        val lst2 = lst.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val lst7 = lst6.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val lst12 = lst11.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val lst17 = lst16.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val lst22 = lst21.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst26 = lst25.sortWith((x, y) => x.toLong > y.toLong", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val coords = lst.map(row =>\
    \ row.zipWithIndex.sortBy(_._1).reverse.sortBy(_._2).reverse)\n        val rows\
    \ = coords.map(_.map(_.head).sum)\n        val cols = coords.map(_.map(_.last).sum)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_._2).reverse)\n\
    \        val coord = coords.map(row => row.map(_.head).zip(row.map(_.last)).sortBy(_._1).reverse.sortBy(_",
  "        val rows = lst.map(row => row.map(x => Tuple2(x, x)))\n        val sortedRows\
    \ = rows.sortBy(row => row._1)\n        val sortedRowsReversed = sortedRows.reverse\n\
    \        val sortedRowsReversedSorted = sortedRowsReversed.sortBy(row => row._2)\n\
    \        val result = sortedRowsReversedSorted.map(row => Tuple2(row._1, row._2)).filter(row\
    \ => row._1 == x).map(row => Tuple2(row._1, row._2))\n        result", "     \
    \   val rows = lst.map(_.size)\n        val cols = lst.map(_.head.length)\n  \
    \      val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        var\
    \ i = 0\n        while (i < rows) {\n            var j = 0\n            while\
    \ (j < cols) {\n                if (lst(i)(j) == x) {\n                    result.append((i,\
    \ j))\n                }\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        result.sortBy(_._1).reverse.sortBy(_._2).reverse",
  "        val lst1 = lst.sortWith((x, y) => x.toLong > y.toLong)\n        val lst2\
    \ = lst1.sortWith((x, y) => x.toLong > y.toLong)\n        val lst3 = lst2.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst4 = lst3.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst5 = lst4.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst6 = lst5.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst7 = lst6.sortWith((x, y) => x.toLong > y.toLong)\n        val lst8 = lst7.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst9 = lst8.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst10 = lst9.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst11 = lst10.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst12 = lst11.sortWith((x, y) => x.toLong > y.toLong)\n        val lst13 = lst12.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst14 = lst13.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst15 = lst14.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst16 = lst15.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst17 = lst16.sortWith((x, y) => x.toLong > y.toLong)\n        val lst18 = lst17.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst19 = lst18.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst20 = lst19.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val lst21 = lst20.sortWith((x, y) => x.toLong > y.toLong)\n        val\
    \ lst22 = lst21.sortWith((x, y) => x.toLong > y.toLong)\n        val lst23 = lst22.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val lst24 = lst23.sortWith((x, y) => x.toLong\
    \ > y.toLong)\n        val lst25 = lst24.sortWith((x, y) => x.toLong > y.toLong)",
  "        val row: List[Long] = lst.map(row => row(x)).sortWith(_ < _)\n        val\
    \ col: List[Long] = lst.map(row => row.map(x => x(x)).sortWith(_ < _)).flatten\n\
    \        val coord: List[Tuple2[Long, Long]] = row.zip(col).map(x => (x._1, x._2))\n\
    \        coord.sortBy(x => x._1).reverse.sortBy(x => x._2).reverse", "       \
    \ val lst1 = lst.sortWith(_.toLong < x.toLong)\n        val lst2 = lst1.sortWith(_.toLong\
    \ > x.toLong)\n        val lst3 = lst2.sortWith(_.toLong < x.toLong)\n       \
    \ val lst4 = lst3.sortWith(_.toLong > x.toLong)\n        val lst5 = lst4.sortWith(_.toLong\
    \ < x.toLong)\n        val lst6 = lst5.sortWith(_.toLong > x.toLong)\n       \
    \ val lst7 = lst6.sortWith(_.toLong < x.toLong)\n        val lst8 = lst7.sortWith(_.toLong\
    \ > x.toLong)\n        val lst9 = lst8.sortWith(_.toLong < x.toLong)\n       \
    \ val lst10 = lst9.sortWith(_.toLong > x.toLong)\n        val lst11 = lst10.sortWith(_.toLong\
    \ < x.toLong)\n        val lst12 = lst11.sortWith(_.toLong > x.toLong)\n     \
    \   val lst13 = lst12.sortWith(_.toLong < x.toLong)\n        val lst14 = lst13.sortWith(_.toLong\
    \ > x.toLong)\n        val lst15 = lst14.sortWith(_.toLong < x.toLong)\n     \
    \   val lst16 = lst15.sortWith(_.toLong > x.toLong)\n        val lst17 = lst16.sortWith(_.toLong\
    \ < x.toLong)\n        val lst18 = lst17.sortWith(_.toLong > x.toLong)\n     \
    \   val lst19 = lst18.sortWith(_.toLong < x.toLong)\n        val lst20 = lst19.sortWith(_.toLong\
    \ > x.toLong)\n        val lst21 = lst20.sortWith(_.toLong < x.toLong)\n     \
    \   val lst22 = lst21.sortWith(_.toLong > x.toLong)\n        val lst23 = lst22.sortWith(_.toLong\
    \ < x.toLong)\n        val lst24 = lst23.sortWith(_.toLong > x.toLong)\n     \
    \   val lst25 = lst24.sortWith(_.toLong < x.toLong)\n        val lst26 = lst25.sortWith(_.toLong\
    \ > x.toLong)\n        val lst27 = lst26.sortWith(_.toLong < x.toLong)\n     \
    \   val lst28 = lst27.sortWith(_.", "        val m = lst.size\n        val n =\
    \ lst(0).size\n        val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n\
    \        var i = 0\n        var j = 0\n        while(i < m && j < n) {\n     \
    \       val rowI = lst(i).indexOf(x)\n            val colJ = lst(j).indexOf(lst(i)(rowI))\n\
    \            val tuple = (rowI, colJ)\n            if(tuple.equals(Tuple.empty))\
    \ {\n                i += 1\n                j += 1\n            } else {\n  \
    \              result += tuple\n                i += 1\n                j += 1\n\
    \            }\n        }\n        result.sortBy(_._1)\n        result.sortBy(_._2,\
    \ descending = true)\n        result", "        val rows = lst.map(_.toList)\n\
    \        val columns = rows.map(_.size)\n        val result = rows.map(row =>\
    \ {\n            val colIndex = columns.indexOf(x)\n            (row.toSeq.sortBy(_.toLong).reverse,\
    \ colIndex.toLong)\n        })\n        result.sortBy(_._1).reverse", "      \
    \  val rowList = lst.map(row => row.map(i => Tuple2(i.toLong, i.toLong)))\n  \
    \      val rowMap = new mutable.HashMap[Long, mutable.HashMap[Long, Long]]()\n\
    \        rowList.foreach(row => {\n            val rowKey = row.head\n       \
    \     val rowValue = row.tail\n            rowMap.put(rowKey, rowValue)\n    \
    \    })\n        val rowMapSorted = rowMap.sortBy(_._1).reverse\n        val rowMapSortedRow\
    \ = rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x, rowMapSorted.getOrElse(x,\
    \ rowMapSorted.getOrElse", "        val row: List[List[Long]] = lst.sortBy(_.toLong).reverse\n\
    \        val col: List[List[Long]] = row.map(_.sortBy(_.toLong))\n        val\
    \ rowMap: Map[Long, List[Long]] = row.map(x => x -> 1).toMap\n        val colMap:\
    \ Map[Long, List[Long]] = col.map(x => x -> 1).toMap\n        val result: List[Tuple2[Long,\
    \ Long]] = rowMap.keys.toList.flatMap(x => colMap.get(x).map(y => (x, y))).sortBy(_._1).reverse\n\
    \        result.filter(x => x._1 == x).map(x => (x._2, x._1))", "        val lst1\
    \ = lst.sortBy(_.toLong)\n        val lst2 = lst1.sortBy(_.toLong.reverse)\n \
    \       val lst3 = lst2.sortBy(_.toLong.reverse)\n        val lst4 = lst3.sortBy(_.toLong.reverse)\n\
    \        val lst5 = lst4.sortBy(_.toLong.reverse)\n        val lst6 = lst5.sortBy(_.toLong.reverse)\n\
    \        val lst7 = lst6.sortBy(_.toLong.reverse)\n        val lst8 = lst7.sortBy(_.toLong.reverse)\n\
    \        val lst9 = lst8.sortBy(_.toLong.reverse)\n        val lst10 = lst9.sortBy(_.toLong.reverse)\n\
    \        val lst11 = lst10.sortBy(_.toLong.reverse)\n        val lst12 = lst11.sortBy(_.toLong.reverse)\n\
    \        val lst13 = lst12.sortBy(_.toLong.reverse)\n        val lst14 = lst13.sortBy(_.toLong.reverse)\n\
    \        val lst15 = lst14.sortBy(_.toLong.reverse)\n        val lst16 = lst15.sortBy(_.toLong.reverse)\n\
    \        val lst17 = lst16.sortBy(_.toLong.reverse)\n        val lst18 = lst17.sortBy(_.toLong.reverse)\n\
    \        val lst19 = lst18.sortBy(_.toLong.reverse)\n        val lst20 = lst19.sortBy(_.toLong.reverse)\n\
    \        val lst21 = lst20.sortBy(_.toLong.reverse)\n        val lst22 = lst21.sortBy(_.toLong.reverse)\n\
    \        val lst23 = lst22.sortBy(_.toLong.reverse)\n        val lst24 = lst23.sortBy(_.toLong.reverse)\n\
    \        val lst25 = lst24.sortBy(_.toLong.reverse)\n        val lst26 = lst25.sortBy(_.toLong.reverse)\n\
    \        val lst27 = lst26.sortBy(_.toLong.reverse)\n        val lst28 = lst27.sortBy(_.toLong.reverse)\n\
    \        val lst29 = lst28.sortBy(_.toLong.reverse)\n        val lst30 = lst29.sortBy(_.toLong.reverse)\n\
    \        val lst31 = lst30.sortBy(_.toLong.reverse)\n        val lst32 = lst31.sortBy(_.toLong.reverse)\n\
    \        val lst33 = lst32.sortBy(_.toLong.reverse)\n        val lst34 = lst33.sortBy(_.toLong.reverse)\n\
    \        val lst35 = lst34.sortBy(_.toLong.reverse)\n", "        val row: List[Long]\
    \ = lst.map(row => row.toLong).sortWith(_ < _)\n        val col: List[Long] =\
    \ lst.map(row => row.toLong).sortWith(_ < _).reverse\n        val coord: List[Tuple2[Long,\
    \ Long]] = row.map(i => Tuple2(i.toLong, col(i.toLong)))\n        coord.filter(i\
    \ => i.1 == x).sortBy(i => i.1).reverse.map(i => Tuple2(i._1, i._2))", "     \
    \   val rows = lst.map(_.toList)\n        val cols = rows.map(_.length)\n    \
    \    val result = new mutable.ListBuffer[Tuple2[Long, Long]]()\n        val row\
    \ = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[Long]()\n        val col = new mutable.ListBuffer[Long]()\n\
    \        val rows = new mutable.ListBuffer[Long]()\n        val cols = new mutable.ListBuffer[Long]()\n\
    \        val row = new mutable.ListBuffer[", "        val rows = lst.map(_.size)\n\
    \        val cols = lst.map(_.head.length)\n        val result = new mutable.ListBuffer[Tuple2[Long,\
    \ Long]]()\n        val row = 0\n        val col = 0\n        while(row < rows\
    \ && col < cols) {\n            val rowValue = lst.map(_.apply(row))\n       \
    \     val colValue = lst.map(_.apply(col))\n            if(rowValue contains x)\
    \ {\n                result.+=(Tuple2(rowValue, colValue))\n            }\n  \
    \          row += 1\n            col += 1\n        }\n        result.sortBy(_._1)\n\
    \        result.sortBy(_._2, descending = true)\n        result.map(x => (x._1,\
    \ x._2))"]
stop_tokens:
- "\n    }\n"
