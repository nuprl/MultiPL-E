name: HumanEval_30_get_positive
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return only positive numbers in the list.\n    // >>> getPositive((List[Long](-1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](2l.toLong,\
  \ 5l.toLong, 6l.toLong))\n    // >>> getPositive((List[Long](5l.toLong, 3l.toLong,\
  \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
  \ 1l.toLong, -10l.toLong)))\n    // (List[Long](5l.toLong, 3l.toLong, 2l.toLong,\
  \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))\n    def getPositive(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getPositive((List[Long](-1l.toLong,\
  \ -2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](4l.toLong, 5l.toLong,\
  \ 6l.toLong))));\n    assert(getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong,\
  \ -10l.toLong))).equals((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong,\
  \ 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))));\n    assert(getPositive((List[Long](-1l.toLong,\
  \ -2l.toLong))).equals((List[Long]())));\n    assert(getPositive((List[Long]())).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ['        l.filter(_ > 0)', "        val positive = l.filter(x => x >=\
    \ 0).toList\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  "        val positive = l.filter(x => x > 0)\n        positive", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach { x => if (x >= 0) positives\
    \ += x }\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positive = l.filter(x => x >= 0).toList\n        positive", "     \
    \   val positives = mutable.ListBuffer[Long]()\n        l.foreach { x => if (x\
    \ >= 0) positives += x }\n        positives.toList", '        l.filter(x => x
    >= 0).toList', "        val positives = mutable.ListBuffer[Long]()\n        for\
    \ (i <- l) {\n            if (i > 0) positives += i\n        }\n        positives.toList",
  "        val positive = l.filter(_ > 0).toList\n        positive", "        val\
    \ positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positives\
    \ += x)\n        positives.toList", "        val positive = l.filter(_ > 0)\n\
    \        positive.sortWith(_ < _)", "        val positive = l.filter(x => x >\
    \ 0)\n        positive", "        val positive = l.filter(_ > 0)\n        positive.toList",
  "        val positive = l.filter(_ > 0).toList\n        val negative = l.filter(_\
    \ < 0).toList\n        positive.diff(negative)", "        val positive = l.filter(x\
    \ => x >= 0).toList\n        positive", "        val positive = l.filter(x =>\
    \ x >= 0).toList\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        for (i <- l) {\n  \
    \          if (i >= 0l) {\n                positives += i\n            }\n   \
    \     }\n        positives.toList", '        l.filter(x => x >= 0).toList', " \
    \       val positive = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positive.append(x))\n        positive.toList", "        val positive =\
    \ l.filter(_ > 0l)\n        positive", "        val positive = l.filter(_ > 0)\n\
    \        positive.sortWith(_ < _)", "        val positive = l.filter(x => x >=\
    \ 0).toList\n        positive", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", '        l.filter(x => x >= 0).toList', "        val positive\
    \ = l.filter(_ > 0)\n        positive.toList", '        l.filter(_ > 0).toList',
  "        val positives = mutable.Set[Long]()\n        l.foreach { x =>\n       \
    \     if (x >= 0) positives += x\n        }\n        positives.toList", "    \
    \    val positive = mutable.ListBuffer.empty[Long]\n        l.foreach { x => if\
    \ (x >= 0) positive.append(x) }\n        positive.toList", "        val positive\
    \ = l.filter(_ > 0).toList\n        positive.reverse", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positives +=\
    \ x)\n        positives.toList", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positive.append(x))\n        positive.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n\
    \            if (x >= 0) positives += x\n        }\n        positives.toList",
  "        val positive = l.filter(x => x >= 0).toList\n        positive", "     \
    \   val positive = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >=\
    \ 0) positive.append(x))\n        positive.toList", "        val positive = l.filter(x\
    \ => x >= 0).toList\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  '        l.filter(x => x >= 0).toList', "        val positives = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positive = l.filter(_ > 0l)\n       \
    \ positive.sortWith(_ < 0l)", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", "        val positives = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        for (i <- l) {\n  \
    \          if (i >= 0l) {\n                positives += i\n            }\n   \
    \     }\n        positives.toList", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positive.append(x))\n        positive.toList",
  "        val positive = l.filter(_ > 0l)\n        positive.distinct", '        l.filter(_
    > 0)', "        val positive = mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => if (x >= 0) positive.append(x))\n        positive.toList", "        val positive\
    \ = l.filter(x => x >= 0).toList\n        positive", "        val positives =\
    \ mutable.ListBuffer[Long]()\n        l.foreach { x => if (x > 0) positives +=\
    \ x }\n        positives.toList", '        l.filter(x => x >= 0).toList', "  \
    \      val positives = mutable.Set[Long]()\n        l.foreach(x => if (x >= 0)\
    \ positives += x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  '        l.filter(_ > 0)', "        val positives = mutable.Set[Long]()\n      \
    \  l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", "  \
    \      val positives = mutable.Set[Long]()\n        l.foreach(x => if (x >= 0)\
    \ positives += x)\n        positives.toList", "        val positive = l.filter(_\
    \ > 0)\n        positive.sortWith(_ < _)", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positive.append(x)\n      \
    \  }\n        positive.toList", "        val positive = l.filter(_ > 0).toList\n\
    \        positive.sortWith(_ < _)", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positives = mutable.Set[Long]()\n   \
    \     l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", " \
    \       val positives = mutable.Set[Long]()\n        l.foreach(x => if (x >= 0)\
    \ positives += x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positives += x)\n        positives.toList", "        val positive = l.filter(x\
    \ => x >= 0).toList\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x > 0) positives += x)\n        positives.toList",
  "        val positive = l.filter(x => x >= 0).toList\n        positive", "     \
    \   val positives = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n   \
    \         if (x >= 0) positives += x\n        }\n        positives.toList", " \
    \       val positive = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\
    \ if (x >= 0) positive.append(x) }\n        positive.toList", "        val positive\
    \ = l.filter(_ > 0)\n        positive.sortWith(_ < _)", "        val positive\
    \ = l.filter(_ > 0l)\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positive = l.filter(_ > 0)\n        positive.distinct", "        val\
    \ positive = l.filter(x => x >= 0).toList\n        positive", '        l.filter(x
    => x >= 0).toList', "        val positives = mutable.ListBuffer[Long]()\n    \
    \    l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", " \
    \       val positive = l.filter(_ > 0)\n        positive.sortWith(_ < _)", " \
    \       val positives = mutable.ListBuffer[Long]()\n        for (i <- l) {\n \
    \           if (i > 0)\n                positives += i\n        }\n        positives.toList",
  "        val positive = l.filter(_ > 0)\n        positive.distinct", "        val\
    \ positive = l.filter(_ > 0)\n        positive", "        val positive = l.filter(_\
    \ > 0)\n        positive.distinct", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positive = mutable.ListBuffer[Long]()\n        l.foreach { x => if\
    \ (x >= 0) positive.append(x) }\n        positive.toList", "        val positive\
    \ = l.filter(_ > 0)\n        if (positive.isEmpty) Nil\n        else positive",
  '        l.filter(x => x >= 0).toList', "        val positives = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positive.append(x))\n        positive.toList",
  "        val positive = l.filter(x => x > 0)\n        positive", "        val positive\
    \ = mutable.ListBuffer.empty[Long]\n        l.foreach { x => if (x >= 0) positive.append(x)\
    \ }\n        positive.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positive = l.filter(_ > 0).toList\n        positive.reverse", '        l.filter(x
    => x >= 0).toList', "        val positive = l.filter(_ > 0)\n        positive",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positives += x)\n        positives.toList", '        l.filter(x => x >=
    0).toList', "        val positive = l.filter(_ > 0)\n        positive.distinct",
  "        val positive = l.filter(x => x > 0)\n        positive", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach { x => if (x >= 0) positives\
    \ += x }\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", '        l.filter(x => x >= 0).toList', "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positives +=\
    \ x)\n        positives.toList", "        val positives = mutable.Set[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  "        val positive = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\
    \ if (x >= 0) positive.append(x) }\n        positive.toList", "        val positive\
    \ = l.filter(_ > 0)\n        positive.distinct", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ > 0) positives += x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (i >= 0l) {\n                positives\
    \ += i\n            }\n        }\n        positives.toList", '        l.filter(_
    > 0)', "        val positive = l.filter(x => x >= 0).toList\n        positive",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n\
    \            if (x >= 0) positives += x\n        }\n        positives.toList",
  '        l.filter(x => x >= 0).toList', "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  '        l.filter(_ > 0).toList', '        l.filter(x => x > 0)', "        val positives\
    \ = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (i >= 0l)\
    \ {\n                positives += i\n            }\n        }\n        positives.toList",
  "        val positive = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positive.append(x))\n        positive.toList", '        l.filter(x =>
    x >= 0).toList', "        val positives = mutable.ListBuffer[Long]()\n       \
    \ l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", "   \
    \     val positive = l.filter(x => x >= 0).toList\n        positive", "      \
    \  val positive = l.filter(_ > 0)\n        positive.toList", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positives +=\
    \ x)\n        positives.toList", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positive.append(x))\n        positive.toList",
  "        val positive = l.filter(x => x >= 0).toList\n        positive", '        l.filter(x
    => x >= 0).toList', "        val positives = mutable.ListBuffer[Long]()\n    \
    \    l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", " \
    \       val positives = mutable.ListBuffer[Long]()\n        for (i <- l) {\n \
    \           if (i >= 0l) {\n                positives += i\n            }\n  \
    \      }\n        positives.toList", "        val positive = l.filter(x => x >\
    \ 0)\n        positive", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", "        val positive = l.filter(_ > 0)\n        positive.distinct",
  "        val positive = mutable.ListBuffer[Long]()\n        l.foreach { x => if\
    \ (x >= 0) positive.append(x) }\n        positive.toList", "        val positive\
    \ = l.filter(x => x >= 0).toList\n        positive", "        val positive = l.filter(x\
    \ => x >= 0).toList\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x > 0) positives += x)\n        positives.toList",
  "        val positive = l.filter(_ > 0).toList\n        positive.reverse", "   \
    \     val positives = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n \
    \           if (x >= 0) positives += x\n        }\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positives += x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", '        l.filter(x => x >= 0).toList', "        val positive\
    \ = l.filter(_ > 0)\n        positive.distinct", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x > 0) positives += x)\n        positives.toList",
  "        val positive = l.filter(x => x >= 0).toList\n        positive", "     \
    \   val positives = mutable.ListBuffer[Long]()\n        for (i <- l) {\n     \
    \       if (i >= 0l) {\n                positives += i\n            }\n      \
    \  }\n        positives.toList", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", "        val positives = mutable.ListBuffer[Long]()\n    \
    \    l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", " \
    \       val positive = l.filter(x => x > 0)\n        positive", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positives +=\
    \ x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n\
    \            if (x >= 0) positives += x\n        }\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positives += x)\n        positives.toList", "        val positive = l.filter(x\
    \ => x >= 0).toList\n        positive", "        val positive = l.filter(x =>\
    \ x > 0)\n        positive", "        val positive = l.filter(_ > 0)\n       \
    \ positive.distinct", "        val positives = mutable.ListBuffer[Long]()\n  \
    \      l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positives = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\n\
    \            if (x >= 0) positives += x\n        }\n        positives.toList",
  "        val positive = l.filter(x => x >= 0).toList\n        positive", '        l.filter(x
    => x >= 0).toList', "        val positives = mutable.ListBuffer[Long]()\n    \
    \    l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positive = l.filter(_ > 0)\n        positive.toList", "        val\
    \ positive = l.filter(_ > 0)\n        positive.distinct", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (i > 0)\n\
    \                positives += i\n        }\n        positives.toList", "     \
    \   val positives = mutable.Set[Long]()\n        l.foreach(x => if (x >= 0) positives\
    \ += x)\n        positives.toList", "        val positive = l.filter(_ > 0)\n\
    \        positive.distinct", "        val positive = mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (i >= 0l) {\n                positive.append(i)\n\
    \            }\n        }\n        positive.toList", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positive.append(x))\n        positive.toList",
  "        val positive = mutable.ListBuffer[Long]()\n        l.foreach { x => if\
    \ (x >= 0) positive.append(x) }\n        positive.toList", "        val positives\
    \ = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positives +=\
    \ x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x > 0) positives += x)\n        positives.toList",
  "        val positives = mutable.Set[Long]()\n        l.foreach { x =>\n       \
    \     if (x >= 0) positives += x\n        }\n        positives.toList", "    \
    \    val positives = mutable.ListBuffer[Long]()\n        for (i <- l)\n      \
    \      if (i >= 0)\n                positives += i\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positives += x)\n        positives.toList", "        val positive = l.filter(_\
    \ > 0l)\n        positive.toList", "        val positive = l.filter(x => x >=\
    \ 0).toList\n        positive", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach(x => if (x >= 0) positives += x)\n        positives.toList",
  '        l.filter(x => x >= 0).toList', "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positive+=x\n        }\n  \
    \      positive.toList", "        val positive = l.filter(_ > 0)\n        positive.sortWith(_\
    \ < _)", "        val positive = l.filter(_ > 0)\n        positive", "       \
    \ val positives = mutable.ListBuffer[Long]()\n        l.foreach { x => if (x >=\
    \ 0) positives += x }\n        positives.toList", "        val positives = mutable.ListBuffer.empty[Long]\n\
    \        l.foreach { x =>\n            if (x >= 0l)\n                positives\
    \ += x\n        }\n        positives.toList", '        l.filter(x => x >= 0).toList',
  "        val positive = l.filter(_ > 0).toList\n        positive", "        val\
    \ positive = mutable.ListBuffer.empty[Long]\n        l.foreach(x => if (x >= 0)\
    \ positive.append(x))\n        positive.toList", "        val positive = l.filter(x\
    \ => x >= 0).toList\n        positive", "        val positives = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (x >= 0) positives += x\n        }\n\
    \        positives.toList", "        val positive = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positive.append(x) }\n        positive.toList",
  "        val positives = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\n\
    \            if (x >= 0l.toLong)\n                positives += x\n        }\n\
    \        positives.toList", "        val positive = l.filter(_ > 0)\n        positive.toList",
  "        val positive = l.filter(_ > 0)\n        positive.sortWith(_ < _)", "  \
    \      val positives = mutable.ListBuffer.empty[Long]\n        l.foreach { x =>\n\
    \            if (x >= 0) positives += x\n        }\n        positives.toList",
  "        val positives = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x\
    \ >= 0) positives += x)\n        positives.toList", "        val positives = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x => if (x >= 0) positives += x }\n        positives.toList",
  "        val positive = l.filter(_ > 0)\n        positive.toList", "        val\
    \ positive = mutable.ListBuffer[Long]()\n        l.foreach(x => if (x >= 0) positive.append(x))\n\
    \        positive.toList", "        val positive = l.filter(x => x >= 0).toList\n\
    \        positive", "        val positives = mutable.ListBuffer[Long]()\n    \
    \    l.foreach(x => if (x >= 0) positives += x)\n        positives.toList", " \
    \       val positives = mutable.ListBuffer[Long]()\n        l.foreach { x => if\
    \ (x >= 0) positives += x }\n        positives.toList"]
stop_tokens:
- "\n    }\n"
